// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: cloudstack/vpc/v1/vpc.sample.proto

package vpcv1

import (
	_ "github.com/walteh/cloudstack-proxy/gen/proto/golang/cloudstack/core/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CreateVPCRequest represents the parameters for creating a VPC
type CreateVPCRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the VPC
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The display text of the VPC
	DisplayText string `protobuf:"bytes,2,opt,name=display_text,json=displayText,proto3" json:"display_text,omitempty"`
	// The CIDR of the VPC
	Cidr string `protobuf:"bytes,3,opt,name=cidr,proto3" json:"cidr,omitempty"`
	// The CIDR size of the VPC
	CidrSize int32 `protobuf:"varint,4,opt,name=cidr_size,json=cidrSize,proto3" json:"cidr_size,omitempty"`
	// The ID of the VPC offering
	VpcOfferingId string `protobuf:"bytes,5,opt,name=vpc_offering_id,json=vpcOfferingId,proto3" json:"vpc_offering_id,omitempty"`
	// The ID of the availability zone
	ZoneId string `protobuf:"bytes,6,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	// The network domain for the VPC
	NetworkDomain string `protobuf:"bytes,7,opt,name=network_domain,json=networkDomain,proto3" json:"network_domain,omitempty"`
	// Whether to start the VPC immediately
	Start *bool `protobuf:"varint,8,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Whether to display the VPC to end users
	Display *bool `protobuf:"varint,9,opt,name=display,proto3,oneof" json:"display,omitempty"`
	// The MTU for the network VR's public facing interfaces
	PublicMtu  *int32                       `protobuf:"varint,10,opt,name=public_mtu,json=publicMtu,proto3,oneof" json:"public_mtu,omitempty"`
	DnsServers *CreateVPCRequest_DNSServers `protobuf:"bytes,11,opt,name=dns_servers,json=dnsServers,proto3" json:"dns_servers,omitempty"`
	// The source NAT IP address
	SourceNatIp string `protobuf:"bytes,12,opt,name=source_nat_ip,json=sourceNatIp,proto3" json:"source_nat_ip,omitempty"`
	// The AS Number for the VPC tiers
	AsNumber      int64 `protobuf:"varint,13,opt,name=as_number,json=asNumber,proto3" json:"as_number,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateVPCRequest) Reset() {
	*x = CreateVPCRequest{}
	mi := &file_cloudstack_vpc_v1_vpc_sample_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateVPCRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVPCRequest) ProtoMessage() {}

func (x *CreateVPCRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_vpc_v1_vpc_sample_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVPCRequest.ProtoReflect.Descriptor instead.
func (*CreateVPCRequest) Descriptor() ([]byte, []int) {
	return file_cloudstack_vpc_v1_vpc_sample_proto_rawDescGZIP(), []int{0}
}

func (x *CreateVPCRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateVPCRequest) GetDisplayText() string {
	if x != nil {
		return x.DisplayText
	}
	return ""
}

func (x *CreateVPCRequest) GetCidr() string {
	if x != nil {
		return x.Cidr
	}
	return ""
}

func (x *CreateVPCRequest) GetCidrSize() int32 {
	if x != nil {
		return x.CidrSize
	}
	return 0
}

func (x *CreateVPCRequest) GetVpcOfferingId() string {
	if x != nil {
		return x.VpcOfferingId
	}
	return ""
}

func (x *CreateVPCRequest) GetZoneId() string {
	if x != nil {
		return x.ZoneId
	}
	return ""
}

func (x *CreateVPCRequest) GetNetworkDomain() string {
	if x != nil {
		return x.NetworkDomain
	}
	return ""
}

func (x *CreateVPCRequest) GetStart() bool {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return false
}

func (x *CreateVPCRequest) GetDisplay() bool {
	if x != nil && x.Display != nil {
		return *x.Display
	}
	return false
}

func (x *CreateVPCRequest) GetPublicMtu() int32 {
	if x != nil && x.PublicMtu != nil {
		return *x.PublicMtu
	}
	return 0
}

func (x *CreateVPCRequest) GetDnsServers() *CreateVPCRequest_DNSServers {
	if x != nil {
		return x.DnsServers
	}
	return nil
}

func (x *CreateVPCRequest) GetSourceNatIp() string {
	if x != nil {
		return x.SourceNatIp
	}
	return ""
}

func (x *CreateVPCRequest) GetAsNumber() int64 {
	if x != nil {
		return x.AsNumber
	}
	return 0
}

// CreateVPCResponse represents the response from creating a VPC
type CreateVPCResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The created VPC
	Vpc           *VPC `protobuf:"bytes,1,opt,name=vpc,proto3" json:"vpc,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateVPCResponse) Reset() {
	*x = CreateVPCResponse{}
	mi := &file_cloudstack_vpc_v1_vpc_sample_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateVPCResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVPCResponse) ProtoMessage() {}

func (x *CreateVPCResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_vpc_v1_vpc_sample_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVPCResponse.ProtoReflect.Descriptor instead.
func (*CreateVPCResponse) Descriptor() ([]byte, []int) {
	return file_cloudstack_vpc_v1_vpc_sample_proto_rawDescGZIP(), []int{1}
}

func (x *CreateVPCResponse) GetVpc() *VPC {
	if x != nil {
		return x.Vpc
	}
	return nil
}

// ListVPCsRequest represents the parameters for listing VPCs
type ListVPCsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the VPC to list
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The ID of the zone to list VPCs from
	ZoneId string `protobuf:"bytes,2,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	// The name of the VPC to list
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// The display text to filter by
	DisplayText string `protobuf:"bytes,4,opt,name=display_text,json=displayText,proto3" json:"display_text,omitempty"`
	// The CIDR to filter by
	Cidr string `protobuf:"bytes,5,opt,name=cidr,proto3" json:"cidr,omitempty"`
	// The ID of the VPC offering to filter by
	VpcOfferingId string `protobuf:"bytes,6,opt,name=vpc_offering_id,json=vpcOfferingId,proto3" json:"vpc_offering_id,omitempty"`
	// The state to filter by
	State string `protobuf:"bytes,7,opt,name=state,proto3" json:"state,omitempty"`
	// Whether to filter by restart required
	RestartRequired *bool `protobuf:"varint,8,opt,name=restart_required,json=restartRequired,proto3,oneof" json:"restart_required,omitempty"`
	// Whether to show resource icons
	ShowResourceIcon *bool `protobuf:"varint,9,opt,name=show_resource_icon,json=showResourceIcon,proto3,oneof" json:"show_resource_icon,omitempty"`
	// The page number to list
	Page *int32 `protobuf:"varint,10,opt,name=page,proto3,oneof" json:"page,omitempty"`
	// The page size
	PageSize      *int32 `protobuf:"varint,11,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListVPCsRequest) Reset() {
	*x = ListVPCsRequest{}
	mi := &file_cloudstack_vpc_v1_vpc_sample_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVPCsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVPCsRequest) ProtoMessage() {}

func (x *ListVPCsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_vpc_v1_vpc_sample_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVPCsRequest.ProtoReflect.Descriptor instead.
func (*ListVPCsRequest) Descriptor() ([]byte, []int) {
	return file_cloudstack_vpc_v1_vpc_sample_proto_rawDescGZIP(), []int{2}
}

func (x *ListVPCsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ListVPCsRequest) GetZoneId() string {
	if x != nil {
		return x.ZoneId
	}
	return ""
}

func (x *ListVPCsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListVPCsRequest) GetDisplayText() string {
	if x != nil {
		return x.DisplayText
	}
	return ""
}

func (x *ListVPCsRequest) GetCidr() string {
	if x != nil {
		return x.Cidr
	}
	return ""
}

func (x *ListVPCsRequest) GetVpcOfferingId() string {
	if x != nil {
		return x.VpcOfferingId
	}
	return ""
}

func (x *ListVPCsRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *ListVPCsRequest) GetRestartRequired() bool {
	if x != nil && x.RestartRequired != nil {
		return *x.RestartRequired
	}
	return false
}

func (x *ListVPCsRequest) GetShowResourceIcon() bool {
	if x != nil && x.ShowResourceIcon != nil {
		return *x.ShowResourceIcon
	}
	return false
}

func (x *ListVPCsRequest) GetPage() int32 {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return 0
}

func (x *ListVPCsRequest) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

// ListVPCsResponse represents the response from listing VPCs
type ListVPCsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The list of VPCs
	Vpcs []*VPC `protobuf:"bytes,1,rep,name=vpcs,proto3" json:"vpcs,omitempty"`
	// The total count of VPCs
	TotalCount    int32 `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListVPCsResponse) Reset() {
	*x = ListVPCsResponse{}
	mi := &file_cloudstack_vpc_v1_vpc_sample_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVPCsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVPCsResponse) ProtoMessage() {}

func (x *ListVPCsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_vpc_v1_vpc_sample_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVPCsResponse.ProtoReflect.Descriptor instead.
func (*ListVPCsResponse) Descriptor() ([]byte, []int) {
	return file_cloudstack_vpc_v1_vpc_sample_proto_rawDescGZIP(), []int{3}
}

func (x *ListVPCsResponse) GetVpcs() []*VPC {
	if x != nil {
		return x.Vpcs
	}
	return nil
}

func (x *ListVPCsResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

// VPC represents a Virtual Private Cloud
type VPC struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the VPC
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The name of the VPC
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The display text of the VPC
	DisplayText string `protobuf:"bytes,3,opt,name=display_text,json=displayText,proto3" json:"display_text,omitempty"`
	// The CIDR of the VPC
	Cidr string `protobuf:"bytes,4,opt,name=cidr,proto3" json:"cidr,omitempty"`
	// The state of the VPC
	State string `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	// The ID of the VPC offering
	VpcOfferingId string `protobuf:"bytes,6,opt,name=vpc_offering_id,json=vpcOfferingId,proto3" json:"vpc_offering_id,omitempty"`
	// The ID of the zone
	ZoneId string `protobuf:"bytes,7,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	// The network domain
	NetworkDomain string `protobuf:"bytes,8,opt,name=network_domain,json=networkDomain,proto3" json:"network_domain,omitempty"`
	// Whether the VPC is displayed
	Display bool `protobuf:"varint,9,opt,name=display,proto3" json:"display,omitempty"`
	// The public MTU
	PublicMtu  int32           `protobuf:"varint,10,opt,name=public_mtu,json=publicMtu,proto3" json:"public_mtu,omitempty"`
	DnsServers *VPC_DNSServers `protobuf:"bytes,11,opt,name=dns_servers,json=dnsServers,proto3" json:"dns_servers,omitempty"`
	// The source NAT IP
	SourceNatIp string `protobuf:"bytes,12,opt,name=source_nat_ip,json=sourceNatIp,proto3" json:"source_nat_ip,omitempty"`
	// The AS Number
	AsNumber int64 `protobuf:"varint,13,opt,name=as_number,json=asNumber,proto3" json:"as_number,omitempty"`
	// The creation time
	Created string `protobuf:"bytes,14,opt,name=created,proto3" json:"created,omitempty"`
	// The last update time
	Updated       string `protobuf:"bytes,15,opt,name=updated,proto3" json:"updated,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VPC) Reset() {
	*x = VPC{}
	mi := &file_cloudstack_vpc_v1_vpc_sample_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VPC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VPC) ProtoMessage() {}

func (x *VPC) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_vpc_v1_vpc_sample_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VPC.ProtoReflect.Descriptor instead.
func (*VPC) Descriptor() ([]byte, []int) {
	return file_cloudstack_vpc_v1_vpc_sample_proto_rawDescGZIP(), []int{4}
}

func (x *VPC) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VPC) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VPC) GetDisplayText() string {
	if x != nil {
		return x.DisplayText
	}
	return ""
}

func (x *VPC) GetCidr() string {
	if x != nil {
		return x.Cidr
	}
	return ""
}

func (x *VPC) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *VPC) GetVpcOfferingId() string {
	if x != nil {
		return x.VpcOfferingId
	}
	return ""
}

func (x *VPC) GetZoneId() string {
	if x != nil {
		return x.ZoneId
	}
	return ""
}

func (x *VPC) GetNetworkDomain() string {
	if x != nil {
		return x.NetworkDomain
	}
	return ""
}

func (x *VPC) GetDisplay() bool {
	if x != nil {
		return x.Display
	}
	return false
}

func (x *VPC) GetPublicMtu() int32 {
	if x != nil {
		return x.PublicMtu
	}
	return 0
}

func (x *VPC) GetDnsServers() *VPC_DNSServers {
	if x != nil {
		return x.DnsServers
	}
	return nil
}

func (x *VPC) GetSourceNatIp() string {
	if x != nil {
		return x.SourceNatIp
	}
	return ""
}

func (x *VPC) GetAsNumber() int64 {
	if x != nil {
		return x.AsNumber
	}
	return 0
}

func (x *VPC) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *VPC) GetUpdated() string {
	if x != nil {
		return x.Updated
	}
	return ""
}

// DNS servers for the VPC
type CreateVPCRequest_DNSServers struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ipv4Dns1      string                 `protobuf:"bytes,1,opt,name=ipv4_dns1,json=ipv4Dns1,proto3" json:"ipv4_dns1,omitempty"`
	Ipv4Dns2      string                 `protobuf:"bytes,2,opt,name=ipv4_dns2,json=ipv4Dns2,proto3" json:"ipv4_dns2,omitempty"`
	Ipv6Dns1      string                 `protobuf:"bytes,3,opt,name=ipv6_dns1,json=ipv6Dns1,proto3" json:"ipv6_dns1,omitempty"`
	Ipv6Dns2      string                 `protobuf:"bytes,4,opt,name=ipv6_dns2,json=ipv6Dns2,proto3" json:"ipv6_dns2,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateVPCRequest_DNSServers) Reset() {
	*x = CreateVPCRequest_DNSServers{}
	mi := &file_cloudstack_vpc_v1_vpc_sample_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateVPCRequest_DNSServers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVPCRequest_DNSServers) ProtoMessage() {}

func (x *CreateVPCRequest_DNSServers) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_vpc_v1_vpc_sample_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVPCRequest_DNSServers.ProtoReflect.Descriptor instead.
func (*CreateVPCRequest_DNSServers) Descriptor() ([]byte, []int) {
	return file_cloudstack_vpc_v1_vpc_sample_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CreateVPCRequest_DNSServers) GetIpv4Dns1() string {
	if x != nil {
		return x.Ipv4Dns1
	}
	return ""
}

func (x *CreateVPCRequest_DNSServers) GetIpv4Dns2() string {
	if x != nil {
		return x.Ipv4Dns2
	}
	return ""
}

func (x *CreateVPCRequest_DNSServers) GetIpv6Dns1() string {
	if x != nil {
		return x.Ipv6Dns1
	}
	return ""
}

func (x *CreateVPCRequest_DNSServers) GetIpv6Dns2() string {
	if x != nil {
		return x.Ipv6Dns2
	}
	return ""
}

// DNS servers
type VPC_DNSServers struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ipv4Dns1      string                 `protobuf:"bytes,1,opt,name=ipv4_dns1,json=ipv4Dns1,proto3" json:"ipv4_dns1,omitempty"`
	Ipv4Dns2      string                 `protobuf:"bytes,2,opt,name=ipv4_dns2,json=ipv4Dns2,proto3" json:"ipv4_dns2,omitempty"`
	Ipv6Dns1      string                 `protobuf:"bytes,3,opt,name=ipv6_dns1,json=ipv6Dns1,proto3" json:"ipv6_dns1,omitempty"`
	Ipv6Dns2      string                 `protobuf:"bytes,4,opt,name=ipv6_dns2,json=ipv6Dns2,proto3" json:"ipv6_dns2,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VPC_DNSServers) Reset() {
	*x = VPC_DNSServers{}
	mi := &file_cloudstack_vpc_v1_vpc_sample_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VPC_DNSServers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VPC_DNSServers) ProtoMessage() {}

func (x *VPC_DNSServers) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_vpc_v1_vpc_sample_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VPC_DNSServers.ProtoReflect.Descriptor instead.
func (*VPC_DNSServers) Descriptor() ([]byte, []int) {
	return file_cloudstack_vpc_v1_vpc_sample_proto_rawDescGZIP(), []int{4, 0}
}

func (x *VPC_DNSServers) GetIpv4Dns1() string {
	if x != nil {
		return x.Ipv4Dns1
	}
	return ""
}

func (x *VPC_DNSServers) GetIpv4Dns2() string {
	if x != nil {
		return x.Ipv4Dns2
	}
	return ""
}

func (x *VPC_DNSServers) GetIpv6Dns1() string {
	if x != nil {
		return x.Ipv6Dns1
	}
	return ""
}

func (x *VPC_DNSServers) GetIpv6Dns2() string {
	if x != nil {
		return x.Ipv6Dns2
	}
	return ""
}

var File_cloudstack_vpc_v1_vpc_sample_proto protoreflect.FileDescriptor

var file_cloudstack_vpc_v1_vpc_sample_proto_rawDesc = string([]byte{
	0x0a, 0x22, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2f, 0x76, 0x70, 0x63,
	0x2f, 0x76, 0x31, 0x2f, 0x76, 0x70, 0x63, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x2e, 0x76, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x1a, 0x24, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa2, 0x05, 0x0a,
	0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x50, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x54, 0x65, 0x78, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x63, 0x69, 0x64, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xc0, 0x3e, 0x03, 0x52, 0x04, 0x63, 0x69, 0x64,
	0x72, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x69, 0x64, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x69, 0x64, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2b,
	0x0a, 0x0f, 0x76, 0x70, 0x63, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xc0, 0x3e, 0x02, 0x52, 0x0d, 0x76, 0x70,
	0x63, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x07, 0x7a,
	0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xc0, 0x3e,
	0x02, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x07,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6d, 0x74, 0x75, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02,
	0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4d, 0x74, 0x75, 0x88, 0x01, 0x01, 0x12, 0x4f,
	0x0a, 0x0b, 0x64, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x2e, 0x76, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x50,
	0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x4e, 0x53, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x52, 0x0a, 0x64, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12,
	0x27, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x74, 0x5f, 0x69, 0x70,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xc0, 0x3e, 0x07, 0x52, 0x0b, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4e, 0x61, 0x74, 0x49, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x73, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x94, 0x01, 0x0a, 0x0a, 0x44, 0x4e, 0x53, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x09, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x64, 0x6e, 0x73,
	0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xc0, 0x3e, 0x07, 0x52, 0x08, 0x69, 0x70,
	0x76, 0x34, 0x44, 0x6e, 0x73, 0x31, 0x12, 0x20, 0x0a, 0x09, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x64,
	0x6e, 0x73, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xc0, 0x3e, 0x07, 0x52, 0x08,
	0x69, 0x70, 0x76, 0x34, 0x44, 0x6e, 0x73, 0x32, 0x12, 0x20, 0x0a, 0x09, 0x69, 0x70, 0x76, 0x36,
	0x5f, 0x64, 0x6e, 0x73, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xc0, 0x3e, 0x08,
	0x52, 0x08, 0x69, 0x70, 0x76, 0x36, 0x44, 0x6e, 0x73, 0x31, 0x12, 0x20, 0x0a, 0x09, 0x69, 0x70,
	0x76, 0x36, 0x5f, 0x64, 0x6e, 0x73, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xc0,
	0x3e, 0x08, 0x52, 0x08, 0x69, 0x70, 0x76, 0x36, 0x44, 0x6e, 0x73, 0x32, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6d, 0x74,
	0x75, 0x22, 0x3d, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x50, 0x43, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x03, 0x76, 0x70, 0x63, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x2e, 0x76, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x50, 0x43, 0x52, 0x03, 0x76, 0x70, 0x63,
	0x22, 0xc4, 0x03, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x50, 0x43, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x07, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xc0, 0x3e, 0x02, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x65, 0x78, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x63, 0x69, 0x64,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xc0, 0x3e, 0x03, 0x52, 0x04, 0x63, 0x69,
	0x64, 0x72, 0x12, 0x2b, 0x0a, 0x0f, 0x76, 0x70, 0x63, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xc0, 0x3e, 0x02,
	0x52, 0x0d, 0x76, 0x70, 0x63, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x01, 0x52, 0x10, 0x73, 0x68, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x63, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x42, 0x06, 0xca, 0x3e, 0x03, 0x12, 0x01, 0x31, 0x48, 0x02,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xca, 0x3e,
	0x04, 0x12, 0x02, 0x31, 0x30, 0x48, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x73, 0x68,
	0x6f, 0x77, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x63, 0x6f, 0x6e,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x5f, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x50, 0x43, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x76,
	0x70, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x50,
	0x43, 0x52, 0x04, 0x76, 0x70, 0x63, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd3, 0x04, 0x0a, 0x03, 0x56, 0x50, 0x43,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x54, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x64, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x64, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x26, 0x0a, 0x0f, 0x76, 0x70, 0x63, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x70, 0x63, 0x4f,
	0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x7a, 0x6f, 0x6e,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65,
	0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6d, 0x74,
	0x75, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4d,
	0x74, 0x75, 0x12, 0x42, 0x0a, 0x0b, 0x64, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x50, 0x43, 0x2e,
	0x44, 0x4e, 0x53, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x0a, 0x64, 0x6e, 0x73, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x74, 0x49, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61,
	0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x1a, 0x80, 0x01, 0x0a, 0x0a,
	0x44, 0x4e, 0x53, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x70,
	0x76, 0x34, 0x5f, 0x64, 0x6e, 0x73, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x70, 0x76, 0x34, 0x44, 0x6e, 0x73, 0x31, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x70, 0x76, 0x34, 0x5f,
	0x64, 0x6e, 0x73, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x70, 0x76, 0x34,
	0x44, 0x6e, 0x73, 0x32, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x64, 0x6e, 0x73,
	0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x70, 0x76, 0x36, 0x44, 0x6e, 0x73,
	0x31, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x64, 0x6e, 0x73, 0x32, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x70, 0x76, 0x36, 0x44, 0x6e, 0x73, 0x32, 0x32, 0xbd,
	0x01, 0x0a, 0x0a, 0x56, 0x50, 0x43, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x58, 0x0a,
	0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x50, 0x43, 0x12, 0x23, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x50, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x70, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x50, 0x43, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x50, 0x43, 0x73, 0x12, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x2e, 0x76, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x50, 0x43, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x50, 0x43, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0xda,
	0x01, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x42, 0x0e, 0x56, 0x70, 0x63, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4b, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x61, 0x6c, 0x74, 0x65, 0x68, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2d, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x67,
	0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2f, 0x76, 0x70, 0x63, 0x2f, 0x76,
	0x31, 0x3b, 0x76, 0x70, 0x63, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x56, 0x58, 0xaa, 0x02, 0x11,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x56, 0x70, 0x63, 0x2e, 0x56,
	0x31, 0xca, 0x02, 0x11, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5c, 0x56,
	0x70, 0x63, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1d, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x5c, 0x56, 0x70, 0x63, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x13, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x3a, 0x3a, 0x56, 0x70, 0x63, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
})

var (
	file_cloudstack_vpc_v1_vpc_sample_proto_rawDescOnce sync.Once
	file_cloudstack_vpc_v1_vpc_sample_proto_rawDescData []byte
)

func file_cloudstack_vpc_v1_vpc_sample_proto_rawDescGZIP() []byte {
	file_cloudstack_vpc_v1_vpc_sample_proto_rawDescOnce.Do(func() {
		file_cloudstack_vpc_v1_vpc_sample_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_cloudstack_vpc_v1_vpc_sample_proto_rawDesc), len(file_cloudstack_vpc_v1_vpc_sample_proto_rawDesc)))
	})
	return file_cloudstack_vpc_v1_vpc_sample_proto_rawDescData
}

var file_cloudstack_vpc_v1_vpc_sample_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_cloudstack_vpc_v1_vpc_sample_proto_goTypes = []any{
	(*CreateVPCRequest)(nil),            // 0: cloudstack.vpc.v1.CreateVPCRequest
	(*CreateVPCResponse)(nil),           // 1: cloudstack.vpc.v1.CreateVPCResponse
	(*ListVPCsRequest)(nil),             // 2: cloudstack.vpc.v1.ListVPCsRequest
	(*ListVPCsResponse)(nil),            // 3: cloudstack.vpc.v1.ListVPCsResponse
	(*VPC)(nil),                         // 4: cloudstack.vpc.v1.VPC
	(*CreateVPCRequest_DNSServers)(nil), // 5: cloudstack.vpc.v1.CreateVPCRequest.DNSServers
	(*VPC_DNSServers)(nil),              // 6: cloudstack.vpc.v1.VPC.DNSServers
}
var file_cloudstack_vpc_v1_vpc_sample_proto_depIdxs = []int32{
	5, // 0: cloudstack.vpc.v1.CreateVPCRequest.dns_servers:type_name -> cloudstack.vpc.v1.CreateVPCRequest.DNSServers
	4, // 1: cloudstack.vpc.v1.CreateVPCResponse.vpc:type_name -> cloudstack.vpc.v1.VPC
	4, // 2: cloudstack.vpc.v1.ListVPCsResponse.vpcs:type_name -> cloudstack.vpc.v1.VPC
	6, // 3: cloudstack.vpc.v1.VPC.dns_servers:type_name -> cloudstack.vpc.v1.VPC.DNSServers
	0, // 4: cloudstack.vpc.v1.VPCService.CreateVPC:input_type -> cloudstack.vpc.v1.CreateVPCRequest
	2, // 5: cloudstack.vpc.v1.VPCService.ListVPCs:input_type -> cloudstack.vpc.v1.ListVPCsRequest
	1, // 6: cloudstack.vpc.v1.VPCService.CreateVPC:output_type -> cloudstack.vpc.v1.CreateVPCResponse
	3, // 7: cloudstack.vpc.v1.VPCService.ListVPCs:output_type -> cloudstack.vpc.v1.ListVPCsResponse
	6, // [6:8] is the sub-list for method output_type
	4, // [4:6] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_cloudstack_vpc_v1_vpc_sample_proto_init() }
func file_cloudstack_vpc_v1_vpc_sample_proto_init() {
	if File_cloudstack_vpc_v1_vpc_sample_proto != nil {
		return
	}
	file_cloudstack_vpc_v1_vpc_sample_proto_msgTypes[0].OneofWrappers = []any{}
	file_cloudstack_vpc_v1_vpc_sample_proto_msgTypes[2].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_cloudstack_vpc_v1_vpc_sample_proto_rawDesc), len(file_cloudstack_vpc_v1_vpc_sample_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cloudstack_vpc_v1_vpc_sample_proto_goTypes,
		DependencyIndexes: file_cloudstack_vpc_v1_vpc_sample_proto_depIdxs,
		MessageInfos:      file_cloudstack_vpc_v1_vpc_sample_proto_msgTypes,
	}.Build()
	File_cloudstack_vpc_v1_vpc_sample_proto = out.File
	file_cloudstack_vpc_v1_vpc_sample_proto_goTypes = nil
	file_cloudstack_vpc_v1_vpc_sample_proto_depIdxs = nil
}
