// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: cloudstack/common/samples/v1/vpc_sample.proto

package vpcv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VPCService_CreateVPC_FullMethodName = "/cloudstack.vpc.v1.VPCService/CreateVPC"
	VPCService_ListVPCs_FullMethodName  = "/cloudstack.vpc.v1.VPCService/ListVPCs"
)

// VPCServiceClient is the client API for VPCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// VPCService provides operations for managing VPCs
type VPCServiceClient interface {
	// CreateVPC creates a new VPC
	CreateVPC(ctx context.Context, in *CreateVPCRequest, opts ...grpc.CallOption) (*CreateVPCResponse, error)
	// ListVPCs lists VPCs with optional filtering
	ListVPCs(ctx context.Context, in *ListVPCsRequest, opts ...grpc.CallOption) (*ListVPCsResponse, error)
}

type vPCServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVPCServiceClient(cc grpc.ClientConnInterface) VPCServiceClient {
	return &vPCServiceClient{cc}
}

func (c *vPCServiceClient) CreateVPC(ctx context.Context, in *CreateVPCRequest, opts ...grpc.CallOption) (*CreateVPCResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateVPCResponse)
	err := c.cc.Invoke(ctx, VPCService_CreateVPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vPCServiceClient) ListVPCs(ctx context.Context, in *ListVPCsRequest, opts ...grpc.CallOption) (*ListVPCsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVPCsResponse)
	err := c.cc.Invoke(ctx, VPCService_ListVPCs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VPCServiceServer is the server API for VPCService service.
// All implementations must embed UnimplementedVPCServiceServer
// for forward compatibility.
//
// VPCService provides operations for managing VPCs
type VPCServiceServer interface {
	// CreateVPC creates a new VPC
	CreateVPC(context.Context, *CreateVPCRequest) (*CreateVPCResponse, error)
	// ListVPCs lists VPCs with optional filtering
	ListVPCs(context.Context, *ListVPCsRequest) (*ListVPCsResponse, error)
	mustEmbedUnimplementedVPCServiceServer()
}

// UnimplementedVPCServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVPCServiceServer struct{}

func (UnimplementedVPCServiceServer) CreateVPC(context.Context, *CreateVPCRequest) (*CreateVPCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVPC not implemented")
}
func (UnimplementedVPCServiceServer) ListVPCs(context.Context, *ListVPCsRequest) (*ListVPCsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVPCs not implemented")
}
func (UnimplementedVPCServiceServer) mustEmbedUnimplementedVPCServiceServer() {}
func (UnimplementedVPCServiceServer) testEmbeddedByValue()                    {}

// UnsafeVPCServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VPCServiceServer will
// result in compilation errors.
type UnsafeVPCServiceServer interface {
	mustEmbedUnimplementedVPCServiceServer()
}

func RegisterVPCServiceServer(s grpc.ServiceRegistrar, srv VPCServiceServer) {
	// If the following call pancis, it indicates UnimplementedVPCServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VPCService_ServiceDesc, srv)
}

func _VPCService_CreateVPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VPCServiceServer).CreateVPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VPCService_CreateVPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VPCServiceServer).CreateVPC(ctx, req.(*CreateVPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VPCService_ListVPCs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVPCsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VPCServiceServer).ListVPCs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VPCService_ListVPCs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VPCServiceServer).ListVPCs(ctx, req.(*ListVPCsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VPCService_ServiceDesc is the grpc.ServiceDesc for VPCService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VPCService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloudstack.vpc.v1.VPCService",
	HandlerType: (*VPCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVPC",
			Handler:    _VPCService_CreateVPC_Handler,
		},
		{
			MethodName: "ListVPCs",
			Handler:    _VPCService_ListVPCs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloudstack/common/samples/v1/vpc_sample.proto",
}
