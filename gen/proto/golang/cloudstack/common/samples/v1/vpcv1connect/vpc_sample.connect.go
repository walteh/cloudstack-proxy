// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cloudstack/common/samples/v1/vpc_sample.proto

package vpcv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/walteh/cloudstack-proxy/gen/proto/golang/cloudstack/common/samples/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// VPCServiceName is the fully-qualified name of the VPCService service.
	VPCServiceName = "cloudstack.vpc.v1.VPCService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// VPCServiceCreateVPCProcedure is the fully-qualified name of the VPCService's CreateVPC RPC.
	VPCServiceCreateVPCProcedure = "/cloudstack.vpc.v1.VPCService/CreateVPC"
	// VPCServiceListVPCsProcedure is the fully-qualified name of the VPCService's ListVPCs RPC.
	VPCServiceListVPCsProcedure = "/cloudstack.vpc.v1.VPCService/ListVPCs"
)

// VPCServiceClient is a client for the cloudstack.vpc.v1.VPCService service.
type VPCServiceClient interface {
	// CreateVPC creates a new VPC
	CreateVPC(context.Context, *connect.Request[v1.CreateVPCRequest]) (*connect.Response[v1.CreateVPCResponse], error)
	// ListVPCs lists VPCs with optional filtering
	ListVPCs(context.Context, *connect.Request[v1.ListVPCsRequest]) (*connect.Response[v1.ListVPCsResponse], error)
}

// NewVPCServiceClient constructs a client for the cloudstack.vpc.v1.VPCService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewVPCServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) VPCServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	vPCServiceMethods := v1.File_cloudstack_common_samples_v1_vpc_sample_proto.Services().ByName("VPCService").Methods()
	return &vPCServiceClient{
		createVPC: connect.NewClient[v1.CreateVPCRequest, v1.CreateVPCResponse](
			httpClient,
			baseURL+VPCServiceCreateVPCProcedure,
			connect.WithSchema(vPCServiceMethods.ByName("CreateVPC")),
			connect.WithClientOptions(opts...),
		),
		listVPCs: connect.NewClient[v1.ListVPCsRequest, v1.ListVPCsResponse](
			httpClient,
			baseURL+VPCServiceListVPCsProcedure,
			connect.WithSchema(vPCServiceMethods.ByName("ListVPCs")),
			connect.WithClientOptions(opts...),
		),
	}
}

// vPCServiceClient implements VPCServiceClient.
type vPCServiceClient struct {
	createVPC *connect.Client[v1.CreateVPCRequest, v1.CreateVPCResponse]
	listVPCs  *connect.Client[v1.ListVPCsRequest, v1.ListVPCsResponse]
}

// CreateVPC calls cloudstack.vpc.v1.VPCService.CreateVPC.
func (c *vPCServiceClient) CreateVPC(ctx context.Context, req *connect.Request[v1.CreateVPCRequest]) (*connect.Response[v1.CreateVPCResponse], error) {
	return c.createVPC.CallUnary(ctx, req)
}

// ListVPCs calls cloudstack.vpc.v1.VPCService.ListVPCs.
func (c *vPCServiceClient) ListVPCs(ctx context.Context, req *connect.Request[v1.ListVPCsRequest]) (*connect.Response[v1.ListVPCsResponse], error) {
	return c.listVPCs.CallUnary(ctx, req)
}

// VPCServiceHandler is an implementation of the cloudstack.vpc.v1.VPCService service.
type VPCServiceHandler interface {
	// CreateVPC creates a new VPC
	CreateVPC(context.Context, *connect.Request[v1.CreateVPCRequest]) (*connect.Response[v1.CreateVPCResponse], error)
	// ListVPCs lists VPCs with optional filtering
	ListVPCs(context.Context, *connect.Request[v1.ListVPCsRequest]) (*connect.Response[v1.ListVPCsResponse], error)
}

// NewVPCServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewVPCServiceHandler(svc VPCServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	vPCServiceMethods := v1.File_cloudstack_common_samples_v1_vpc_sample_proto.Services().ByName("VPCService").Methods()
	vPCServiceCreateVPCHandler := connect.NewUnaryHandler(
		VPCServiceCreateVPCProcedure,
		svc.CreateVPC,
		connect.WithSchema(vPCServiceMethods.ByName("CreateVPC")),
		connect.WithHandlerOptions(opts...),
	)
	vPCServiceListVPCsHandler := connect.NewUnaryHandler(
		VPCServiceListVPCsProcedure,
		svc.ListVPCs,
		connect.WithSchema(vPCServiceMethods.ByName("ListVPCs")),
		connect.WithHandlerOptions(opts...),
	)
	return "/cloudstack.vpc.v1.VPCService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case VPCServiceCreateVPCProcedure:
			vPCServiceCreateVPCHandler.ServeHTTP(w, r)
		case VPCServiceListVPCsProcedure:
			vPCServiceListVPCsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedVPCServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedVPCServiceHandler struct{}

func (UnimplementedVPCServiceHandler) CreateVPC(context.Context, *connect.Request[v1.CreateVPCRequest]) (*connect.Response[v1.CreateVPCResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.vpc.v1.VPCService.CreateVPC is not implemented"))
}

func (UnimplementedVPCServiceHandler) ListVPCs(context.Context, *connect.Request[v1.ListVPCsRequest]) (*connect.Response[v1.ListVPCsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.vpc.v1.VPCService.ListVPCs is not implemented"))
}
