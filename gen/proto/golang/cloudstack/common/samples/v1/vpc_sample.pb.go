// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: cloudstack/common/samples/v1/vpc_sample.proto

package vpcv1

import (
	_ "github.com/walteh/cloudstack-proxy/gen/proto/golang/buf/validate"
	_ "github.com/walteh/cloudstack-proxy/gen/proto/golang/cloudstack/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CreateVPCRequest represents the parameters for creating a VPC
type CreateVPCRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the VPC
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The display text of the VPC
	DisplayText *string `protobuf:"bytes,2,opt,name=display_text,json=displayText" json:"display_text,omitempty"`
	// The CIDR of the VPC
	Cidr *string `protobuf:"bytes,3,opt,name=cidr" json:"cidr,omitempty"`
	// The CIDR size of the VPC
	CidrSize *int32 `protobuf:"varint,4,opt,name=cidr_size,json=cidrSize" json:"cidr_size,omitempty"`
	// The ID of the VPC offering
	VpcOfferingId *string `protobuf:"bytes,5,opt,name=vpc_offering_id,json=vpcOfferingId" json:"vpc_offering_id,omitempty"`
	// The ID of the availability zone
	ZoneId *string `protobuf:"bytes,6,opt,name=zone_id,json=zoneId" json:"zone_id,omitempty"`
	// The network domain for the VPC
	NetworkDomain *string `protobuf:"bytes,7,opt,name=network_domain,json=networkDomain" json:"network_domain,omitempty"`
	// Whether to start the VPC immediately
	Start *bool `protobuf:"varint,8,opt,name=start" json:"start,omitempty"`
	// Whether to display the VPC to end users
	Display *bool `protobuf:"varint,9,opt,name=display" json:"display,omitempty"`
	// The MTU for the network VR's public facing interfaces
	PublicMtu  *int32                       `protobuf:"varint,10,opt,name=public_mtu,json=publicMtu" json:"public_mtu,omitempty"`
	DnsServers *CreateVPCRequest_DNSServers `protobuf:"bytes,11,opt,name=dns_servers,json=dnsServers" json:"dns_servers,omitempty"`
	// The source NAT IP address
	SourceNatIp *string `protobuf:"bytes,12,opt,name=source_nat_ip,json=sourceNatIp" json:"source_nat_ip,omitempty"`
	// The AS Number for the VPC tiers
	AsNumber      *int64 `protobuf:"varint,13,opt,name=as_number,json=asNumber" json:"as_number,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateVPCRequest) Reset() {
	*x = CreateVPCRequest{}
	mi := &file_cloudstack_common_samples_v1_vpc_sample_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateVPCRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVPCRequest) ProtoMessage() {}

func (x *CreateVPCRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_common_samples_v1_vpc_sample_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVPCRequest.ProtoReflect.Descriptor instead.
func (*CreateVPCRequest) Descriptor() ([]byte, []int) {
	return file_cloudstack_common_samples_v1_vpc_sample_proto_rawDescGZIP(), []int{0}
}

func (x *CreateVPCRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CreateVPCRequest) GetDisplayText() string {
	if x != nil && x.DisplayText != nil {
		return *x.DisplayText
	}
	return ""
}

func (x *CreateVPCRequest) GetCidr() string {
	if x != nil && x.Cidr != nil {
		return *x.Cidr
	}
	return ""
}

func (x *CreateVPCRequest) GetCidrSize() int32 {
	if x != nil && x.CidrSize != nil {
		return *x.CidrSize
	}
	return 0
}

func (x *CreateVPCRequest) GetVpcOfferingId() string {
	if x != nil && x.VpcOfferingId != nil {
		return *x.VpcOfferingId
	}
	return ""
}

func (x *CreateVPCRequest) GetZoneId() string {
	if x != nil && x.ZoneId != nil {
		return *x.ZoneId
	}
	return ""
}

func (x *CreateVPCRequest) GetNetworkDomain() string {
	if x != nil && x.NetworkDomain != nil {
		return *x.NetworkDomain
	}
	return ""
}

func (x *CreateVPCRequest) GetStart() bool {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return false
}

func (x *CreateVPCRequest) GetDisplay() bool {
	if x != nil && x.Display != nil {
		return *x.Display
	}
	return false
}

func (x *CreateVPCRequest) GetPublicMtu() int32 {
	if x != nil && x.PublicMtu != nil {
		return *x.PublicMtu
	}
	return 0
}

func (x *CreateVPCRequest) GetDnsServers() *CreateVPCRequest_DNSServers {
	if x != nil {
		return x.DnsServers
	}
	return nil
}

func (x *CreateVPCRequest) GetSourceNatIp() string {
	if x != nil && x.SourceNatIp != nil {
		return *x.SourceNatIp
	}
	return ""
}

func (x *CreateVPCRequest) GetAsNumber() int64 {
	if x != nil && x.AsNumber != nil {
		return *x.AsNumber
	}
	return 0
}

// CreateVPCResponse represents the response from creating a VPC
type CreateVPCResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The created VPC
	Vpc           *VPC `protobuf:"bytes,1,opt,name=vpc" json:"vpc,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateVPCResponse) Reset() {
	*x = CreateVPCResponse{}
	mi := &file_cloudstack_common_samples_v1_vpc_sample_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateVPCResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVPCResponse) ProtoMessage() {}

func (x *CreateVPCResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_common_samples_v1_vpc_sample_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVPCResponse.ProtoReflect.Descriptor instead.
func (*CreateVPCResponse) Descriptor() ([]byte, []int) {
	return file_cloudstack_common_samples_v1_vpc_sample_proto_rawDescGZIP(), []int{1}
}

func (x *CreateVPCResponse) GetVpc() *VPC {
	if x != nil {
		return x.Vpc
	}
	return nil
}

// ListVPCsRequest represents the parameters for listing VPCs
type ListVPCsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the VPC to list
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The ID of the zone to list VPCs from
	ZoneId *string `protobuf:"bytes,2,opt,name=zone_id,json=zoneId" json:"zone_id,omitempty"`
	// The name of the VPC to list
	Name *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	// The display text to filter by
	DisplayText *string `protobuf:"bytes,4,opt,name=display_text,json=displayText" json:"display_text,omitempty"`
	// The CIDR to filter by
	Cidr *string `protobuf:"bytes,5,opt,name=cidr" json:"cidr,omitempty"`
	// The ID of the VPC offering to filter by
	VpcOfferingId *string `protobuf:"bytes,6,opt,name=vpc_offering_id,json=vpcOfferingId" json:"vpc_offering_id,omitempty"`
	// The state to filter by
	State *string `protobuf:"bytes,7,opt,name=state" json:"state,omitempty"`
	// Whether to filter by restart required
	RestartRequired *bool `protobuf:"varint,8,opt,name=restart_required,json=restartRequired" json:"restart_required,omitempty"`
	// Whether to show resource icons
	ShowResourceIcon *bool `protobuf:"varint,9,opt,name=show_resource_icon,json=showResourceIcon" json:"show_resource_icon,omitempty"`
	// The page number to list
	Page *int32 `protobuf:"varint,10,opt,name=page,def=1" json:"page,omitempty"`
	// The page size
	PageSize      *int32 `protobuf:"varint,11,opt,name=page_size,json=pageSize,def=10" json:"page_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ListVPCsRequest fields.
const (
	Default_ListVPCsRequest_Page     = int32(1)
	Default_ListVPCsRequest_PageSize = int32(10)
)

func (x *ListVPCsRequest) Reset() {
	*x = ListVPCsRequest{}
	mi := &file_cloudstack_common_samples_v1_vpc_sample_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVPCsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVPCsRequest) ProtoMessage() {}

func (x *ListVPCsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_common_samples_v1_vpc_sample_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVPCsRequest.ProtoReflect.Descriptor instead.
func (*ListVPCsRequest) Descriptor() ([]byte, []int) {
	return file_cloudstack_common_samples_v1_vpc_sample_proto_rawDescGZIP(), []int{2}
}

func (x *ListVPCsRequest) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *ListVPCsRequest) GetZoneId() string {
	if x != nil && x.ZoneId != nil {
		return *x.ZoneId
	}
	return ""
}

func (x *ListVPCsRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ListVPCsRequest) GetDisplayText() string {
	if x != nil && x.DisplayText != nil {
		return *x.DisplayText
	}
	return ""
}

func (x *ListVPCsRequest) GetCidr() string {
	if x != nil && x.Cidr != nil {
		return *x.Cidr
	}
	return ""
}

func (x *ListVPCsRequest) GetVpcOfferingId() string {
	if x != nil && x.VpcOfferingId != nil {
		return *x.VpcOfferingId
	}
	return ""
}

func (x *ListVPCsRequest) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

func (x *ListVPCsRequest) GetRestartRequired() bool {
	if x != nil && x.RestartRequired != nil {
		return *x.RestartRequired
	}
	return false
}

func (x *ListVPCsRequest) GetShowResourceIcon() bool {
	if x != nil && x.ShowResourceIcon != nil {
		return *x.ShowResourceIcon
	}
	return false
}

func (x *ListVPCsRequest) GetPage() int32 {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return Default_ListVPCsRequest_Page
}

func (x *ListVPCsRequest) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return Default_ListVPCsRequest_PageSize
}

// ListVPCsResponse represents the response from listing VPCs
type ListVPCsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The list of VPCs
	Vpcs []*VPC `protobuf:"bytes,1,rep,name=vpcs" json:"vpcs,omitempty"`
	// The total count of VPCs
	TotalCount    *int32 `protobuf:"varint,2,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListVPCsResponse) Reset() {
	*x = ListVPCsResponse{}
	mi := &file_cloudstack_common_samples_v1_vpc_sample_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVPCsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVPCsResponse) ProtoMessage() {}

func (x *ListVPCsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_common_samples_v1_vpc_sample_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVPCsResponse.ProtoReflect.Descriptor instead.
func (*ListVPCsResponse) Descriptor() ([]byte, []int) {
	return file_cloudstack_common_samples_v1_vpc_sample_proto_rawDescGZIP(), []int{3}
}

func (x *ListVPCsResponse) GetVpcs() []*VPC {
	if x != nil {
		return x.Vpcs
	}
	return nil
}

func (x *ListVPCsResponse) GetTotalCount() int32 {
	if x != nil && x.TotalCount != nil {
		return *x.TotalCount
	}
	return 0
}

// VPC represents a Virtual Private Cloud
type VPC struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the VPC
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The name of the VPC
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// The display text of the VPC
	DisplayText *string `protobuf:"bytes,3,opt,name=display_text,json=displayText" json:"display_text,omitempty"`
	// The CIDR of the VPC
	Cidr *string `protobuf:"bytes,4,opt,name=cidr" json:"cidr,omitempty"`
	// The state of the VPC
	State *string `protobuf:"bytes,5,opt,name=state" json:"state,omitempty"`
	// The ID of the VPC offering
	VpcOfferingId *string `protobuf:"bytes,6,opt,name=vpc_offering_id,json=vpcOfferingId" json:"vpc_offering_id,omitempty"`
	// The ID of the zone
	ZoneId *string `protobuf:"bytes,7,opt,name=zone_id,json=zoneId" json:"zone_id,omitempty"`
	// The network domain
	NetworkDomain *string `protobuf:"bytes,8,opt,name=network_domain,json=networkDomain" json:"network_domain,omitempty"`
	// Whether the VPC is displayed
	Display *bool `protobuf:"varint,9,opt,name=display" json:"display,omitempty"`
	// The public MTU
	PublicMtu  *int32          `protobuf:"varint,10,opt,name=public_mtu,json=publicMtu" json:"public_mtu,omitempty"`
	DnsServers *VPC_DNSServers `protobuf:"bytes,11,opt,name=dns_servers,json=dnsServers" json:"dns_servers,omitempty"`
	// The source NAT IP
	SourceNatIp *string `protobuf:"bytes,12,opt,name=source_nat_ip,json=sourceNatIp" json:"source_nat_ip,omitempty"`
	// The AS Number
	AsNumber *int64 `protobuf:"varint,13,opt,name=as_number,json=asNumber" json:"as_number,omitempty"`
	// The creation time
	Created *string `protobuf:"bytes,14,opt,name=created" json:"created,omitempty"`
	// The last update time
	Updated       *string `protobuf:"bytes,15,opt,name=updated" json:"updated,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VPC) Reset() {
	*x = VPC{}
	mi := &file_cloudstack_common_samples_v1_vpc_sample_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VPC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VPC) ProtoMessage() {}

func (x *VPC) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_common_samples_v1_vpc_sample_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VPC.ProtoReflect.Descriptor instead.
func (*VPC) Descriptor() ([]byte, []int) {
	return file_cloudstack_common_samples_v1_vpc_sample_proto_rawDescGZIP(), []int{4}
}

func (x *VPC) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *VPC) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *VPC) GetDisplayText() string {
	if x != nil && x.DisplayText != nil {
		return *x.DisplayText
	}
	return ""
}

func (x *VPC) GetCidr() string {
	if x != nil && x.Cidr != nil {
		return *x.Cidr
	}
	return ""
}

func (x *VPC) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

func (x *VPC) GetVpcOfferingId() string {
	if x != nil && x.VpcOfferingId != nil {
		return *x.VpcOfferingId
	}
	return ""
}

func (x *VPC) GetZoneId() string {
	if x != nil && x.ZoneId != nil {
		return *x.ZoneId
	}
	return ""
}

func (x *VPC) GetNetworkDomain() string {
	if x != nil && x.NetworkDomain != nil {
		return *x.NetworkDomain
	}
	return ""
}

func (x *VPC) GetDisplay() bool {
	if x != nil && x.Display != nil {
		return *x.Display
	}
	return false
}

func (x *VPC) GetPublicMtu() int32 {
	if x != nil && x.PublicMtu != nil {
		return *x.PublicMtu
	}
	return 0
}

func (x *VPC) GetDnsServers() *VPC_DNSServers {
	if x != nil {
		return x.DnsServers
	}
	return nil
}

func (x *VPC) GetSourceNatIp() string {
	if x != nil && x.SourceNatIp != nil {
		return *x.SourceNatIp
	}
	return ""
}

func (x *VPC) GetAsNumber() int64 {
	if x != nil && x.AsNumber != nil {
		return *x.AsNumber
	}
	return 0
}

func (x *VPC) GetCreated() string {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return ""
}

func (x *VPC) GetUpdated() string {
	if x != nil && x.Updated != nil {
		return *x.Updated
	}
	return ""
}

// DNS servers for the VPC
type CreateVPCRequest_DNSServers struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ipv4Dns1      *string                `protobuf:"bytes,1,opt,name=ipv4_dns1,json=ipv4Dns1" json:"ipv4_dns1,omitempty"`
	Ipv4Dns2      *string                `protobuf:"bytes,2,opt,name=ipv4_dns2,json=ipv4Dns2" json:"ipv4_dns2,omitempty"`
	Ipv6Dns1      *string                `protobuf:"bytes,3,opt,name=ipv6_dns1,json=ipv6Dns1" json:"ipv6_dns1,omitempty"`
	Ipv6Dns2      *string                `protobuf:"bytes,4,opt,name=ipv6_dns2,json=ipv6Dns2" json:"ipv6_dns2,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateVPCRequest_DNSServers) Reset() {
	*x = CreateVPCRequest_DNSServers{}
	mi := &file_cloudstack_common_samples_v1_vpc_sample_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateVPCRequest_DNSServers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVPCRequest_DNSServers) ProtoMessage() {}

func (x *CreateVPCRequest_DNSServers) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_common_samples_v1_vpc_sample_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVPCRequest_DNSServers.ProtoReflect.Descriptor instead.
func (*CreateVPCRequest_DNSServers) Descriptor() ([]byte, []int) {
	return file_cloudstack_common_samples_v1_vpc_sample_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CreateVPCRequest_DNSServers) GetIpv4Dns1() string {
	if x != nil && x.Ipv4Dns1 != nil {
		return *x.Ipv4Dns1
	}
	return ""
}

func (x *CreateVPCRequest_DNSServers) GetIpv4Dns2() string {
	if x != nil && x.Ipv4Dns2 != nil {
		return *x.Ipv4Dns2
	}
	return ""
}

func (x *CreateVPCRequest_DNSServers) GetIpv6Dns1() string {
	if x != nil && x.Ipv6Dns1 != nil {
		return *x.Ipv6Dns1
	}
	return ""
}

func (x *CreateVPCRequest_DNSServers) GetIpv6Dns2() string {
	if x != nil && x.Ipv6Dns2 != nil {
		return *x.Ipv6Dns2
	}
	return ""
}

// DNS servers
type VPC_DNSServers struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ipv4Dns1      *string                `protobuf:"bytes,1,opt,name=ipv4_dns1,json=ipv4Dns1" json:"ipv4_dns1,omitempty"`
	Ipv4Dns2      *string                `protobuf:"bytes,2,opt,name=ipv4_dns2,json=ipv4Dns2" json:"ipv4_dns2,omitempty"`
	Ipv6Dns1      *string                `protobuf:"bytes,3,opt,name=ipv6_dns1,json=ipv6Dns1" json:"ipv6_dns1,omitempty"`
	Ipv6Dns2      *string                `protobuf:"bytes,4,opt,name=ipv6_dns2,json=ipv6Dns2" json:"ipv6_dns2,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VPC_DNSServers) Reset() {
	*x = VPC_DNSServers{}
	mi := &file_cloudstack_common_samples_v1_vpc_sample_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VPC_DNSServers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VPC_DNSServers) ProtoMessage() {}

func (x *VPC_DNSServers) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_common_samples_v1_vpc_sample_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VPC_DNSServers.ProtoReflect.Descriptor instead.
func (*VPC_DNSServers) Descriptor() ([]byte, []int) {
	return file_cloudstack_common_samples_v1_vpc_sample_proto_rawDescGZIP(), []int{4, 0}
}

func (x *VPC_DNSServers) GetIpv4Dns1() string {
	if x != nil && x.Ipv4Dns1 != nil {
		return *x.Ipv4Dns1
	}
	return ""
}

func (x *VPC_DNSServers) GetIpv4Dns2() string {
	if x != nil && x.Ipv4Dns2 != nil {
		return *x.Ipv4Dns2
	}
	return ""
}

func (x *VPC_DNSServers) GetIpv6Dns1() string {
	if x != nil && x.Ipv6Dns1 != nil {
		return *x.Ipv6Dns1
	}
	return ""
}

func (x *VPC_DNSServers) GetIpv6Dns2() string {
	if x != nil && x.Ipv6Dns2 != nil {
		return *x.Ipv6Dns2
	}
	return ""
}

var File_cloudstack_common_samples_v1_vpc_sample_proto protoreflect.FileDescriptor

const file_cloudstack_common_samples_v1_vpc_sample_proto_rawDesc = "" +
	"\n" +
	"-cloudstack/common/samples/v1/vpc_sample.proto\x12\x11cloudstack.vpc.v1\x1a\x1bbuf/validate/validate.proto\x1a(cloudstack/annotations/annotations.proto\x1a google/protobuf/descriptor.proto\"\x9a\x05\n" +
	"\x10CreateVPCRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12!\n" +
	"\fdisplay_text\x18\x02 \x01(\tR\vdisplayText\x12\x1c\n" +
	"\x04cidr\x18\x03 \x01(\tB\b\xbaH\x05r\x03\xf0\x01\x01R\x04cidr\x12\x1b\n" +
	"\tcidr_size\x18\x04 \x01(\x05R\bcidrSize\x120\n" +
	"\x0fvpc_offering_id\x18\x05 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\rvpcOfferingId\x12!\n" +
	"\azone_id\x18\x06 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\x06zoneId\x12%\n" +
	"\x0enetwork_domain\x18\a \x01(\tR\rnetworkDomain\x12\x1b\n" +
	"\x05start\x18\b \x01(\bB\x05\xaa\x01\x02\b\x01R\x05start\x12\x18\n" +
	"\adisplay\x18\t \x01(\bR\adisplay\x12\x1d\n" +
	"\n" +
	"public_mtu\x18\n" +
	" \x01(\x05R\tpublicMtu\x12O\n" +
	"\vdns_servers\x18\v \x01(\v2..cloudstack.vpc.v1.CreateVPCRequest.DNSServersR\n" +
	"dnsServers\x12+\n" +
	"\rsource_nat_ip\x18\f \x01(\tB\a\xbaH\x04r\x02x\x01R\vsourceNatIp\x12\x1b\n" +
	"\tas_number\x18\r \x01(\x03R\basNumber\x1a\xa6\x01\n" +
	"\n" +
	"DNSServers\x12$\n" +
	"\tipv4_dns1\x18\x01 \x01(\tB\a\xbaH\x04r\x02x\x01R\bipv4Dns1\x12$\n" +
	"\tipv4_dns2\x18\x02 \x01(\tB\a\xbaH\x04r\x02x\x01R\bipv4Dns2\x12%\n" +
	"\tipv6_dns1\x18\x03 \x01(\tB\b\xbaH\x05r\x03\x80\x01\x01R\bipv6Dns1\x12%\n" +
	"\tipv6_dns2\x18\x04 \x01(\tB\b\xbaH\x05r\x03\x80\x01\x01R\bipv6Dns2\"=\n" +
	"\x11CreateVPCResponse\x12(\n" +
	"\x03vpc\x18\x01 \x01(\v2\x16.cloudstack.vpc.v1.VPCR\x03vpc\"\x9d\x03\n" +
	"\x0fListVPCsRequest\x12\x16\n" +
	"\x02id\x18\x01 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x02id\x12$\n" +
	"\azone_id\x18\x02 \x01(\tB\v\xbaH\b\xc8\x01\x01r\x03\xb0\x01\x01R\x06zoneId\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12!\n" +
	"\fdisplay_text\x18\x04 \x01(\tR\vdisplayText\x12\x1c\n" +
	"\x04cidr\x18\x05 \x01(\tB\b\xbaH\x05r\x03\xf0\x01\x01R\x04cidr\x120\n" +
	"\x0fvpc_offering_id\x18\x06 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\rvpcOfferingId\x12\x14\n" +
	"\x05state\x18\a \x01(\tR\x05state\x121\n" +
	"\x10restart_required\x18\b \x01(\bB\x06\xbaH\x03\xc8\x01\x00R\x0frestartRequired\x124\n" +
	"\x12show_resource_icon\x18\t \x01(\bB\x06\xbaH\x03\xc8\x01\x00R\x10showResourceIcon\x12\x1d\n" +
	"\x04page\x18\n" +
	" \x01(\x05:\x011B\x06\xbaH\x03\xc8\x01\x00R\x04page\x12'\n" +
	"\tpage_size\x18\v \x01(\x05:\x0210B\x06\xbaH\x03\xc8\x01\x00R\bpageSize\"f\n" +
	"\x10ListVPCsResponse\x12*\n" +
	"\x04vpcs\x18\x01 \x03(\v2\x16.cloudstack.vpc.v1.VPCR\x04vpcs\x12\x1f\n" +
	"\vtotal_count\x18\x02 \x01(\x05R\n" +
	"totalCount:\x05\xbaH\x02\b\x00\"\x9e\x05\n" +
	"\x03VPC\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12!\n" +
	"\fdisplay_text\x18\x03 \x01(\tR\vdisplayText\x12\x12\n" +
	"\x04cidr\x18\x04 \x01(\tR\x04cidr\x12\x14\n" +
	"\x05state\x18\x05 \x01(\tR\x05state\x12&\n" +
	"\x0fvpc_offering_id\x18\x06 \x01(\tR\rvpcOfferingId\x12b\n" +
	"\azone_id\x18\a \x01(\tBI\xbaHF\xba\x01>\n" +
	"\azone_id\x12\x1czone_id must be a valid UUID\x1a\x15value.id == 'zone_id'r\x03\xb0\x01\x01R\x06zoneId\x12%\n" +
	"\x0enetwork_domain\x18\b \x01(\tR\rnetworkDomain\x12\x18\n" +
	"\adisplay\x18\t \x01(\bR\adisplay\x12\x1d\n" +
	"\n" +
	"public_mtu\x18\n" +
	" \x01(\x05R\tpublicMtu\x12B\n" +
	"\vdns_servers\x18\v \x01(\v2!.cloudstack.vpc.v1.VPC.DNSServersR\n" +
	"dnsServers\x12\"\n" +
	"\rsource_nat_ip\x18\f \x01(\tR\vsourceNatIp\x12\x1b\n" +
	"\tas_number\x18\r \x01(\x03R\basNumber\x12\x18\n" +
	"\acreated\x18\x0e \x01(\tR\acreated\x12\x18\n" +
	"\aupdated\x18\x0f \x01(\tR\aupdated\x1a\x80\x01\n" +
	"\n" +
	"DNSServers\x12\x1b\n" +
	"\tipv4_dns1\x18\x01 \x01(\tR\bipv4Dns1\x12\x1b\n" +
	"\tipv4_dns2\x18\x02 \x01(\tR\bipv4Dns2\x12\x1b\n" +
	"\tipv6_dns1\x18\x03 \x01(\tR\bipv6Dns1\x12\x1b\n" +
	"\tipv6_dns2\x18\x04 \x01(\tR\bipv6Dns22\xbd\x01\n" +
	"\n" +
	"VPCService\x12X\n" +
	"\tCreateVPC\x12#.cloudstack.vpc.v1.CreateVPCRequest\x1a$.cloudstack.vpc.v1.CreateVPCResponse\"\x00\x12U\n" +
	"\bListVPCs\x12\".cloudstack.vpc.v1.ListVPCsRequest\x1a#.cloudstack.vpc.v1.ListVPCsResponse\"\x00B\xe5\x01\n" +
	"\x15com.cloudstack.vpc.v1B\x0eVpcSampleProtoP\x01ZVgithub.com/walteh/cloudstack-proxy/gen/proto/golang/cloudstack/common/samples/v1;vpcv1\xa2\x02\x03CVX\xaa\x02\x11Cloudstack.Vpc.V1\xca\x02\x11Cloudstack\\Vpc\\V1\xe2\x02\x1dCloudstack\\Vpc\\V1\\GPBMetadata\xea\x02\x13Cloudstack::Vpc::V1b\beditionsp\xe8\a"

var (
	file_cloudstack_common_samples_v1_vpc_sample_proto_rawDescOnce sync.Once
	file_cloudstack_common_samples_v1_vpc_sample_proto_rawDescData []byte
)

func file_cloudstack_common_samples_v1_vpc_sample_proto_rawDescGZIP() []byte {
	file_cloudstack_common_samples_v1_vpc_sample_proto_rawDescOnce.Do(func() {
		file_cloudstack_common_samples_v1_vpc_sample_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_cloudstack_common_samples_v1_vpc_sample_proto_rawDesc), len(file_cloudstack_common_samples_v1_vpc_sample_proto_rawDesc)))
	})
	return file_cloudstack_common_samples_v1_vpc_sample_proto_rawDescData
}

var file_cloudstack_common_samples_v1_vpc_sample_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_cloudstack_common_samples_v1_vpc_sample_proto_goTypes = []any{
	(*CreateVPCRequest)(nil),            // 0: cloudstack.vpc.v1.CreateVPCRequest
	(*CreateVPCResponse)(nil),           // 1: cloudstack.vpc.v1.CreateVPCResponse
	(*ListVPCsRequest)(nil),             // 2: cloudstack.vpc.v1.ListVPCsRequest
	(*ListVPCsResponse)(nil),            // 3: cloudstack.vpc.v1.ListVPCsResponse
	(*VPC)(nil),                         // 4: cloudstack.vpc.v1.VPC
	(*CreateVPCRequest_DNSServers)(nil), // 5: cloudstack.vpc.v1.CreateVPCRequest.DNSServers
	(*VPC_DNSServers)(nil),              // 6: cloudstack.vpc.v1.VPC.DNSServers
}
var file_cloudstack_common_samples_v1_vpc_sample_proto_depIdxs = []int32{
	5, // 0: cloudstack.vpc.v1.CreateVPCRequest.dns_servers:type_name -> cloudstack.vpc.v1.CreateVPCRequest.DNSServers
	4, // 1: cloudstack.vpc.v1.CreateVPCResponse.vpc:type_name -> cloudstack.vpc.v1.VPC
	4, // 2: cloudstack.vpc.v1.ListVPCsResponse.vpcs:type_name -> cloudstack.vpc.v1.VPC
	6, // 3: cloudstack.vpc.v1.VPC.dns_servers:type_name -> cloudstack.vpc.v1.VPC.DNSServers
	0, // 4: cloudstack.vpc.v1.VPCService.CreateVPC:input_type -> cloudstack.vpc.v1.CreateVPCRequest
	2, // 5: cloudstack.vpc.v1.VPCService.ListVPCs:input_type -> cloudstack.vpc.v1.ListVPCsRequest
	1, // 6: cloudstack.vpc.v1.VPCService.CreateVPC:output_type -> cloudstack.vpc.v1.CreateVPCResponse
	3, // 7: cloudstack.vpc.v1.VPCService.ListVPCs:output_type -> cloudstack.vpc.v1.ListVPCsResponse
	6, // [6:8] is the sub-list for method output_type
	4, // [4:6] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_cloudstack_common_samples_v1_vpc_sample_proto_init() }
func file_cloudstack_common_samples_v1_vpc_sample_proto_init() {
	if File_cloudstack_common_samples_v1_vpc_sample_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_cloudstack_common_samples_v1_vpc_sample_proto_rawDesc), len(file_cloudstack_common_samples_v1_vpc_sample_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cloudstack_common_samples_v1_vpc_sample_proto_goTypes,
		DependencyIndexes: file_cloudstack_common_samples_v1_vpc_sample_proto_depIdxs,
		MessageInfos:      file_cloudstack_common_samples_v1_vpc_sample_proto_msgTypes,
	}.Build()
	File_cloudstack_common_samples_v1_vpc_sample_proto = out.File
	file_cloudstack_common_samples_v1_vpc_sample_proto_goTypes = nil
	file_cloudstack_common_samples_v1_vpc_sample_proto_depIdxs = nil
}
