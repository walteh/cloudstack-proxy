// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: cloudstack/management/cluster/v1/cluster.gen.proto

package clusterv1

import (
	_ "github.com/walteh/cloudstack-proxy/gen/proto/golang/buf/validate"
	_ "github.com/walteh/cloudstack-proxy/gen/proto/golang/cloudstack/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AddClusterRequest represents the parameters for adds a new cluster
type AddClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the cluster name
	ClusterName *string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName" json:"cluster_name,omitempty"`
	// the password for the host
	Password *string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	// the Pod ID for the host
	PodId *int64 `protobuf:"varint,3,opt,name=pod_id,json=podId" json:"pod_id,omitempty"`
	// the URL
	Url *string `protobuf:"bytes,4,opt,name=url" json:"url,omitempty"`
	// the username for the cluster
	Username *string `protobuf:"bytes,5,opt,name=username" json:"username,omitempty"`
	// the Zone ID for the cluster
	ZoneId *int64 `protobuf:"varint,6,opt,name=zone_id,json=zoneId" json:"zone_id,omitempty"`
	// hypervisor type of the cluster: XenServer,KVM,VMware,Hyperv,BareMetal,Simulator,Ovm3
	Hypervisor *string `protobuf:"bytes,7,opt,name=hypervisor" json:"hypervisor,omitempty"`
	// the CPU arch of the cluster. Valid options are: x86_64, aarch64
	Arch *string `protobuf:"bytes,8,opt,name=arch" json:"arch,omitempty"`
	// type of the cluster: CloudManaged, ExternalManaged
	ClusterType *string `protobuf:"bytes,9,opt,name=cluster_type,json=clusterType" json:"cluster_type,omitempty"`
	// Allocation state of this cluster for allocation of new resources
	AllocationState *string `protobuf:"bytes,10,opt,name=allocation_state,json=allocationState" json:"allocation_state,omitempty"`
	// the username for the VSM associated with this cluster
	Vsmusername *string `protobuf:"bytes,11,opt,name=vsmusername" json:"vsmusername,omitempty"`
	// the password for the VSM associated with this cluster
	Vsmpassword *string `protobuf:"bytes,12,opt,name=vsmpassword" json:"vsmpassword,omitempty"`
	// the ipaddress of the VSM associated with this cluster
	Vsmipaddress *string `protobuf:"bytes,13,opt,name=vsmipaddress" json:"vsmipaddress,omitempty"`
	// Type of virtual switch used for guest traffic in the cluster. Allowed values are, vmwaresvs (for VMware standard vSwitch) and vmwaredvs (for VMware distributed vSwitch)
	VSwitchTypeGuestTraffic *string `protobuf:"bytes,14,opt,name=v_switch_type_guest_traffic,json=vSwitchTypeGuestTraffic" json:"v_switch_type_guest_traffic,omitempty"`
	// Type of virtual switch used for public traffic in the cluster. Allowed values are, vmwaresvs (for VMware standard vSwitch) and vmwaredvs (for VMware distributed vSwitch)
	VSwitchTypePublicTraffic *string `protobuf:"bytes,15,opt,name=v_switch_type_public_traffic,json=vSwitchTypePublicTraffic" json:"v_switch_type_public_traffic,omitempty"`
	// Name of virtual switch used for guest traffic in the cluster. This would override zone wide traffic label setting.
	VSwitchNameGuestTraffic *string `protobuf:"bytes,16,opt,name=v_switch_name_guest_traffic,json=vSwitchNameGuestTraffic" json:"v_switch_name_guest_traffic,omitempty"`
	// Name of virtual switch used for public traffic in the cluster.  This would override zone wide traffic label setting.
	VSwitchNamePublicTraffic *string `protobuf:"bytes,17,opt,name=v_switch_name_public_traffic,json=vSwitchNamePublicTraffic" json:"v_switch_name_public_traffic,omitempty"`
	// Ovm3 native pooling enabled for cluster
	Ovm3Pool *string `protobuf:"bytes,18,opt,name=ovm3pool" json:"ovm3pool,omitempty"`
	// Ovm3 native OCFS2 clustering enabled for cluster
	Ovm3Cluster *string `protobuf:"bytes,19,opt,name=ovm3cluster" json:"ovm3cluster,omitempty"`
	// Ovm3 vip to use for pool (and cluster)
	Ovm3Vip *string `protobuf:"bytes,20,opt,name=ovm3vip" json:"ovm3vip,omitempty"`
	ResponseType  *string `protobuf:"bytes,21,opt,name=response_type,json=responseType" json:"response_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddClusterRequest) Reset() {
	*x = AddClusterRequest{}
	mi := &file_cloudstack_management_cluster_v1_cluster_gen_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddClusterRequest) ProtoMessage() {}

func (x *AddClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_cluster_v1_cluster_gen_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddClusterRequest.ProtoReflect.Descriptor instead.
func (*AddClusterRequest) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_cluster_v1_cluster_gen_proto_rawDescGZIP(), []int{0}
}

func (x *AddClusterRequest) GetClusterName() string {
	if x != nil && x.ClusterName != nil {
		return *x.ClusterName
	}
	return ""
}

func (x *AddClusterRequest) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *AddClusterRequest) GetPodId() int64 {
	if x != nil && x.PodId != nil {
		return *x.PodId
	}
	return 0
}

func (x *AddClusterRequest) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *AddClusterRequest) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *AddClusterRequest) GetZoneId() int64 {
	if x != nil && x.ZoneId != nil {
		return *x.ZoneId
	}
	return 0
}

func (x *AddClusterRequest) GetHypervisor() string {
	if x != nil && x.Hypervisor != nil {
		return *x.Hypervisor
	}
	return ""
}

func (x *AddClusterRequest) GetArch() string {
	if x != nil && x.Arch != nil {
		return *x.Arch
	}
	return ""
}

func (x *AddClusterRequest) GetClusterType() string {
	if x != nil && x.ClusterType != nil {
		return *x.ClusterType
	}
	return ""
}

func (x *AddClusterRequest) GetAllocationState() string {
	if x != nil && x.AllocationState != nil {
		return *x.AllocationState
	}
	return ""
}

func (x *AddClusterRequest) GetVsmusername() string {
	if x != nil && x.Vsmusername != nil {
		return *x.Vsmusername
	}
	return ""
}

func (x *AddClusterRequest) GetVsmpassword() string {
	if x != nil && x.Vsmpassword != nil {
		return *x.Vsmpassword
	}
	return ""
}

func (x *AddClusterRequest) GetVsmipaddress() string {
	if x != nil && x.Vsmipaddress != nil {
		return *x.Vsmipaddress
	}
	return ""
}

func (x *AddClusterRequest) GetVSwitchTypeGuestTraffic() string {
	if x != nil && x.VSwitchTypeGuestTraffic != nil {
		return *x.VSwitchTypeGuestTraffic
	}
	return ""
}

func (x *AddClusterRequest) GetVSwitchTypePublicTraffic() string {
	if x != nil && x.VSwitchTypePublicTraffic != nil {
		return *x.VSwitchTypePublicTraffic
	}
	return ""
}

func (x *AddClusterRequest) GetVSwitchNameGuestTraffic() string {
	if x != nil && x.VSwitchNameGuestTraffic != nil {
		return *x.VSwitchNameGuestTraffic
	}
	return ""
}

func (x *AddClusterRequest) GetVSwitchNamePublicTraffic() string {
	if x != nil && x.VSwitchNamePublicTraffic != nil {
		return *x.VSwitchNamePublicTraffic
	}
	return ""
}

func (x *AddClusterRequest) GetOvm3Pool() string {
	if x != nil && x.Ovm3Pool != nil {
		return *x.Ovm3Pool
	}
	return ""
}

func (x *AddClusterRequest) GetOvm3Cluster() string {
	if x != nil && x.Ovm3Cluster != nil {
		return *x.Ovm3Cluster
	}
	return ""
}

func (x *AddClusterRequest) GetOvm3Vip() string {
	if x != nil && x.Ovm3Vip != nil {
		return *x.Ovm3Vip
	}
	return ""
}

func (x *AddClusterRequest) GetResponseType() string {
	if x != nil && x.ResponseType != nil {
		return *x.ResponseType
	}
	return ""
}

// AddClusterResponse represents the response from adds a new cluster
type AddClusterResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Result
	Result        *Result `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddClusterResponse) Reset() {
	*x = AddClusterResponse{}
	mi := &file_cloudstack_management_cluster_v1_cluster_gen_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddClusterResponse) ProtoMessage() {}

func (x *AddClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_cluster_v1_cluster_gen_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddClusterResponse.ProtoReflect.Descriptor instead.
func (*AddClusterResponse) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_cluster_v1_cluster_gen_proto_rawDescGZIP(), []int{1}
}

func (x *AddClusterResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

// DeleteClusterRequest represents the parameters for deletes a cluster.
type DeleteClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the cluster ID
	Id *int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	ResponseType  *string `protobuf:"bytes,2,opt,name=response_type,json=responseType" json:"response_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteClusterRequest) Reset() {
	*x = DeleteClusterRequest{}
	mi := &file_cloudstack_management_cluster_v1_cluster_gen_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterRequest) ProtoMessage() {}

func (x *DeleteClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_cluster_v1_cluster_gen_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterRequest.ProtoReflect.Descriptor instead.
func (*DeleteClusterRequest) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_cluster_v1_cluster_gen_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteClusterRequest) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *DeleteClusterRequest) GetResponseType() string {
	if x != nil && x.ResponseType != nil {
		return *x.ResponseType
	}
	return ""
}

// DeleteClusterResponse represents the response from deletes a cluster.
type DeleteClusterResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Result
	Result        *Result `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteClusterResponse) Reset() {
	*x = DeleteClusterResponse{}
	mi := &file_cloudstack_management_cluster_v1_cluster_gen_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterResponse) ProtoMessage() {}

func (x *DeleteClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_cluster_v1_cluster_gen_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterResponse.ProtoReflect.Descriptor instead.
func (*DeleteClusterResponse) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_cluster_v1_cluster_gen_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteClusterResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

// ExecuteClusterDrsPlanRequest represents the parameters for execute drs for a cluster. if there is another plan in progress for the same cluster, this command will fail.
type ExecuteClusterDrsPlanRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of cluster
	Id *int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Virtual Machine to destination host mapping. This parameter specifies the mapping between a vm and a host to migrate that VM. clusterid is required if this parameter is set.Format of this parameter: migrateto[vm-index].vm=<uuid>&migrateto[vm-index].host=<uuid> Where, [vm-index] indicates the index to identify the vm that you want to migrate, vm=<uuid> indicates the UUID of the vm that you want to migrate, and host=<uuid> indicates the UUID of the host where you want to migrate the vm. Example: migrateto[0].vm=<71f43cd6-69b0-4d3b-9fbc-67f50963d60b>&migrateto[0].host=<a382f181-3d2b-4413-b92d-b8931befa7e1>&migrateto[1].vm=<88de0173-55c0-4c1c-a269-83d0279eeedf>&migrateto[1].host=<95d6e97c-6766-4d67-9a30-c449c15011d1>&migrateto[2].vm=<1b331390-59f2-4796-9993-bf11c6e76225>&migrateto[2].host=<41fdb564-9d3b-447d-88ed-7628f7640cbc>
	MigrateVmTo map[string]string `protobuf:"bytes,2,rep,name=migrate_vm_to,json=migrateVmTo" json:"migrate_vm_to,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	StartEventId *int64 `protobuf:"varint,3,opt,name=start_event_id,json=startEventId" json:"start_event_id,omitempty"`
	InjectedJobId *string `protobuf:"bytes,4,opt,name=injected_job_id,json=injectedJobId" json:"injected_job_id,omitempty"`
	ResponseType  *string `protobuf:"bytes,5,opt,name=response_type,json=responseType" json:"response_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecuteClusterDrsPlanRequest) Reset() {
	*x = ExecuteClusterDrsPlanRequest{}
	mi := &file_cloudstack_management_cluster_v1_cluster_gen_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteClusterDrsPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteClusterDrsPlanRequest) ProtoMessage() {}

func (x *ExecuteClusterDrsPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_cluster_v1_cluster_gen_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteClusterDrsPlanRequest.ProtoReflect.Descriptor instead.
func (*ExecuteClusterDrsPlanRequest) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_cluster_v1_cluster_gen_proto_rawDescGZIP(), []int{4}
}

func (x *ExecuteClusterDrsPlanRequest) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ExecuteClusterDrsPlanRequest) GetMigrateVmTo() map[string]string {
	if x != nil {
		return x.MigrateVmTo
	}
	return nil
}

func (x *ExecuteClusterDrsPlanRequest) GetStartEventId() int64 {
	if x != nil && x.StartEventId != nil {
		return *x.StartEventId
	}
	return 0
}

func (x *ExecuteClusterDrsPlanRequest) GetInjectedJobId() string {
	if x != nil && x.InjectedJobId != nil {
		return *x.InjectedJobId
	}
	return ""
}

func (x *ExecuteClusterDrsPlanRequest) GetResponseType() string {
	if x != nil && x.ResponseType != nil {
		return *x.ResponseType
	}
	return ""
}

// ExecuteClusterDrsPlanResponse represents the response from execute drs for a cluster. if there is another plan in progress for the same cluster, this command will fail.
type ExecuteClusterDrsPlanResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Result
	Result        *Result `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecuteClusterDrsPlanResponse) Reset() {
	*x = ExecuteClusterDrsPlanResponse{}
	mi := &file_cloudstack_management_cluster_v1_cluster_gen_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteClusterDrsPlanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteClusterDrsPlanResponse) ProtoMessage() {}

func (x *ExecuteClusterDrsPlanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_cluster_v1_cluster_gen_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteClusterDrsPlanResponse.ProtoReflect.Descriptor instead.
func (*ExecuteClusterDrsPlanResponse) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_cluster_v1_cluster_gen_proto_rawDescGZIP(), []int{5}
}

func (x *ExecuteClusterDrsPlanResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

// GenerateClusterDrsPlanRequest represents the parameters for generate drs plan for a cluster
type GenerateClusterDrsPlanRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the ID of the Cluster
	Id *int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Maximum number of VMs to migrate for a DRS execution. Defaults to value of cluster's drs.vm.migrations setting
	Migrations *int32 `protobuf:"varint,2,opt,name=migrations" json:"migrations,omitempty"`
	ResponseType  *string `protobuf:"bytes,3,opt,name=response_type,json=responseType" json:"response_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenerateClusterDrsPlanRequest) Reset() {
	*x = GenerateClusterDrsPlanRequest{}
	mi := &file_cloudstack_management_cluster_v1_cluster_gen_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateClusterDrsPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateClusterDrsPlanRequest) ProtoMessage() {}

func (x *GenerateClusterDrsPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_cluster_v1_cluster_gen_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateClusterDrsPlanRequest.ProtoReflect.Descriptor instead.
func (*GenerateClusterDrsPlanRequest) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_cluster_v1_cluster_gen_proto_rawDescGZIP(), []int{6}
}

func (x *GenerateClusterDrsPlanRequest) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *GenerateClusterDrsPlanRequest) GetMigrations() int32 {
	if x != nil && x.Migrations != nil {
		return *x.Migrations
	}
	return 0
}

func (x *GenerateClusterDrsPlanRequest) GetResponseType() string {
	if x != nil && x.ResponseType != nil {
		return *x.ResponseType
	}
	return ""
}

// GenerateClusterDrsPlanResponse represents the response from generate drs plan for a cluster
type GenerateClusterDrsPlanResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Result
	Result        *Result `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenerateClusterDrsPlanResponse) Reset() {
	*x = GenerateClusterDrsPlanResponse{}
	mi := &file_cloudstack_management_cluster_v1_cluster_gen_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateClusterDrsPlanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateClusterDrsPlanResponse) ProtoMessage() {}

func (x *GenerateClusterDrsPlanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_cluster_v1_cluster_gen_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateClusterDrsPlanResponse.ProtoReflect.Descriptor instead.
func (*GenerateClusterDrsPlanResponse) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_cluster_v1_cluster_gen_proto_rawDescGZIP(), []int{7}
}

func (x *GenerateClusterDrsPlanResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

// ListClusterDrsPlanRequest represents the parameters for list drs plans for a clusters
type ListClusterDrsPlanRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the drs plan
	Id *int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// ID of the cluster
	ClusterId *int64 `protobuf:"varint,2,opt,name=cluster_id,json=clusterId" json:"cluster_id,omitempty"`
	// List by keyword
	Keyword *string `protobuf:"bytes,3,opt,name=keyword" json:"keyword,omitempty"`
	Page *int32 `protobuf:"varint,4,opt,name=page" json:"page,omitempty"`
	PageSize *int32 `protobuf:"varint,5,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	ResponseType  *string `protobuf:"bytes,6,opt,name=response_type,json=responseType" json:"response_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterDrsPlanRequest) Reset() {
	*x = ListClusterDrsPlanRequest{}
	mi := &file_cloudstack_management_cluster_v1_cluster_gen_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterDrsPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterDrsPlanRequest) ProtoMessage() {}

func (x *ListClusterDrsPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_cluster_v1_cluster_gen_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterDrsPlanRequest.ProtoReflect.Descriptor instead.
func (*ListClusterDrsPlanRequest) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_cluster_v1_cluster_gen_proto_rawDescGZIP(), []int{8}
}

func (x *ListClusterDrsPlanRequest) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ListClusterDrsPlanRequest) GetClusterId() int64 {
	if x != nil && x.ClusterId != nil {
		return *x.ClusterId
	}
	return 0
}

func (x *ListClusterDrsPlanRequest) GetKeyword() string {
	if x != nil && x.Keyword != nil {
		return *x.Keyword
	}
	return ""
}

func (x *ListClusterDrsPlanRequest) GetPage() int32 {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return 0
}

func (x *ListClusterDrsPlanRequest) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *ListClusterDrsPlanRequest) GetResponseType() string {
	if x != nil && x.ResponseType != nil {
		return *x.ResponseType
	}
	return ""
}

// ListClusterDrsPlanResponse represents the response from list drs plans for a clusters
type ListClusterDrsPlanResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The list of ClusterDrsPlans
	Items []*ClusterDrsPlan `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	// The total count of ClusterDrsPlans
	TotalCount    *int32 `protobuf:"varint,2,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterDrsPlanResponse) Reset() {
	*x = ListClusterDrsPlanResponse{}
	mi := &file_cloudstack_management_cluster_v1_cluster_gen_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterDrsPlanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterDrsPlanResponse) ProtoMessage() {}

func (x *ListClusterDrsPlanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_cluster_v1_cluster_gen_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterDrsPlanResponse.ProtoReflect.Descriptor instead.
func (*ListClusterDrsPlanResponse) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_cluster_v1_cluster_gen_proto_rawDescGZIP(), []int{9}
}

func (x *ListClusterDrsPlanResponse) GetItems() []*ClusterDrsPlan {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListClusterDrsPlanResponse) GetTotalCount() int32 {
	if x != nil && x.TotalCount != nil {
		return *x.TotalCount
	}
	return 0
}

// ListClustersRequest represents the parameters for lists clusters.
type ListClustersRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// lists clusters by the cluster ID
	Id *int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// lists clusters by the cluster name
	ClusterName *string `protobuf:"bytes,2,opt,name=cluster_name,json=clusterName" json:"cluster_name,omitempty"`
	// lists clusters by Pod ID
	PodId *int64 `protobuf:"varint,3,opt,name=pod_id,json=podId" json:"pod_id,omitempty"`
	// lists clusters by Zone ID
	ZoneId *int64 `protobuf:"varint,4,opt,name=zone_id,json=zoneId" json:"zone_id,omitempty"`
	// lists clusters by hypervisor type
	HypervisorType *string `protobuf:"bytes,5,opt,name=hypervisor_type,json=hypervisorType" json:"hypervisor_type,omitempty"`
	// lists clusters by cluster type
	ClusterType *string `protobuf:"bytes,6,opt,name=cluster_type,json=clusterType" json:"cluster_type,omitempty"`
	// lists clusters by allocation state
	AllocationState *string `protobuf:"bytes,7,opt,name=allocation_state,json=allocationState" json:"allocation_state,omitempty"`
	// whether this cluster is managed by cloudstack
	ManagedState *string `protobuf:"bytes,8,opt,name=managed_state,json=managedState" json:"managed_state,omitempty"`
	// flag to display the capacity of the clusters
	ShowCapacities *bool `protobuf:"varint,9,opt,name=show_capacities,json=showCapacities" json:"show_capacities,omitempty"`
	// List by keyword
	Keyword *string `protobuf:"bytes,10,opt,name=keyword" json:"keyword,omitempty"`
	Page *int32 `protobuf:"varint,11,opt,name=page" json:"page,omitempty"`
	PageSize *int32 `protobuf:"varint,12,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	ResponseType  *string `protobuf:"bytes,13,opt,name=response_type,json=responseType" json:"response_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClustersRequest) Reset() {
	*x = ListClustersRequest{}
	mi := &file_cloudstack_management_cluster_v1_cluster_gen_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClustersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClustersRequest) ProtoMessage() {}

func (x *ListClustersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_cluster_v1_cluster_gen_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClustersRequest.ProtoReflect.Descriptor instead.
func (*ListClustersRequest) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_cluster_v1_cluster_gen_proto_rawDescGZIP(), []int{10}
}

func (x *ListClustersRequest) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ListClustersRequest) GetClusterName() string {
	if x != nil && x.ClusterName != nil {
		return *x.ClusterName
	}
	return ""
}

func (x *ListClustersRequest) GetPodId() int64 {
	if x != nil && x.PodId != nil {
		return *x.PodId
	}
	return 0
}

func (x *ListClustersRequest) GetZoneId() int64 {
	if x != nil && x.ZoneId != nil {
		return *x.ZoneId
	}
	return 0
}

func (x *ListClustersRequest) GetHypervisorType() string {
	if x != nil && x.HypervisorType != nil {
		return *x.HypervisorType
	}
	return ""
}

func (x *ListClustersRequest) GetClusterType() string {
	if x != nil && x.ClusterType != nil {
		return *x.ClusterType
	}
	return ""
}

func (x *ListClustersRequest) GetAllocationState() string {
	if x != nil && x.AllocationState != nil {
		return *x.AllocationState
	}
	return ""
}

func (x *ListClustersRequest) GetManagedState() string {
	if x != nil && x.ManagedState != nil {
		return *x.ManagedState
	}
	return ""
}

func (x *ListClustersRequest) GetShowCapacities() bool {
	if x != nil && x.ShowCapacities != nil {
		return *x.ShowCapacities
	}
	return false
}

func (x *ListClustersRequest) GetKeyword() string {
	if x != nil && x.Keyword != nil {
		return *x.Keyword
	}
	return ""
}

func (x *ListClustersRequest) GetPage() int32 {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return 0
}

func (x *ListClustersRequest) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *ListClustersRequest) GetResponseType() string {
	if x != nil && x.ResponseType != nil {
		return *x.ResponseType
	}
	return ""
}

// ListClustersResponse represents the response from lists clusters.
type ListClustersResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The list of Clusters
	Items []*Cluster `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	// The total count of Clusters
	TotalCount    *int32 `protobuf:"varint,2,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClustersResponse) Reset() {
	*x = ListClustersResponse{}
	mi := &file_cloudstack_management_cluster_v1_cluster_gen_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClustersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClustersResponse) ProtoMessage() {}

func (x *ListClustersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_cluster_v1_cluster_gen_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClustersResponse.ProtoReflect.Descriptor instead.
func (*ListClustersResponse) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_cluster_v1_cluster_gen_proto_rawDescGZIP(), []int{11}
}

func (x *ListClustersResponse) GetItems() []*Cluster {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListClustersResponse) GetTotalCount() int32 {
	if x != nil && x.TotalCount != nil {
		return *x.TotalCount
	}
	return 0
}

// UpdateClusterRequest represents the parameters for updates an existing cluster
type UpdateClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the ID of the Cluster
	Id *int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// the cluster name
	ClusterName *string `protobuf:"bytes,2,opt,name=cluster_name,json=clusterName" json:"cluster_name,omitempty"`
	// hypervisor type of the cluster
	Hypervisor *string `protobuf:"bytes,3,opt,name=hypervisor" json:"hypervisor,omitempty"`
	// hypervisor type of the cluster
	ClusterType *string `protobuf:"bytes,4,opt,name=cluster_type,json=clusterType" json:"cluster_type,omitempty"`
	// Allocation state of this cluster for allocation of new resources
	AllocationState *string `protobuf:"bytes,5,opt,name=allocation_state,json=allocationState" json:"allocation_state,omitempty"`
	// whether this cluster is managed by cloudstack
	ManagedState *string `protobuf:"bytes,6,opt,name=managed_state,json=managedState" json:"managed_state,omitempty"`
	// the CPU arch of the cluster. Valid options are: x86_64, aarch64
	Arch *string `protobuf:"bytes,7,opt,name=arch" json:"arch,omitempty"`
	ResponseType  *string `protobuf:"bytes,8,opt,name=response_type,json=responseType" json:"response_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateClusterRequest) Reset() {
	*x = UpdateClusterRequest{}
	mi := &file_cloudstack_management_cluster_v1_cluster_gen_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterRequest) ProtoMessage() {}

func (x *UpdateClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_cluster_v1_cluster_gen_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterRequest.ProtoReflect.Descriptor instead.
func (*UpdateClusterRequest) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_cluster_v1_cluster_gen_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateClusterRequest) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *UpdateClusterRequest) GetClusterName() string {
	if x != nil && x.ClusterName != nil {
		return *x.ClusterName
	}
	return ""
}

func (x *UpdateClusterRequest) GetHypervisor() string {
	if x != nil && x.Hypervisor != nil {
		return *x.Hypervisor
	}
	return ""
}

func (x *UpdateClusterRequest) GetClusterType() string {
	if x != nil && x.ClusterType != nil {
		return *x.ClusterType
	}
	return ""
}

func (x *UpdateClusterRequest) GetAllocationState() string {
	if x != nil && x.AllocationState != nil {
		return *x.AllocationState
	}
	return ""
}

func (x *UpdateClusterRequest) GetManagedState() string {
	if x != nil && x.ManagedState != nil {
		return *x.ManagedState
	}
	return ""
}

func (x *UpdateClusterRequest) GetArch() string {
	if x != nil && x.Arch != nil {
		return *x.Arch
	}
	return ""
}

func (x *UpdateClusterRequest) GetResponseType() string {
	if x != nil && x.ResponseType != nil {
		return *x.ResponseType
	}
	return ""
}

// UpdateClusterResponse represents the response from updates an existing cluster
type UpdateClusterResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Result
	Result        *Result `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateClusterResponse) Reset() {
	*x = UpdateClusterResponse{}
	mi := &file_cloudstack_management_cluster_v1_cluster_gen_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterResponse) ProtoMessage() {}

func (x *UpdateClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_cluster_v1_cluster_gen_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterResponse.ProtoReflect.Descriptor instead.
func (*UpdateClusterResponse) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_cluster_v1_cluster_gen_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateClusterResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

// Cluster represents a Cluster Item
type Cluster struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the Cluster
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The name of the Cluster
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// The display name of the Cluster
	DisplayName *string `protobuf:"bytes,3,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
	// The description of the Cluster
	Description *string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	// The date this entity was created
	Created       *string `protobuf:"bytes,5,opt,name=created" json:"created,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Cluster) Reset() {
	*x = Cluster{}
	mi := &file_cloudstack_management_cluster_v1_cluster_gen_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Cluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster) ProtoMessage() {}

func (x *Cluster) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_cluster_v1_cluster_gen_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster.ProtoReflect.Descriptor instead.
func (*Cluster) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_cluster_v1_cluster_gen_proto_rawDescGZIP(), []int{14}
}

func (x *Cluster) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Cluster) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Cluster) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *Cluster) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Cluster) GetCreated() string {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return ""
}

// ClusterDrsPlan represents a ClusterDrsPlan Item
type ClusterDrsPlan struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the ClusterDrsPlan
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The name of the ClusterDrsPlan
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// The display name of the ClusterDrsPlan
	DisplayName *string `protobuf:"bytes,3,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
	// The description of the ClusterDrsPlan
	Description *string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	// The date this entity was created
	Created       *string `protobuf:"bytes,5,opt,name=created" json:"created,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterDrsPlan) Reset() {
	*x = ClusterDrsPlan{}
	mi := &file_cloudstack_management_cluster_v1_cluster_gen_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterDrsPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterDrsPlan) ProtoMessage() {}

func (x *ClusterDrsPlan) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_cluster_v1_cluster_gen_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterDrsPlan.ProtoReflect.Descriptor instead.
func (*ClusterDrsPlan) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_cluster_v1_cluster_gen_proto_rawDescGZIP(), []int{15}
}

func (x *ClusterDrsPlan) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *ClusterDrsPlan) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ClusterDrsPlan) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *ClusterDrsPlan) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ClusterDrsPlan) GetCreated() string {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return ""
}

// Success represents a Success Operation Response
type Success struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// true if operation is executed successfully
	Success *bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	// any text associated with the success or failure
	DisplayText   *string `protobuf:"bytes,2,opt,name=display_text,json=displayText" json:"display_text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Success) Reset() {
	*x = Success{}
	mi := &file_cloudstack_management_cluster_v1_cluster_gen_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Success) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Success) ProtoMessage() {}

func (x *Success) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_cluster_v1_cluster_gen_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Success.ProtoReflect.Descriptor instead.
func (*Success) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_cluster_v1_cluster_gen_proto_rawDescGZIP(), []int{16}
}

func (x *Success) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *Success) GetDisplayText() string {
	if x != nil && x.DisplayText != nil {
		return *x.DisplayText
	}
	return ""
}

// Result represents a generic operation result
type Result struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether the operation was successful
	Success *bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	// Any text associated with the success or failure
	DisplayText *string `protobuf:"bytes,2,opt,name=display_text,json=displayText" json:"display_text,omitempty"`
	// The ID of the resource affected by the operation
	Id *string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	// The job ID for an async operation
	JobId *string `protobuf:"bytes,4,opt,name=job_id,json=jobId" json:"job_id,omitempty"`
	// The status of the job
	JobStatus     *string `protobuf:"bytes,5,opt,name=job_status,json=jobStatus" json:"job_status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Result) Reset() {
	*x = Result{}
	mi := &file_cloudstack_management_cluster_v1_cluster_gen_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_cluster_v1_cluster_gen_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_cluster_v1_cluster_gen_proto_rawDescGZIP(), []int{17}
}

func (x *Result) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *Result) GetDisplayText() string {
	if x != nil && x.DisplayText != nil {
		return *x.DisplayText
	}
	return ""
}

func (x *Result) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Result) GetJobId() string {
	if x != nil && x.JobId != nil {
		return *x.JobId
	}
	return ""
}

func (x *Result) GetJobStatus() string {
	if x != nil && x.JobStatus != nil {
		return *x.JobStatus
	}
	return ""
}

var File_cloudstack_management_cluster_v1_cluster_gen_proto protoreflect.FileDescriptor

const file_cloudstack_management_cluster_v1_cluster_gen_proto_rawDesc = "" +
	"\n" +
	"2cloudstack/management/cluster/v1/cluster.gen.proto\x12 cloudstack.management.cluster.v1\x1a\x1bbuf/validate/validate.proto\x1a(cloudstack/annotations/annotations.proto\x1a google/protobuf/descriptor.proto\"\x84\a\n" +
	"\x11AddClusterRequest\x120\n" +
	"\fcluster_name\x18\x01 \x01(\tB\r\xbaH\n" +
	"\xc8\x01\x01r\x05\x10\x01\x18\xff\x01R\vclusterName\x12\x1a\n" +
	"\bpassword\x18\x02 \x01(\tR\bpassword\x12\x1d\n" +
	"\x06pod_id\x18\x03 \x01(\x03B\x06\xbaH\x03\xc8\x01\x01R\x05podId\x12\x10\n" +
	"\x03url\x18\x04 \x01(\tR\x03url\x12&\n" +
	"\busername\x18\x05 \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x01\x18\xff\x01R\busername\x12\x1f\n" +
	"\azone_id\x18\x06 \x01(\x03B\x06\xbaH\x03\xc8\x01\x01R\x06zoneId\x12&\n" +
	"\n" +
	"hypervisor\x18\a \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\n" +
	"hypervisor\x12\x12\n" +
	"\x04arch\x18\b \x01(\tR\x04arch\x12)\n" +
	"\fcluster_type\x18\t \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\vclusterType\x12)\n" +
	"\x10allocation_state\x18\n" +
	" \x01(\tR\x0fallocationState\x12,\n" +
	"\vvsmusername\x18\v \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x01\x18\xff\x01R\vvsmusername\x12 \n" +
	"\vvsmpassword\x18\f \x01(\tR\vvsmpassword\x12+\n" +
	"\fvsmipaddress\x18\r \x01(\tB\a\xbaH\x04r\x02x\x01R\fvsmipaddress\x12<\n" +
	"\x1bv_switch_type_guest_traffic\x18\x0e \x01(\tR\x17vSwitchTypeGuestTraffic\x12>\n" +
	"\x1cv_switch_type_public_traffic\x18\x0f \x01(\tR\x18vSwitchTypePublicTraffic\x12H\n" +
	"\x1bv_switch_name_guest_traffic\x18\x10 \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x01\x18\xff\x01R\x17vSwitchNameGuestTraffic\x12J\n" +
	"\x1cv_switch_name_public_traffic\x18\x11 \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x01\x18\xff\x01R\x18vSwitchNamePublicTraffic\x12\x1a\n" +
	"\bovm3pool\x18\x12 \x01(\tR\bovm3pool\x12 \n" +
	"\vovm3cluster\x18\x13 \x01(\tR\vovm3cluster\x12!\n" +
	"\aovm3vip\x18\x14 \x01(\tB\a\xbaH\x04r\x02x\x01R\aovm3vip\x12#\n" +
	"\rresponse_type\x18\x15 \x01(\tR\fresponseType\"V\n" +
	"\x12AddClusterResponse\x12@\n" +
	"\x06result\x18\x01 \x01(\v2(.cloudstack.management.cluster.v1.ResultR\x06result\"S\n" +
	"\x14DeleteClusterRequest\x12\x16\n" +
	"\x02id\x18\x01 \x01(\x03B\x06\xbaH\x03\xc8\x01\x01R\x02id\x12#\n" +
	"\rresponse_type\x18\x02 \x01(\tR\fresponseType\"Y\n" +
	"\x15DeleteClusterResponse\x12@\n" +
	"\x06result\x18\x01 \x01(\v2(.cloudstack.management.cluster.v1.ResultR\x06result\"\xe8\x02\n" +
	"\x1cExecuteClusterDrsPlanRequest\x12\x16\n" +
	"\x02id\x18\x01 \x01(\x03B\x06\xbaH\x03\xc8\x01\x01R\x02id\x12s\n" +
	"\rmigrate_vm_to\x18\x02 \x03(\v2O.cloudstack.management.cluster.v1.ExecuteClusterDrsPlanRequest.MigrateVmToEntryR\vmigrateVmTo\x12$\n" +
	"\x0estart_event_id\x18\x03 \x01(\x03R\fstartEventId\x120\n" +
	"\x0finjected_job_id\x18\x04 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\rinjectedJobId\x12#\n" +
	"\rresponse_type\x18\x05 \x01(\tR\fresponseType\x1a>\n" +
	"\x10MigrateVmToEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"a\n" +
	"\x1dExecuteClusterDrsPlanResponse\x12@\n" +
	"\x06result\x18\x01 \x01(\v2(.cloudstack.management.cluster.v1.ResultR\x06result\"|\n" +
	"\x1dGenerateClusterDrsPlanRequest\x12\x16\n" +
	"\x02id\x18\x01 \x01(\x03B\x06\xbaH\x03\xc8\x01\x01R\x02id\x12\x1e\n" +
	"\n" +
	"migrations\x18\x02 \x01(\x05R\n" +
	"migrations\x12#\n" +
	"\rresponse_type\x18\x03 \x01(\tR\fresponseType\"b\n" +
	"\x1eGenerateClusterDrsPlanResponse\x12@\n" +
	"\x06result\x18\x01 \x01(\v2(.cloudstack.management.cluster.v1.ResultR\x06result\"\xba\x01\n" +
	"\x19ListClusterDrsPlanRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x02 \x01(\x03R\tclusterId\x12\x18\n" +
	"\akeyword\x18\x03 \x01(\tR\akeyword\x12\x12\n" +
	"\x04page\x18\x04 \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\x05 \x01(\x05R\bpageSize\x12#\n" +
	"\rresponse_type\x18\x06 \x01(\tR\fresponseType\"\x8c\x01\n" +
	"\x1aListClusterDrsPlanResponse\x12F\n" +
	"\x05items\x18\x01 \x03(\v20.cloudstack.management.cluster.v1.ClusterDrsPlanR\x05items\x12\x1f\n" +
	"\vtotal_count\x18\x02 \x01(\x05R\n" +
	"totalCount:\x05\xbaH\x02\b\x00\"\xc0\x03\n" +
	"\x13ListClustersRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12-\n" +
	"\fcluster_name\x18\x02 \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x01\x18\xff\x01R\vclusterName\x12\x15\n" +
	"\x06pod_id\x18\x03 \x01(\x03R\x05podId\x12\x17\n" +
	"\azone_id\x18\x04 \x01(\x03R\x06zoneId\x12'\n" +
	"\x0fhypervisor_type\x18\x05 \x01(\tR\x0ehypervisorType\x12!\n" +
	"\fcluster_type\x18\x06 \x01(\tR\vclusterType\x12)\n" +
	"\x10allocation_state\x18\a \x01(\tR\x0fallocationState\x12#\n" +
	"\rmanaged_state\x18\b \x01(\tR\fmanagedState\x12.\n" +
	"\x0fshow_capacities\x18\t \x01(\bB\x05\xaa\x01\x02\b\x01R\x0eshowCapacities\x12\x18\n" +
	"\akeyword\x18\n" +
	" \x01(\tR\akeyword\x12\x12\n" +
	"\x04page\x18\v \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\f \x01(\x05R\bpageSize\x12#\n" +
	"\rresponse_type\x18\r \x01(\tR\fresponseType\"\x7f\n" +
	"\x14ListClustersResponse\x12?\n" +
	"\x05items\x18\x01 \x03(\v2).cloudstack.management.cluster.v1.ClusterR\x05items\x12\x1f\n" +
	"\vtotal_count\x18\x02 \x01(\x05R\n" +
	"totalCount:\x05\xbaH\x02\b\x00\"\xa9\x02\n" +
	"\x14UpdateClusterRequest\x12\x16\n" +
	"\x02id\x18\x01 \x01(\x03B\x06\xbaH\x03\xc8\x01\x01R\x02id\x12-\n" +
	"\fcluster_name\x18\x02 \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x01\x18\xff\x01R\vclusterName\x12\x1e\n" +
	"\n" +
	"hypervisor\x18\x03 \x01(\tR\n" +
	"hypervisor\x12!\n" +
	"\fcluster_type\x18\x04 \x01(\tR\vclusterType\x12)\n" +
	"\x10allocation_state\x18\x05 \x01(\tR\x0fallocationState\x12#\n" +
	"\rmanaged_state\x18\x06 \x01(\tR\fmanagedState\x12\x12\n" +
	"\x04arch\x18\a \x01(\tR\x04arch\x12#\n" +
	"\rresponse_type\x18\b \x01(\tR\fresponseType\"Y\n" +
	"\x15UpdateClusterResponse\x12@\n" +
	"\x06result\x18\x01 \x01(\v2(.cloudstack.management.cluster.v1.ResultR\x06result\"\x96\x01\n" +
	"\aCluster\x12\x18\n" +
	"\x02id\x18\x01 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12!\n" +
	"\fdisplay_name\x18\x03 \x01(\tR\vdisplayName\x12 \n" +
	"\vdescription\x18\x04 \x01(\tR\vdescription\x12\x18\n" +
	"\acreated\x18\x05 \x01(\tR\acreated\"\x9d\x01\n" +
	"\x0eClusterDrsPlan\x12\x18\n" +
	"\x02id\x18\x01 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12!\n" +
	"\fdisplay_name\x18\x03 \x01(\tR\vdisplayName\x12 \n" +
	"\vdescription\x18\x04 \x01(\tR\vdescription\x12\x18\n" +
	"\acreated\x18\x05 \x01(\tR\acreated\"F\n" +
	"\aSuccess\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12!\n" +
	"\fdisplay_text\x18\x02 \x01(\tR\vdisplayText\"\x9f\x01\n" +
	"\x06Result\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12!\n" +
	"\fdisplay_text\x18\x02 \x01(\tR\vdisplayText\x12\x18\n" +
	"\x02id\x18\x03 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\x02id\x12\x1f\n" +
	"\x06job_id\x18\x04 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\x05jobId\x12\x1d\n" +
	"\n" +
	"job_status\x18\x05 \x01(\tR\tjobStatus2\xa4\b\n" +
	"\x0eClusterService\x12\x80\x01\n" +
	"\n" +
	"AddCluster\x123.cloudstack.management.cluster.v1.AddClusterRequest\x1a4.cloudstack.management.cluster.v1.AddClusterResponse\"\a\xc2>\x04\xc2>\x01\x02\x12\x89\x01\n" +
	"\rDeleteCluster\x126.cloudstack.management.cluster.v1.DeleteClusterRequest\x1a7.cloudstack.management.cluster.v1.DeleteClusterResponse\"\a\xc2>\x04\xc2>\x01\x02\x12\xa1\x01\n" +
	"\x15ExecuteClusterDrsPlan\x12>.cloudstack.management.cluster.v1.ExecuteClusterDrsPlanRequest\x1a?.cloudstack.management.cluster.v1.ExecuteClusterDrsPlanResponse\"\a\xc2>\x04\xc2>\x01\x02\x12\xa4\x01\n" +
	"\x16GenerateClusterDrsPlan\x12?.cloudstack.management.cluster.v1.GenerateClusterDrsPlanRequest\x1a@.cloudstack.management.cluster.v1.GenerateClusterDrsPlanResponse\"\a\xc2>\x04\xc2>\x01\x02\x12\x98\x01\n" +
	"\x12ListClusterDrsPlan\x12;.cloudstack.management.cluster.v1.ListClusterDrsPlanRequest\x1a<.cloudstack.management.cluster.v1.ListClusterDrsPlanResponse\"\a\xc2>\x04\xc2>\x01\x02\x12\x86\x01\n" +
	"\fListClusters\x125.cloudstack.management.cluster.v1.ListClustersRequest\x1a6.cloudstack.management.cluster.v1.ListClustersResponse\"\a\xc2>\x04\xc2>\x01\x02\x12\x89\x01\n" +
	"\rUpdateCluster\x126.cloudstack.management.cluster.v1.UpdateClusterRequest\x1a7.cloudstack.management.cluster.v1.UpdateClusterResponse\"\a\xc2>\x04\xc2>\x01\x02\x1a\b\xc2>\x05\xc2>\x02\x01\x02B\xba\x02\n" +
	"$com.cloudstack.management.cluster.v1B\x0fClusterGenProtoP\x01Z^github.com/walteh/cloudstack-proxy/gen/proto/golang/cloudstack/management/cluster/v1;clusterv1\xa2\x02\x03CMC\xaa\x02 Cloudstack.Management.Cluster.V1\xca\x02 Cloudstack\\Management\\Cluster\\V1\xe2\x02,Cloudstack\\Management\\Cluster\\V1\\GPBMetadata\xea\x02#Cloudstack::Management::Cluster::V1b\beditionsp\xe8\a"

var (
	file_cloudstack_management_cluster_v1_cluster_gen_proto_rawDescOnce sync.Once
	file_cloudstack_management_cluster_v1_cluster_gen_proto_rawDescData []byte
)

func file_cloudstack_management_cluster_v1_cluster_gen_proto_rawDescGZIP() []byte {
	file_cloudstack_management_cluster_v1_cluster_gen_proto_rawDescOnce.Do(func() {
		file_cloudstack_management_cluster_v1_cluster_gen_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_cloudstack_management_cluster_v1_cluster_gen_proto_rawDesc), len(file_cloudstack_management_cluster_v1_cluster_gen_proto_rawDesc)))
	})
	return file_cloudstack_management_cluster_v1_cluster_gen_proto_rawDescData
}

var file_cloudstack_management_cluster_v1_cluster_gen_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_cloudstack_management_cluster_v1_cluster_gen_proto_goTypes = []any{
	(*AddClusterRequest)(nil),              // 0: cloudstack.management.cluster.v1.AddClusterRequest
	(*AddClusterResponse)(nil),             // 1: cloudstack.management.cluster.v1.AddClusterResponse
	(*DeleteClusterRequest)(nil),           // 2: cloudstack.management.cluster.v1.DeleteClusterRequest
	(*DeleteClusterResponse)(nil),          // 3: cloudstack.management.cluster.v1.DeleteClusterResponse
	(*ExecuteClusterDrsPlanRequest)(nil),   // 4: cloudstack.management.cluster.v1.ExecuteClusterDrsPlanRequest
	(*ExecuteClusterDrsPlanResponse)(nil),  // 5: cloudstack.management.cluster.v1.ExecuteClusterDrsPlanResponse
	(*GenerateClusterDrsPlanRequest)(nil),  // 6: cloudstack.management.cluster.v1.GenerateClusterDrsPlanRequest
	(*GenerateClusterDrsPlanResponse)(nil), // 7: cloudstack.management.cluster.v1.GenerateClusterDrsPlanResponse
	(*ListClusterDrsPlanRequest)(nil),      // 8: cloudstack.management.cluster.v1.ListClusterDrsPlanRequest
	(*ListClusterDrsPlanResponse)(nil),     // 9: cloudstack.management.cluster.v1.ListClusterDrsPlanResponse
	(*ListClustersRequest)(nil),            // 10: cloudstack.management.cluster.v1.ListClustersRequest
	(*ListClustersResponse)(nil),           // 11: cloudstack.management.cluster.v1.ListClustersResponse
	(*UpdateClusterRequest)(nil),           // 12: cloudstack.management.cluster.v1.UpdateClusterRequest
	(*UpdateClusterResponse)(nil),          // 13: cloudstack.management.cluster.v1.UpdateClusterResponse
	(*Cluster)(nil),                        // 14: cloudstack.management.cluster.v1.Cluster
	(*ClusterDrsPlan)(nil),                 // 15: cloudstack.management.cluster.v1.ClusterDrsPlan
	(*Success)(nil),                        // 16: cloudstack.management.cluster.v1.Success
	(*Result)(nil),                         // 17: cloudstack.management.cluster.v1.Result
	nil,                                    // 18: cloudstack.management.cluster.v1.ExecuteClusterDrsPlanRequest.MigrateVmToEntry
}
var file_cloudstack_management_cluster_v1_cluster_gen_proto_depIdxs = []int32{
	17, // 0: cloudstack.management.cluster.v1.AddClusterResponse.result:type_name -> cloudstack.management.cluster.v1.Result
	17, // 1: cloudstack.management.cluster.v1.DeleteClusterResponse.result:type_name -> cloudstack.management.cluster.v1.Result
	18, // 2: cloudstack.management.cluster.v1.ExecuteClusterDrsPlanRequest.migrate_vm_to:type_name -> cloudstack.management.cluster.v1.ExecuteClusterDrsPlanRequest.MigrateVmToEntry
	17, // 3: cloudstack.management.cluster.v1.ExecuteClusterDrsPlanResponse.result:type_name -> cloudstack.management.cluster.v1.Result
	17, // 4: cloudstack.management.cluster.v1.GenerateClusterDrsPlanResponse.result:type_name -> cloudstack.management.cluster.v1.Result
	15, // 5: cloudstack.management.cluster.v1.ListClusterDrsPlanResponse.items:type_name -> cloudstack.management.cluster.v1.ClusterDrsPlan
	14, // 6: cloudstack.management.cluster.v1.ListClustersResponse.items:type_name -> cloudstack.management.cluster.v1.Cluster
	17, // 7: cloudstack.management.cluster.v1.UpdateClusterResponse.result:type_name -> cloudstack.management.cluster.v1.Result
	0,  // 8: cloudstack.management.cluster.v1.ClusterService.AddCluster:input_type -> cloudstack.management.cluster.v1.AddClusterRequest
	2,  // 9: cloudstack.management.cluster.v1.ClusterService.DeleteCluster:input_type -> cloudstack.management.cluster.v1.DeleteClusterRequest
	4,  // 10: cloudstack.management.cluster.v1.ClusterService.ExecuteClusterDrsPlan:input_type -> cloudstack.management.cluster.v1.ExecuteClusterDrsPlanRequest
	6,  // 11: cloudstack.management.cluster.v1.ClusterService.GenerateClusterDrsPlan:input_type -> cloudstack.management.cluster.v1.GenerateClusterDrsPlanRequest
	8,  // 12: cloudstack.management.cluster.v1.ClusterService.ListClusterDrsPlan:input_type -> cloudstack.management.cluster.v1.ListClusterDrsPlanRequest
	10, // 13: cloudstack.management.cluster.v1.ClusterService.ListClusters:input_type -> cloudstack.management.cluster.v1.ListClustersRequest
	12, // 14: cloudstack.management.cluster.v1.ClusterService.UpdateCluster:input_type -> cloudstack.management.cluster.v1.UpdateClusterRequest
	1,  // 15: cloudstack.management.cluster.v1.ClusterService.AddCluster:output_type -> cloudstack.management.cluster.v1.AddClusterResponse
	3,  // 16: cloudstack.management.cluster.v1.ClusterService.DeleteCluster:output_type -> cloudstack.management.cluster.v1.DeleteClusterResponse
	5,  // 17: cloudstack.management.cluster.v1.ClusterService.ExecuteClusterDrsPlan:output_type -> cloudstack.management.cluster.v1.ExecuteClusterDrsPlanResponse
	7,  // 18: cloudstack.management.cluster.v1.ClusterService.GenerateClusterDrsPlan:output_type -> cloudstack.management.cluster.v1.GenerateClusterDrsPlanResponse
	9,  // 19: cloudstack.management.cluster.v1.ClusterService.ListClusterDrsPlan:output_type -> cloudstack.management.cluster.v1.ListClusterDrsPlanResponse
	11, // 20: cloudstack.management.cluster.v1.ClusterService.ListClusters:output_type -> cloudstack.management.cluster.v1.ListClustersResponse
	13, // 21: cloudstack.management.cluster.v1.ClusterService.UpdateCluster:output_type -> cloudstack.management.cluster.v1.UpdateClusterResponse
	15, // [15:22] is the sub-list for method output_type
	8,  // [8:15] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_cloudstack_management_cluster_v1_cluster_gen_proto_init() }
func file_cloudstack_management_cluster_v1_cluster_gen_proto_init() {
	if File_cloudstack_management_cluster_v1_cluster_gen_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_cloudstack_management_cluster_v1_cluster_gen_proto_rawDesc), len(file_cloudstack_management_cluster_v1_cluster_gen_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cloudstack_management_cluster_v1_cluster_gen_proto_goTypes,
		DependencyIndexes: file_cloudstack_management_cluster_v1_cluster_gen_proto_depIdxs,
		MessageInfos:      file_cloudstack_management_cluster_v1_cluster_gen_proto_msgTypes,
	}.Build()
	File_cloudstack_management_cluster_v1_cluster_gen_proto = out.File
	file_cloudstack_management_cluster_v1_cluster_gen_proto_goTypes = nil
	file_cloudstack_management_cluster_v1_cluster_gen_proto_depIdxs = nil
}
