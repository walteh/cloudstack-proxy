// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: cloudstack/management/ipv6/v1/ipv6.gen.proto

package ipv6v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Ipv6Service_CreateIpv6FirewallRule_FullMethodName = "/cloudstack.management.ipv6.v1.Ipv6Service/CreateIpv6FirewallRule"
	Ipv6Service_DeleteIpv6FirewallRule_FullMethodName = "/cloudstack.management.ipv6.v1.Ipv6Service/DeleteIpv6FirewallRule"
	Ipv6Service_ListIpv6FirewallRules_FullMethodName  = "/cloudstack.management.ipv6.v1.Ipv6Service/ListIpv6FirewallRules"
	Ipv6Service_UpdateIpv6FirewallRule_FullMethodName = "/cloudstack.management.ipv6.v1.Ipv6Service/UpdateIpv6FirewallRule"
)

// Ipv6ServiceClient is the client API for Ipv6Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Ipv6Service provides operations for managing Ipv6s
type Ipv6ServiceClient interface {
	// CreateIpv6FirewallRule Creates an Ipv6 firewall rule in the given network (the network must not belong to VPC)
	CreateIpv6FirewallRule(ctx context.Context, in *CreateIpv6FirewallRuleRequest, opts ...grpc.CallOption) (*CreateIpv6FirewallRuleResponse, error)
	// DeleteIpv6FirewallRule Deletes a IPv6 firewall rule
	DeleteIpv6FirewallRule(ctx context.Context, in *DeleteIpv6FirewallRuleRequest, opts ...grpc.CallOption) (*DeleteIpv6FirewallRuleResponse, error)
	// ListIpv6FirewallRules Lists all IPv6 firewall rules
	ListIpv6FirewallRules(ctx context.Context, in *ListIpv6FirewallRulesRequest, opts ...grpc.CallOption) (*ListIpv6FirewallRulesResponse, error)
	// UpdateIpv6FirewallRule Updates Ipv6 firewall rule with specified ID
	UpdateIpv6FirewallRule(ctx context.Context, in *UpdateIpv6FirewallRuleRequest, opts ...grpc.CallOption) (*UpdateIpv6FirewallRuleResponse, error)
}

type ipv6ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIpv6ServiceClient(cc grpc.ClientConnInterface) Ipv6ServiceClient {
	return &ipv6ServiceClient{cc}
}

func (c *ipv6ServiceClient) CreateIpv6FirewallRule(ctx context.Context, in *CreateIpv6FirewallRuleRequest, opts ...grpc.CallOption) (*CreateIpv6FirewallRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateIpv6FirewallRuleResponse)
	err := c.cc.Invoke(ctx, Ipv6Service_CreateIpv6FirewallRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipv6ServiceClient) DeleteIpv6FirewallRule(ctx context.Context, in *DeleteIpv6FirewallRuleRequest, opts ...grpc.CallOption) (*DeleteIpv6FirewallRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteIpv6FirewallRuleResponse)
	err := c.cc.Invoke(ctx, Ipv6Service_DeleteIpv6FirewallRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipv6ServiceClient) ListIpv6FirewallRules(ctx context.Context, in *ListIpv6FirewallRulesRequest, opts ...grpc.CallOption) (*ListIpv6FirewallRulesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListIpv6FirewallRulesResponse)
	err := c.cc.Invoke(ctx, Ipv6Service_ListIpv6FirewallRules_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipv6ServiceClient) UpdateIpv6FirewallRule(ctx context.Context, in *UpdateIpv6FirewallRuleRequest, opts ...grpc.CallOption) (*UpdateIpv6FirewallRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateIpv6FirewallRuleResponse)
	err := c.cc.Invoke(ctx, Ipv6Service_UpdateIpv6FirewallRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Ipv6ServiceServer is the server API for Ipv6Service service.
// All implementations must embed UnimplementedIpv6ServiceServer
// for forward compatibility.
//
// Ipv6Service provides operations for managing Ipv6s
type Ipv6ServiceServer interface {
	// CreateIpv6FirewallRule Creates an Ipv6 firewall rule in the given network (the network must not belong to VPC)
	CreateIpv6FirewallRule(context.Context, *CreateIpv6FirewallRuleRequest) (*CreateIpv6FirewallRuleResponse, error)
	// DeleteIpv6FirewallRule Deletes a IPv6 firewall rule
	DeleteIpv6FirewallRule(context.Context, *DeleteIpv6FirewallRuleRequest) (*DeleteIpv6FirewallRuleResponse, error)
	// ListIpv6FirewallRules Lists all IPv6 firewall rules
	ListIpv6FirewallRules(context.Context, *ListIpv6FirewallRulesRequest) (*ListIpv6FirewallRulesResponse, error)
	// UpdateIpv6FirewallRule Updates Ipv6 firewall rule with specified ID
	UpdateIpv6FirewallRule(context.Context, *UpdateIpv6FirewallRuleRequest) (*UpdateIpv6FirewallRuleResponse, error)
	mustEmbedUnimplementedIpv6ServiceServer()
}

// UnimplementedIpv6ServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIpv6ServiceServer struct{}

func (UnimplementedIpv6ServiceServer) CreateIpv6FirewallRule(context.Context, *CreateIpv6FirewallRuleRequest) (*CreateIpv6FirewallRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIpv6FirewallRule not implemented")
}
func (UnimplementedIpv6ServiceServer) DeleteIpv6FirewallRule(context.Context, *DeleteIpv6FirewallRuleRequest) (*DeleteIpv6FirewallRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIpv6FirewallRule not implemented")
}
func (UnimplementedIpv6ServiceServer) ListIpv6FirewallRules(context.Context, *ListIpv6FirewallRulesRequest) (*ListIpv6FirewallRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIpv6FirewallRules not implemented")
}
func (UnimplementedIpv6ServiceServer) UpdateIpv6FirewallRule(context.Context, *UpdateIpv6FirewallRuleRequest) (*UpdateIpv6FirewallRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIpv6FirewallRule not implemented")
}
func (UnimplementedIpv6ServiceServer) mustEmbedUnimplementedIpv6ServiceServer() {}
func (UnimplementedIpv6ServiceServer) testEmbeddedByValue()                     {}

// UnsafeIpv6ServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Ipv6ServiceServer will
// result in compilation errors.
type UnsafeIpv6ServiceServer interface {
	mustEmbedUnimplementedIpv6ServiceServer()
}

func RegisterIpv6ServiceServer(s grpc.ServiceRegistrar, srv Ipv6ServiceServer) {
	// If the following call pancis, it indicates UnimplementedIpv6ServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Ipv6Service_ServiceDesc, srv)
}

func _Ipv6Service_CreateIpv6FirewallRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIpv6FirewallRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Ipv6ServiceServer).CreateIpv6FirewallRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ipv6Service_CreateIpv6FirewallRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Ipv6ServiceServer).CreateIpv6FirewallRule(ctx, req.(*CreateIpv6FirewallRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ipv6Service_DeleteIpv6FirewallRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIpv6FirewallRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Ipv6ServiceServer).DeleteIpv6FirewallRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ipv6Service_DeleteIpv6FirewallRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Ipv6ServiceServer).DeleteIpv6FirewallRule(ctx, req.(*DeleteIpv6FirewallRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ipv6Service_ListIpv6FirewallRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIpv6FirewallRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Ipv6ServiceServer).ListIpv6FirewallRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ipv6Service_ListIpv6FirewallRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Ipv6ServiceServer).ListIpv6FirewallRules(ctx, req.(*ListIpv6FirewallRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ipv6Service_UpdateIpv6FirewallRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIpv6FirewallRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Ipv6ServiceServer).UpdateIpv6FirewallRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ipv6Service_UpdateIpv6FirewallRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Ipv6ServiceServer).UpdateIpv6FirewallRule(ctx, req.(*UpdateIpv6FirewallRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Ipv6Service_ServiceDesc is the grpc.ServiceDesc for Ipv6Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ipv6Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloudstack.management.ipv6.v1.Ipv6Service",
	HandlerType: (*Ipv6ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateIpv6FirewallRule",
			Handler:    _Ipv6Service_CreateIpv6FirewallRule_Handler,
		},
		{
			MethodName: "DeleteIpv6FirewallRule",
			Handler:    _Ipv6Service_DeleteIpv6FirewallRule_Handler,
		},
		{
			MethodName: "ListIpv6FirewallRules",
			Handler:    _Ipv6Service_ListIpv6FirewallRules_Handler,
		},
		{
			MethodName: "UpdateIpv6FirewallRule",
			Handler:    _Ipv6Service_UpdateIpv6FirewallRule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloudstack/management/ipv6/v1/ipv6.gen.proto",
}
