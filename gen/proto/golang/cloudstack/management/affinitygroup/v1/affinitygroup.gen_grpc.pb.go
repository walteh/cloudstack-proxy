// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: cloudstack/management/affinitygroup/v1/affinitygroup.gen.proto

package affinitygroupv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AffinitygroupService_CreateAffinityGroup_FullMethodName    = "/cloudstack.management.affinitygroup.v1.AffinitygroupService/CreateAffinityGroup"
	AffinitygroupService_DeleteAffinityGroup_FullMethodName    = "/cloudstack.management.affinitygroup.v1.AffinitygroupService/DeleteAffinityGroup"
	AffinitygroupService_UpdateVMAffinityGroup_FullMethodName  = "/cloudstack.management.affinitygroup.v1.AffinitygroupService/UpdateVMAffinityGroup"
	AffinitygroupService_ListAffinityGroupTypes_FullMethodName = "/cloudstack.management.affinitygroup.v1.AffinitygroupService/ListAffinityGroupTypes"
	AffinitygroupService_ListAffinityGroups_FullMethodName     = "/cloudstack.management.affinitygroup.v1.AffinitygroupService/ListAffinityGroups"
)

// AffinitygroupServiceClient is the client API for AffinitygroupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// AffinitygroupService provides operations for managing Affinitygroups
type AffinitygroupServiceClient interface {
	// CreateAffinityGroup Creates an affinity/anti-affinity group
	CreateAffinityGroup(ctx context.Context, in *CreateAffinityGroupRequest, opts ...grpc.CallOption) (*CreateAffinityGroupResponse, error)
	// DeleteAffinityGroup Deletes affinity group
	DeleteAffinityGroup(ctx context.Context, in *DeleteAffinityGroupRequest, opts ...grpc.CallOption) (*DeleteAffinityGroupResponse, error)
	// UpdateVMAffinityGroup Updates the affinity/anti-affinity group associations of a virtual machine. The VM has to be stopped and restarted for the new properties to take effect.
	UpdateVMAffinityGroup(ctx context.Context, in *UpdateVMAffinityGroupRequest, opts ...grpc.CallOption) (*UpdateVMAffinityGroupResponse, error)
	// ListAffinityGroupTypes Lists affinity group types available
	ListAffinityGroupTypes(ctx context.Context, in *ListAffinityGroupTypesRequest, opts ...grpc.CallOption) (*ListAffinityGroupTypesResponse, error)
	// ListAffinityGroups Lists affinity groups
	ListAffinityGroups(ctx context.Context, in *ListAffinityGroupsRequest, opts ...grpc.CallOption) (*ListAffinityGroupsResponse, error)
}

type affinitygroupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAffinitygroupServiceClient(cc grpc.ClientConnInterface) AffinitygroupServiceClient {
	return &affinitygroupServiceClient{cc}
}

func (c *affinitygroupServiceClient) CreateAffinityGroup(ctx context.Context, in *CreateAffinityGroupRequest, opts ...grpc.CallOption) (*CreateAffinityGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAffinityGroupResponse)
	err := c.cc.Invoke(ctx, AffinitygroupService_CreateAffinityGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *affinitygroupServiceClient) DeleteAffinityGroup(ctx context.Context, in *DeleteAffinityGroupRequest, opts ...grpc.CallOption) (*DeleteAffinityGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAffinityGroupResponse)
	err := c.cc.Invoke(ctx, AffinitygroupService_DeleteAffinityGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *affinitygroupServiceClient) UpdateVMAffinityGroup(ctx context.Context, in *UpdateVMAffinityGroupRequest, opts ...grpc.CallOption) (*UpdateVMAffinityGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateVMAffinityGroupResponse)
	err := c.cc.Invoke(ctx, AffinitygroupService_UpdateVMAffinityGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *affinitygroupServiceClient) ListAffinityGroupTypes(ctx context.Context, in *ListAffinityGroupTypesRequest, opts ...grpc.CallOption) (*ListAffinityGroupTypesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAffinityGroupTypesResponse)
	err := c.cc.Invoke(ctx, AffinitygroupService_ListAffinityGroupTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *affinitygroupServiceClient) ListAffinityGroups(ctx context.Context, in *ListAffinityGroupsRequest, opts ...grpc.CallOption) (*ListAffinityGroupsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAffinityGroupsResponse)
	err := c.cc.Invoke(ctx, AffinitygroupService_ListAffinityGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AffinitygroupServiceServer is the server API for AffinitygroupService service.
// All implementations must embed UnimplementedAffinitygroupServiceServer
// for forward compatibility.
//
// AffinitygroupService provides operations for managing Affinitygroups
type AffinitygroupServiceServer interface {
	// CreateAffinityGroup Creates an affinity/anti-affinity group
	CreateAffinityGroup(context.Context, *CreateAffinityGroupRequest) (*CreateAffinityGroupResponse, error)
	// DeleteAffinityGroup Deletes affinity group
	DeleteAffinityGroup(context.Context, *DeleteAffinityGroupRequest) (*DeleteAffinityGroupResponse, error)
	// UpdateVMAffinityGroup Updates the affinity/anti-affinity group associations of a virtual machine. The VM has to be stopped and restarted for the new properties to take effect.
	UpdateVMAffinityGroup(context.Context, *UpdateVMAffinityGroupRequest) (*UpdateVMAffinityGroupResponse, error)
	// ListAffinityGroupTypes Lists affinity group types available
	ListAffinityGroupTypes(context.Context, *ListAffinityGroupTypesRequest) (*ListAffinityGroupTypesResponse, error)
	// ListAffinityGroups Lists affinity groups
	ListAffinityGroups(context.Context, *ListAffinityGroupsRequest) (*ListAffinityGroupsResponse, error)
	mustEmbedUnimplementedAffinitygroupServiceServer()
}

// UnimplementedAffinitygroupServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAffinitygroupServiceServer struct{}

func (UnimplementedAffinitygroupServiceServer) CreateAffinityGroup(context.Context, *CreateAffinityGroupRequest) (*CreateAffinityGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAffinityGroup not implemented")
}
func (UnimplementedAffinitygroupServiceServer) DeleteAffinityGroup(context.Context, *DeleteAffinityGroupRequest) (*DeleteAffinityGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAffinityGroup not implemented")
}
func (UnimplementedAffinitygroupServiceServer) UpdateVMAffinityGroup(context.Context, *UpdateVMAffinityGroupRequest) (*UpdateVMAffinityGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVMAffinityGroup not implemented")
}
func (UnimplementedAffinitygroupServiceServer) ListAffinityGroupTypes(context.Context, *ListAffinityGroupTypesRequest) (*ListAffinityGroupTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAffinityGroupTypes not implemented")
}
func (UnimplementedAffinitygroupServiceServer) ListAffinityGroups(context.Context, *ListAffinityGroupsRequest) (*ListAffinityGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAffinityGroups not implemented")
}
func (UnimplementedAffinitygroupServiceServer) mustEmbedUnimplementedAffinitygroupServiceServer() {}
func (UnimplementedAffinitygroupServiceServer) testEmbeddedByValue()                              {}

// UnsafeAffinitygroupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AffinitygroupServiceServer will
// result in compilation errors.
type UnsafeAffinitygroupServiceServer interface {
	mustEmbedUnimplementedAffinitygroupServiceServer()
}

func RegisterAffinitygroupServiceServer(s grpc.ServiceRegistrar, srv AffinitygroupServiceServer) {
	// If the following call pancis, it indicates UnimplementedAffinitygroupServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AffinitygroupService_ServiceDesc, srv)
}

func _AffinitygroupService_CreateAffinityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAffinityGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AffinitygroupServiceServer).CreateAffinityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AffinitygroupService_CreateAffinityGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AffinitygroupServiceServer).CreateAffinityGroup(ctx, req.(*CreateAffinityGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AffinitygroupService_DeleteAffinityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAffinityGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AffinitygroupServiceServer).DeleteAffinityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AffinitygroupService_DeleteAffinityGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AffinitygroupServiceServer).DeleteAffinityGroup(ctx, req.(*DeleteAffinityGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AffinitygroupService_UpdateVMAffinityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVMAffinityGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AffinitygroupServiceServer).UpdateVMAffinityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AffinitygroupService_UpdateVMAffinityGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AffinitygroupServiceServer).UpdateVMAffinityGroup(ctx, req.(*UpdateVMAffinityGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AffinitygroupService_ListAffinityGroupTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAffinityGroupTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AffinitygroupServiceServer).ListAffinityGroupTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AffinitygroupService_ListAffinityGroupTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AffinitygroupServiceServer).ListAffinityGroupTypes(ctx, req.(*ListAffinityGroupTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AffinitygroupService_ListAffinityGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAffinityGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AffinitygroupServiceServer).ListAffinityGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AffinitygroupService_ListAffinityGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AffinitygroupServiceServer).ListAffinityGroups(ctx, req.(*ListAffinityGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AffinitygroupService_ServiceDesc is the grpc.ServiceDesc for AffinitygroupService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AffinitygroupService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloudstack.management.affinitygroup.v1.AffinitygroupService",
	HandlerType: (*AffinitygroupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAffinityGroup",
			Handler:    _AffinitygroupService_CreateAffinityGroup_Handler,
		},
		{
			MethodName: "DeleteAffinityGroup",
			Handler:    _AffinitygroupService_DeleteAffinityGroup_Handler,
		},
		{
			MethodName: "UpdateVMAffinityGroup",
			Handler:    _AffinitygroupService_UpdateVMAffinityGroup_Handler,
		},
		{
			MethodName: "ListAffinityGroupTypes",
			Handler:    _AffinitygroupService_ListAffinityGroupTypes_Handler,
		},
		{
			MethodName: "ListAffinityGroups",
			Handler:    _AffinitygroupService_ListAffinityGroups_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloudstack/management/affinitygroup/v1/affinitygroup.gen.proto",
}
