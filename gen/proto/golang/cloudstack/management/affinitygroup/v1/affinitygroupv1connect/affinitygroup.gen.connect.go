// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cloudstack/management/affinitygroup/v1/affinitygroup.gen.proto

package affinitygroupv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/walteh/cloudstack-proxy/gen/proto/golang/cloudstack/management/affinitygroup/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AffinitygroupServiceName is the fully-qualified name of the AffinitygroupService service.
	AffinitygroupServiceName = "cloudstack.management.affinitygroup.v1.AffinitygroupService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AffinitygroupServiceUpdateVMAffinityGroupProcedure is the fully-qualified name of the
	// AffinitygroupService's UpdateVMAffinityGroup RPC.
	AffinitygroupServiceUpdateVMAffinityGroupProcedure = "/cloudstack.management.affinitygroup.v1.AffinitygroupService/UpdateVMAffinityGroup"
	// AffinitygroupServiceDeleteAffinityGroupProcedure is the fully-qualified name of the
	// AffinitygroupService's DeleteAffinityGroup RPC.
	AffinitygroupServiceDeleteAffinityGroupProcedure = "/cloudstack.management.affinitygroup.v1.AffinitygroupService/DeleteAffinityGroup"
	// AffinitygroupServiceListAffinityGroupTypesProcedure is the fully-qualified name of the
	// AffinitygroupService's ListAffinityGroupTypes RPC.
	AffinitygroupServiceListAffinityGroupTypesProcedure = "/cloudstack.management.affinitygroup.v1.AffinitygroupService/ListAffinityGroupTypes"
	// AffinitygroupServiceListAffinityGroupsProcedure is the fully-qualified name of the
	// AffinitygroupService's ListAffinityGroups RPC.
	AffinitygroupServiceListAffinityGroupsProcedure = "/cloudstack.management.affinitygroup.v1.AffinitygroupService/ListAffinityGroups"
	// AffinitygroupServiceCreateAffinityGroupProcedure is the fully-qualified name of the
	// AffinitygroupService's CreateAffinityGroup RPC.
	AffinitygroupServiceCreateAffinityGroupProcedure = "/cloudstack.management.affinitygroup.v1.AffinitygroupService/CreateAffinityGroup"
)

// AffinitygroupServiceClient is a client for the
// cloudstack.management.affinitygroup.v1.AffinitygroupService service.
type AffinitygroupServiceClient interface {
	// UpdateVMAffinityGroup Updates the affinity/anti-affinity group associations of a virtual machine. The VM has to be stopped and restarted for the new properties to take effect.
	UpdateVMAffinityGroup(context.Context, *connect.Request[v1.UpdateVMAffinityGroupRequest]) (*connect.Response[v1.UpdateVMAffinityGroupResponse], error)
	// DeleteAffinityGroup Deletes affinity group
	DeleteAffinityGroup(context.Context, *connect.Request[v1.DeleteAffinityGroupRequest]) (*connect.Response[v1.DeleteAffinityGroupResponse], error)
	// ListAffinityGroupTypes Lists affinity group types available
	ListAffinityGroupTypes(context.Context, *connect.Request[v1.ListAffinityGroupTypesRequest]) (*connect.Response[v1.ListAffinityGroupTypesResponse], error)
	// ListAffinityGroups Lists affinity groups
	ListAffinityGroups(context.Context, *connect.Request[v1.ListAffinityGroupsRequest]) (*connect.Response[v1.ListAffinityGroupsResponse], error)
	// CreateAffinityGroup Creates an affinity/anti-affinity group
	CreateAffinityGroup(context.Context, *connect.Request[v1.CreateAffinityGroupRequest]) (*connect.Response[v1.CreateAffinityGroupResponse], error)
}

// NewAffinitygroupServiceClient constructs a client for the
// cloudstack.management.affinitygroup.v1.AffinitygroupService service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAffinitygroupServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AffinitygroupServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	affinitygroupServiceMethods := v1.File_cloudstack_management_affinitygroup_v1_affinitygroup_gen_proto.Services().ByName("AffinitygroupService").Methods()
	return &affinitygroupServiceClient{
		updateVMAffinityGroup: connect.NewClient[v1.UpdateVMAffinityGroupRequest, v1.UpdateVMAffinityGroupResponse](
			httpClient,
			baseURL+AffinitygroupServiceUpdateVMAffinityGroupProcedure,
			connect.WithSchema(affinitygroupServiceMethods.ByName("UpdateVMAffinityGroup")),
			connect.WithClientOptions(opts...),
		),
		deleteAffinityGroup: connect.NewClient[v1.DeleteAffinityGroupRequest, v1.DeleteAffinityGroupResponse](
			httpClient,
			baseURL+AffinitygroupServiceDeleteAffinityGroupProcedure,
			connect.WithSchema(affinitygroupServiceMethods.ByName("DeleteAffinityGroup")),
			connect.WithClientOptions(opts...),
		),
		listAffinityGroupTypes: connect.NewClient[v1.ListAffinityGroupTypesRequest, v1.ListAffinityGroupTypesResponse](
			httpClient,
			baseURL+AffinitygroupServiceListAffinityGroupTypesProcedure,
			connect.WithSchema(affinitygroupServiceMethods.ByName("ListAffinityGroupTypes")),
			connect.WithClientOptions(opts...),
		),
		listAffinityGroups: connect.NewClient[v1.ListAffinityGroupsRequest, v1.ListAffinityGroupsResponse](
			httpClient,
			baseURL+AffinitygroupServiceListAffinityGroupsProcedure,
			connect.WithSchema(affinitygroupServiceMethods.ByName("ListAffinityGroups")),
			connect.WithClientOptions(opts...),
		),
		createAffinityGroup: connect.NewClient[v1.CreateAffinityGroupRequest, v1.CreateAffinityGroupResponse](
			httpClient,
			baseURL+AffinitygroupServiceCreateAffinityGroupProcedure,
			connect.WithSchema(affinitygroupServiceMethods.ByName("CreateAffinityGroup")),
			connect.WithClientOptions(opts...),
		),
	}
}

// affinitygroupServiceClient implements AffinitygroupServiceClient.
type affinitygroupServiceClient struct {
	updateVMAffinityGroup  *connect.Client[v1.UpdateVMAffinityGroupRequest, v1.UpdateVMAffinityGroupResponse]
	deleteAffinityGroup    *connect.Client[v1.DeleteAffinityGroupRequest, v1.DeleteAffinityGroupResponse]
	listAffinityGroupTypes *connect.Client[v1.ListAffinityGroupTypesRequest, v1.ListAffinityGroupTypesResponse]
	listAffinityGroups     *connect.Client[v1.ListAffinityGroupsRequest, v1.ListAffinityGroupsResponse]
	createAffinityGroup    *connect.Client[v1.CreateAffinityGroupRequest, v1.CreateAffinityGroupResponse]
}

// UpdateVMAffinityGroup calls
// cloudstack.management.affinitygroup.v1.AffinitygroupService.UpdateVMAffinityGroup.
func (c *affinitygroupServiceClient) UpdateVMAffinityGroup(ctx context.Context, req *connect.Request[v1.UpdateVMAffinityGroupRequest]) (*connect.Response[v1.UpdateVMAffinityGroupResponse], error) {
	return c.updateVMAffinityGroup.CallUnary(ctx, req)
}

// DeleteAffinityGroup calls
// cloudstack.management.affinitygroup.v1.AffinitygroupService.DeleteAffinityGroup.
func (c *affinitygroupServiceClient) DeleteAffinityGroup(ctx context.Context, req *connect.Request[v1.DeleteAffinityGroupRequest]) (*connect.Response[v1.DeleteAffinityGroupResponse], error) {
	return c.deleteAffinityGroup.CallUnary(ctx, req)
}

// ListAffinityGroupTypes calls
// cloudstack.management.affinitygroup.v1.AffinitygroupService.ListAffinityGroupTypes.
func (c *affinitygroupServiceClient) ListAffinityGroupTypes(ctx context.Context, req *connect.Request[v1.ListAffinityGroupTypesRequest]) (*connect.Response[v1.ListAffinityGroupTypesResponse], error) {
	return c.listAffinityGroupTypes.CallUnary(ctx, req)
}

// ListAffinityGroups calls
// cloudstack.management.affinitygroup.v1.AffinitygroupService.ListAffinityGroups.
func (c *affinitygroupServiceClient) ListAffinityGroups(ctx context.Context, req *connect.Request[v1.ListAffinityGroupsRequest]) (*connect.Response[v1.ListAffinityGroupsResponse], error) {
	return c.listAffinityGroups.CallUnary(ctx, req)
}

// CreateAffinityGroup calls
// cloudstack.management.affinitygroup.v1.AffinitygroupService.CreateAffinityGroup.
func (c *affinitygroupServiceClient) CreateAffinityGroup(ctx context.Context, req *connect.Request[v1.CreateAffinityGroupRequest]) (*connect.Response[v1.CreateAffinityGroupResponse], error) {
	return c.createAffinityGroup.CallUnary(ctx, req)
}

// AffinitygroupServiceHandler is an implementation of the
// cloudstack.management.affinitygroup.v1.AffinitygroupService service.
type AffinitygroupServiceHandler interface {
	// UpdateVMAffinityGroup Updates the affinity/anti-affinity group associations of a virtual machine. The VM has to be stopped and restarted for the new properties to take effect.
	UpdateVMAffinityGroup(context.Context, *connect.Request[v1.UpdateVMAffinityGroupRequest]) (*connect.Response[v1.UpdateVMAffinityGroupResponse], error)
	// DeleteAffinityGroup Deletes affinity group
	DeleteAffinityGroup(context.Context, *connect.Request[v1.DeleteAffinityGroupRequest]) (*connect.Response[v1.DeleteAffinityGroupResponse], error)
	// ListAffinityGroupTypes Lists affinity group types available
	ListAffinityGroupTypes(context.Context, *connect.Request[v1.ListAffinityGroupTypesRequest]) (*connect.Response[v1.ListAffinityGroupTypesResponse], error)
	// ListAffinityGroups Lists affinity groups
	ListAffinityGroups(context.Context, *connect.Request[v1.ListAffinityGroupsRequest]) (*connect.Response[v1.ListAffinityGroupsResponse], error)
	// CreateAffinityGroup Creates an affinity/anti-affinity group
	CreateAffinityGroup(context.Context, *connect.Request[v1.CreateAffinityGroupRequest]) (*connect.Response[v1.CreateAffinityGroupResponse], error)
}

// NewAffinitygroupServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAffinitygroupServiceHandler(svc AffinitygroupServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	affinitygroupServiceMethods := v1.File_cloudstack_management_affinitygroup_v1_affinitygroup_gen_proto.Services().ByName("AffinitygroupService").Methods()
	affinitygroupServiceUpdateVMAffinityGroupHandler := connect.NewUnaryHandler(
		AffinitygroupServiceUpdateVMAffinityGroupProcedure,
		svc.UpdateVMAffinityGroup,
		connect.WithSchema(affinitygroupServiceMethods.ByName("UpdateVMAffinityGroup")),
		connect.WithHandlerOptions(opts...),
	)
	affinitygroupServiceDeleteAffinityGroupHandler := connect.NewUnaryHandler(
		AffinitygroupServiceDeleteAffinityGroupProcedure,
		svc.DeleteAffinityGroup,
		connect.WithSchema(affinitygroupServiceMethods.ByName("DeleteAffinityGroup")),
		connect.WithHandlerOptions(opts...),
	)
	affinitygroupServiceListAffinityGroupTypesHandler := connect.NewUnaryHandler(
		AffinitygroupServiceListAffinityGroupTypesProcedure,
		svc.ListAffinityGroupTypes,
		connect.WithSchema(affinitygroupServiceMethods.ByName("ListAffinityGroupTypes")),
		connect.WithHandlerOptions(opts...),
	)
	affinitygroupServiceListAffinityGroupsHandler := connect.NewUnaryHandler(
		AffinitygroupServiceListAffinityGroupsProcedure,
		svc.ListAffinityGroups,
		connect.WithSchema(affinitygroupServiceMethods.ByName("ListAffinityGroups")),
		connect.WithHandlerOptions(opts...),
	)
	affinitygroupServiceCreateAffinityGroupHandler := connect.NewUnaryHandler(
		AffinitygroupServiceCreateAffinityGroupProcedure,
		svc.CreateAffinityGroup,
		connect.WithSchema(affinitygroupServiceMethods.ByName("CreateAffinityGroup")),
		connect.WithHandlerOptions(opts...),
	)
	return "/cloudstack.management.affinitygroup.v1.AffinitygroupService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AffinitygroupServiceUpdateVMAffinityGroupProcedure:
			affinitygroupServiceUpdateVMAffinityGroupHandler.ServeHTTP(w, r)
		case AffinitygroupServiceDeleteAffinityGroupProcedure:
			affinitygroupServiceDeleteAffinityGroupHandler.ServeHTTP(w, r)
		case AffinitygroupServiceListAffinityGroupTypesProcedure:
			affinitygroupServiceListAffinityGroupTypesHandler.ServeHTTP(w, r)
		case AffinitygroupServiceListAffinityGroupsProcedure:
			affinitygroupServiceListAffinityGroupsHandler.ServeHTTP(w, r)
		case AffinitygroupServiceCreateAffinityGroupProcedure:
			affinitygroupServiceCreateAffinityGroupHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAffinitygroupServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAffinitygroupServiceHandler struct{}

func (UnimplementedAffinitygroupServiceHandler) UpdateVMAffinityGroup(context.Context, *connect.Request[v1.UpdateVMAffinityGroupRequest]) (*connect.Response[v1.UpdateVMAffinityGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.affinitygroup.v1.AffinitygroupService.UpdateVMAffinityGroup is not implemented"))
}

func (UnimplementedAffinitygroupServiceHandler) DeleteAffinityGroup(context.Context, *connect.Request[v1.DeleteAffinityGroupRequest]) (*connect.Response[v1.DeleteAffinityGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.affinitygroup.v1.AffinitygroupService.DeleteAffinityGroup is not implemented"))
}

func (UnimplementedAffinitygroupServiceHandler) ListAffinityGroupTypes(context.Context, *connect.Request[v1.ListAffinityGroupTypesRequest]) (*connect.Response[v1.ListAffinityGroupTypesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.affinitygroup.v1.AffinitygroupService.ListAffinityGroupTypes is not implemented"))
}

func (UnimplementedAffinitygroupServiceHandler) ListAffinityGroups(context.Context, *connect.Request[v1.ListAffinityGroupsRequest]) (*connect.Response[v1.ListAffinityGroupsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.affinitygroup.v1.AffinitygroupService.ListAffinityGroups is not implemented"))
}

func (UnimplementedAffinitygroupServiceHandler) CreateAffinityGroup(context.Context, *connect.Request[v1.CreateAffinityGroupRequest]) (*connect.Response[v1.CreateAffinityGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.affinitygroup.v1.AffinitygroupService.CreateAffinityGroup is not implemented"))
}
