// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: cloudstack/management/userdata/v1/userdata.gen.proto

package userdatav1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserdataService_DeleteUserData_FullMethodName         = "/cloudstack.management.userdata.v1.UserdataService/DeleteUserData"
	UserdataService_ListUserData_FullMethodName           = "/cloudstack.management.userdata.v1.UserdataService/ListUserData"
	UserdataService_LinkUserDataToTemplate_FullMethodName = "/cloudstack.management.userdata.v1.UserdataService/LinkUserDataToTemplate"
	UserdataService_RegisterUserData_FullMethodName       = "/cloudstack.management.userdata.v1.UserdataService/RegisterUserData"
)

// UserdataServiceClient is the client API for UserdataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// UserdataService provides operations for managing Userdatas
type UserdataServiceClient interface {
	// DeleteUserData Deletes a userdata
	DeleteUserData(ctx context.Context, in *DeleteUserDataRequest, opts ...grpc.CallOption) (*DeleteUserDataResponse, error)
	// ListUserData List registered userdatas
	ListUserData(ctx context.Context, in *ListUserDataRequest, opts ...grpc.CallOption) (*ListUserDataResponse, error)
	// LinkUserDataToTemplate Link or unlink a userdata to a template.
	LinkUserDataToTemplate(ctx context.Context, in *LinkUserDataToTemplateRequest, opts ...grpc.CallOption) (*LinkUserDataToTemplateResponse, error)
	// RegisterUserData Register a new userdata.
	RegisterUserData(ctx context.Context, in *RegisterUserDataRequest, opts ...grpc.CallOption) (*RegisterUserDataResponse, error)
}

type userdataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserdataServiceClient(cc grpc.ClientConnInterface) UserdataServiceClient {
	return &userdataServiceClient{cc}
}

func (c *userdataServiceClient) DeleteUserData(ctx context.Context, in *DeleteUserDataRequest, opts ...grpc.CallOption) (*DeleteUserDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserDataResponse)
	err := c.cc.Invoke(ctx, UserdataService_DeleteUserData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userdataServiceClient) ListUserData(ctx context.Context, in *ListUserDataRequest, opts ...grpc.CallOption) (*ListUserDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserDataResponse)
	err := c.cc.Invoke(ctx, UserdataService_ListUserData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userdataServiceClient) LinkUserDataToTemplate(ctx context.Context, in *LinkUserDataToTemplateRequest, opts ...grpc.CallOption) (*LinkUserDataToTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LinkUserDataToTemplateResponse)
	err := c.cc.Invoke(ctx, UserdataService_LinkUserDataToTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userdataServiceClient) RegisterUserData(ctx context.Context, in *RegisterUserDataRequest, opts ...grpc.CallOption) (*RegisterUserDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterUserDataResponse)
	err := c.cc.Invoke(ctx, UserdataService_RegisterUserData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserdataServiceServer is the server API for UserdataService service.
// All implementations must embed UnimplementedUserdataServiceServer
// for forward compatibility.
//
// UserdataService provides operations for managing Userdatas
type UserdataServiceServer interface {
	// DeleteUserData Deletes a userdata
	DeleteUserData(context.Context, *DeleteUserDataRequest) (*DeleteUserDataResponse, error)
	// ListUserData List registered userdatas
	ListUserData(context.Context, *ListUserDataRequest) (*ListUserDataResponse, error)
	// LinkUserDataToTemplate Link or unlink a userdata to a template.
	LinkUserDataToTemplate(context.Context, *LinkUserDataToTemplateRequest) (*LinkUserDataToTemplateResponse, error)
	// RegisterUserData Register a new userdata.
	RegisterUserData(context.Context, *RegisterUserDataRequest) (*RegisterUserDataResponse, error)
	mustEmbedUnimplementedUserdataServiceServer()
}

// UnimplementedUserdataServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserdataServiceServer struct{}

func (UnimplementedUserdataServiceServer) DeleteUserData(context.Context, *DeleteUserDataRequest) (*DeleteUserDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserData not implemented")
}
func (UnimplementedUserdataServiceServer) ListUserData(context.Context, *ListUserDataRequest) (*ListUserDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserData not implemented")
}
func (UnimplementedUserdataServiceServer) LinkUserDataToTemplate(context.Context, *LinkUserDataToTemplateRequest) (*LinkUserDataToTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkUserDataToTemplate not implemented")
}
func (UnimplementedUserdataServiceServer) RegisterUserData(context.Context, *RegisterUserDataRequest) (*RegisterUserDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUserData not implemented")
}
func (UnimplementedUserdataServiceServer) mustEmbedUnimplementedUserdataServiceServer() {}
func (UnimplementedUserdataServiceServer) testEmbeddedByValue()                         {}

// UnsafeUserdataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserdataServiceServer will
// result in compilation errors.
type UnsafeUserdataServiceServer interface {
	mustEmbedUnimplementedUserdataServiceServer()
}

func RegisterUserdataServiceServer(s grpc.ServiceRegistrar, srv UserdataServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserdataServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserdataService_ServiceDesc, srv)
}

func _UserdataService_DeleteUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserdataServiceServer).DeleteUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserdataService_DeleteUserData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserdataServiceServer).DeleteUserData(ctx, req.(*DeleteUserDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserdataService_ListUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserdataServiceServer).ListUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserdataService_ListUserData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserdataServiceServer).ListUserData(ctx, req.(*ListUserDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserdataService_LinkUserDataToTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkUserDataToTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserdataServiceServer).LinkUserDataToTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserdataService_LinkUserDataToTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserdataServiceServer).LinkUserDataToTemplate(ctx, req.(*LinkUserDataToTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserdataService_RegisterUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserdataServiceServer).RegisterUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserdataService_RegisterUserData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserdataServiceServer).RegisterUserData(ctx, req.(*RegisterUserDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserdataService_ServiceDesc is the grpc.ServiceDesc for UserdataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserdataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloudstack.management.userdata.v1.UserdataService",
	HandlerType: (*UserdataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteUserData",
			Handler:    _UserdataService_DeleteUserData_Handler,
		},
		{
			MethodName: "ListUserData",
			Handler:    _UserdataService_ListUserData_Handler,
		},
		{
			MethodName: "LinkUserDataToTemplate",
			Handler:    _UserdataService_LinkUserDataToTemplate_Handler,
		},
		{
			MethodName: "RegisterUserData",
			Handler:    _UserdataService_RegisterUserData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloudstack/management/userdata/v1/userdata.gen.proto",
}
