// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: cloudstack/management/network/routing/v1/routing.gen.proto

package routingv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RoutingService_CreateRoutingFirewallRule_FullMethodName = "/cloudstack.management.network.routing.v1.RoutingService/CreateRoutingFirewallRule"
	RoutingService_DeleteRoutingFirewallRule_FullMethodName = "/cloudstack.management.network.routing.v1.RoutingService/DeleteRoutingFirewallRule"
	RoutingService_ListRoutingFirewallRules_FullMethodName  = "/cloudstack.management.network.routing.v1.RoutingService/ListRoutingFirewallRules"
	RoutingService_UpdateRoutingFirewallRule_FullMethodName = "/cloudstack.management.network.routing.v1.RoutingService/UpdateRoutingFirewallRule"
)

// RoutingServiceClient is the client API for RoutingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// RoutingService provides operations for managing Network.Routings
type RoutingServiceClient interface {
	// CreateRoutingFirewallRule Creates a routing firewall rule in the given network in ROUTED mode
	CreateRoutingFirewallRule(ctx context.Context, in *CreateRoutingFirewallRuleRequest, opts ...grpc.CallOption) (*CreateRoutingFirewallRuleResponse, error)
	// DeleteRoutingFirewallRule Deletes a routing firewall rule
	DeleteRoutingFirewallRule(ctx context.Context, in *DeleteRoutingFirewallRuleRequest, opts ...grpc.CallOption) (*DeleteRoutingFirewallRuleResponse, error)
	// ListRoutingFirewallRules Lists all Routing firewall rules
	ListRoutingFirewallRules(ctx context.Context, in *ListRoutingFirewallRulesRequest, opts ...grpc.CallOption) (*ListRoutingFirewallRulesResponse, error)
	// UpdateRoutingFirewallRule Updates Routing firewall rule with specified ID
	UpdateRoutingFirewallRule(ctx context.Context, in *UpdateRoutingFirewallRuleRequest, opts ...grpc.CallOption) (*UpdateRoutingFirewallRuleResponse, error)
}

type routingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoutingServiceClient(cc grpc.ClientConnInterface) RoutingServiceClient {
	return &routingServiceClient{cc}
}

func (c *routingServiceClient) CreateRoutingFirewallRule(ctx context.Context, in *CreateRoutingFirewallRuleRequest, opts ...grpc.CallOption) (*CreateRoutingFirewallRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRoutingFirewallRuleResponse)
	err := c.cc.Invoke(ctx, RoutingService_CreateRoutingFirewallRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingServiceClient) DeleteRoutingFirewallRule(ctx context.Context, in *DeleteRoutingFirewallRuleRequest, opts ...grpc.CallOption) (*DeleteRoutingFirewallRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRoutingFirewallRuleResponse)
	err := c.cc.Invoke(ctx, RoutingService_DeleteRoutingFirewallRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingServiceClient) ListRoutingFirewallRules(ctx context.Context, in *ListRoutingFirewallRulesRequest, opts ...grpc.CallOption) (*ListRoutingFirewallRulesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRoutingFirewallRulesResponse)
	err := c.cc.Invoke(ctx, RoutingService_ListRoutingFirewallRules_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingServiceClient) UpdateRoutingFirewallRule(ctx context.Context, in *UpdateRoutingFirewallRuleRequest, opts ...grpc.CallOption) (*UpdateRoutingFirewallRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRoutingFirewallRuleResponse)
	err := c.cc.Invoke(ctx, RoutingService_UpdateRoutingFirewallRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoutingServiceServer is the server API for RoutingService service.
// All implementations must embed UnimplementedRoutingServiceServer
// for forward compatibility.
//
// RoutingService provides operations for managing Network.Routings
type RoutingServiceServer interface {
	// CreateRoutingFirewallRule Creates a routing firewall rule in the given network in ROUTED mode
	CreateRoutingFirewallRule(context.Context, *CreateRoutingFirewallRuleRequest) (*CreateRoutingFirewallRuleResponse, error)
	// DeleteRoutingFirewallRule Deletes a routing firewall rule
	DeleteRoutingFirewallRule(context.Context, *DeleteRoutingFirewallRuleRequest) (*DeleteRoutingFirewallRuleResponse, error)
	// ListRoutingFirewallRules Lists all Routing firewall rules
	ListRoutingFirewallRules(context.Context, *ListRoutingFirewallRulesRequest) (*ListRoutingFirewallRulesResponse, error)
	// UpdateRoutingFirewallRule Updates Routing firewall rule with specified ID
	UpdateRoutingFirewallRule(context.Context, *UpdateRoutingFirewallRuleRequest) (*UpdateRoutingFirewallRuleResponse, error)
	mustEmbedUnimplementedRoutingServiceServer()
}

// UnimplementedRoutingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRoutingServiceServer struct{}

func (UnimplementedRoutingServiceServer) CreateRoutingFirewallRule(context.Context, *CreateRoutingFirewallRuleRequest) (*CreateRoutingFirewallRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoutingFirewallRule not implemented")
}
func (UnimplementedRoutingServiceServer) DeleteRoutingFirewallRule(context.Context, *DeleteRoutingFirewallRuleRequest) (*DeleteRoutingFirewallRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoutingFirewallRule not implemented")
}
func (UnimplementedRoutingServiceServer) ListRoutingFirewallRules(context.Context, *ListRoutingFirewallRulesRequest) (*ListRoutingFirewallRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoutingFirewallRules not implemented")
}
func (UnimplementedRoutingServiceServer) UpdateRoutingFirewallRule(context.Context, *UpdateRoutingFirewallRuleRequest) (*UpdateRoutingFirewallRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoutingFirewallRule not implemented")
}
func (UnimplementedRoutingServiceServer) mustEmbedUnimplementedRoutingServiceServer() {}
func (UnimplementedRoutingServiceServer) testEmbeddedByValue()                        {}

// UnsafeRoutingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoutingServiceServer will
// result in compilation errors.
type UnsafeRoutingServiceServer interface {
	mustEmbedUnimplementedRoutingServiceServer()
}

func RegisterRoutingServiceServer(s grpc.ServiceRegistrar, srv RoutingServiceServer) {
	// If the following call pancis, it indicates UnimplementedRoutingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RoutingService_ServiceDesc, srv)
}

func _RoutingService_CreateRoutingFirewallRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoutingFirewallRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingServiceServer).CreateRoutingFirewallRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutingService_CreateRoutingFirewallRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingServiceServer).CreateRoutingFirewallRule(ctx, req.(*CreateRoutingFirewallRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutingService_DeleteRoutingFirewallRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoutingFirewallRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingServiceServer).DeleteRoutingFirewallRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutingService_DeleteRoutingFirewallRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingServiceServer).DeleteRoutingFirewallRule(ctx, req.(*DeleteRoutingFirewallRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutingService_ListRoutingFirewallRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoutingFirewallRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingServiceServer).ListRoutingFirewallRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutingService_ListRoutingFirewallRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingServiceServer).ListRoutingFirewallRules(ctx, req.(*ListRoutingFirewallRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutingService_UpdateRoutingFirewallRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoutingFirewallRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingServiceServer).UpdateRoutingFirewallRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutingService_UpdateRoutingFirewallRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingServiceServer).UpdateRoutingFirewallRule(ctx, req.(*UpdateRoutingFirewallRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RoutingService_ServiceDesc is the grpc.ServiceDesc for RoutingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoutingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloudstack.management.network.routing.v1.RoutingService",
	HandlerType: (*RoutingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRoutingFirewallRule",
			Handler:    _RoutingService_CreateRoutingFirewallRule_Handler,
		},
		{
			MethodName: "DeleteRoutingFirewallRule",
			Handler:    _RoutingService_DeleteRoutingFirewallRule_Handler,
		},
		{
			MethodName: "ListRoutingFirewallRules",
			Handler:    _RoutingService_ListRoutingFirewallRules_Handler,
		},
		{
			MethodName: "UpdateRoutingFirewallRule",
			Handler:    _RoutingService_UpdateRoutingFirewallRule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloudstack/management/network/routing/v1/routing.gen.proto",
}
