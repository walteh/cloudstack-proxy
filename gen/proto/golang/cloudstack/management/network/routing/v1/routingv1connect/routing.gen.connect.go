// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cloudstack/management/network/routing/v1/routing.gen.proto

package routingv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/walteh/cloudstack-proxy/gen/proto/golang/cloudstack/management/network/routing/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RoutingServiceName is the fully-qualified name of the RoutingService service.
	RoutingServiceName = "cloudstack.management.network.routing.v1.RoutingService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RoutingServiceListRoutingFirewallRulesProcedure is the fully-qualified name of the
	// RoutingService's ListRoutingFirewallRules RPC.
	RoutingServiceListRoutingFirewallRulesProcedure = "/cloudstack.management.network.routing.v1.RoutingService/ListRoutingFirewallRules"
	// RoutingServiceCreateRoutingFirewallRuleProcedure is the fully-qualified name of the
	// RoutingService's CreateRoutingFirewallRule RPC.
	RoutingServiceCreateRoutingFirewallRuleProcedure = "/cloudstack.management.network.routing.v1.RoutingService/CreateRoutingFirewallRule"
	// RoutingServiceUpdateRoutingFirewallRuleProcedure is the fully-qualified name of the
	// RoutingService's UpdateRoutingFirewallRule RPC.
	RoutingServiceUpdateRoutingFirewallRuleProcedure = "/cloudstack.management.network.routing.v1.RoutingService/UpdateRoutingFirewallRule"
	// RoutingServiceDeleteRoutingFirewallRuleProcedure is the fully-qualified name of the
	// RoutingService's DeleteRoutingFirewallRule RPC.
	RoutingServiceDeleteRoutingFirewallRuleProcedure = "/cloudstack.management.network.routing.v1.RoutingService/DeleteRoutingFirewallRule"
)

// RoutingServiceClient is a client for the cloudstack.management.network.routing.v1.RoutingService
// service.
type RoutingServiceClient interface {
	// ListRoutingFirewallRules Lists all Routing firewall rules
	ListRoutingFirewallRules(context.Context, *connect.Request[v1.ListRoutingFirewallRulesRequest]) (*connect.Response[v1.ListRoutingFirewallRulesResponse], error)
	// CreateRoutingFirewallRule Creates a routing firewall rule in the given network in ROUTED mode
	CreateRoutingFirewallRule(context.Context, *connect.Request[v1.CreateRoutingFirewallRuleRequest]) (*connect.Response[v1.CreateRoutingFirewallRuleResponse], error)
	// UpdateRoutingFirewallRule Updates Routing firewall rule with specified ID
	UpdateRoutingFirewallRule(context.Context, *connect.Request[v1.UpdateRoutingFirewallRuleRequest]) (*connect.Response[v1.UpdateRoutingFirewallRuleResponse], error)
	// DeleteRoutingFirewallRule Deletes a routing firewall rule
	DeleteRoutingFirewallRule(context.Context, *connect.Request[v1.DeleteRoutingFirewallRuleRequest]) (*connect.Response[v1.DeleteRoutingFirewallRuleResponse], error)
}

// NewRoutingServiceClient constructs a client for the
// cloudstack.management.network.routing.v1.RoutingService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRoutingServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RoutingServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	routingServiceMethods := v1.File_cloudstack_management_network_routing_v1_routing_gen_proto.Services().ByName("RoutingService").Methods()
	return &routingServiceClient{
		listRoutingFirewallRules: connect.NewClient[v1.ListRoutingFirewallRulesRequest, v1.ListRoutingFirewallRulesResponse](
			httpClient,
			baseURL+RoutingServiceListRoutingFirewallRulesProcedure,
			connect.WithSchema(routingServiceMethods.ByName("ListRoutingFirewallRules")),
			connect.WithClientOptions(opts...),
		),
		createRoutingFirewallRule: connect.NewClient[v1.CreateRoutingFirewallRuleRequest, v1.CreateRoutingFirewallRuleResponse](
			httpClient,
			baseURL+RoutingServiceCreateRoutingFirewallRuleProcedure,
			connect.WithSchema(routingServiceMethods.ByName("CreateRoutingFirewallRule")),
			connect.WithClientOptions(opts...),
		),
		updateRoutingFirewallRule: connect.NewClient[v1.UpdateRoutingFirewallRuleRequest, v1.UpdateRoutingFirewallRuleResponse](
			httpClient,
			baseURL+RoutingServiceUpdateRoutingFirewallRuleProcedure,
			connect.WithSchema(routingServiceMethods.ByName("UpdateRoutingFirewallRule")),
			connect.WithClientOptions(opts...),
		),
		deleteRoutingFirewallRule: connect.NewClient[v1.DeleteRoutingFirewallRuleRequest, v1.DeleteRoutingFirewallRuleResponse](
			httpClient,
			baseURL+RoutingServiceDeleteRoutingFirewallRuleProcedure,
			connect.WithSchema(routingServiceMethods.ByName("DeleteRoutingFirewallRule")),
			connect.WithClientOptions(opts...),
		),
	}
}

// routingServiceClient implements RoutingServiceClient.
type routingServiceClient struct {
	listRoutingFirewallRules  *connect.Client[v1.ListRoutingFirewallRulesRequest, v1.ListRoutingFirewallRulesResponse]
	createRoutingFirewallRule *connect.Client[v1.CreateRoutingFirewallRuleRequest, v1.CreateRoutingFirewallRuleResponse]
	updateRoutingFirewallRule *connect.Client[v1.UpdateRoutingFirewallRuleRequest, v1.UpdateRoutingFirewallRuleResponse]
	deleteRoutingFirewallRule *connect.Client[v1.DeleteRoutingFirewallRuleRequest, v1.DeleteRoutingFirewallRuleResponse]
}

// ListRoutingFirewallRules calls
// cloudstack.management.network.routing.v1.RoutingService.ListRoutingFirewallRules.
func (c *routingServiceClient) ListRoutingFirewallRules(ctx context.Context, req *connect.Request[v1.ListRoutingFirewallRulesRequest]) (*connect.Response[v1.ListRoutingFirewallRulesResponse], error) {
	return c.listRoutingFirewallRules.CallUnary(ctx, req)
}

// CreateRoutingFirewallRule calls
// cloudstack.management.network.routing.v1.RoutingService.CreateRoutingFirewallRule.
func (c *routingServiceClient) CreateRoutingFirewallRule(ctx context.Context, req *connect.Request[v1.CreateRoutingFirewallRuleRequest]) (*connect.Response[v1.CreateRoutingFirewallRuleResponse], error) {
	return c.createRoutingFirewallRule.CallUnary(ctx, req)
}

// UpdateRoutingFirewallRule calls
// cloudstack.management.network.routing.v1.RoutingService.UpdateRoutingFirewallRule.
func (c *routingServiceClient) UpdateRoutingFirewallRule(ctx context.Context, req *connect.Request[v1.UpdateRoutingFirewallRuleRequest]) (*connect.Response[v1.UpdateRoutingFirewallRuleResponse], error) {
	return c.updateRoutingFirewallRule.CallUnary(ctx, req)
}

// DeleteRoutingFirewallRule calls
// cloudstack.management.network.routing.v1.RoutingService.DeleteRoutingFirewallRule.
func (c *routingServiceClient) DeleteRoutingFirewallRule(ctx context.Context, req *connect.Request[v1.DeleteRoutingFirewallRuleRequest]) (*connect.Response[v1.DeleteRoutingFirewallRuleResponse], error) {
	return c.deleteRoutingFirewallRule.CallUnary(ctx, req)
}

// RoutingServiceHandler is an implementation of the
// cloudstack.management.network.routing.v1.RoutingService service.
type RoutingServiceHandler interface {
	// ListRoutingFirewallRules Lists all Routing firewall rules
	ListRoutingFirewallRules(context.Context, *connect.Request[v1.ListRoutingFirewallRulesRequest]) (*connect.Response[v1.ListRoutingFirewallRulesResponse], error)
	// CreateRoutingFirewallRule Creates a routing firewall rule in the given network in ROUTED mode
	CreateRoutingFirewallRule(context.Context, *connect.Request[v1.CreateRoutingFirewallRuleRequest]) (*connect.Response[v1.CreateRoutingFirewallRuleResponse], error)
	// UpdateRoutingFirewallRule Updates Routing firewall rule with specified ID
	UpdateRoutingFirewallRule(context.Context, *connect.Request[v1.UpdateRoutingFirewallRuleRequest]) (*connect.Response[v1.UpdateRoutingFirewallRuleResponse], error)
	// DeleteRoutingFirewallRule Deletes a routing firewall rule
	DeleteRoutingFirewallRule(context.Context, *connect.Request[v1.DeleteRoutingFirewallRuleRequest]) (*connect.Response[v1.DeleteRoutingFirewallRuleResponse], error)
}

// NewRoutingServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRoutingServiceHandler(svc RoutingServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	routingServiceMethods := v1.File_cloudstack_management_network_routing_v1_routing_gen_proto.Services().ByName("RoutingService").Methods()
	routingServiceListRoutingFirewallRulesHandler := connect.NewUnaryHandler(
		RoutingServiceListRoutingFirewallRulesProcedure,
		svc.ListRoutingFirewallRules,
		connect.WithSchema(routingServiceMethods.ByName("ListRoutingFirewallRules")),
		connect.WithHandlerOptions(opts...),
	)
	routingServiceCreateRoutingFirewallRuleHandler := connect.NewUnaryHandler(
		RoutingServiceCreateRoutingFirewallRuleProcedure,
		svc.CreateRoutingFirewallRule,
		connect.WithSchema(routingServiceMethods.ByName("CreateRoutingFirewallRule")),
		connect.WithHandlerOptions(opts...),
	)
	routingServiceUpdateRoutingFirewallRuleHandler := connect.NewUnaryHandler(
		RoutingServiceUpdateRoutingFirewallRuleProcedure,
		svc.UpdateRoutingFirewallRule,
		connect.WithSchema(routingServiceMethods.ByName("UpdateRoutingFirewallRule")),
		connect.WithHandlerOptions(opts...),
	)
	routingServiceDeleteRoutingFirewallRuleHandler := connect.NewUnaryHandler(
		RoutingServiceDeleteRoutingFirewallRuleProcedure,
		svc.DeleteRoutingFirewallRule,
		connect.WithSchema(routingServiceMethods.ByName("DeleteRoutingFirewallRule")),
		connect.WithHandlerOptions(opts...),
	)
	return "/cloudstack.management.network.routing.v1.RoutingService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RoutingServiceListRoutingFirewallRulesProcedure:
			routingServiceListRoutingFirewallRulesHandler.ServeHTTP(w, r)
		case RoutingServiceCreateRoutingFirewallRuleProcedure:
			routingServiceCreateRoutingFirewallRuleHandler.ServeHTTP(w, r)
		case RoutingServiceUpdateRoutingFirewallRuleProcedure:
			routingServiceUpdateRoutingFirewallRuleHandler.ServeHTTP(w, r)
		case RoutingServiceDeleteRoutingFirewallRuleProcedure:
			routingServiceDeleteRoutingFirewallRuleHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRoutingServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRoutingServiceHandler struct{}

func (UnimplementedRoutingServiceHandler) ListRoutingFirewallRules(context.Context, *connect.Request[v1.ListRoutingFirewallRulesRequest]) (*connect.Response[v1.ListRoutingFirewallRulesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.network.routing.v1.RoutingService.ListRoutingFirewallRules is not implemented"))
}

func (UnimplementedRoutingServiceHandler) CreateRoutingFirewallRule(context.Context, *connect.Request[v1.CreateRoutingFirewallRuleRequest]) (*connect.Response[v1.CreateRoutingFirewallRuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.network.routing.v1.RoutingService.CreateRoutingFirewallRule is not implemented"))
}

func (UnimplementedRoutingServiceHandler) UpdateRoutingFirewallRule(context.Context, *connect.Request[v1.UpdateRoutingFirewallRuleRequest]) (*connect.Response[v1.UpdateRoutingFirewallRuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.network.routing.v1.RoutingService.UpdateRoutingFirewallRule is not implemented"))
}

func (UnimplementedRoutingServiceHandler) DeleteRoutingFirewallRule(context.Context, *connect.Request[v1.DeleteRoutingFirewallRuleRequest]) (*connect.Response[v1.DeleteRoutingFirewallRuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.network.routing.v1.RoutingService.DeleteRoutingFirewallRule is not implemented"))
}
