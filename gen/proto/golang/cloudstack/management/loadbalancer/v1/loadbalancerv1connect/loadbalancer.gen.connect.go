// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cloudstack/management/loadbalancer/v1/loadbalancer.gen.proto

package loadbalancerv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/walteh/cloudstack-proxy/gen/proto/golang/cloudstack/management/loadbalancer/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// LoadbalancerServiceName is the fully-qualified name of the LoadbalancerService service.
	LoadbalancerServiceName = "cloudstack.management.loadbalancer.v1.LoadbalancerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LoadbalancerServiceAssignCertToLoadBalancerProcedure is the fully-qualified name of the
	// LoadbalancerService's AssignCertToLoadBalancer RPC.
	LoadbalancerServiceAssignCertToLoadBalancerProcedure = "/cloudstack.management.loadbalancer.v1.LoadbalancerService/AssignCertToLoadBalancer"
	// LoadbalancerServiceAssignToLoadBalancerRuleProcedure is the fully-qualified name of the
	// LoadbalancerService's AssignToLoadBalancerRule RPC.
	LoadbalancerServiceAssignToLoadBalancerRuleProcedure = "/cloudstack.management.loadbalancer.v1.LoadbalancerService/AssignToLoadBalancerRule"
	// LoadbalancerServiceCreateApplicationLoadBalancerProcedure is the fully-qualified name of the
	// LoadbalancerService's CreateApplicationLoadBalancer RPC.
	LoadbalancerServiceCreateApplicationLoadBalancerProcedure = "/cloudstack.management.loadbalancer.v1.LoadbalancerService/CreateApplicationLoadBalancer"
	// LoadbalancerServiceCreateLBHealthCheckPolicyProcedure is the fully-qualified name of the
	// LoadbalancerService's CreateLBHealthCheckPolicy RPC.
	LoadbalancerServiceCreateLBHealthCheckPolicyProcedure = "/cloudstack.management.loadbalancer.v1.LoadbalancerService/CreateLBHealthCheckPolicy"
	// LoadbalancerServiceCreateLBStickinessPolicyProcedure is the fully-qualified name of the
	// LoadbalancerService's CreateLBStickinessPolicy RPC.
	LoadbalancerServiceCreateLBStickinessPolicyProcedure = "/cloudstack.management.loadbalancer.v1.LoadbalancerService/CreateLBStickinessPolicy"
	// LoadbalancerServiceCreateLoadBalancerRuleProcedure is the fully-qualified name of the
	// LoadbalancerService's CreateLoadBalancerRule RPC.
	LoadbalancerServiceCreateLoadBalancerRuleProcedure = "/cloudstack.management.loadbalancer.v1.LoadbalancerService/CreateLoadBalancerRule"
	// LoadbalancerServiceDeleteApplicationLoadBalancerProcedure is the fully-qualified name of the
	// LoadbalancerService's DeleteApplicationLoadBalancer RPC.
	LoadbalancerServiceDeleteApplicationLoadBalancerProcedure = "/cloudstack.management.loadbalancer.v1.LoadbalancerService/DeleteApplicationLoadBalancer"
	// LoadbalancerServiceDeleteLBHealthCheckPolicyProcedure is the fully-qualified name of the
	// LoadbalancerService's DeleteLBHealthCheckPolicy RPC.
	LoadbalancerServiceDeleteLBHealthCheckPolicyProcedure = "/cloudstack.management.loadbalancer.v1.LoadbalancerService/DeleteLBHealthCheckPolicy"
	// LoadbalancerServiceDeleteLBStickinessPolicyProcedure is the fully-qualified name of the
	// LoadbalancerService's DeleteLBStickinessPolicy RPC.
	LoadbalancerServiceDeleteLBStickinessPolicyProcedure = "/cloudstack.management.loadbalancer.v1.LoadbalancerService/DeleteLBStickinessPolicy"
	// LoadbalancerServiceDeleteLoadBalancerRuleProcedure is the fully-qualified name of the
	// LoadbalancerService's DeleteLoadBalancerRule RPC.
	LoadbalancerServiceDeleteLoadBalancerRuleProcedure = "/cloudstack.management.loadbalancer.v1.LoadbalancerService/DeleteLoadBalancerRule"
	// LoadbalancerServiceDeleteSslCertProcedure is the fully-qualified name of the
	// LoadbalancerService's DeleteSslCert RPC.
	LoadbalancerServiceDeleteSslCertProcedure = "/cloudstack.management.loadbalancer.v1.LoadbalancerService/DeleteSslCert"
	// LoadbalancerServiceListApplicationLoadBalancersProcedure is the fully-qualified name of the
	// LoadbalancerService's ListApplicationLoadBalancers RPC.
	LoadbalancerServiceListApplicationLoadBalancersProcedure = "/cloudstack.management.loadbalancer.v1.LoadbalancerService/ListApplicationLoadBalancers"
	// LoadbalancerServiceListLBHealthCheckPoliciesProcedure is the fully-qualified name of the
	// LoadbalancerService's ListLBHealthCheckPolicies RPC.
	LoadbalancerServiceListLBHealthCheckPoliciesProcedure = "/cloudstack.management.loadbalancer.v1.LoadbalancerService/ListLBHealthCheckPolicies"
	// LoadbalancerServiceListLBStickinessPoliciesProcedure is the fully-qualified name of the
	// LoadbalancerService's ListLBStickinessPolicies RPC.
	LoadbalancerServiceListLBStickinessPoliciesProcedure = "/cloudstack.management.loadbalancer.v1.LoadbalancerService/ListLBStickinessPolicies"
	// LoadbalancerServiceListLoadBalancerRuleInstancesProcedure is the fully-qualified name of the
	// LoadbalancerService's ListLoadBalancerRuleInstances RPC.
	LoadbalancerServiceListLoadBalancerRuleInstancesProcedure = "/cloudstack.management.loadbalancer.v1.LoadbalancerService/ListLoadBalancerRuleInstances"
	// LoadbalancerServiceListLoadBalancerRuleInstancesCmdByAdminProcedure is the fully-qualified name
	// of the LoadbalancerService's ListLoadBalancerRuleInstancesCmdByAdmin RPC.
	LoadbalancerServiceListLoadBalancerRuleInstancesCmdByAdminProcedure = "/cloudstack.management.loadbalancer.v1.LoadbalancerService/ListLoadBalancerRuleInstancesCmdByAdmin"
	// LoadbalancerServiceListLoadBalancerRulesProcedure is the fully-qualified name of the
	// LoadbalancerService's ListLoadBalancerRules RPC.
	LoadbalancerServiceListLoadBalancerRulesProcedure = "/cloudstack.management.loadbalancer.v1.LoadbalancerService/ListLoadBalancerRules"
	// LoadbalancerServiceListSslCertsProcedure is the fully-qualified name of the LoadbalancerService's
	// ListSslCerts RPC.
	LoadbalancerServiceListSslCertsProcedure = "/cloudstack.management.loadbalancer.v1.LoadbalancerService/ListSslCerts"
	// LoadbalancerServiceRemoveCertFromLoadBalancerProcedure is the fully-qualified name of the
	// LoadbalancerService's RemoveCertFromLoadBalancer RPC.
	LoadbalancerServiceRemoveCertFromLoadBalancerProcedure = "/cloudstack.management.loadbalancer.v1.LoadbalancerService/RemoveCertFromLoadBalancer"
	// LoadbalancerServiceRemoveFromLoadBalancerRuleProcedure is the fully-qualified name of the
	// LoadbalancerService's RemoveFromLoadBalancerRule RPC.
	LoadbalancerServiceRemoveFromLoadBalancerRuleProcedure = "/cloudstack.management.loadbalancer.v1.LoadbalancerService/RemoveFromLoadBalancerRule"
	// LoadbalancerServiceUpdateApplicationLoadBalancerProcedure is the fully-qualified name of the
	// LoadbalancerService's UpdateApplicationLoadBalancer RPC.
	LoadbalancerServiceUpdateApplicationLoadBalancerProcedure = "/cloudstack.management.loadbalancer.v1.LoadbalancerService/UpdateApplicationLoadBalancer"
	// LoadbalancerServiceUpdateLBHealthCheckPolicyProcedure is the fully-qualified name of the
	// LoadbalancerService's UpdateLBHealthCheckPolicy RPC.
	LoadbalancerServiceUpdateLBHealthCheckPolicyProcedure = "/cloudstack.management.loadbalancer.v1.LoadbalancerService/UpdateLBHealthCheckPolicy"
	// LoadbalancerServiceUpdateLBStickinessPolicyProcedure is the fully-qualified name of the
	// LoadbalancerService's UpdateLBStickinessPolicy RPC.
	LoadbalancerServiceUpdateLBStickinessPolicyProcedure = "/cloudstack.management.loadbalancer.v1.LoadbalancerService/UpdateLBStickinessPolicy"
	// LoadbalancerServiceUpdateLoadBalancerRuleProcedure is the fully-qualified name of the
	// LoadbalancerService's UpdateLoadBalancerRule RPC.
	LoadbalancerServiceUpdateLoadBalancerRuleProcedure = "/cloudstack.management.loadbalancer.v1.LoadbalancerService/UpdateLoadBalancerRule"
	// LoadbalancerServiceUploadSslCertProcedure is the fully-qualified name of the
	// LoadbalancerService's UploadSslCert RPC.
	LoadbalancerServiceUploadSslCertProcedure = "/cloudstack.management.loadbalancer.v1.LoadbalancerService/UploadSslCert"
)

// LoadbalancerServiceClient is a client for the
// cloudstack.management.loadbalancer.v1.LoadbalancerService service.
type LoadbalancerServiceClient interface {
	// AssignCertToLoadBalancer Assigns a certificate to a load balancer rule
	AssignCertToLoadBalancer(context.Context, *connect.Request[v1.AssignCertToLoadBalancerRequest]) (*connect.Response[v1.AssignCertToLoadBalancerResponse], error)
	// AssignToLoadBalancerRule Assigns virtual machine or a list of virtual machines to a load balancer rule.
	AssignToLoadBalancerRule(context.Context, *connect.Request[v1.AssignToLoadBalancerRuleRequest]) (*connect.Response[v1.AssignToLoadBalancerRuleResponse], error)
	// CreateApplicationLoadBalancer Creates an internal load balancer
	CreateApplicationLoadBalancer(context.Context, *connect.Request[v1.CreateApplicationLoadBalancerRequest]) (*connect.Response[v1.CreateApplicationLoadBalancerResponse], error)
	// CreateLBHealthCheckPolicy Creates a load balancer health check policy
	CreateLBHealthCheckPolicy(context.Context, *connect.Request[v1.CreateLBHealthCheckPolicyRequest]) (*connect.Response[v1.CreateLBHealthCheckPolicyResponse], error)
	// CreateLBStickinessPolicy Creates a load balancer stickiness policy
	CreateLBStickinessPolicy(context.Context, *connect.Request[v1.CreateLBStickinessPolicyRequest]) (*connect.Response[v1.CreateLBStickinessPolicyResponse], error)
	// CreateLoadBalancerRule Creates a load balancer rule
	CreateLoadBalancerRule(context.Context, *connect.Request[v1.CreateLoadBalancerRuleRequest]) (*connect.Response[v1.CreateLoadBalancerRuleResponse], error)
	// DeleteApplicationLoadBalancer Deletes an internal load balancer
	DeleteApplicationLoadBalancer(context.Context, *connect.Request[v1.DeleteApplicationLoadBalancerRequest]) (*connect.Response[v1.DeleteApplicationLoadBalancerResponse], error)
	// DeleteLBHealthCheckPolicy Deletes a load balancer health check policy.
	DeleteLBHealthCheckPolicy(context.Context, *connect.Request[v1.DeleteLBHealthCheckPolicyRequest]) (*connect.Response[v1.DeleteLBHealthCheckPolicyResponse], error)
	// DeleteLBStickinessPolicy Deletes a load balancer stickiness policy.
	DeleteLBStickinessPolicy(context.Context, *connect.Request[v1.DeleteLBStickinessPolicyRequest]) (*connect.Response[v1.DeleteLBStickinessPolicyResponse], error)
	// DeleteLoadBalancerRule Deletes a load balancer rule.
	DeleteLoadBalancerRule(context.Context, *connect.Request[v1.DeleteLoadBalancerRuleRequest]) (*connect.Response[v1.DeleteLoadBalancerRuleResponse], error)
	// DeleteSslCert Delete a certificate to CloudStack
	DeleteSslCert(context.Context, *connect.Request[v1.DeleteSslCertRequest]) (*connect.Response[v1.DeleteSslCertResponse], error)
	// ListApplicationLoadBalancers Lists internal load balancers
	ListApplicationLoadBalancers(context.Context, *connect.Request[v1.ListApplicationLoadBalancersRequest]) (*connect.Response[v1.ListApplicationLoadBalancersResponse], error)
	// ListLBHealthCheckPolicies Lists load balancer health check policies.
	ListLBHealthCheckPolicies(context.Context, *connect.Request[v1.ListLBHealthCheckPoliciesRequest]) (*connect.Response[v1.ListLBHealthCheckPoliciesResponse], error)
	// ListLBStickinessPolicies Lists load balancer stickiness policies.
	ListLBStickinessPolicies(context.Context, *connect.Request[v1.ListLBStickinessPoliciesRequest]) (*connect.Response[v1.ListLBStickinessPoliciesResponse], error)
	// ListLoadBalancerRuleInstances List all virtual machine instances that are assigned to a load balancer rule.
	ListLoadBalancerRuleInstances(context.Context, *connect.Request[v1.ListLoadBalancerRuleInstancesRequest]) (*connect.Response[v1.ListLoadBalancerRuleInstancesResponse], error)
	// ListLoadBalancerRuleInstancesCmdByAdmin List all virtual machine instances that are assigned to a load balancer rule.
	ListLoadBalancerRuleInstancesCmdByAdmin(context.Context, *connect.Request[v1.ListLoadBalancerRuleInstancesCmdByAdminRequest]) (*connect.Response[v1.ListLoadBalancerRuleInstancesCmdByAdminResponse], error)
	// ListLoadBalancerRules Lists load balancer rules.
	ListLoadBalancerRules(context.Context, *connect.Request[v1.ListLoadBalancerRulesRequest]) (*connect.Response[v1.ListLoadBalancerRulesResponse], error)
	// ListSslCerts Lists SSL certificates
	ListSslCerts(context.Context, *connect.Request[v1.ListSslCertsRequest]) (*connect.Response[v1.ListSslCertsResponse], error)
	// RemoveCertFromLoadBalancer Removes a certificate from a load balancer rule
	RemoveCertFromLoadBalancer(context.Context, *connect.Request[v1.RemoveCertFromLoadBalancerRequest]) (*connect.Response[v1.RemoveCertFromLoadBalancerResponse], error)
	// RemoveFromLoadBalancerRule Removes a virtual machine or a list of virtual machines from a load balancer rule.
	RemoveFromLoadBalancerRule(context.Context, *connect.Request[v1.RemoveFromLoadBalancerRuleRequest]) (*connect.Response[v1.RemoveFromLoadBalancerRuleResponse], error)
	// UpdateApplicationLoadBalancer Updates an internal load balancer
	UpdateApplicationLoadBalancer(context.Context, *connect.Request[v1.UpdateApplicationLoadBalancerRequest]) (*connect.Response[v1.UpdateApplicationLoadBalancerResponse], error)
	// UpdateLBHealthCheckPolicy Updates load balancer health check policy
	UpdateLBHealthCheckPolicy(context.Context, *connect.Request[v1.UpdateLBHealthCheckPolicyRequest]) (*connect.Response[v1.UpdateLBHealthCheckPolicyResponse], error)
	// UpdateLBStickinessPolicy Updates load balancer stickiness policy
	UpdateLBStickinessPolicy(context.Context, *connect.Request[v1.UpdateLBStickinessPolicyRequest]) (*connect.Response[v1.UpdateLBStickinessPolicyResponse], error)
	// UpdateLoadBalancerRule Updates load balancer
	UpdateLoadBalancerRule(context.Context, *connect.Request[v1.UpdateLoadBalancerRuleRequest]) (*connect.Response[v1.UpdateLoadBalancerRuleResponse], error)
	// UploadSslCert Upload a certificate to CloudStack
	UploadSslCert(context.Context, *connect.Request[v1.UploadSslCertRequest]) (*connect.Response[v1.UploadSslCertResponse], error)
}

// NewLoadbalancerServiceClient constructs a client for the
// cloudstack.management.loadbalancer.v1.LoadbalancerService service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLoadbalancerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) LoadbalancerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	loadbalancerServiceMethods := v1.File_cloudstack_management_loadbalancer_v1_loadbalancer_gen_proto.Services().ByName("LoadbalancerService").Methods()
	return &loadbalancerServiceClient{
		assignCertToLoadBalancer: connect.NewClient[v1.AssignCertToLoadBalancerRequest, v1.AssignCertToLoadBalancerResponse](
			httpClient,
			baseURL+LoadbalancerServiceAssignCertToLoadBalancerProcedure,
			connect.WithSchema(loadbalancerServiceMethods.ByName("AssignCertToLoadBalancer")),
			connect.WithClientOptions(opts...),
		),
		assignToLoadBalancerRule: connect.NewClient[v1.AssignToLoadBalancerRuleRequest, v1.AssignToLoadBalancerRuleResponse](
			httpClient,
			baseURL+LoadbalancerServiceAssignToLoadBalancerRuleProcedure,
			connect.WithSchema(loadbalancerServiceMethods.ByName("AssignToLoadBalancerRule")),
			connect.WithClientOptions(opts...),
		),
		createApplicationLoadBalancer: connect.NewClient[v1.CreateApplicationLoadBalancerRequest, v1.CreateApplicationLoadBalancerResponse](
			httpClient,
			baseURL+LoadbalancerServiceCreateApplicationLoadBalancerProcedure,
			connect.WithSchema(loadbalancerServiceMethods.ByName("CreateApplicationLoadBalancer")),
			connect.WithClientOptions(opts...),
		),
		createLBHealthCheckPolicy: connect.NewClient[v1.CreateLBHealthCheckPolicyRequest, v1.CreateLBHealthCheckPolicyResponse](
			httpClient,
			baseURL+LoadbalancerServiceCreateLBHealthCheckPolicyProcedure,
			connect.WithSchema(loadbalancerServiceMethods.ByName("CreateLBHealthCheckPolicy")),
			connect.WithClientOptions(opts...),
		),
		createLBStickinessPolicy: connect.NewClient[v1.CreateLBStickinessPolicyRequest, v1.CreateLBStickinessPolicyResponse](
			httpClient,
			baseURL+LoadbalancerServiceCreateLBStickinessPolicyProcedure,
			connect.WithSchema(loadbalancerServiceMethods.ByName("CreateLBStickinessPolicy")),
			connect.WithClientOptions(opts...),
		),
		createLoadBalancerRule: connect.NewClient[v1.CreateLoadBalancerRuleRequest, v1.CreateLoadBalancerRuleResponse](
			httpClient,
			baseURL+LoadbalancerServiceCreateLoadBalancerRuleProcedure,
			connect.WithSchema(loadbalancerServiceMethods.ByName("CreateLoadBalancerRule")),
			connect.WithClientOptions(opts...),
		),
		deleteApplicationLoadBalancer: connect.NewClient[v1.DeleteApplicationLoadBalancerRequest, v1.DeleteApplicationLoadBalancerResponse](
			httpClient,
			baseURL+LoadbalancerServiceDeleteApplicationLoadBalancerProcedure,
			connect.WithSchema(loadbalancerServiceMethods.ByName("DeleteApplicationLoadBalancer")),
			connect.WithClientOptions(opts...),
		),
		deleteLBHealthCheckPolicy: connect.NewClient[v1.DeleteLBHealthCheckPolicyRequest, v1.DeleteLBHealthCheckPolicyResponse](
			httpClient,
			baseURL+LoadbalancerServiceDeleteLBHealthCheckPolicyProcedure,
			connect.WithSchema(loadbalancerServiceMethods.ByName("DeleteLBHealthCheckPolicy")),
			connect.WithClientOptions(opts...),
		),
		deleteLBStickinessPolicy: connect.NewClient[v1.DeleteLBStickinessPolicyRequest, v1.DeleteLBStickinessPolicyResponse](
			httpClient,
			baseURL+LoadbalancerServiceDeleteLBStickinessPolicyProcedure,
			connect.WithSchema(loadbalancerServiceMethods.ByName("DeleteLBStickinessPolicy")),
			connect.WithClientOptions(opts...),
		),
		deleteLoadBalancerRule: connect.NewClient[v1.DeleteLoadBalancerRuleRequest, v1.DeleteLoadBalancerRuleResponse](
			httpClient,
			baseURL+LoadbalancerServiceDeleteLoadBalancerRuleProcedure,
			connect.WithSchema(loadbalancerServiceMethods.ByName("DeleteLoadBalancerRule")),
			connect.WithClientOptions(opts...),
		),
		deleteSslCert: connect.NewClient[v1.DeleteSslCertRequest, v1.DeleteSslCertResponse](
			httpClient,
			baseURL+LoadbalancerServiceDeleteSslCertProcedure,
			connect.WithSchema(loadbalancerServiceMethods.ByName("DeleteSslCert")),
			connect.WithClientOptions(opts...),
		),
		listApplicationLoadBalancers: connect.NewClient[v1.ListApplicationLoadBalancersRequest, v1.ListApplicationLoadBalancersResponse](
			httpClient,
			baseURL+LoadbalancerServiceListApplicationLoadBalancersProcedure,
			connect.WithSchema(loadbalancerServiceMethods.ByName("ListApplicationLoadBalancers")),
			connect.WithClientOptions(opts...),
		),
		listLBHealthCheckPolicies: connect.NewClient[v1.ListLBHealthCheckPoliciesRequest, v1.ListLBHealthCheckPoliciesResponse](
			httpClient,
			baseURL+LoadbalancerServiceListLBHealthCheckPoliciesProcedure,
			connect.WithSchema(loadbalancerServiceMethods.ByName("ListLBHealthCheckPolicies")),
			connect.WithClientOptions(opts...),
		),
		listLBStickinessPolicies: connect.NewClient[v1.ListLBStickinessPoliciesRequest, v1.ListLBStickinessPoliciesResponse](
			httpClient,
			baseURL+LoadbalancerServiceListLBStickinessPoliciesProcedure,
			connect.WithSchema(loadbalancerServiceMethods.ByName("ListLBStickinessPolicies")),
			connect.WithClientOptions(opts...),
		),
		listLoadBalancerRuleInstances: connect.NewClient[v1.ListLoadBalancerRuleInstancesRequest, v1.ListLoadBalancerRuleInstancesResponse](
			httpClient,
			baseURL+LoadbalancerServiceListLoadBalancerRuleInstancesProcedure,
			connect.WithSchema(loadbalancerServiceMethods.ByName("ListLoadBalancerRuleInstances")),
			connect.WithClientOptions(opts...),
		),
		listLoadBalancerRuleInstancesCmdByAdmin: connect.NewClient[v1.ListLoadBalancerRuleInstancesCmdByAdminRequest, v1.ListLoadBalancerRuleInstancesCmdByAdminResponse](
			httpClient,
			baseURL+LoadbalancerServiceListLoadBalancerRuleInstancesCmdByAdminProcedure,
			connect.WithSchema(loadbalancerServiceMethods.ByName("ListLoadBalancerRuleInstancesCmdByAdmin")),
			connect.WithClientOptions(opts...),
		),
		listLoadBalancerRules: connect.NewClient[v1.ListLoadBalancerRulesRequest, v1.ListLoadBalancerRulesResponse](
			httpClient,
			baseURL+LoadbalancerServiceListLoadBalancerRulesProcedure,
			connect.WithSchema(loadbalancerServiceMethods.ByName("ListLoadBalancerRules")),
			connect.WithClientOptions(opts...),
		),
		listSslCerts: connect.NewClient[v1.ListSslCertsRequest, v1.ListSslCertsResponse](
			httpClient,
			baseURL+LoadbalancerServiceListSslCertsProcedure,
			connect.WithSchema(loadbalancerServiceMethods.ByName("ListSslCerts")),
			connect.WithClientOptions(opts...),
		),
		removeCertFromLoadBalancer: connect.NewClient[v1.RemoveCertFromLoadBalancerRequest, v1.RemoveCertFromLoadBalancerResponse](
			httpClient,
			baseURL+LoadbalancerServiceRemoveCertFromLoadBalancerProcedure,
			connect.WithSchema(loadbalancerServiceMethods.ByName("RemoveCertFromLoadBalancer")),
			connect.WithClientOptions(opts...),
		),
		removeFromLoadBalancerRule: connect.NewClient[v1.RemoveFromLoadBalancerRuleRequest, v1.RemoveFromLoadBalancerRuleResponse](
			httpClient,
			baseURL+LoadbalancerServiceRemoveFromLoadBalancerRuleProcedure,
			connect.WithSchema(loadbalancerServiceMethods.ByName("RemoveFromLoadBalancerRule")),
			connect.WithClientOptions(opts...),
		),
		updateApplicationLoadBalancer: connect.NewClient[v1.UpdateApplicationLoadBalancerRequest, v1.UpdateApplicationLoadBalancerResponse](
			httpClient,
			baseURL+LoadbalancerServiceUpdateApplicationLoadBalancerProcedure,
			connect.WithSchema(loadbalancerServiceMethods.ByName("UpdateApplicationLoadBalancer")),
			connect.WithClientOptions(opts...),
		),
		updateLBHealthCheckPolicy: connect.NewClient[v1.UpdateLBHealthCheckPolicyRequest, v1.UpdateLBHealthCheckPolicyResponse](
			httpClient,
			baseURL+LoadbalancerServiceUpdateLBHealthCheckPolicyProcedure,
			connect.WithSchema(loadbalancerServiceMethods.ByName("UpdateLBHealthCheckPolicy")),
			connect.WithClientOptions(opts...),
		),
		updateLBStickinessPolicy: connect.NewClient[v1.UpdateLBStickinessPolicyRequest, v1.UpdateLBStickinessPolicyResponse](
			httpClient,
			baseURL+LoadbalancerServiceUpdateLBStickinessPolicyProcedure,
			connect.WithSchema(loadbalancerServiceMethods.ByName("UpdateLBStickinessPolicy")),
			connect.WithClientOptions(opts...),
		),
		updateLoadBalancerRule: connect.NewClient[v1.UpdateLoadBalancerRuleRequest, v1.UpdateLoadBalancerRuleResponse](
			httpClient,
			baseURL+LoadbalancerServiceUpdateLoadBalancerRuleProcedure,
			connect.WithSchema(loadbalancerServiceMethods.ByName("UpdateLoadBalancerRule")),
			connect.WithClientOptions(opts...),
		),
		uploadSslCert: connect.NewClient[v1.UploadSslCertRequest, v1.UploadSslCertResponse](
			httpClient,
			baseURL+LoadbalancerServiceUploadSslCertProcedure,
			connect.WithSchema(loadbalancerServiceMethods.ByName("UploadSslCert")),
			connect.WithClientOptions(opts...),
		),
	}
}

// loadbalancerServiceClient implements LoadbalancerServiceClient.
type loadbalancerServiceClient struct {
	assignCertToLoadBalancer                *connect.Client[v1.AssignCertToLoadBalancerRequest, v1.AssignCertToLoadBalancerResponse]
	assignToLoadBalancerRule                *connect.Client[v1.AssignToLoadBalancerRuleRequest, v1.AssignToLoadBalancerRuleResponse]
	createApplicationLoadBalancer           *connect.Client[v1.CreateApplicationLoadBalancerRequest, v1.CreateApplicationLoadBalancerResponse]
	createLBHealthCheckPolicy               *connect.Client[v1.CreateLBHealthCheckPolicyRequest, v1.CreateLBHealthCheckPolicyResponse]
	createLBStickinessPolicy                *connect.Client[v1.CreateLBStickinessPolicyRequest, v1.CreateLBStickinessPolicyResponse]
	createLoadBalancerRule                  *connect.Client[v1.CreateLoadBalancerRuleRequest, v1.CreateLoadBalancerRuleResponse]
	deleteApplicationLoadBalancer           *connect.Client[v1.DeleteApplicationLoadBalancerRequest, v1.DeleteApplicationLoadBalancerResponse]
	deleteLBHealthCheckPolicy               *connect.Client[v1.DeleteLBHealthCheckPolicyRequest, v1.DeleteLBHealthCheckPolicyResponse]
	deleteLBStickinessPolicy                *connect.Client[v1.DeleteLBStickinessPolicyRequest, v1.DeleteLBStickinessPolicyResponse]
	deleteLoadBalancerRule                  *connect.Client[v1.DeleteLoadBalancerRuleRequest, v1.DeleteLoadBalancerRuleResponse]
	deleteSslCert                           *connect.Client[v1.DeleteSslCertRequest, v1.DeleteSslCertResponse]
	listApplicationLoadBalancers            *connect.Client[v1.ListApplicationLoadBalancersRequest, v1.ListApplicationLoadBalancersResponse]
	listLBHealthCheckPolicies               *connect.Client[v1.ListLBHealthCheckPoliciesRequest, v1.ListLBHealthCheckPoliciesResponse]
	listLBStickinessPolicies                *connect.Client[v1.ListLBStickinessPoliciesRequest, v1.ListLBStickinessPoliciesResponse]
	listLoadBalancerRuleInstances           *connect.Client[v1.ListLoadBalancerRuleInstancesRequest, v1.ListLoadBalancerRuleInstancesResponse]
	listLoadBalancerRuleInstancesCmdByAdmin *connect.Client[v1.ListLoadBalancerRuleInstancesCmdByAdminRequest, v1.ListLoadBalancerRuleInstancesCmdByAdminResponse]
	listLoadBalancerRules                   *connect.Client[v1.ListLoadBalancerRulesRequest, v1.ListLoadBalancerRulesResponse]
	listSslCerts                            *connect.Client[v1.ListSslCertsRequest, v1.ListSslCertsResponse]
	removeCertFromLoadBalancer              *connect.Client[v1.RemoveCertFromLoadBalancerRequest, v1.RemoveCertFromLoadBalancerResponse]
	removeFromLoadBalancerRule              *connect.Client[v1.RemoveFromLoadBalancerRuleRequest, v1.RemoveFromLoadBalancerRuleResponse]
	updateApplicationLoadBalancer           *connect.Client[v1.UpdateApplicationLoadBalancerRequest, v1.UpdateApplicationLoadBalancerResponse]
	updateLBHealthCheckPolicy               *connect.Client[v1.UpdateLBHealthCheckPolicyRequest, v1.UpdateLBHealthCheckPolicyResponse]
	updateLBStickinessPolicy                *connect.Client[v1.UpdateLBStickinessPolicyRequest, v1.UpdateLBStickinessPolicyResponse]
	updateLoadBalancerRule                  *connect.Client[v1.UpdateLoadBalancerRuleRequest, v1.UpdateLoadBalancerRuleResponse]
	uploadSslCert                           *connect.Client[v1.UploadSslCertRequest, v1.UploadSslCertResponse]
}

// AssignCertToLoadBalancer calls
// cloudstack.management.loadbalancer.v1.LoadbalancerService.AssignCertToLoadBalancer.
func (c *loadbalancerServiceClient) AssignCertToLoadBalancer(ctx context.Context, req *connect.Request[v1.AssignCertToLoadBalancerRequest]) (*connect.Response[v1.AssignCertToLoadBalancerResponse], error) {
	return c.assignCertToLoadBalancer.CallUnary(ctx, req)
}

// AssignToLoadBalancerRule calls
// cloudstack.management.loadbalancer.v1.LoadbalancerService.AssignToLoadBalancerRule.
func (c *loadbalancerServiceClient) AssignToLoadBalancerRule(ctx context.Context, req *connect.Request[v1.AssignToLoadBalancerRuleRequest]) (*connect.Response[v1.AssignToLoadBalancerRuleResponse], error) {
	return c.assignToLoadBalancerRule.CallUnary(ctx, req)
}

// CreateApplicationLoadBalancer calls
// cloudstack.management.loadbalancer.v1.LoadbalancerService.CreateApplicationLoadBalancer.
func (c *loadbalancerServiceClient) CreateApplicationLoadBalancer(ctx context.Context, req *connect.Request[v1.CreateApplicationLoadBalancerRequest]) (*connect.Response[v1.CreateApplicationLoadBalancerResponse], error) {
	return c.createApplicationLoadBalancer.CallUnary(ctx, req)
}

// CreateLBHealthCheckPolicy calls
// cloudstack.management.loadbalancer.v1.LoadbalancerService.CreateLBHealthCheckPolicy.
func (c *loadbalancerServiceClient) CreateLBHealthCheckPolicy(ctx context.Context, req *connect.Request[v1.CreateLBHealthCheckPolicyRequest]) (*connect.Response[v1.CreateLBHealthCheckPolicyResponse], error) {
	return c.createLBHealthCheckPolicy.CallUnary(ctx, req)
}

// CreateLBStickinessPolicy calls
// cloudstack.management.loadbalancer.v1.LoadbalancerService.CreateLBStickinessPolicy.
func (c *loadbalancerServiceClient) CreateLBStickinessPolicy(ctx context.Context, req *connect.Request[v1.CreateLBStickinessPolicyRequest]) (*connect.Response[v1.CreateLBStickinessPolicyResponse], error) {
	return c.createLBStickinessPolicy.CallUnary(ctx, req)
}

// CreateLoadBalancerRule calls
// cloudstack.management.loadbalancer.v1.LoadbalancerService.CreateLoadBalancerRule.
func (c *loadbalancerServiceClient) CreateLoadBalancerRule(ctx context.Context, req *connect.Request[v1.CreateLoadBalancerRuleRequest]) (*connect.Response[v1.CreateLoadBalancerRuleResponse], error) {
	return c.createLoadBalancerRule.CallUnary(ctx, req)
}

// DeleteApplicationLoadBalancer calls
// cloudstack.management.loadbalancer.v1.LoadbalancerService.DeleteApplicationLoadBalancer.
func (c *loadbalancerServiceClient) DeleteApplicationLoadBalancer(ctx context.Context, req *connect.Request[v1.DeleteApplicationLoadBalancerRequest]) (*connect.Response[v1.DeleteApplicationLoadBalancerResponse], error) {
	return c.deleteApplicationLoadBalancer.CallUnary(ctx, req)
}

// DeleteLBHealthCheckPolicy calls
// cloudstack.management.loadbalancer.v1.LoadbalancerService.DeleteLBHealthCheckPolicy.
func (c *loadbalancerServiceClient) DeleteLBHealthCheckPolicy(ctx context.Context, req *connect.Request[v1.DeleteLBHealthCheckPolicyRequest]) (*connect.Response[v1.DeleteLBHealthCheckPolicyResponse], error) {
	return c.deleteLBHealthCheckPolicy.CallUnary(ctx, req)
}

// DeleteLBStickinessPolicy calls
// cloudstack.management.loadbalancer.v1.LoadbalancerService.DeleteLBStickinessPolicy.
func (c *loadbalancerServiceClient) DeleteLBStickinessPolicy(ctx context.Context, req *connect.Request[v1.DeleteLBStickinessPolicyRequest]) (*connect.Response[v1.DeleteLBStickinessPolicyResponse], error) {
	return c.deleteLBStickinessPolicy.CallUnary(ctx, req)
}

// DeleteLoadBalancerRule calls
// cloudstack.management.loadbalancer.v1.LoadbalancerService.DeleteLoadBalancerRule.
func (c *loadbalancerServiceClient) DeleteLoadBalancerRule(ctx context.Context, req *connect.Request[v1.DeleteLoadBalancerRuleRequest]) (*connect.Response[v1.DeleteLoadBalancerRuleResponse], error) {
	return c.deleteLoadBalancerRule.CallUnary(ctx, req)
}

// DeleteSslCert calls cloudstack.management.loadbalancer.v1.LoadbalancerService.DeleteSslCert.
func (c *loadbalancerServiceClient) DeleteSslCert(ctx context.Context, req *connect.Request[v1.DeleteSslCertRequest]) (*connect.Response[v1.DeleteSslCertResponse], error) {
	return c.deleteSslCert.CallUnary(ctx, req)
}

// ListApplicationLoadBalancers calls
// cloudstack.management.loadbalancer.v1.LoadbalancerService.ListApplicationLoadBalancers.
func (c *loadbalancerServiceClient) ListApplicationLoadBalancers(ctx context.Context, req *connect.Request[v1.ListApplicationLoadBalancersRequest]) (*connect.Response[v1.ListApplicationLoadBalancersResponse], error) {
	return c.listApplicationLoadBalancers.CallUnary(ctx, req)
}

// ListLBHealthCheckPolicies calls
// cloudstack.management.loadbalancer.v1.LoadbalancerService.ListLBHealthCheckPolicies.
func (c *loadbalancerServiceClient) ListLBHealthCheckPolicies(ctx context.Context, req *connect.Request[v1.ListLBHealthCheckPoliciesRequest]) (*connect.Response[v1.ListLBHealthCheckPoliciesResponse], error) {
	return c.listLBHealthCheckPolicies.CallUnary(ctx, req)
}

// ListLBStickinessPolicies calls
// cloudstack.management.loadbalancer.v1.LoadbalancerService.ListLBStickinessPolicies.
func (c *loadbalancerServiceClient) ListLBStickinessPolicies(ctx context.Context, req *connect.Request[v1.ListLBStickinessPoliciesRequest]) (*connect.Response[v1.ListLBStickinessPoliciesResponse], error) {
	return c.listLBStickinessPolicies.CallUnary(ctx, req)
}

// ListLoadBalancerRuleInstances calls
// cloudstack.management.loadbalancer.v1.LoadbalancerService.ListLoadBalancerRuleInstances.
func (c *loadbalancerServiceClient) ListLoadBalancerRuleInstances(ctx context.Context, req *connect.Request[v1.ListLoadBalancerRuleInstancesRequest]) (*connect.Response[v1.ListLoadBalancerRuleInstancesResponse], error) {
	return c.listLoadBalancerRuleInstances.CallUnary(ctx, req)
}

// ListLoadBalancerRuleInstancesCmdByAdmin calls
// cloudstack.management.loadbalancer.v1.LoadbalancerService.ListLoadBalancerRuleInstancesCmdByAdmin.
func (c *loadbalancerServiceClient) ListLoadBalancerRuleInstancesCmdByAdmin(ctx context.Context, req *connect.Request[v1.ListLoadBalancerRuleInstancesCmdByAdminRequest]) (*connect.Response[v1.ListLoadBalancerRuleInstancesCmdByAdminResponse], error) {
	return c.listLoadBalancerRuleInstancesCmdByAdmin.CallUnary(ctx, req)
}

// ListLoadBalancerRules calls
// cloudstack.management.loadbalancer.v1.LoadbalancerService.ListLoadBalancerRules.
func (c *loadbalancerServiceClient) ListLoadBalancerRules(ctx context.Context, req *connect.Request[v1.ListLoadBalancerRulesRequest]) (*connect.Response[v1.ListLoadBalancerRulesResponse], error) {
	return c.listLoadBalancerRules.CallUnary(ctx, req)
}

// ListSslCerts calls cloudstack.management.loadbalancer.v1.LoadbalancerService.ListSslCerts.
func (c *loadbalancerServiceClient) ListSslCerts(ctx context.Context, req *connect.Request[v1.ListSslCertsRequest]) (*connect.Response[v1.ListSslCertsResponse], error) {
	return c.listSslCerts.CallUnary(ctx, req)
}

// RemoveCertFromLoadBalancer calls
// cloudstack.management.loadbalancer.v1.LoadbalancerService.RemoveCertFromLoadBalancer.
func (c *loadbalancerServiceClient) RemoveCertFromLoadBalancer(ctx context.Context, req *connect.Request[v1.RemoveCertFromLoadBalancerRequest]) (*connect.Response[v1.RemoveCertFromLoadBalancerResponse], error) {
	return c.removeCertFromLoadBalancer.CallUnary(ctx, req)
}

// RemoveFromLoadBalancerRule calls
// cloudstack.management.loadbalancer.v1.LoadbalancerService.RemoveFromLoadBalancerRule.
func (c *loadbalancerServiceClient) RemoveFromLoadBalancerRule(ctx context.Context, req *connect.Request[v1.RemoveFromLoadBalancerRuleRequest]) (*connect.Response[v1.RemoveFromLoadBalancerRuleResponse], error) {
	return c.removeFromLoadBalancerRule.CallUnary(ctx, req)
}

// UpdateApplicationLoadBalancer calls
// cloudstack.management.loadbalancer.v1.LoadbalancerService.UpdateApplicationLoadBalancer.
func (c *loadbalancerServiceClient) UpdateApplicationLoadBalancer(ctx context.Context, req *connect.Request[v1.UpdateApplicationLoadBalancerRequest]) (*connect.Response[v1.UpdateApplicationLoadBalancerResponse], error) {
	return c.updateApplicationLoadBalancer.CallUnary(ctx, req)
}

// UpdateLBHealthCheckPolicy calls
// cloudstack.management.loadbalancer.v1.LoadbalancerService.UpdateLBHealthCheckPolicy.
func (c *loadbalancerServiceClient) UpdateLBHealthCheckPolicy(ctx context.Context, req *connect.Request[v1.UpdateLBHealthCheckPolicyRequest]) (*connect.Response[v1.UpdateLBHealthCheckPolicyResponse], error) {
	return c.updateLBHealthCheckPolicy.CallUnary(ctx, req)
}

// UpdateLBStickinessPolicy calls
// cloudstack.management.loadbalancer.v1.LoadbalancerService.UpdateLBStickinessPolicy.
func (c *loadbalancerServiceClient) UpdateLBStickinessPolicy(ctx context.Context, req *connect.Request[v1.UpdateLBStickinessPolicyRequest]) (*connect.Response[v1.UpdateLBStickinessPolicyResponse], error) {
	return c.updateLBStickinessPolicy.CallUnary(ctx, req)
}

// UpdateLoadBalancerRule calls
// cloudstack.management.loadbalancer.v1.LoadbalancerService.UpdateLoadBalancerRule.
func (c *loadbalancerServiceClient) UpdateLoadBalancerRule(ctx context.Context, req *connect.Request[v1.UpdateLoadBalancerRuleRequest]) (*connect.Response[v1.UpdateLoadBalancerRuleResponse], error) {
	return c.updateLoadBalancerRule.CallUnary(ctx, req)
}

// UploadSslCert calls cloudstack.management.loadbalancer.v1.LoadbalancerService.UploadSslCert.
func (c *loadbalancerServiceClient) UploadSslCert(ctx context.Context, req *connect.Request[v1.UploadSslCertRequest]) (*connect.Response[v1.UploadSslCertResponse], error) {
	return c.uploadSslCert.CallUnary(ctx, req)
}

// LoadbalancerServiceHandler is an implementation of the
// cloudstack.management.loadbalancer.v1.LoadbalancerService service.
type LoadbalancerServiceHandler interface {
	// AssignCertToLoadBalancer Assigns a certificate to a load balancer rule
	AssignCertToLoadBalancer(context.Context, *connect.Request[v1.AssignCertToLoadBalancerRequest]) (*connect.Response[v1.AssignCertToLoadBalancerResponse], error)
	// AssignToLoadBalancerRule Assigns virtual machine or a list of virtual machines to a load balancer rule.
	AssignToLoadBalancerRule(context.Context, *connect.Request[v1.AssignToLoadBalancerRuleRequest]) (*connect.Response[v1.AssignToLoadBalancerRuleResponse], error)
	// CreateApplicationLoadBalancer Creates an internal load balancer
	CreateApplicationLoadBalancer(context.Context, *connect.Request[v1.CreateApplicationLoadBalancerRequest]) (*connect.Response[v1.CreateApplicationLoadBalancerResponse], error)
	// CreateLBHealthCheckPolicy Creates a load balancer health check policy
	CreateLBHealthCheckPolicy(context.Context, *connect.Request[v1.CreateLBHealthCheckPolicyRequest]) (*connect.Response[v1.CreateLBHealthCheckPolicyResponse], error)
	// CreateLBStickinessPolicy Creates a load balancer stickiness policy
	CreateLBStickinessPolicy(context.Context, *connect.Request[v1.CreateLBStickinessPolicyRequest]) (*connect.Response[v1.CreateLBStickinessPolicyResponse], error)
	// CreateLoadBalancerRule Creates a load balancer rule
	CreateLoadBalancerRule(context.Context, *connect.Request[v1.CreateLoadBalancerRuleRequest]) (*connect.Response[v1.CreateLoadBalancerRuleResponse], error)
	// DeleteApplicationLoadBalancer Deletes an internal load balancer
	DeleteApplicationLoadBalancer(context.Context, *connect.Request[v1.DeleteApplicationLoadBalancerRequest]) (*connect.Response[v1.DeleteApplicationLoadBalancerResponse], error)
	// DeleteLBHealthCheckPolicy Deletes a load balancer health check policy.
	DeleteLBHealthCheckPolicy(context.Context, *connect.Request[v1.DeleteLBHealthCheckPolicyRequest]) (*connect.Response[v1.DeleteLBHealthCheckPolicyResponse], error)
	// DeleteLBStickinessPolicy Deletes a load balancer stickiness policy.
	DeleteLBStickinessPolicy(context.Context, *connect.Request[v1.DeleteLBStickinessPolicyRequest]) (*connect.Response[v1.DeleteLBStickinessPolicyResponse], error)
	// DeleteLoadBalancerRule Deletes a load balancer rule.
	DeleteLoadBalancerRule(context.Context, *connect.Request[v1.DeleteLoadBalancerRuleRequest]) (*connect.Response[v1.DeleteLoadBalancerRuleResponse], error)
	// DeleteSslCert Delete a certificate to CloudStack
	DeleteSslCert(context.Context, *connect.Request[v1.DeleteSslCertRequest]) (*connect.Response[v1.DeleteSslCertResponse], error)
	// ListApplicationLoadBalancers Lists internal load balancers
	ListApplicationLoadBalancers(context.Context, *connect.Request[v1.ListApplicationLoadBalancersRequest]) (*connect.Response[v1.ListApplicationLoadBalancersResponse], error)
	// ListLBHealthCheckPolicies Lists load balancer health check policies.
	ListLBHealthCheckPolicies(context.Context, *connect.Request[v1.ListLBHealthCheckPoliciesRequest]) (*connect.Response[v1.ListLBHealthCheckPoliciesResponse], error)
	// ListLBStickinessPolicies Lists load balancer stickiness policies.
	ListLBStickinessPolicies(context.Context, *connect.Request[v1.ListLBStickinessPoliciesRequest]) (*connect.Response[v1.ListLBStickinessPoliciesResponse], error)
	// ListLoadBalancerRuleInstances List all virtual machine instances that are assigned to a load balancer rule.
	ListLoadBalancerRuleInstances(context.Context, *connect.Request[v1.ListLoadBalancerRuleInstancesRequest]) (*connect.Response[v1.ListLoadBalancerRuleInstancesResponse], error)
	// ListLoadBalancerRuleInstancesCmdByAdmin List all virtual machine instances that are assigned to a load balancer rule.
	ListLoadBalancerRuleInstancesCmdByAdmin(context.Context, *connect.Request[v1.ListLoadBalancerRuleInstancesCmdByAdminRequest]) (*connect.Response[v1.ListLoadBalancerRuleInstancesCmdByAdminResponse], error)
	// ListLoadBalancerRules Lists load balancer rules.
	ListLoadBalancerRules(context.Context, *connect.Request[v1.ListLoadBalancerRulesRequest]) (*connect.Response[v1.ListLoadBalancerRulesResponse], error)
	// ListSslCerts Lists SSL certificates
	ListSslCerts(context.Context, *connect.Request[v1.ListSslCertsRequest]) (*connect.Response[v1.ListSslCertsResponse], error)
	// RemoveCertFromLoadBalancer Removes a certificate from a load balancer rule
	RemoveCertFromLoadBalancer(context.Context, *connect.Request[v1.RemoveCertFromLoadBalancerRequest]) (*connect.Response[v1.RemoveCertFromLoadBalancerResponse], error)
	// RemoveFromLoadBalancerRule Removes a virtual machine or a list of virtual machines from a load balancer rule.
	RemoveFromLoadBalancerRule(context.Context, *connect.Request[v1.RemoveFromLoadBalancerRuleRequest]) (*connect.Response[v1.RemoveFromLoadBalancerRuleResponse], error)
	// UpdateApplicationLoadBalancer Updates an internal load balancer
	UpdateApplicationLoadBalancer(context.Context, *connect.Request[v1.UpdateApplicationLoadBalancerRequest]) (*connect.Response[v1.UpdateApplicationLoadBalancerResponse], error)
	// UpdateLBHealthCheckPolicy Updates load balancer health check policy
	UpdateLBHealthCheckPolicy(context.Context, *connect.Request[v1.UpdateLBHealthCheckPolicyRequest]) (*connect.Response[v1.UpdateLBHealthCheckPolicyResponse], error)
	// UpdateLBStickinessPolicy Updates load balancer stickiness policy
	UpdateLBStickinessPolicy(context.Context, *connect.Request[v1.UpdateLBStickinessPolicyRequest]) (*connect.Response[v1.UpdateLBStickinessPolicyResponse], error)
	// UpdateLoadBalancerRule Updates load balancer
	UpdateLoadBalancerRule(context.Context, *connect.Request[v1.UpdateLoadBalancerRuleRequest]) (*connect.Response[v1.UpdateLoadBalancerRuleResponse], error)
	// UploadSslCert Upload a certificate to CloudStack
	UploadSslCert(context.Context, *connect.Request[v1.UploadSslCertRequest]) (*connect.Response[v1.UploadSslCertResponse], error)
}

// NewLoadbalancerServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLoadbalancerServiceHandler(svc LoadbalancerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	loadbalancerServiceMethods := v1.File_cloudstack_management_loadbalancer_v1_loadbalancer_gen_proto.Services().ByName("LoadbalancerService").Methods()
	loadbalancerServiceAssignCertToLoadBalancerHandler := connect.NewUnaryHandler(
		LoadbalancerServiceAssignCertToLoadBalancerProcedure,
		svc.AssignCertToLoadBalancer,
		connect.WithSchema(loadbalancerServiceMethods.ByName("AssignCertToLoadBalancer")),
		connect.WithHandlerOptions(opts...),
	)
	loadbalancerServiceAssignToLoadBalancerRuleHandler := connect.NewUnaryHandler(
		LoadbalancerServiceAssignToLoadBalancerRuleProcedure,
		svc.AssignToLoadBalancerRule,
		connect.WithSchema(loadbalancerServiceMethods.ByName("AssignToLoadBalancerRule")),
		connect.WithHandlerOptions(opts...),
	)
	loadbalancerServiceCreateApplicationLoadBalancerHandler := connect.NewUnaryHandler(
		LoadbalancerServiceCreateApplicationLoadBalancerProcedure,
		svc.CreateApplicationLoadBalancer,
		connect.WithSchema(loadbalancerServiceMethods.ByName("CreateApplicationLoadBalancer")),
		connect.WithHandlerOptions(opts...),
	)
	loadbalancerServiceCreateLBHealthCheckPolicyHandler := connect.NewUnaryHandler(
		LoadbalancerServiceCreateLBHealthCheckPolicyProcedure,
		svc.CreateLBHealthCheckPolicy,
		connect.WithSchema(loadbalancerServiceMethods.ByName("CreateLBHealthCheckPolicy")),
		connect.WithHandlerOptions(opts...),
	)
	loadbalancerServiceCreateLBStickinessPolicyHandler := connect.NewUnaryHandler(
		LoadbalancerServiceCreateLBStickinessPolicyProcedure,
		svc.CreateLBStickinessPolicy,
		connect.WithSchema(loadbalancerServiceMethods.ByName("CreateLBStickinessPolicy")),
		connect.WithHandlerOptions(opts...),
	)
	loadbalancerServiceCreateLoadBalancerRuleHandler := connect.NewUnaryHandler(
		LoadbalancerServiceCreateLoadBalancerRuleProcedure,
		svc.CreateLoadBalancerRule,
		connect.WithSchema(loadbalancerServiceMethods.ByName("CreateLoadBalancerRule")),
		connect.WithHandlerOptions(opts...),
	)
	loadbalancerServiceDeleteApplicationLoadBalancerHandler := connect.NewUnaryHandler(
		LoadbalancerServiceDeleteApplicationLoadBalancerProcedure,
		svc.DeleteApplicationLoadBalancer,
		connect.WithSchema(loadbalancerServiceMethods.ByName("DeleteApplicationLoadBalancer")),
		connect.WithHandlerOptions(opts...),
	)
	loadbalancerServiceDeleteLBHealthCheckPolicyHandler := connect.NewUnaryHandler(
		LoadbalancerServiceDeleteLBHealthCheckPolicyProcedure,
		svc.DeleteLBHealthCheckPolicy,
		connect.WithSchema(loadbalancerServiceMethods.ByName("DeleteLBHealthCheckPolicy")),
		connect.WithHandlerOptions(opts...),
	)
	loadbalancerServiceDeleteLBStickinessPolicyHandler := connect.NewUnaryHandler(
		LoadbalancerServiceDeleteLBStickinessPolicyProcedure,
		svc.DeleteLBStickinessPolicy,
		connect.WithSchema(loadbalancerServiceMethods.ByName("DeleteLBStickinessPolicy")),
		connect.WithHandlerOptions(opts...),
	)
	loadbalancerServiceDeleteLoadBalancerRuleHandler := connect.NewUnaryHandler(
		LoadbalancerServiceDeleteLoadBalancerRuleProcedure,
		svc.DeleteLoadBalancerRule,
		connect.WithSchema(loadbalancerServiceMethods.ByName("DeleteLoadBalancerRule")),
		connect.WithHandlerOptions(opts...),
	)
	loadbalancerServiceDeleteSslCertHandler := connect.NewUnaryHandler(
		LoadbalancerServiceDeleteSslCertProcedure,
		svc.DeleteSslCert,
		connect.WithSchema(loadbalancerServiceMethods.ByName("DeleteSslCert")),
		connect.WithHandlerOptions(opts...),
	)
	loadbalancerServiceListApplicationLoadBalancersHandler := connect.NewUnaryHandler(
		LoadbalancerServiceListApplicationLoadBalancersProcedure,
		svc.ListApplicationLoadBalancers,
		connect.WithSchema(loadbalancerServiceMethods.ByName("ListApplicationLoadBalancers")),
		connect.WithHandlerOptions(opts...),
	)
	loadbalancerServiceListLBHealthCheckPoliciesHandler := connect.NewUnaryHandler(
		LoadbalancerServiceListLBHealthCheckPoliciesProcedure,
		svc.ListLBHealthCheckPolicies,
		connect.WithSchema(loadbalancerServiceMethods.ByName("ListLBHealthCheckPolicies")),
		connect.WithHandlerOptions(opts...),
	)
	loadbalancerServiceListLBStickinessPoliciesHandler := connect.NewUnaryHandler(
		LoadbalancerServiceListLBStickinessPoliciesProcedure,
		svc.ListLBStickinessPolicies,
		connect.WithSchema(loadbalancerServiceMethods.ByName("ListLBStickinessPolicies")),
		connect.WithHandlerOptions(opts...),
	)
	loadbalancerServiceListLoadBalancerRuleInstancesHandler := connect.NewUnaryHandler(
		LoadbalancerServiceListLoadBalancerRuleInstancesProcedure,
		svc.ListLoadBalancerRuleInstances,
		connect.WithSchema(loadbalancerServiceMethods.ByName("ListLoadBalancerRuleInstances")),
		connect.WithHandlerOptions(opts...),
	)
	loadbalancerServiceListLoadBalancerRuleInstancesCmdByAdminHandler := connect.NewUnaryHandler(
		LoadbalancerServiceListLoadBalancerRuleInstancesCmdByAdminProcedure,
		svc.ListLoadBalancerRuleInstancesCmdByAdmin,
		connect.WithSchema(loadbalancerServiceMethods.ByName("ListLoadBalancerRuleInstancesCmdByAdmin")),
		connect.WithHandlerOptions(opts...),
	)
	loadbalancerServiceListLoadBalancerRulesHandler := connect.NewUnaryHandler(
		LoadbalancerServiceListLoadBalancerRulesProcedure,
		svc.ListLoadBalancerRules,
		connect.WithSchema(loadbalancerServiceMethods.ByName("ListLoadBalancerRules")),
		connect.WithHandlerOptions(opts...),
	)
	loadbalancerServiceListSslCertsHandler := connect.NewUnaryHandler(
		LoadbalancerServiceListSslCertsProcedure,
		svc.ListSslCerts,
		connect.WithSchema(loadbalancerServiceMethods.ByName("ListSslCerts")),
		connect.WithHandlerOptions(opts...),
	)
	loadbalancerServiceRemoveCertFromLoadBalancerHandler := connect.NewUnaryHandler(
		LoadbalancerServiceRemoveCertFromLoadBalancerProcedure,
		svc.RemoveCertFromLoadBalancer,
		connect.WithSchema(loadbalancerServiceMethods.ByName("RemoveCertFromLoadBalancer")),
		connect.WithHandlerOptions(opts...),
	)
	loadbalancerServiceRemoveFromLoadBalancerRuleHandler := connect.NewUnaryHandler(
		LoadbalancerServiceRemoveFromLoadBalancerRuleProcedure,
		svc.RemoveFromLoadBalancerRule,
		connect.WithSchema(loadbalancerServiceMethods.ByName("RemoveFromLoadBalancerRule")),
		connect.WithHandlerOptions(opts...),
	)
	loadbalancerServiceUpdateApplicationLoadBalancerHandler := connect.NewUnaryHandler(
		LoadbalancerServiceUpdateApplicationLoadBalancerProcedure,
		svc.UpdateApplicationLoadBalancer,
		connect.WithSchema(loadbalancerServiceMethods.ByName("UpdateApplicationLoadBalancer")),
		connect.WithHandlerOptions(opts...),
	)
	loadbalancerServiceUpdateLBHealthCheckPolicyHandler := connect.NewUnaryHandler(
		LoadbalancerServiceUpdateLBHealthCheckPolicyProcedure,
		svc.UpdateLBHealthCheckPolicy,
		connect.WithSchema(loadbalancerServiceMethods.ByName("UpdateLBHealthCheckPolicy")),
		connect.WithHandlerOptions(opts...),
	)
	loadbalancerServiceUpdateLBStickinessPolicyHandler := connect.NewUnaryHandler(
		LoadbalancerServiceUpdateLBStickinessPolicyProcedure,
		svc.UpdateLBStickinessPolicy,
		connect.WithSchema(loadbalancerServiceMethods.ByName("UpdateLBStickinessPolicy")),
		connect.WithHandlerOptions(opts...),
	)
	loadbalancerServiceUpdateLoadBalancerRuleHandler := connect.NewUnaryHandler(
		LoadbalancerServiceUpdateLoadBalancerRuleProcedure,
		svc.UpdateLoadBalancerRule,
		connect.WithSchema(loadbalancerServiceMethods.ByName("UpdateLoadBalancerRule")),
		connect.WithHandlerOptions(opts...),
	)
	loadbalancerServiceUploadSslCertHandler := connect.NewUnaryHandler(
		LoadbalancerServiceUploadSslCertProcedure,
		svc.UploadSslCert,
		connect.WithSchema(loadbalancerServiceMethods.ByName("UploadSslCert")),
		connect.WithHandlerOptions(opts...),
	)
	return "/cloudstack.management.loadbalancer.v1.LoadbalancerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LoadbalancerServiceAssignCertToLoadBalancerProcedure:
			loadbalancerServiceAssignCertToLoadBalancerHandler.ServeHTTP(w, r)
		case LoadbalancerServiceAssignToLoadBalancerRuleProcedure:
			loadbalancerServiceAssignToLoadBalancerRuleHandler.ServeHTTP(w, r)
		case LoadbalancerServiceCreateApplicationLoadBalancerProcedure:
			loadbalancerServiceCreateApplicationLoadBalancerHandler.ServeHTTP(w, r)
		case LoadbalancerServiceCreateLBHealthCheckPolicyProcedure:
			loadbalancerServiceCreateLBHealthCheckPolicyHandler.ServeHTTP(w, r)
		case LoadbalancerServiceCreateLBStickinessPolicyProcedure:
			loadbalancerServiceCreateLBStickinessPolicyHandler.ServeHTTP(w, r)
		case LoadbalancerServiceCreateLoadBalancerRuleProcedure:
			loadbalancerServiceCreateLoadBalancerRuleHandler.ServeHTTP(w, r)
		case LoadbalancerServiceDeleteApplicationLoadBalancerProcedure:
			loadbalancerServiceDeleteApplicationLoadBalancerHandler.ServeHTTP(w, r)
		case LoadbalancerServiceDeleteLBHealthCheckPolicyProcedure:
			loadbalancerServiceDeleteLBHealthCheckPolicyHandler.ServeHTTP(w, r)
		case LoadbalancerServiceDeleteLBStickinessPolicyProcedure:
			loadbalancerServiceDeleteLBStickinessPolicyHandler.ServeHTTP(w, r)
		case LoadbalancerServiceDeleteLoadBalancerRuleProcedure:
			loadbalancerServiceDeleteLoadBalancerRuleHandler.ServeHTTP(w, r)
		case LoadbalancerServiceDeleteSslCertProcedure:
			loadbalancerServiceDeleteSslCertHandler.ServeHTTP(w, r)
		case LoadbalancerServiceListApplicationLoadBalancersProcedure:
			loadbalancerServiceListApplicationLoadBalancersHandler.ServeHTTP(w, r)
		case LoadbalancerServiceListLBHealthCheckPoliciesProcedure:
			loadbalancerServiceListLBHealthCheckPoliciesHandler.ServeHTTP(w, r)
		case LoadbalancerServiceListLBStickinessPoliciesProcedure:
			loadbalancerServiceListLBStickinessPoliciesHandler.ServeHTTP(w, r)
		case LoadbalancerServiceListLoadBalancerRuleInstancesProcedure:
			loadbalancerServiceListLoadBalancerRuleInstancesHandler.ServeHTTP(w, r)
		case LoadbalancerServiceListLoadBalancerRuleInstancesCmdByAdminProcedure:
			loadbalancerServiceListLoadBalancerRuleInstancesCmdByAdminHandler.ServeHTTP(w, r)
		case LoadbalancerServiceListLoadBalancerRulesProcedure:
			loadbalancerServiceListLoadBalancerRulesHandler.ServeHTTP(w, r)
		case LoadbalancerServiceListSslCertsProcedure:
			loadbalancerServiceListSslCertsHandler.ServeHTTP(w, r)
		case LoadbalancerServiceRemoveCertFromLoadBalancerProcedure:
			loadbalancerServiceRemoveCertFromLoadBalancerHandler.ServeHTTP(w, r)
		case LoadbalancerServiceRemoveFromLoadBalancerRuleProcedure:
			loadbalancerServiceRemoveFromLoadBalancerRuleHandler.ServeHTTP(w, r)
		case LoadbalancerServiceUpdateApplicationLoadBalancerProcedure:
			loadbalancerServiceUpdateApplicationLoadBalancerHandler.ServeHTTP(w, r)
		case LoadbalancerServiceUpdateLBHealthCheckPolicyProcedure:
			loadbalancerServiceUpdateLBHealthCheckPolicyHandler.ServeHTTP(w, r)
		case LoadbalancerServiceUpdateLBStickinessPolicyProcedure:
			loadbalancerServiceUpdateLBStickinessPolicyHandler.ServeHTTP(w, r)
		case LoadbalancerServiceUpdateLoadBalancerRuleProcedure:
			loadbalancerServiceUpdateLoadBalancerRuleHandler.ServeHTTP(w, r)
		case LoadbalancerServiceUploadSslCertProcedure:
			loadbalancerServiceUploadSslCertHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLoadbalancerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLoadbalancerServiceHandler struct{}

func (UnimplementedLoadbalancerServiceHandler) AssignCertToLoadBalancer(context.Context, *connect.Request[v1.AssignCertToLoadBalancerRequest]) (*connect.Response[v1.AssignCertToLoadBalancerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.loadbalancer.v1.LoadbalancerService.AssignCertToLoadBalancer is not implemented"))
}

func (UnimplementedLoadbalancerServiceHandler) AssignToLoadBalancerRule(context.Context, *connect.Request[v1.AssignToLoadBalancerRuleRequest]) (*connect.Response[v1.AssignToLoadBalancerRuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.loadbalancer.v1.LoadbalancerService.AssignToLoadBalancerRule is not implemented"))
}

func (UnimplementedLoadbalancerServiceHandler) CreateApplicationLoadBalancer(context.Context, *connect.Request[v1.CreateApplicationLoadBalancerRequest]) (*connect.Response[v1.CreateApplicationLoadBalancerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.loadbalancer.v1.LoadbalancerService.CreateApplicationLoadBalancer is not implemented"))
}

func (UnimplementedLoadbalancerServiceHandler) CreateLBHealthCheckPolicy(context.Context, *connect.Request[v1.CreateLBHealthCheckPolicyRequest]) (*connect.Response[v1.CreateLBHealthCheckPolicyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.loadbalancer.v1.LoadbalancerService.CreateLBHealthCheckPolicy is not implemented"))
}

func (UnimplementedLoadbalancerServiceHandler) CreateLBStickinessPolicy(context.Context, *connect.Request[v1.CreateLBStickinessPolicyRequest]) (*connect.Response[v1.CreateLBStickinessPolicyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.loadbalancer.v1.LoadbalancerService.CreateLBStickinessPolicy is not implemented"))
}

func (UnimplementedLoadbalancerServiceHandler) CreateLoadBalancerRule(context.Context, *connect.Request[v1.CreateLoadBalancerRuleRequest]) (*connect.Response[v1.CreateLoadBalancerRuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.loadbalancer.v1.LoadbalancerService.CreateLoadBalancerRule is not implemented"))
}

func (UnimplementedLoadbalancerServiceHandler) DeleteApplicationLoadBalancer(context.Context, *connect.Request[v1.DeleteApplicationLoadBalancerRequest]) (*connect.Response[v1.DeleteApplicationLoadBalancerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.loadbalancer.v1.LoadbalancerService.DeleteApplicationLoadBalancer is not implemented"))
}

func (UnimplementedLoadbalancerServiceHandler) DeleteLBHealthCheckPolicy(context.Context, *connect.Request[v1.DeleteLBHealthCheckPolicyRequest]) (*connect.Response[v1.DeleteLBHealthCheckPolicyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.loadbalancer.v1.LoadbalancerService.DeleteLBHealthCheckPolicy is not implemented"))
}

func (UnimplementedLoadbalancerServiceHandler) DeleteLBStickinessPolicy(context.Context, *connect.Request[v1.DeleteLBStickinessPolicyRequest]) (*connect.Response[v1.DeleteLBStickinessPolicyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.loadbalancer.v1.LoadbalancerService.DeleteLBStickinessPolicy is not implemented"))
}

func (UnimplementedLoadbalancerServiceHandler) DeleteLoadBalancerRule(context.Context, *connect.Request[v1.DeleteLoadBalancerRuleRequest]) (*connect.Response[v1.DeleteLoadBalancerRuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.loadbalancer.v1.LoadbalancerService.DeleteLoadBalancerRule is not implemented"))
}

func (UnimplementedLoadbalancerServiceHandler) DeleteSslCert(context.Context, *connect.Request[v1.DeleteSslCertRequest]) (*connect.Response[v1.DeleteSslCertResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.loadbalancer.v1.LoadbalancerService.DeleteSslCert is not implemented"))
}

func (UnimplementedLoadbalancerServiceHandler) ListApplicationLoadBalancers(context.Context, *connect.Request[v1.ListApplicationLoadBalancersRequest]) (*connect.Response[v1.ListApplicationLoadBalancersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.loadbalancer.v1.LoadbalancerService.ListApplicationLoadBalancers is not implemented"))
}

func (UnimplementedLoadbalancerServiceHandler) ListLBHealthCheckPolicies(context.Context, *connect.Request[v1.ListLBHealthCheckPoliciesRequest]) (*connect.Response[v1.ListLBHealthCheckPoliciesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.loadbalancer.v1.LoadbalancerService.ListLBHealthCheckPolicies is not implemented"))
}

func (UnimplementedLoadbalancerServiceHandler) ListLBStickinessPolicies(context.Context, *connect.Request[v1.ListLBStickinessPoliciesRequest]) (*connect.Response[v1.ListLBStickinessPoliciesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.loadbalancer.v1.LoadbalancerService.ListLBStickinessPolicies is not implemented"))
}

func (UnimplementedLoadbalancerServiceHandler) ListLoadBalancerRuleInstances(context.Context, *connect.Request[v1.ListLoadBalancerRuleInstancesRequest]) (*connect.Response[v1.ListLoadBalancerRuleInstancesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.loadbalancer.v1.LoadbalancerService.ListLoadBalancerRuleInstances is not implemented"))
}

func (UnimplementedLoadbalancerServiceHandler) ListLoadBalancerRuleInstancesCmdByAdmin(context.Context, *connect.Request[v1.ListLoadBalancerRuleInstancesCmdByAdminRequest]) (*connect.Response[v1.ListLoadBalancerRuleInstancesCmdByAdminResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.loadbalancer.v1.LoadbalancerService.ListLoadBalancerRuleInstancesCmdByAdmin is not implemented"))
}

func (UnimplementedLoadbalancerServiceHandler) ListLoadBalancerRules(context.Context, *connect.Request[v1.ListLoadBalancerRulesRequest]) (*connect.Response[v1.ListLoadBalancerRulesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.loadbalancer.v1.LoadbalancerService.ListLoadBalancerRules is not implemented"))
}

func (UnimplementedLoadbalancerServiceHandler) ListSslCerts(context.Context, *connect.Request[v1.ListSslCertsRequest]) (*connect.Response[v1.ListSslCertsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.loadbalancer.v1.LoadbalancerService.ListSslCerts is not implemented"))
}

func (UnimplementedLoadbalancerServiceHandler) RemoveCertFromLoadBalancer(context.Context, *connect.Request[v1.RemoveCertFromLoadBalancerRequest]) (*connect.Response[v1.RemoveCertFromLoadBalancerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.loadbalancer.v1.LoadbalancerService.RemoveCertFromLoadBalancer is not implemented"))
}

func (UnimplementedLoadbalancerServiceHandler) RemoveFromLoadBalancerRule(context.Context, *connect.Request[v1.RemoveFromLoadBalancerRuleRequest]) (*connect.Response[v1.RemoveFromLoadBalancerRuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.loadbalancer.v1.LoadbalancerService.RemoveFromLoadBalancerRule is not implemented"))
}

func (UnimplementedLoadbalancerServiceHandler) UpdateApplicationLoadBalancer(context.Context, *connect.Request[v1.UpdateApplicationLoadBalancerRequest]) (*connect.Response[v1.UpdateApplicationLoadBalancerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.loadbalancer.v1.LoadbalancerService.UpdateApplicationLoadBalancer is not implemented"))
}

func (UnimplementedLoadbalancerServiceHandler) UpdateLBHealthCheckPolicy(context.Context, *connect.Request[v1.UpdateLBHealthCheckPolicyRequest]) (*connect.Response[v1.UpdateLBHealthCheckPolicyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.loadbalancer.v1.LoadbalancerService.UpdateLBHealthCheckPolicy is not implemented"))
}

func (UnimplementedLoadbalancerServiceHandler) UpdateLBStickinessPolicy(context.Context, *connect.Request[v1.UpdateLBStickinessPolicyRequest]) (*connect.Response[v1.UpdateLBStickinessPolicyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.loadbalancer.v1.LoadbalancerService.UpdateLBStickinessPolicy is not implemented"))
}

func (UnimplementedLoadbalancerServiceHandler) UpdateLoadBalancerRule(context.Context, *connect.Request[v1.UpdateLoadBalancerRuleRequest]) (*connect.Response[v1.UpdateLoadBalancerRuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.loadbalancer.v1.LoadbalancerService.UpdateLoadBalancerRule is not implemented"))
}

func (UnimplementedLoadbalancerServiceHandler) UploadSslCert(context.Context, *connect.Request[v1.UploadSslCertRequest]) (*connect.Response[v1.UploadSslCertResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.loadbalancer.v1.LoadbalancerService.UploadSslCert is not implemented"))
}
