// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: cloudstack/management/loadbalancer/v1/loadbalancer.gen.proto

package loadbalancerv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LoadbalancerService_AssignCertToLoadBalancer_FullMethodName                = "/cloudstack.management.loadbalancer.v1.LoadbalancerService/AssignCertToLoadBalancer"
	LoadbalancerService_AssignToLoadBalancerRule_FullMethodName                = "/cloudstack.management.loadbalancer.v1.LoadbalancerService/AssignToLoadBalancerRule"
	LoadbalancerService_CreateApplicationLoadBalancer_FullMethodName           = "/cloudstack.management.loadbalancer.v1.LoadbalancerService/CreateApplicationLoadBalancer"
	LoadbalancerService_CreateLBHealthCheckPolicy_FullMethodName               = "/cloudstack.management.loadbalancer.v1.LoadbalancerService/CreateLBHealthCheckPolicy"
	LoadbalancerService_CreateLBStickinessPolicy_FullMethodName                = "/cloudstack.management.loadbalancer.v1.LoadbalancerService/CreateLBStickinessPolicy"
	LoadbalancerService_CreateLoadBalancerRule_FullMethodName                  = "/cloudstack.management.loadbalancer.v1.LoadbalancerService/CreateLoadBalancerRule"
	LoadbalancerService_DeleteApplicationLoadBalancer_FullMethodName           = "/cloudstack.management.loadbalancer.v1.LoadbalancerService/DeleteApplicationLoadBalancer"
	LoadbalancerService_DeleteLBHealthCheckPolicy_FullMethodName               = "/cloudstack.management.loadbalancer.v1.LoadbalancerService/DeleteLBHealthCheckPolicy"
	LoadbalancerService_DeleteLBStickinessPolicy_FullMethodName                = "/cloudstack.management.loadbalancer.v1.LoadbalancerService/DeleteLBStickinessPolicy"
	LoadbalancerService_DeleteLoadBalancerRule_FullMethodName                  = "/cloudstack.management.loadbalancer.v1.LoadbalancerService/DeleteLoadBalancerRule"
	LoadbalancerService_DeleteSslCert_FullMethodName                           = "/cloudstack.management.loadbalancer.v1.LoadbalancerService/DeleteSslCert"
	LoadbalancerService_ListApplicationLoadBalancers_FullMethodName            = "/cloudstack.management.loadbalancer.v1.LoadbalancerService/ListApplicationLoadBalancers"
	LoadbalancerService_ListLBHealthCheckPolicies_FullMethodName               = "/cloudstack.management.loadbalancer.v1.LoadbalancerService/ListLBHealthCheckPolicies"
	LoadbalancerService_ListLBStickinessPolicies_FullMethodName                = "/cloudstack.management.loadbalancer.v1.LoadbalancerService/ListLBStickinessPolicies"
	LoadbalancerService_ListLoadBalancerRuleInstances_FullMethodName           = "/cloudstack.management.loadbalancer.v1.LoadbalancerService/ListLoadBalancerRuleInstances"
	LoadbalancerService_ListLoadBalancerRuleInstancesCmdByAdmin_FullMethodName = "/cloudstack.management.loadbalancer.v1.LoadbalancerService/ListLoadBalancerRuleInstancesCmdByAdmin"
	LoadbalancerService_ListLoadBalancerRules_FullMethodName                   = "/cloudstack.management.loadbalancer.v1.LoadbalancerService/ListLoadBalancerRules"
	LoadbalancerService_ListSslCerts_FullMethodName                            = "/cloudstack.management.loadbalancer.v1.LoadbalancerService/ListSslCerts"
	LoadbalancerService_RemoveCertFromLoadBalancer_FullMethodName              = "/cloudstack.management.loadbalancer.v1.LoadbalancerService/RemoveCertFromLoadBalancer"
	LoadbalancerService_RemoveFromLoadBalancerRule_FullMethodName              = "/cloudstack.management.loadbalancer.v1.LoadbalancerService/RemoveFromLoadBalancerRule"
	LoadbalancerService_UpdateApplicationLoadBalancer_FullMethodName           = "/cloudstack.management.loadbalancer.v1.LoadbalancerService/UpdateApplicationLoadBalancer"
	LoadbalancerService_UpdateLBHealthCheckPolicy_FullMethodName               = "/cloudstack.management.loadbalancer.v1.LoadbalancerService/UpdateLBHealthCheckPolicy"
	LoadbalancerService_UpdateLBStickinessPolicy_FullMethodName                = "/cloudstack.management.loadbalancer.v1.LoadbalancerService/UpdateLBStickinessPolicy"
	LoadbalancerService_UpdateLoadBalancerRule_FullMethodName                  = "/cloudstack.management.loadbalancer.v1.LoadbalancerService/UpdateLoadBalancerRule"
	LoadbalancerService_UploadSslCert_FullMethodName                           = "/cloudstack.management.loadbalancer.v1.LoadbalancerService/UploadSslCert"
)

// LoadbalancerServiceClient is the client API for LoadbalancerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// LoadbalancerService provides operations for managing Loadbalancers
type LoadbalancerServiceClient interface {
	// AssignCertToLoadBalancer Assigns a certificate to a load balancer rule
	AssignCertToLoadBalancer(ctx context.Context, in *AssignCertToLoadBalancerRequest, opts ...grpc.CallOption) (*AssignCertToLoadBalancerResponse, error)
	// AssignToLoadBalancerRule Assigns virtual machine or a list of virtual machines to a load balancer rule.
	AssignToLoadBalancerRule(ctx context.Context, in *AssignToLoadBalancerRuleRequest, opts ...grpc.CallOption) (*AssignToLoadBalancerRuleResponse, error)
	// CreateApplicationLoadBalancer Creates an internal load balancer
	CreateApplicationLoadBalancer(ctx context.Context, in *CreateApplicationLoadBalancerRequest, opts ...grpc.CallOption) (*CreateApplicationLoadBalancerResponse, error)
	// CreateLBHealthCheckPolicy Creates a load balancer health check policy
	CreateLBHealthCheckPolicy(ctx context.Context, in *CreateLBHealthCheckPolicyRequest, opts ...grpc.CallOption) (*CreateLBHealthCheckPolicyResponse, error)
	// CreateLBStickinessPolicy Creates a load balancer stickiness policy
	CreateLBStickinessPolicy(ctx context.Context, in *CreateLBStickinessPolicyRequest, opts ...grpc.CallOption) (*CreateLBStickinessPolicyResponse, error)
	// CreateLoadBalancerRule Creates a load balancer rule
	CreateLoadBalancerRule(ctx context.Context, in *CreateLoadBalancerRuleRequest, opts ...grpc.CallOption) (*CreateLoadBalancerRuleResponse, error)
	// DeleteApplicationLoadBalancer Deletes an internal load balancer
	DeleteApplicationLoadBalancer(ctx context.Context, in *DeleteApplicationLoadBalancerRequest, opts ...grpc.CallOption) (*DeleteApplicationLoadBalancerResponse, error)
	// DeleteLBHealthCheckPolicy Deletes a load balancer health check policy.
	DeleteLBHealthCheckPolicy(ctx context.Context, in *DeleteLBHealthCheckPolicyRequest, opts ...grpc.CallOption) (*DeleteLBHealthCheckPolicyResponse, error)
	// DeleteLBStickinessPolicy Deletes a load balancer stickiness policy.
	DeleteLBStickinessPolicy(ctx context.Context, in *DeleteLBStickinessPolicyRequest, opts ...grpc.CallOption) (*DeleteLBStickinessPolicyResponse, error)
	// DeleteLoadBalancerRule Deletes a load balancer rule.
	DeleteLoadBalancerRule(ctx context.Context, in *DeleteLoadBalancerRuleRequest, opts ...grpc.CallOption) (*DeleteLoadBalancerRuleResponse, error)
	// DeleteSslCert Delete a certificate to CloudStack
	DeleteSslCert(ctx context.Context, in *DeleteSslCertRequest, opts ...grpc.CallOption) (*DeleteSslCertResponse, error)
	// ListApplicationLoadBalancers Lists internal load balancers
	ListApplicationLoadBalancers(ctx context.Context, in *ListApplicationLoadBalancersRequest, opts ...grpc.CallOption) (*ListApplicationLoadBalancersResponse, error)
	// ListLBHealthCheckPolicies Lists load balancer health check policies.
	ListLBHealthCheckPolicies(ctx context.Context, in *ListLBHealthCheckPoliciesRequest, opts ...grpc.CallOption) (*ListLBHealthCheckPoliciesResponse, error)
	// ListLBStickinessPolicies Lists load balancer stickiness policies.
	ListLBStickinessPolicies(ctx context.Context, in *ListLBStickinessPoliciesRequest, opts ...grpc.CallOption) (*ListLBStickinessPoliciesResponse, error)
	// ListLoadBalancerRuleInstances List all virtual machine instances that are assigned to a load balancer rule.
	ListLoadBalancerRuleInstances(ctx context.Context, in *ListLoadBalancerRuleInstancesRequest, opts ...grpc.CallOption) (*ListLoadBalancerRuleInstancesResponse, error)
	// ListLoadBalancerRuleInstancesCmdByAdmin List all virtual machine instances that are assigned to a load balancer rule.
	ListLoadBalancerRuleInstancesCmdByAdmin(ctx context.Context, in *ListLoadBalancerRuleInstancesCmdByAdminRequest, opts ...grpc.CallOption) (*ListLoadBalancerRuleInstancesCmdByAdminResponse, error)
	// ListLoadBalancerRules Lists load balancer rules.
	ListLoadBalancerRules(ctx context.Context, in *ListLoadBalancerRulesRequest, opts ...grpc.CallOption) (*ListLoadBalancerRulesResponse, error)
	// ListSslCerts Lists SSL certificates
	ListSslCerts(ctx context.Context, in *ListSslCertsRequest, opts ...grpc.CallOption) (*ListSslCertsResponse, error)
	// RemoveCertFromLoadBalancer Removes a certificate from a load balancer rule
	RemoveCertFromLoadBalancer(ctx context.Context, in *RemoveCertFromLoadBalancerRequest, opts ...grpc.CallOption) (*RemoveCertFromLoadBalancerResponse, error)
	// RemoveFromLoadBalancerRule Removes a virtual machine or a list of virtual machines from a load balancer rule.
	RemoveFromLoadBalancerRule(ctx context.Context, in *RemoveFromLoadBalancerRuleRequest, opts ...grpc.CallOption) (*RemoveFromLoadBalancerRuleResponse, error)
	// UpdateApplicationLoadBalancer Updates an internal load balancer
	UpdateApplicationLoadBalancer(ctx context.Context, in *UpdateApplicationLoadBalancerRequest, opts ...grpc.CallOption) (*UpdateApplicationLoadBalancerResponse, error)
	// UpdateLBHealthCheckPolicy Updates load balancer health check policy
	UpdateLBHealthCheckPolicy(ctx context.Context, in *UpdateLBHealthCheckPolicyRequest, opts ...grpc.CallOption) (*UpdateLBHealthCheckPolicyResponse, error)
	// UpdateLBStickinessPolicy Updates load balancer stickiness policy
	UpdateLBStickinessPolicy(ctx context.Context, in *UpdateLBStickinessPolicyRequest, opts ...grpc.CallOption) (*UpdateLBStickinessPolicyResponse, error)
	// UpdateLoadBalancerRule Updates load balancer
	UpdateLoadBalancerRule(ctx context.Context, in *UpdateLoadBalancerRuleRequest, opts ...grpc.CallOption) (*UpdateLoadBalancerRuleResponse, error)
	// UploadSslCert Upload a certificate to CloudStack
	UploadSslCert(ctx context.Context, in *UploadSslCertRequest, opts ...grpc.CallOption) (*UploadSslCertResponse, error)
}

type loadbalancerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLoadbalancerServiceClient(cc grpc.ClientConnInterface) LoadbalancerServiceClient {
	return &loadbalancerServiceClient{cc}
}

func (c *loadbalancerServiceClient) AssignCertToLoadBalancer(ctx context.Context, in *AssignCertToLoadBalancerRequest, opts ...grpc.CallOption) (*AssignCertToLoadBalancerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignCertToLoadBalancerResponse)
	err := c.cc.Invoke(ctx, LoadbalancerService_AssignCertToLoadBalancer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadbalancerServiceClient) AssignToLoadBalancerRule(ctx context.Context, in *AssignToLoadBalancerRuleRequest, opts ...grpc.CallOption) (*AssignToLoadBalancerRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignToLoadBalancerRuleResponse)
	err := c.cc.Invoke(ctx, LoadbalancerService_AssignToLoadBalancerRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadbalancerServiceClient) CreateApplicationLoadBalancer(ctx context.Context, in *CreateApplicationLoadBalancerRequest, opts ...grpc.CallOption) (*CreateApplicationLoadBalancerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateApplicationLoadBalancerResponse)
	err := c.cc.Invoke(ctx, LoadbalancerService_CreateApplicationLoadBalancer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadbalancerServiceClient) CreateLBHealthCheckPolicy(ctx context.Context, in *CreateLBHealthCheckPolicyRequest, opts ...grpc.CallOption) (*CreateLBHealthCheckPolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLBHealthCheckPolicyResponse)
	err := c.cc.Invoke(ctx, LoadbalancerService_CreateLBHealthCheckPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadbalancerServiceClient) CreateLBStickinessPolicy(ctx context.Context, in *CreateLBStickinessPolicyRequest, opts ...grpc.CallOption) (*CreateLBStickinessPolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLBStickinessPolicyResponse)
	err := c.cc.Invoke(ctx, LoadbalancerService_CreateLBStickinessPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadbalancerServiceClient) CreateLoadBalancerRule(ctx context.Context, in *CreateLoadBalancerRuleRequest, opts ...grpc.CallOption) (*CreateLoadBalancerRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLoadBalancerRuleResponse)
	err := c.cc.Invoke(ctx, LoadbalancerService_CreateLoadBalancerRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadbalancerServiceClient) DeleteApplicationLoadBalancer(ctx context.Context, in *DeleteApplicationLoadBalancerRequest, opts ...grpc.CallOption) (*DeleteApplicationLoadBalancerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteApplicationLoadBalancerResponse)
	err := c.cc.Invoke(ctx, LoadbalancerService_DeleteApplicationLoadBalancer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadbalancerServiceClient) DeleteLBHealthCheckPolicy(ctx context.Context, in *DeleteLBHealthCheckPolicyRequest, opts ...grpc.CallOption) (*DeleteLBHealthCheckPolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteLBHealthCheckPolicyResponse)
	err := c.cc.Invoke(ctx, LoadbalancerService_DeleteLBHealthCheckPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadbalancerServiceClient) DeleteLBStickinessPolicy(ctx context.Context, in *DeleteLBStickinessPolicyRequest, opts ...grpc.CallOption) (*DeleteLBStickinessPolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteLBStickinessPolicyResponse)
	err := c.cc.Invoke(ctx, LoadbalancerService_DeleteLBStickinessPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadbalancerServiceClient) DeleteLoadBalancerRule(ctx context.Context, in *DeleteLoadBalancerRuleRequest, opts ...grpc.CallOption) (*DeleteLoadBalancerRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteLoadBalancerRuleResponse)
	err := c.cc.Invoke(ctx, LoadbalancerService_DeleteLoadBalancerRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadbalancerServiceClient) DeleteSslCert(ctx context.Context, in *DeleteSslCertRequest, opts ...grpc.CallOption) (*DeleteSslCertResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSslCertResponse)
	err := c.cc.Invoke(ctx, LoadbalancerService_DeleteSslCert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadbalancerServiceClient) ListApplicationLoadBalancers(ctx context.Context, in *ListApplicationLoadBalancersRequest, opts ...grpc.CallOption) (*ListApplicationLoadBalancersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListApplicationLoadBalancersResponse)
	err := c.cc.Invoke(ctx, LoadbalancerService_ListApplicationLoadBalancers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadbalancerServiceClient) ListLBHealthCheckPolicies(ctx context.Context, in *ListLBHealthCheckPoliciesRequest, opts ...grpc.CallOption) (*ListLBHealthCheckPoliciesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLBHealthCheckPoliciesResponse)
	err := c.cc.Invoke(ctx, LoadbalancerService_ListLBHealthCheckPolicies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadbalancerServiceClient) ListLBStickinessPolicies(ctx context.Context, in *ListLBStickinessPoliciesRequest, opts ...grpc.CallOption) (*ListLBStickinessPoliciesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLBStickinessPoliciesResponse)
	err := c.cc.Invoke(ctx, LoadbalancerService_ListLBStickinessPolicies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadbalancerServiceClient) ListLoadBalancerRuleInstances(ctx context.Context, in *ListLoadBalancerRuleInstancesRequest, opts ...grpc.CallOption) (*ListLoadBalancerRuleInstancesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLoadBalancerRuleInstancesResponse)
	err := c.cc.Invoke(ctx, LoadbalancerService_ListLoadBalancerRuleInstances_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadbalancerServiceClient) ListLoadBalancerRuleInstancesCmdByAdmin(ctx context.Context, in *ListLoadBalancerRuleInstancesCmdByAdminRequest, opts ...grpc.CallOption) (*ListLoadBalancerRuleInstancesCmdByAdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLoadBalancerRuleInstancesCmdByAdminResponse)
	err := c.cc.Invoke(ctx, LoadbalancerService_ListLoadBalancerRuleInstancesCmdByAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadbalancerServiceClient) ListLoadBalancerRules(ctx context.Context, in *ListLoadBalancerRulesRequest, opts ...grpc.CallOption) (*ListLoadBalancerRulesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLoadBalancerRulesResponse)
	err := c.cc.Invoke(ctx, LoadbalancerService_ListLoadBalancerRules_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadbalancerServiceClient) ListSslCerts(ctx context.Context, in *ListSslCertsRequest, opts ...grpc.CallOption) (*ListSslCertsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSslCertsResponse)
	err := c.cc.Invoke(ctx, LoadbalancerService_ListSslCerts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadbalancerServiceClient) RemoveCertFromLoadBalancer(ctx context.Context, in *RemoveCertFromLoadBalancerRequest, opts ...grpc.CallOption) (*RemoveCertFromLoadBalancerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveCertFromLoadBalancerResponse)
	err := c.cc.Invoke(ctx, LoadbalancerService_RemoveCertFromLoadBalancer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadbalancerServiceClient) RemoveFromLoadBalancerRule(ctx context.Context, in *RemoveFromLoadBalancerRuleRequest, opts ...grpc.CallOption) (*RemoveFromLoadBalancerRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveFromLoadBalancerRuleResponse)
	err := c.cc.Invoke(ctx, LoadbalancerService_RemoveFromLoadBalancerRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadbalancerServiceClient) UpdateApplicationLoadBalancer(ctx context.Context, in *UpdateApplicationLoadBalancerRequest, opts ...grpc.CallOption) (*UpdateApplicationLoadBalancerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateApplicationLoadBalancerResponse)
	err := c.cc.Invoke(ctx, LoadbalancerService_UpdateApplicationLoadBalancer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadbalancerServiceClient) UpdateLBHealthCheckPolicy(ctx context.Context, in *UpdateLBHealthCheckPolicyRequest, opts ...grpc.CallOption) (*UpdateLBHealthCheckPolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateLBHealthCheckPolicyResponse)
	err := c.cc.Invoke(ctx, LoadbalancerService_UpdateLBHealthCheckPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadbalancerServiceClient) UpdateLBStickinessPolicy(ctx context.Context, in *UpdateLBStickinessPolicyRequest, opts ...grpc.CallOption) (*UpdateLBStickinessPolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateLBStickinessPolicyResponse)
	err := c.cc.Invoke(ctx, LoadbalancerService_UpdateLBStickinessPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadbalancerServiceClient) UpdateLoadBalancerRule(ctx context.Context, in *UpdateLoadBalancerRuleRequest, opts ...grpc.CallOption) (*UpdateLoadBalancerRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateLoadBalancerRuleResponse)
	err := c.cc.Invoke(ctx, LoadbalancerService_UpdateLoadBalancerRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadbalancerServiceClient) UploadSslCert(ctx context.Context, in *UploadSslCertRequest, opts ...grpc.CallOption) (*UploadSslCertResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadSslCertResponse)
	err := c.cc.Invoke(ctx, LoadbalancerService_UploadSslCert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoadbalancerServiceServer is the server API for LoadbalancerService service.
// All implementations must embed UnimplementedLoadbalancerServiceServer
// for forward compatibility.
//
// LoadbalancerService provides operations for managing Loadbalancers
type LoadbalancerServiceServer interface {
	// AssignCertToLoadBalancer Assigns a certificate to a load balancer rule
	AssignCertToLoadBalancer(context.Context, *AssignCertToLoadBalancerRequest) (*AssignCertToLoadBalancerResponse, error)
	// AssignToLoadBalancerRule Assigns virtual machine or a list of virtual machines to a load balancer rule.
	AssignToLoadBalancerRule(context.Context, *AssignToLoadBalancerRuleRequest) (*AssignToLoadBalancerRuleResponse, error)
	// CreateApplicationLoadBalancer Creates an internal load balancer
	CreateApplicationLoadBalancer(context.Context, *CreateApplicationLoadBalancerRequest) (*CreateApplicationLoadBalancerResponse, error)
	// CreateLBHealthCheckPolicy Creates a load balancer health check policy
	CreateLBHealthCheckPolicy(context.Context, *CreateLBHealthCheckPolicyRequest) (*CreateLBHealthCheckPolicyResponse, error)
	// CreateLBStickinessPolicy Creates a load balancer stickiness policy
	CreateLBStickinessPolicy(context.Context, *CreateLBStickinessPolicyRequest) (*CreateLBStickinessPolicyResponse, error)
	// CreateLoadBalancerRule Creates a load balancer rule
	CreateLoadBalancerRule(context.Context, *CreateLoadBalancerRuleRequest) (*CreateLoadBalancerRuleResponse, error)
	// DeleteApplicationLoadBalancer Deletes an internal load balancer
	DeleteApplicationLoadBalancer(context.Context, *DeleteApplicationLoadBalancerRequest) (*DeleteApplicationLoadBalancerResponse, error)
	// DeleteLBHealthCheckPolicy Deletes a load balancer health check policy.
	DeleteLBHealthCheckPolicy(context.Context, *DeleteLBHealthCheckPolicyRequest) (*DeleteLBHealthCheckPolicyResponse, error)
	// DeleteLBStickinessPolicy Deletes a load balancer stickiness policy.
	DeleteLBStickinessPolicy(context.Context, *DeleteLBStickinessPolicyRequest) (*DeleteLBStickinessPolicyResponse, error)
	// DeleteLoadBalancerRule Deletes a load balancer rule.
	DeleteLoadBalancerRule(context.Context, *DeleteLoadBalancerRuleRequest) (*DeleteLoadBalancerRuleResponse, error)
	// DeleteSslCert Delete a certificate to CloudStack
	DeleteSslCert(context.Context, *DeleteSslCertRequest) (*DeleteSslCertResponse, error)
	// ListApplicationLoadBalancers Lists internal load balancers
	ListApplicationLoadBalancers(context.Context, *ListApplicationLoadBalancersRequest) (*ListApplicationLoadBalancersResponse, error)
	// ListLBHealthCheckPolicies Lists load balancer health check policies.
	ListLBHealthCheckPolicies(context.Context, *ListLBHealthCheckPoliciesRequest) (*ListLBHealthCheckPoliciesResponse, error)
	// ListLBStickinessPolicies Lists load balancer stickiness policies.
	ListLBStickinessPolicies(context.Context, *ListLBStickinessPoliciesRequest) (*ListLBStickinessPoliciesResponse, error)
	// ListLoadBalancerRuleInstances List all virtual machine instances that are assigned to a load balancer rule.
	ListLoadBalancerRuleInstances(context.Context, *ListLoadBalancerRuleInstancesRequest) (*ListLoadBalancerRuleInstancesResponse, error)
	// ListLoadBalancerRuleInstancesCmdByAdmin List all virtual machine instances that are assigned to a load balancer rule.
	ListLoadBalancerRuleInstancesCmdByAdmin(context.Context, *ListLoadBalancerRuleInstancesCmdByAdminRequest) (*ListLoadBalancerRuleInstancesCmdByAdminResponse, error)
	// ListLoadBalancerRules Lists load balancer rules.
	ListLoadBalancerRules(context.Context, *ListLoadBalancerRulesRequest) (*ListLoadBalancerRulesResponse, error)
	// ListSslCerts Lists SSL certificates
	ListSslCerts(context.Context, *ListSslCertsRequest) (*ListSslCertsResponse, error)
	// RemoveCertFromLoadBalancer Removes a certificate from a load balancer rule
	RemoveCertFromLoadBalancer(context.Context, *RemoveCertFromLoadBalancerRequest) (*RemoveCertFromLoadBalancerResponse, error)
	// RemoveFromLoadBalancerRule Removes a virtual machine or a list of virtual machines from a load balancer rule.
	RemoveFromLoadBalancerRule(context.Context, *RemoveFromLoadBalancerRuleRequest) (*RemoveFromLoadBalancerRuleResponse, error)
	// UpdateApplicationLoadBalancer Updates an internal load balancer
	UpdateApplicationLoadBalancer(context.Context, *UpdateApplicationLoadBalancerRequest) (*UpdateApplicationLoadBalancerResponse, error)
	// UpdateLBHealthCheckPolicy Updates load balancer health check policy
	UpdateLBHealthCheckPolicy(context.Context, *UpdateLBHealthCheckPolicyRequest) (*UpdateLBHealthCheckPolicyResponse, error)
	// UpdateLBStickinessPolicy Updates load balancer stickiness policy
	UpdateLBStickinessPolicy(context.Context, *UpdateLBStickinessPolicyRequest) (*UpdateLBStickinessPolicyResponse, error)
	// UpdateLoadBalancerRule Updates load balancer
	UpdateLoadBalancerRule(context.Context, *UpdateLoadBalancerRuleRequest) (*UpdateLoadBalancerRuleResponse, error)
	// UploadSslCert Upload a certificate to CloudStack
	UploadSslCert(context.Context, *UploadSslCertRequest) (*UploadSslCertResponse, error)
	mustEmbedUnimplementedLoadbalancerServiceServer()
}

// UnimplementedLoadbalancerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLoadbalancerServiceServer struct{}

func (UnimplementedLoadbalancerServiceServer) AssignCertToLoadBalancer(context.Context, *AssignCertToLoadBalancerRequest) (*AssignCertToLoadBalancerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignCertToLoadBalancer not implemented")
}
func (UnimplementedLoadbalancerServiceServer) AssignToLoadBalancerRule(context.Context, *AssignToLoadBalancerRuleRequest) (*AssignToLoadBalancerRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignToLoadBalancerRule not implemented")
}
func (UnimplementedLoadbalancerServiceServer) CreateApplicationLoadBalancer(context.Context, *CreateApplicationLoadBalancerRequest) (*CreateApplicationLoadBalancerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApplicationLoadBalancer not implemented")
}
func (UnimplementedLoadbalancerServiceServer) CreateLBHealthCheckPolicy(context.Context, *CreateLBHealthCheckPolicyRequest) (*CreateLBHealthCheckPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLBHealthCheckPolicy not implemented")
}
func (UnimplementedLoadbalancerServiceServer) CreateLBStickinessPolicy(context.Context, *CreateLBStickinessPolicyRequest) (*CreateLBStickinessPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLBStickinessPolicy not implemented")
}
func (UnimplementedLoadbalancerServiceServer) CreateLoadBalancerRule(context.Context, *CreateLoadBalancerRuleRequest) (*CreateLoadBalancerRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLoadBalancerRule not implemented")
}
func (UnimplementedLoadbalancerServiceServer) DeleteApplicationLoadBalancer(context.Context, *DeleteApplicationLoadBalancerRequest) (*DeleteApplicationLoadBalancerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApplicationLoadBalancer not implemented")
}
func (UnimplementedLoadbalancerServiceServer) DeleteLBHealthCheckPolicy(context.Context, *DeleteLBHealthCheckPolicyRequest) (*DeleteLBHealthCheckPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLBHealthCheckPolicy not implemented")
}
func (UnimplementedLoadbalancerServiceServer) DeleteLBStickinessPolicy(context.Context, *DeleteLBStickinessPolicyRequest) (*DeleteLBStickinessPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLBStickinessPolicy not implemented")
}
func (UnimplementedLoadbalancerServiceServer) DeleteLoadBalancerRule(context.Context, *DeleteLoadBalancerRuleRequest) (*DeleteLoadBalancerRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLoadBalancerRule not implemented")
}
func (UnimplementedLoadbalancerServiceServer) DeleteSslCert(context.Context, *DeleteSslCertRequest) (*DeleteSslCertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSslCert not implemented")
}
func (UnimplementedLoadbalancerServiceServer) ListApplicationLoadBalancers(context.Context, *ListApplicationLoadBalancersRequest) (*ListApplicationLoadBalancersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApplicationLoadBalancers not implemented")
}
func (UnimplementedLoadbalancerServiceServer) ListLBHealthCheckPolicies(context.Context, *ListLBHealthCheckPoliciesRequest) (*ListLBHealthCheckPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLBHealthCheckPolicies not implemented")
}
func (UnimplementedLoadbalancerServiceServer) ListLBStickinessPolicies(context.Context, *ListLBStickinessPoliciesRequest) (*ListLBStickinessPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLBStickinessPolicies not implemented")
}
func (UnimplementedLoadbalancerServiceServer) ListLoadBalancerRuleInstances(context.Context, *ListLoadBalancerRuleInstancesRequest) (*ListLoadBalancerRuleInstancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLoadBalancerRuleInstances not implemented")
}
func (UnimplementedLoadbalancerServiceServer) ListLoadBalancerRuleInstancesCmdByAdmin(context.Context, *ListLoadBalancerRuleInstancesCmdByAdminRequest) (*ListLoadBalancerRuleInstancesCmdByAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLoadBalancerRuleInstancesCmdByAdmin not implemented")
}
func (UnimplementedLoadbalancerServiceServer) ListLoadBalancerRules(context.Context, *ListLoadBalancerRulesRequest) (*ListLoadBalancerRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLoadBalancerRules not implemented")
}
func (UnimplementedLoadbalancerServiceServer) ListSslCerts(context.Context, *ListSslCertsRequest) (*ListSslCertsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSslCerts not implemented")
}
func (UnimplementedLoadbalancerServiceServer) RemoveCertFromLoadBalancer(context.Context, *RemoveCertFromLoadBalancerRequest) (*RemoveCertFromLoadBalancerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCertFromLoadBalancer not implemented")
}
func (UnimplementedLoadbalancerServiceServer) RemoveFromLoadBalancerRule(context.Context, *RemoveFromLoadBalancerRuleRequest) (*RemoveFromLoadBalancerRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromLoadBalancerRule not implemented")
}
func (UnimplementedLoadbalancerServiceServer) UpdateApplicationLoadBalancer(context.Context, *UpdateApplicationLoadBalancerRequest) (*UpdateApplicationLoadBalancerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApplicationLoadBalancer not implemented")
}
func (UnimplementedLoadbalancerServiceServer) UpdateLBHealthCheckPolicy(context.Context, *UpdateLBHealthCheckPolicyRequest) (*UpdateLBHealthCheckPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLBHealthCheckPolicy not implemented")
}
func (UnimplementedLoadbalancerServiceServer) UpdateLBStickinessPolicy(context.Context, *UpdateLBStickinessPolicyRequest) (*UpdateLBStickinessPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLBStickinessPolicy not implemented")
}
func (UnimplementedLoadbalancerServiceServer) UpdateLoadBalancerRule(context.Context, *UpdateLoadBalancerRuleRequest) (*UpdateLoadBalancerRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLoadBalancerRule not implemented")
}
func (UnimplementedLoadbalancerServiceServer) UploadSslCert(context.Context, *UploadSslCertRequest) (*UploadSslCertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadSslCert not implemented")
}
func (UnimplementedLoadbalancerServiceServer) mustEmbedUnimplementedLoadbalancerServiceServer() {}
func (UnimplementedLoadbalancerServiceServer) testEmbeddedByValue()                             {}

// UnsafeLoadbalancerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoadbalancerServiceServer will
// result in compilation errors.
type UnsafeLoadbalancerServiceServer interface {
	mustEmbedUnimplementedLoadbalancerServiceServer()
}

func RegisterLoadbalancerServiceServer(s grpc.ServiceRegistrar, srv LoadbalancerServiceServer) {
	// If the following call pancis, it indicates UnimplementedLoadbalancerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LoadbalancerService_ServiceDesc, srv)
}

func _LoadbalancerService_AssignCertToLoadBalancer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignCertToLoadBalancerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadbalancerServiceServer).AssignCertToLoadBalancer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoadbalancerService_AssignCertToLoadBalancer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadbalancerServiceServer).AssignCertToLoadBalancer(ctx, req.(*AssignCertToLoadBalancerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadbalancerService_AssignToLoadBalancerRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignToLoadBalancerRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadbalancerServiceServer).AssignToLoadBalancerRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoadbalancerService_AssignToLoadBalancerRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadbalancerServiceServer).AssignToLoadBalancerRule(ctx, req.(*AssignToLoadBalancerRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadbalancerService_CreateApplicationLoadBalancer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApplicationLoadBalancerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadbalancerServiceServer).CreateApplicationLoadBalancer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoadbalancerService_CreateApplicationLoadBalancer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadbalancerServiceServer).CreateApplicationLoadBalancer(ctx, req.(*CreateApplicationLoadBalancerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadbalancerService_CreateLBHealthCheckPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLBHealthCheckPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadbalancerServiceServer).CreateLBHealthCheckPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoadbalancerService_CreateLBHealthCheckPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadbalancerServiceServer).CreateLBHealthCheckPolicy(ctx, req.(*CreateLBHealthCheckPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadbalancerService_CreateLBStickinessPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLBStickinessPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadbalancerServiceServer).CreateLBStickinessPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoadbalancerService_CreateLBStickinessPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadbalancerServiceServer).CreateLBStickinessPolicy(ctx, req.(*CreateLBStickinessPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadbalancerService_CreateLoadBalancerRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLoadBalancerRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadbalancerServiceServer).CreateLoadBalancerRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoadbalancerService_CreateLoadBalancerRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadbalancerServiceServer).CreateLoadBalancerRule(ctx, req.(*CreateLoadBalancerRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadbalancerService_DeleteApplicationLoadBalancer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApplicationLoadBalancerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadbalancerServiceServer).DeleteApplicationLoadBalancer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoadbalancerService_DeleteApplicationLoadBalancer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadbalancerServiceServer).DeleteApplicationLoadBalancer(ctx, req.(*DeleteApplicationLoadBalancerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadbalancerService_DeleteLBHealthCheckPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLBHealthCheckPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadbalancerServiceServer).DeleteLBHealthCheckPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoadbalancerService_DeleteLBHealthCheckPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadbalancerServiceServer).DeleteLBHealthCheckPolicy(ctx, req.(*DeleteLBHealthCheckPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadbalancerService_DeleteLBStickinessPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLBStickinessPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadbalancerServiceServer).DeleteLBStickinessPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoadbalancerService_DeleteLBStickinessPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadbalancerServiceServer).DeleteLBStickinessPolicy(ctx, req.(*DeleteLBStickinessPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadbalancerService_DeleteLoadBalancerRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLoadBalancerRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadbalancerServiceServer).DeleteLoadBalancerRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoadbalancerService_DeleteLoadBalancerRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadbalancerServiceServer).DeleteLoadBalancerRule(ctx, req.(*DeleteLoadBalancerRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadbalancerService_DeleteSslCert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSslCertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadbalancerServiceServer).DeleteSslCert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoadbalancerService_DeleteSslCert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadbalancerServiceServer).DeleteSslCert(ctx, req.(*DeleteSslCertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadbalancerService_ListApplicationLoadBalancers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApplicationLoadBalancersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadbalancerServiceServer).ListApplicationLoadBalancers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoadbalancerService_ListApplicationLoadBalancers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadbalancerServiceServer).ListApplicationLoadBalancers(ctx, req.(*ListApplicationLoadBalancersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadbalancerService_ListLBHealthCheckPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLBHealthCheckPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadbalancerServiceServer).ListLBHealthCheckPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoadbalancerService_ListLBHealthCheckPolicies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadbalancerServiceServer).ListLBHealthCheckPolicies(ctx, req.(*ListLBHealthCheckPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadbalancerService_ListLBStickinessPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLBStickinessPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadbalancerServiceServer).ListLBStickinessPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoadbalancerService_ListLBStickinessPolicies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadbalancerServiceServer).ListLBStickinessPolicies(ctx, req.(*ListLBStickinessPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadbalancerService_ListLoadBalancerRuleInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLoadBalancerRuleInstancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadbalancerServiceServer).ListLoadBalancerRuleInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoadbalancerService_ListLoadBalancerRuleInstances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadbalancerServiceServer).ListLoadBalancerRuleInstances(ctx, req.(*ListLoadBalancerRuleInstancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadbalancerService_ListLoadBalancerRuleInstancesCmdByAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLoadBalancerRuleInstancesCmdByAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadbalancerServiceServer).ListLoadBalancerRuleInstancesCmdByAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoadbalancerService_ListLoadBalancerRuleInstancesCmdByAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadbalancerServiceServer).ListLoadBalancerRuleInstancesCmdByAdmin(ctx, req.(*ListLoadBalancerRuleInstancesCmdByAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadbalancerService_ListLoadBalancerRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLoadBalancerRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadbalancerServiceServer).ListLoadBalancerRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoadbalancerService_ListLoadBalancerRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadbalancerServiceServer).ListLoadBalancerRules(ctx, req.(*ListLoadBalancerRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadbalancerService_ListSslCerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSslCertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadbalancerServiceServer).ListSslCerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoadbalancerService_ListSslCerts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadbalancerServiceServer).ListSslCerts(ctx, req.(*ListSslCertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadbalancerService_RemoveCertFromLoadBalancer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCertFromLoadBalancerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadbalancerServiceServer).RemoveCertFromLoadBalancer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoadbalancerService_RemoveCertFromLoadBalancer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadbalancerServiceServer).RemoveCertFromLoadBalancer(ctx, req.(*RemoveCertFromLoadBalancerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadbalancerService_RemoveFromLoadBalancerRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFromLoadBalancerRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadbalancerServiceServer).RemoveFromLoadBalancerRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoadbalancerService_RemoveFromLoadBalancerRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadbalancerServiceServer).RemoveFromLoadBalancerRule(ctx, req.(*RemoveFromLoadBalancerRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadbalancerService_UpdateApplicationLoadBalancer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApplicationLoadBalancerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadbalancerServiceServer).UpdateApplicationLoadBalancer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoadbalancerService_UpdateApplicationLoadBalancer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadbalancerServiceServer).UpdateApplicationLoadBalancer(ctx, req.(*UpdateApplicationLoadBalancerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadbalancerService_UpdateLBHealthCheckPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLBHealthCheckPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadbalancerServiceServer).UpdateLBHealthCheckPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoadbalancerService_UpdateLBHealthCheckPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadbalancerServiceServer).UpdateLBHealthCheckPolicy(ctx, req.(*UpdateLBHealthCheckPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadbalancerService_UpdateLBStickinessPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLBStickinessPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadbalancerServiceServer).UpdateLBStickinessPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoadbalancerService_UpdateLBStickinessPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadbalancerServiceServer).UpdateLBStickinessPolicy(ctx, req.(*UpdateLBStickinessPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadbalancerService_UpdateLoadBalancerRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLoadBalancerRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadbalancerServiceServer).UpdateLoadBalancerRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoadbalancerService_UpdateLoadBalancerRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadbalancerServiceServer).UpdateLoadBalancerRule(ctx, req.(*UpdateLoadBalancerRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadbalancerService_UploadSslCert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadSslCertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadbalancerServiceServer).UploadSslCert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoadbalancerService_UploadSslCert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadbalancerServiceServer).UploadSslCert(ctx, req.(*UploadSslCertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LoadbalancerService_ServiceDesc is the grpc.ServiceDesc for LoadbalancerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoadbalancerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloudstack.management.loadbalancer.v1.LoadbalancerService",
	HandlerType: (*LoadbalancerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AssignCertToLoadBalancer",
			Handler:    _LoadbalancerService_AssignCertToLoadBalancer_Handler,
		},
		{
			MethodName: "AssignToLoadBalancerRule",
			Handler:    _LoadbalancerService_AssignToLoadBalancerRule_Handler,
		},
		{
			MethodName: "CreateApplicationLoadBalancer",
			Handler:    _LoadbalancerService_CreateApplicationLoadBalancer_Handler,
		},
		{
			MethodName: "CreateLBHealthCheckPolicy",
			Handler:    _LoadbalancerService_CreateLBHealthCheckPolicy_Handler,
		},
		{
			MethodName: "CreateLBStickinessPolicy",
			Handler:    _LoadbalancerService_CreateLBStickinessPolicy_Handler,
		},
		{
			MethodName: "CreateLoadBalancerRule",
			Handler:    _LoadbalancerService_CreateLoadBalancerRule_Handler,
		},
		{
			MethodName: "DeleteApplicationLoadBalancer",
			Handler:    _LoadbalancerService_DeleteApplicationLoadBalancer_Handler,
		},
		{
			MethodName: "DeleteLBHealthCheckPolicy",
			Handler:    _LoadbalancerService_DeleteLBHealthCheckPolicy_Handler,
		},
		{
			MethodName: "DeleteLBStickinessPolicy",
			Handler:    _LoadbalancerService_DeleteLBStickinessPolicy_Handler,
		},
		{
			MethodName: "DeleteLoadBalancerRule",
			Handler:    _LoadbalancerService_DeleteLoadBalancerRule_Handler,
		},
		{
			MethodName: "DeleteSslCert",
			Handler:    _LoadbalancerService_DeleteSslCert_Handler,
		},
		{
			MethodName: "ListApplicationLoadBalancers",
			Handler:    _LoadbalancerService_ListApplicationLoadBalancers_Handler,
		},
		{
			MethodName: "ListLBHealthCheckPolicies",
			Handler:    _LoadbalancerService_ListLBHealthCheckPolicies_Handler,
		},
		{
			MethodName: "ListLBStickinessPolicies",
			Handler:    _LoadbalancerService_ListLBStickinessPolicies_Handler,
		},
		{
			MethodName: "ListLoadBalancerRuleInstances",
			Handler:    _LoadbalancerService_ListLoadBalancerRuleInstances_Handler,
		},
		{
			MethodName: "ListLoadBalancerRuleInstancesCmdByAdmin",
			Handler:    _LoadbalancerService_ListLoadBalancerRuleInstancesCmdByAdmin_Handler,
		},
		{
			MethodName: "ListLoadBalancerRules",
			Handler:    _LoadbalancerService_ListLoadBalancerRules_Handler,
		},
		{
			MethodName: "ListSslCerts",
			Handler:    _LoadbalancerService_ListSslCerts_Handler,
		},
		{
			MethodName: "RemoveCertFromLoadBalancer",
			Handler:    _LoadbalancerService_RemoveCertFromLoadBalancer_Handler,
		},
		{
			MethodName: "RemoveFromLoadBalancerRule",
			Handler:    _LoadbalancerService_RemoveFromLoadBalancerRule_Handler,
		},
		{
			MethodName: "UpdateApplicationLoadBalancer",
			Handler:    _LoadbalancerService_UpdateApplicationLoadBalancer_Handler,
		},
		{
			MethodName: "UpdateLBHealthCheckPolicy",
			Handler:    _LoadbalancerService_UpdateLBHealthCheckPolicy_Handler,
		},
		{
			MethodName: "UpdateLBStickinessPolicy",
			Handler:    _LoadbalancerService_UpdateLBStickinessPolicy_Handler,
		},
		{
			MethodName: "UpdateLoadBalancerRule",
			Handler:    _LoadbalancerService_UpdateLoadBalancerRule_Handler,
		},
		{
			MethodName: "UploadSslCert",
			Handler:    _LoadbalancerService_UploadSslCert_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloudstack/management/loadbalancer/v1/loadbalancer.gen.proto",
}
