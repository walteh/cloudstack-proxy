// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cloudstack/management/region/v1/region.gen.proto

package regionv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/walteh/cloudstack-proxy/gen/proto/golang/cloudstack/management/region/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RegionServiceName is the fully-qualified name of the RegionService service.
	RegionServiceName = "cloudstack.management.region.v1.RegionService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RegionServiceAddRegionProcedure is the fully-qualified name of the RegionService's AddRegion RPC.
	RegionServiceAddRegionProcedure = "/cloudstack.management.region.v1.RegionService/AddRegion"
	// RegionServiceCreatePortableIpRangeProcedure is the fully-qualified name of the RegionService's
	// CreatePortableIpRange RPC.
	RegionServiceCreatePortableIpRangeProcedure = "/cloudstack.management.region.v1.RegionService/CreatePortableIpRange"
	// RegionServiceDeletePortableIpRangeProcedure is the fully-qualified name of the RegionService's
	// DeletePortableIpRange RPC.
	RegionServiceDeletePortableIpRangeProcedure = "/cloudstack.management.region.v1.RegionService/DeletePortableIpRange"
	// RegionServiceListPortableIpRangesProcedure is the fully-qualified name of the RegionService's
	// ListPortableIpRanges RPC.
	RegionServiceListPortableIpRangesProcedure = "/cloudstack.management.region.v1.RegionService/ListPortableIpRanges"
	// RegionServiceListRegionsProcedure is the fully-qualified name of the RegionService's ListRegions
	// RPC.
	RegionServiceListRegionsProcedure = "/cloudstack.management.region.v1.RegionService/ListRegions"
	// RegionServiceRemoveRegionProcedure is the fully-qualified name of the RegionService's
	// RemoveRegion RPC.
	RegionServiceRemoveRegionProcedure = "/cloudstack.management.region.v1.RegionService/RemoveRegion"
	// RegionServiceUpdateRegionProcedure is the fully-qualified name of the RegionService's
	// UpdateRegion RPC.
	RegionServiceUpdateRegionProcedure = "/cloudstack.management.region.v1.RegionService/UpdateRegion"
)

// RegionServiceClient is a client for the cloudstack.management.region.v1.RegionService service.
type RegionServiceClient interface {
	// AddRegion Adds a Region
	AddRegion(context.Context, *connect.Request[v1.AddRegionRequest]) (*connect.Response[v1.AddRegionResponse], error)
	// CreatePortableIpRange adds a range of portable public IP's to a region
	CreatePortableIpRange(context.Context, *connect.Request[v1.CreatePortableIpRangeRequest]) (*connect.Response[v1.CreatePortableIpRangeResponse], error)
	// DeletePortableIpRange deletes a range of portable public IP's associated with a region
	DeletePortableIpRange(context.Context, *connect.Request[v1.DeletePortableIpRangeRequest]) (*connect.Response[v1.DeletePortableIpRangeResponse], error)
	// ListPortableIpRanges list portable IP ranges
	ListPortableIpRanges(context.Context, *connect.Request[v1.ListPortableIpRangesRequest]) (*connect.Response[v1.ListPortableIpRangesResponse], error)
	// ListRegions Lists Regions
	ListRegions(context.Context, *connect.Request[v1.ListRegionsRequest]) (*connect.Response[v1.ListRegionsResponse], error)
	// RemoveRegion Removes specified region
	RemoveRegion(context.Context, *connect.Request[v1.RemoveRegionRequest]) (*connect.Response[v1.RemoveRegionResponse], error)
	// UpdateRegion Updates a region
	UpdateRegion(context.Context, *connect.Request[v1.UpdateRegionRequest]) (*connect.Response[v1.UpdateRegionResponse], error)
}

// NewRegionServiceClient constructs a client for the cloudstack.management.region.v1.RegionService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRegionServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RegionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	regionServiceMethods := v1.File_cloudstack_management_region_v1_region_gen_proto.Services().ByName("RegionService").Methods()
	return &regionServiceClient{
		addRegion: connect.NewClient[v1.AddRegionRequest, v1.AddRegionResponse](
			httpClient,
			baseURL+RegionServiceAddRegionProcedure,
			connect.WithSchema(regionServiceMethods.ByName("AddRegion")),
			connect.WithClientOptions(opts...),
		),
		createPortableIpRange: connect.NewClient[v1.CreatePortableIpRangeRequest, v1.CreatePortableIpRangeResponse](
			httpClient,
			baseURL+RegionServiceCreatePortableIpRangeProcedure,
			connect.WithSchema(regionServiceMethods.ByName("CreatePortableIpRange")),
			connect.WithClientOptions(opts...),
		),
		deletePortableIpRange: connect.NewClient[v1.DeletePortableIpRangeRequest, v1.DeletePortableIpRangeResponse](
			httpClient,
			baseURL+RegionServiceDeletePortableIpRangeProcedure,
			connect.WithSchema(regionServiceMethods.ByName("DeletePortableIpRange")),
			connect.WithClientOptions(opts...),
		),
		listPortableIpRanges: connect.NewClient[v1.ListPortableIpRangesRequest, v1.ListPortableIpRangesResponse](
			httpClient,
			baseURL+RegionServiceListPortableIpRangesProcedure,
			connect.WithSchema(regionServiceMethods.ByName("ListPortableIpRanges")),
			connect.WithClientOptions(opts...),
		),
		listRegions: connect.NewClient[v1.ListRegionsRequest, v1.ListRegionsResponse](
			httpClient,
			baseURL+RegionServiceListRegionsProcedure,
			connect.WithSchema(regionServiceMethods.ByName("ListRegions")),
			connect.WithClientOptions(opts...),
		),
		removeRegion: connect.NewClient[v1.RemoveRegionRequest, v1.RemoveRegionResponse](
			httpClient,
			baseURL+RegionServiceRemoveRegionProcedure,
			connect.WithSchema(regionServiceMethods.ByName("RemoveRegion")),
			connect.WithClientOptions(opts...),
		),
		updateRegion: connect.NewClient[v1.UpdateRegionRequest, v1.UpdateRegionResponse](
			httpClient,
			baseURL+RegionServiceUpdateRegionProcedure,
			connect.WithSchema(regionServiceMethods.ByName("UpdateRegion")),
			connect.WithClientOptions(opts...),
		),
	}
}

// regionServiceClient implements RegionServiceClient.
type regionServiceClient struct {
	addRegion             *connect.Client[v1.AddRegionRequest, v1.AddRegionResponse]
	createPortableIpRange *connect.Client[v1.CreatePortableIpRangeRequest, v1.CreatePortableIpRangeResponse]
	deletePortableIpRange *connect.Client[v1.DeletePortableIpRangeRequest, v1.DeletePortableIpRangeResponse]
	listPortableIpRanges  *connect.Client[v1.ListPortableIpRangesRequest, v1.ListPortableIpRangesResponse]
	listRegions           *connect.Client[v1.ListRegionsRequest, v1.ListRegionsResponse]
	removeRegion          *connect.Client[v1.RemoveRegionRequest, v1.RemoveRegionResponse]
	updateRegion          *connect.Client[v1.UpdateRegionRequest, v1.UpdateRegionResponse]
}

// AddRegion calls cloudstack.management.region.v1.RegionService.AddRegion.
func (c *regionServiceClient) AddRegion(ctx context.Context, req *connect.Request[v1.AddRegionRequest]) (*connect.Response[v1.AddRegionResponse], error) {
	return c.addRegion.CallUnary(ctx, req)
}

// CreatePortableIpRange calls cloudstack.management.region.v1.RegionService.CreatePortableIpRange.
func (c *regionServiceClient) CreatePortableIpRange(ctx context.Context, req *connect.Request[v1.CreatePortableIpRangeRequest]) (*connect.Response[v1.CreatePortableIpRangeResponse], error) {
	return c.createPortableIpRange.CallUnary(ctx, req)
}

// DeletePortableIpRange calls cloudstack.management.region.v1.RegionService.DeletePortableIpRange.
func (c *regionServiceClient) DeletePortableIpRange(ctx context.Context, req *connect.Request[v1.DeletePortableIpRangeRequest]) (*connect.Response[v1.DeletePortableIpRangeResponse], error) {
	return c.deletePortableIpRange.CallUnary(ctx, req)
}

// ListPortableIpRanges calls cloudstack.management.region.v1.RegionService.ListPortableIpRanges.
func (c *regionServiceClient) ListPortableIpRanges(ctx context.Context, req *connect.Request[v1.ListPortableIpRangesRequest]) (*connect.Response[v1.ListPortableIpRangesResponse], error) {
	return c.listPortableIpRanges.CallUnary(ctx, req)
}

// ListRegions calls cloudstack.management.region.v1.RegionService.ListRegions.
func (c *regionServiceClient) ListRegions(ctx context.Context, req *connect.Request[v1.ListRegionsRequest]) (*connect.Response[v1.ListRegionsResponse], error) {
	return c.listRegions.CallUnary(ctx, req)
}

// RemoveRegion calls cloudstack.management.region.v1.RegionService.RemoveRegion.
func (c *regionServiceClient) RemoveRegion(ctx context.Context, req *connect.Request[v1.RemoveRegionRequest]) (*connect.Response[v1.RemoveRegionResponse], error) {
	return c.removeRegion.CallUnary(ctx, req)
}

// UpdateRegion calls cloudstack.management.region.v1.RegionService.UpdateRegion.
func (c *regionServiceClient) UpdateRegion(ctx context.Context, req *connect.Request[v1.UpdateRegionRequest]) (*connect.Response[v1.UpdateRegionResponse], error) {
	return c.updateRegion.CallUnary(ctx, req)
}

// RegionServiceHandler is an implementation of the cloudstack.management.region.v1.RegionService
// service.
type RegionServiceHandler interface {
	// AddRegion Adds a Region
	AddRegion(context.Context, *connect.Request[v1.AddRegionRequest]) (*connect.Response[v1.AddRegionResponse], error)
	// CreatePortableIpRange adds a range of portable public IP's to a region
	CreatePortableIpRange(context.Context, *connect.Request[v1.CreatePortableIpRangeRequest]) (*connect.Response[v1.CreatePortableIpRangeResponse], error)
	// DeletePortableIpRange deletes a range of portable public IP's associated with a region
	DeletePortableIpRange(context.Context, *connect.Request[v1.DeletePortableIpRangeRequest]) (*connect.Response[v1.DeletePortableIpRangeResponse], error)
	// ListPortableIpRanges list portable IP ranges
	ListPortableIpRanges(context.Context, *connect.Request[v1.ListPortableIpRangesRequest]) (*connect.Response[v1.ListPortableIpRangesResponse], error)
	// ListRegions Lists Regions
	ListRegions(context.Context, *connect.Request[v1.ListRegionsRequest]) (*connect.Response[v1.ListRegionsResponse], error)
	// RemoveRegion Removes specified region
	RemoveRegion(context.Context, *connect.Request[v1.RemoveRegionRequest]) (*connect.Response[v1.RemoveRegionResponse], error)
	// UpdateRegion Updates a region
	UpdateRegion(context.Context, *connect.Request[v1.UpdateRegionRequest]) (*connect.Response[v1.UpdateRegionResponse], error)
}

// NewRegionServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRegionServiceHandler(svc RegionServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	regionServiceMethods := v1.File_cloudstack_management_region_v1_region_gen_proto.Services().ByName("RegionService").Methods()
	regionServiceAddRegionHandler := connect.NewUnaryHandler(
		RegionServiceAddRegionProcedure,
		svc.AddRegion,
		connect.WithSchema(regionServiceMethods.ByName("AddRegion")),
		connect.WithHandlerOptions(opts...),
	)
	regionServiceCreatePortableIpRangeHandler := connect.NewUnaryHandler(
		RegionServiceCreatePortableIpRangeProcedure,
		svc.CreatePortableIpRange,
		connect.WithSchema(regionServiceMethods.ByName("CreatePortableIpRange")),
		connect.WithHandlerOptions(opts...),
	)
	regionServiceDeletePortableIpRangeHandler := connect.NewUnaryHandler(
		RegionServiceDeletePortableIpRangeProcedure,
		svc.DeletePortableIpRange,
		connect.WithSchema(regionServiceMethods.ByName("DeletePortableIpRange")),
		connect.WithHandlerOptions(opts...),
	)
	regionServiceListPortableIpRangesHandler := connect.NewUnaryHandler(
		RegionServiceListPortableIpRangesProcedure,
		svc.ListPortableIpRanges,
		connect.WithSchema(regionServiceMethods.ByName("ListPortableIpRanges")),
		connect.WithHandlerOptions(opts...),
	)
	regionServiceListRegionsHandler := connect.NewUnaryHandler(
		RegionServiceListRegionsProcedure,
		svc.ListRegions,
		connect.WithSchema(regionServiceMethods.ByName("ListRegions")),
		connect.WithHandlerOptions(opts...),
	)
	regionServiceRemoveRegionHandler := connect.NewUnaryHandler(
		RegionServiceRemoveRegionProcedure,
		svc.RemoveRegion,
		connect.WithSchema(regionServiceMethods.ByName("RemoveRegion")),
		connect.WithHandlerOptions(opts...),
	)
	regionServiceUpdateRegionHandler := connect.NewUnaryHandler(
		RegionServiceUpdateRegionProcedure,
		svc.UpdateRegion,
		connect.WithSchema(regionServiceMethods.ByName("UpdateRegion")),
		connect.WithHandlerOptions(opts...),
	)
	return "/cloudstack.management.region.v1.RegionService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RegionServiceAddRegionProcedure:
			regionServiceAddRegionHandler.ServeHTTP(w, r)
		case RegionServiceCreatePortableIpRangeProcedure:
			regionServiceCreatePortableIpRangeHandler.ServeHTTP(w, r)
		case RegionServiceDeletePortableIpRangeProcedure:
			regionServiceDeletePortableIpRangeHandler.ServeHTTP(w, r)
		case RegionServiceListPortableIpRangesProcedure:
			regionServiceListPortableIpRangesHandler.ServeHTTP(w, r)
		case RegionServiceListRegionsProcedure:
			regionServiceListRegionsHandler.ServeHTTP(w, r)
		case RegionServiceRemoveRegionProcedure:
			regionServiceRemoveRegionHandler.ServeHTTP(w, r)
		case RegionServiceUpdateRegionProcedure:
			regionServiceUpdateRegionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRegionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRegionServiceHandler struct{}

func (UnimplementedRegionServiceHandler) AddRegion(context.Context, *connect.Request[v1.AddRegionRequest]) (*connect.Response[v1.AddRegionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.region.v1.RegionService.AddRegion is not implemented"))
}

func (UnimplementedRegionServiceHandler) CreatePortableIpRange(context.Context, *connect.Request[v1.CreatePortableIpRangeRequest]) (*connect.Response[v1.CreatePortableIpRangeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.region.v1.RegionService.CreatePortableIpRange is not implemented"))
}

func (UnimplementedRegionServiceHandler) DeletePortableIpRange(context.Context, *connect.Request[v1.DeletePortableIpRangeRequest]) (*connect.Response[v1.DeletePortableIpRangeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.region.v1.RegionService.DeletePortableIpRange is not implemented"))
}

func (UnimplementedRegionServiceHandler) ListPortableIpRanges(context.Context, *connect.Request[v1.ListPortableIpRangesRequest]) (*connect.Response[v1.ListPortableIpRangesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.region.v1.RegionService.ListPortableIpRanges is not implemented"))
}

func (UnimplementedRegionServiceHandler) ListRegions(context.Context, *connect.Request[v1.ListRegionsRequest]) (*connect.Response[v1.ListRegionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.region.v1.RegionService.ListRegions is not implemented"))
}

func (UnimplementedRegionServiceHandler) RemoveRegion(context.Context, *connect.Request[v1.RemoveRegionRequest]) (*connect.Response[v1.RemoveRegionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.region.v1.RegionService.RemoveRegion is not implemented"))
}

func (UnimplementedRegionServiceHandler) UpdateRegion(context.Context, *connect.Request[v1.UpdateRegionRequest]) (*connect.Response[v1.UpdateRegionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.region.v1.RegionService.UpdateRegion is not implemented"))
}
