// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cloudstack/management/region/ha/gslb/v1/gslb.gen.proto

package gslbv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/walteh/cloudstack-proxy/gen/proto/golang/cloudstack/management/region/ha/gslb/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GslbServiceName is the fully-qualified name of the GslbService service.
	GslbServiceName = "cloudstack.management.region.ha.gslb.v1.GslbService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GslbServiceCreateGlobalLoadBalancerRuleProcedure is the fully-qualified name of the GslbService's
	// CreateGlobalLoadBalancerRule RPC.
	GslbServiceCreateGlobalLoadBalancerRuleProcedure = "/cloudstack.management.region.ha.gslb.v1.GslbService/CreateGlobalLoadBalancerRule"
	// GslbServiceUpdateGlobalLoadBalancerRuleProcedure is the fully-qualified name of the GslbService's
	// UpdateGlobalLoadBalancerRule RPC.
	GslbServiceUpdateGlobalLoadBalancerRuleProcedure = "/cloudstack.management.region.ha.gslb.v1.GslbService/UpdateGlobalLoadBalancerRule"
	// GslbServiceListGlobalLoadBalancerRuleProcedure is the fully-qualified name of the GslbService's
	// ListGlobalLoadBalancerRule RPC.
	GslbServiceListGlobalLoadBalancerRuleProcedure = "/cloudstack.management.region.ha.gslb.v1.GslbService/ListGlobalLoadBalancerRule"
	// GslbServiceDeleteGlobalLoadBalancerRuleProcedure is the fully-qualified name of the GslbService's
	// DeleteGlobalLoadBalancerRule RPC.
	GslbServiceDeleteGlobalLoadBalancerRuleProcedure = "/cloudstack.management.region.ha.gslb.v1.GslbService/DeleteGlobalLoadBalancerRule"
	// GslbServiceAssignToGlobalLoadBalancerRuleProcedure is the fully-qualified name of the
	// GslbService's AssignToGlobalLoadBalancerRule RPC.
	GslbServiceAssignToGlobalLoadBalancerRuleProcedure = "/cloudstack.management.region.ha.gslb.v1.GslbService/AssignToGlobalLoadBalancerRule"
	// GslbServiceRemoveFromGlobalLoadBalancerRuleProcedure is the fully-qualified name of the
	// GslbService's RemoveFromGlobalLoadBalancerRule RPC.
	GslbServiceRemoveFromGlobalLoadBalancerRuleProcedure = "/cloudstack.management.region.ha.gslb.v1.GslbService/RemoveFromGlobalLoadBalancerRule"
)

// GslbServiceClient is a client for the cloudstack.management.region.ha.gslb.v1.GslbService
// service.
type GslbServiceClient interface {
	// CreateGlobalLoadBalancerRule Creates a global load balancer rule
	CreateGlobalLoadBalancerRule(context.Context, *connect.Request[v1.CreateGlobalLoadBalancerRuleRequest]) (*connect.Response[v1.CreateGlobalLoadBalancerRuleResponse], error)
	// UpdateGlobalLoadBalancerRule update global load balancer rules.
	UpdateGlobalLoadBalancerRule(context.Context, *connect.Request[v1.UpdateGlobalLoadBalancerRuleRequest]) (*connect.Response[v1.UpdateGlobalLoadBalancerRuleResponse], error)
	// ListGlobalLoadBalancerRule Lists load balancer rules.
	ListGlobalLoadBalancerRule(context.Context, *connect.Request[v1.ListGlobalLoadBalancerRuleRequest]) (*connect.Response[v1.ListGlobalLoadBalancerRuleResponse], error)
	// DeleteGlobalLoadBalancerRule Deletes a global load balancer rule.
	DeleteGlobalLoadBalancerRule(context.Context, *connect.Request[v1.DeleteGlobalLoadBalancerRuleRequest]) (*connect.Response[v1.DeleteGlobalLoadBalancerRuleResponse], error)
	// AssignToGlobalLoadBalancerRule Assign load balancer rule or list of load balancer rules to a global load balancer rules.
	AssignToGlobalLoadBalancerRule(context.Context, *connect.Request[v1.AssignToGlobalLoadBalancerRuleRequest]) (*connect.Response[v1.AssignToGlobalLoadBalancerRuleResponse], error)
	// RemoveFromGlobalLoadBalancerRule Removes a load balancer rule association with global load balancer rule
	RemoveFromGlobalLoadBalancerRule(context.Context, *connect.Request[v1.RemoveFromGlobalLoadBalancerRuleRequest]) (*connect.Response[v1.RemoveFromGlobalLoadBalancerRuleResponse], error)
}

// NewGslbServiceClient constructs a client for the
// cloudstack.management.region.ha.gslb.v1.GslbService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGslbServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GslbServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	gslbServiceMethods := v1.File_cloudstack_management_region_ha_gslb_v1_gslb_gen_proto.Services().ByName("GslbService").Methods()
	return &gslbServiceClient{
		createGlobalLoadBalancerRule: connect.NewClient[v1.CreateGlobalLoadBalancerRuleRequest, v1.CreateGlobalLoadBalancerRuleResponse](
			httpClient,
			baseURL+GslbServiceCreateGlobalLoadBalancerRuleProcedure,
			connect.WithSchema(gslbServiceMethods.ByName("CreateGlobalLoadBalancerRule")),
			connect.WithClientOptions(opts...),
		),
		updateGlobalLoadBalancerRule: connect.NewClient[v1.UpdateGlobalLoadBalancerRuleRequest, v1.UpdateGlobalLoadBalancerRuleResponse](
			httpClient,
			baseURL+GslbServiceUpdateGlobalLoadBalancerRuleProcedure,
			connect.WithSchema(gslbServiceMethods.ByName("UpdateGlobalLoadBalancerRule")),
			connect.WithClientOptions(opts...),
		),
		listGlobalLoadBalancerRule: connect.NewClient[v1.ListGlobalLoadBalancerRuleRequest, v1.ListGlobalLoadBalancerRuleResponse](
			httpClient,
			baseURL+GslbServiceListGlobalLoadBalancerRuleProcedure,
			connect.WithSchema(gslbServiceMethods.ByName("ListGlobalLoadBalancerRule")),
			connect.WithClientOptions(opts...),
		),
		deleteGlobalLoadBalancerRule: connect.NewClient[v1.DeleteGlobalLoadBalancerRuleRequest, v1.DeleteGlobalLoadBalancerRuleResponse](
			httpClient,
			baseURL+GslbServiceDeleteGlobalLoadBalancerRuleProcedure,
			connect.WithSchema(gslbServiceMethods.ByName("DeleteGlobalLoadBalancerRule")),
			connect.WithClientOptions(opts...),
		),
		assignToGlobalLoadBalancerRule: connect.NewClient[v1.AssignToGlobalLoadBalancerRuleRequest, v1.AssignToGlobalLoadBalancerRuleResponse](
			httpClient,
			baseURL+GslbServiceAssignToGlobalLoadBalancerRuleProcedure,
			connect.WithSchema(gslbServiceMethods.ByName("AssignToGlobalLoadBalancerRule")),
			connect.WithClientOptions(opts...),
		),
		removeFromGlobalLoadBalancerRule: connect.NewClient[v1.RemoveFromGlobalLoadBalancerRuleRequest, v1.RemoveFromGlobalLoadBalancerRuleResponse](
			httpClient,
			baseURL+GslbServiceRemoveFromGlobalLoadBalancerRuleProcedure,
			connect.WithSchema(gslbServiceMethods.ByName("RemoveFromGlobalLoadBalancerRule")),
			connect.WithClientOptions(opts...),
		),
	}
}

// gslbServiceClient implements GslbServiceClient.
type gslbServiceClient struct {
	createGlobalLoadBalancerRule     *connect.Client[v1.CreateGlobalLoadBalancerRuleRequest, v1.CreateGlobalLoadBalancerRuleResponse]
	updateGlobalLoadBalancerRule     *connect.Client[v1.UpdateGlobalLoadBalancerRuleRequest, v1.UpdateGlobalLoadBalancerRuleResponse]
	listGlobalLoadBalancerRule       *connect.Client[v1.ListGlobalLoadBalancerRuleRequest, v1.ListGlobalLoadBalancerRuleResponse]
	deleteGlobalLoadBalancerRule     *connect.Client[v1.DeleteGlobalLoadBalancerRuleRequest, v1.DeleteGlobalLoadBalancerRuleResponse]
	assignToGlobalLoadBalancerRule   *connect.Client[v1.AssignToGlobalLoadBalancerRuleRequest, v1.AssignToGlobalLoadBalancerRuleResponse]
	removeFromGlobalLoadBalancerRule *connect.Client[v1.RemoveFromGlobalLoadBalancerRuleRequest, v1.RemoveFromGlobalLoadBalancerRuleResponse]
}

// CreateGlobalLoadBalancerRule calls
// cloudstack.management.region.ha.gslb.v1.GslbService.CreateGlobalLoadBalancerRule.
func (c *gslbServiceClient) CreateGlobalLoadBalancerRule(ctx context.Context, req *connect.Request[v1.CreateGlobalLoadBalancerRuleRequest]) (*connect.Response[v1.CreateGlobalLoadBalancerRuleResponse], error) {
	return c.createGlobalLoadBalancerRule.CallUnary(ctx, req)
}

// UpdateGlobalLoadBalancerRule calls
// cloudstack.management.region.ha.gslb.v1.GslbService.UpdateGlobalLoadBalancerRule.
func (c *gslbServiceClient) UpdateGlobalLoadBalancerRule(ctx context.Context, req *connect.Request[v1.UpdateGlobalLoadBalancerRuleRequest]) (*connect.Response[v1.UpdateGlobalLoadBalancerRuleResponse], error) {
	return c.updateGlobalLoadBalancerRule.CallUnary(ctx, req)
}

// ListGlobalLoadBalancerRule calls
// cloudstack.management.region.ha.gslb.v1.GslbService.ListGlobalLoadBalancerRule.
func (c *gslbServiceClient) ListGlobalLoadBalancerRule(ctx context.Context, req *connect.Request[v1.ListGlobalLoadBalancerRuleRequest]) (*connect.Response[v1.ListGlobalLoadBalancerRuleResponse], error) {
	return c.listGlobalLoadBalancerRule.CallUnary(ctx, req)
}

// DeleteGlobalLoadBalancerRule calls
// cloudstack.management.region.ha.gslb.v1.GslbService.DeleteGlobalLoadBalancerRule.
func (c *gslbServiceClient) DeleteGlobalLoadBalancerRule(ctx context.Context, req *connect.Request[v1.DeleteGlobalLoadBalancerRuleRequest]) (*connect.Response[v1.DeleteGlobalLoadBalancerRuleResponse], error) {
	return c.deleteGlobalLoadBalancerRule.CallUnary(ctx, req)
}

// AssignToGlobalLoadBalancerRule calls
// cloudstack.management.region.ha.gslb.v1.GslbService.AssignToGlobalLoadBalancerRule.
func (c *gslbServiceClient) AssignToGlobalLoadBalancerRule(ctx context.Context, req *connect.Request[v1.AssignToGlobalLoadBalancerRuleRequest]) (*connect.Response[v1.AssignToGlobalLoadBalancerRuleResponse], error) {
	return c.assignToGlobalLoadBalancerRule.CallUnary(ctx, req)
}

// RemoveFromGlobalLoadBalancerRule calls
// cloudstack.management.region.ha.gslb.v1.GslbService.RemoveFromGlobalLoadBalancerRule.
func (c *gslbServiceClient) RemoveFromGlobalLoadBalancerRule(ctx context.Context, req *connect.Request[v1.RemoveFromGlobalLoadBalancerRuleRequest]) (*connect.Response[v1.RemoveFromGlobalLoadBalancerRuleResponse], error) {
	return c.removeFromGlobalLoadBalancerRule.CallUnary(ctx, req)
}

// GslbServiceHandler is an implementation of the
// cloudstack.management.region.ha.gslb.v1.GslbService service.
type GslbServiceHandler interface {
	// CreateGlobalLoadBalancerRule Creates a global load balancer rule
	CreateGlobalLoadBalancerRule(context.Context, *connect.Request[v1.CreateGlobalLoadBalancerRuleRequest]) (*connect.Response[v1.CreateGlobalLoadBalancerRuleResponse], error)
	// UpdateGlobalLoadBalancerRule update global load balancer rules.
	UpdateGlobalLoadBalancerRule(context.Context, *connect.Request[v1.UpdateGlobalLoadBalancerRuleRequest]) (*connect.Response[v1.UpdateGlobalLoadBalancerRuleResponse], error)
	// ListGlobalLoadBalancerRule Lists load balancer rules.
	ListGlobalLoadBalancerRule(context.Context, *connect.Request[v1.ListGlobalLoadBalancerRuleRequest]) (*connect.Response[v1.ListGlobalLoadBalancerRuleResponse], error)
	// DeleteGlobalLoadBalancerRule Deletes a global load balancer rule.
	DeleteGlobalLoadBalancerRule(context.Context, *connect.Request[v1.DeleteGlobalLoadBalancerRuleRequest]) (*connect.Response[v1.DeleteGlobalLoadBalancerRuleResponse], error)
	// AssignToGlobalLoadBalancerRule Assign load balancer rule or list of load balancer rules to a global load balancer rules.
	AssignToGlobalLoadBalancerRule(context.Context, *connect.Request[v1.AssignToGlobalLoadBalancerRuleRequest]) (*connect.Response[v1.AssignToGlobalLoadBalancerRuleResponse], error)
	// RemoveFromGlobalLoadBalancerRule Removes a load balancer rule association with global load balancer rule
	RemoveFromGlobalLoadBalancerRule(context.Context, *connect.Request[v1.RemoveFromGlobalLoadBalancerRuleRequest]) (*connect.Response[v1.RemoveFromGlobalLoadBalancerRuleResponse], error)
}

// NewGslbServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGslbServiceHandler(svc GslbServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	gslbServiceMethods := v1.File_cloudstack_management_region_ha_gslb_v1_gslb_gen_proto.Services().ByName("GslbService").Methods()
	gslbServiceCreateGlobalLoadBalancerRuleHandler := connect.NewUnaryHandler(
		GslbServiceCreateGlobalLoadBalancerRuleProcedure,
		svc.CreateGlobalLoadBalancerRule,
		connect.WithSchema(gslbServiceMethods.ByName("CreateGlobalLoadBalancerRule")),
		connect.WithHandlerOptions(opts...),
	)
	gslbServiceUpdateGlobalLoadBalancerRuleHandler := connect.NewUnaryHandler(
		GslbServiceUpdateGlobalLoadBalancerRuleProcedure,
		svc.UpdateGlobalLoadBalancerRule,
		connect.WithSchema(gslbServiceMethods.ByName("UpdateGlobalLoadBalancerRule")),
		connect.WithHandlerOptions(opts...),
	)
	gslbServiceListGlobalLoadBalancerRuleHandler := connect.NewUnaryHandler(
		GslbServiceListGlobalLoadBalancerRuleProcedure,
		svc.ListGlobalLoadBalancerRule,
		connect.WithSchema(gslbServiceMethods.ByName("ListGlobalLoadBalancerRule")),
		connect.WithHandlerOptions(opts...),
	)
	gslbServiceDeleteGlobalLoadBalancerRuleHandler := connect.NewUnaryHandler(
		GslbServiceDeleteGlobalLoadBalancerRuleProcedure,
		svc.DeleteGlobalLoadBalancerRule,
		connect.WithSchema(gslbServiceMethods.ByName("DeleteGlobalLoadBalancerRule")),
		connect.WithHandlerOptions(opts...),
	)
	gslbServiceAssignToGlobalLoadBalancerRuleHandler := connect.NewUnaryHandler(
		GslbServiceAssignToGlobalLoadBalancerRuleProcedure,
		svc.AssignToGlobalLoadBalancerRule,
		connect.WithSchema(gslbServiceMethods.ByName("AssignToGlobalLoadBalancerRule")),
		connect.WithHandlerOptions(opts...),
	)
	gslbServiceRemoveFromGlobalLoadBalancerRuleHandler := connect.NewUnaryHandler(
		GslbServiceRemoveFromGlobalLoadBalancerRuleProcedure,
		svc.RemoveFromGlobalLoadBalancerRule,
		connect.WithSchema(gslbServiceMethods.ByName("RemoveFromGlobalLoadBalancerRule")),
		connect.WithHandlerOptions(opts...),
	)
	return "/cloudstack.management.region.ha.gslb.v1.GslbService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GslbServiceCreateGlobalLoadBalancerRuleProcedure:
			gslbServiceCreateGlobalLoadBalancerRuleHandler.ServeHTTP(w, r)
		case GslbServiceUpdateGlobalLoadBalancerRuleProcedure:
			gslbServiceUpdateGlobalLoadBalancerRuleHandler.ServeHTTP(w, r)
		case GslbServiceListGlobalLoadBalancerRuleProcedure:
			gslbServiceListGlobalLoadBalancerRuleHandler.ServeHTTP(w, r)
		case GslbServiceDeleteGlobalLoadBalancerRuleProcedure:
			gslbServiceDeleteGlobalLoadBalancerRuleHandler.ServeHTTP(w, r)
		case GslbServiceAssignToGlobalLoadBalancerRuleProcedure:
			gslbServiceAssignToGlobalLoadBalancerRuleHandler.ServeHTTP(w, r)
		case GslbServiceRemoveFromGlobalLoadBalancerRuleProcedure:
			gslbServiceRemoveFromGlobalLoadBalancerRuleHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGslbServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGslbServiceHandler struct{}

func (UnimplementedGslbServiceHandler) CreateGlobalLoadBalancerRule(context.Context, *connect.Request[v1.CreateGlobalLoadBalancerRuleRequest]) (*connect.Response[v1.CreateGlobalLoadBalancerRuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.region.ha.gslb.v1.GslbService.CreateGlobalLoadBalancerRule is not implemented"))
}

func (UnimplementedGslbServiceHandler) UpdateGlobalLoadBalancerRule(context.Context, *connect.Request[v1.UpdateGlobalLoadBalancerRuleRequest]) (*connect.Response[v1.UpdateGlobalLoadBalancerRuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.region.ha.gslb.v1.GslbService.UpdateGlobalLoadBalancerRule is not implemented"))
}

func (UnimplementedGslbServiceHandler) ListGlobalLoadBalancerRule(context.Context, *connect.Request[v1.ListGlobalLoadBalancerRuleRequest]) (*connect.Response[v1.ListGlobalLoadBalancerRuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.region.ha.gslb.v1.GslbService.ListGlobalLoadBalancerRule is not implemented"))
}

func (UnimplementedGslbServiceHandler) DeleteGlobalLoadBalancerRule(context.Context, *connect.Request[v1.DeleteGlobalLoadBalancerRuleRequest]) (*connect.Response[v1.DeleteGlobalLoadBalancerRuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.region.ha.gslb.v1.GslbService.DeleteGlobalLoadBalancerRule is not implemented"))
}

func (UnimplementedGslbServiceHandler) AssignToGlobalLoadBalancerRule(context.Context, *connect.Request[v1.AssignToGlobalLoadBalancerRuleRequest]) (*connect.Response[v1.AssignToGlobalLoadBalancerRuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.region.ha.gslb.v1.GslbService.AssignToGlobalLoadBalancerRule is not implemented"))
}

func (UnimplementedGslbServiceHandler) RemoveFromGlobalLoadBalancerRule(context.Context, *connect.Request[v1.RemoveFromGlobalLoadBalancerRuleRequest]) (*connect.Response[v1.RemoveFromGlobalLoadBalancerRuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.region.ha.gslb.v1.GslbService.RemoveFromGlobalLoadBalancerRule is not implemented"))
}
