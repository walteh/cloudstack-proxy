// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: cloudstack/management/region/ha/gslb/v1/gslb.gen.proto

package gslbv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GslbService_AssignToGlobalLoadBalancerRule_FullMethodName   = "/cloudstack.management.region.ha.gslb.v1.GslbService/AssignToGlobalLoadBalancerRule"
	GslbService_CreateGlobalLoadBalancerRule_FullMethodName     = "/cloudstack.management.region.ha.gslb.v1.GslbService/CreateGlobalLoadBalancerRule"
	GslbService_DeleteGlobalLoadBalancerRule_FullMethodName     = "/cloudstack.management.region.ha.gslb.v1.GslbService/DeleteGlobalLoadBalancerRule"
	GslbService_ListGlobalLoadBalancerRule_FullMethodName       = "/cloudstack.management.region.ha.gslb.v1.GslbService/ListGlobalLoadBalancerRule"
	GslbService_RemoveFromGlobalLoadBalancerRule_FullMethodName = "/cloudstack.management.region.ha.gslb.v1.GslbService/RemoveFromGlobalLoadBalancerRule"
	GslbService_UpdateGlobalLoadBalancerRule_FullMethodName     = "/cloudstack.management.region.ha.gslb.v1.GslbService/UpdateGlobalLoadBalancerRule"
)

// GslbServiceClient is the client API for GslbService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// GslbService provides operations for managing Region.Ha.Gslbs
type GslbServiceClient interface {
	// AssignToGlobalLoadBalancerRule Assign load balancer rule or list of load balancer rules to a global load balancer rules.
	AssignToGlobalLoadBalancerRule(ctx context.Context, in *AssignToGlobalLoadBalancerRuleRequest, opts ...grpc.CallOption) (*AssignToGlobalLoadBalancerRuleResponse, error)
	// CreateGlobalLoadBalancerRule Creates a global load balancer rule
	CreateGlobalLoadBalancerRule(ctx context.Context, in *CreateGlobalLoadBalancerRuleRequest, opts ...grpc.CallOption) (*CreateGlobalLoadBalancerRuleResponse, error)
	// DeleteGlobalLoadBalancerRule Deletes a global load balancer rule.
	DeleteGlobalLoadBalancerRule(ctx context.Context, in *DeleteGlobalLoadBalancerRuleRequest, opts ...grpc.CallOption) (*DeleteGlobalLoadBalancerRuleResponse, error)
	// ListGlobalLoadBalancerRule Lists load balancer rules.
	ListGlobalLoadBalancerRule(ctx context.Context, in *ListGlobalLoadBalancerRuleRequest, opts ...grpc.CallOption) (*ListGlobalLoadBalancerRuleResponse, error)
	// RemoveFromGlobalLoadBalancerRule Removes a load balancer rule association with global load balancer rule
	RemoveFromGlobalLoadBalancerRule(ctx context.Context, in *RemoveFromGlobalLoadBalancerRuleRequest, opts ...grpc.CallOption) (*RemoveFromGlobalLoadBalancerRuleResponse, error)
	// UpdateGlobalLoadBalancerRule update global load balancer rules.
	UpdateGlobalLoadBalancerRule(ctx context.Context, in *UpdateGlobalLoadBalancerRuleRequest, opts ...grpc.CallOption) (*UpdateGlobalLoadBalancerRuleResponse, error)
}

type gslbServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGslbServiceClient(cc grpc.ClientConnInterface) GslbServiceClient {
	return &gslbServiceClient{cc}
}

func (c *gslbServiceClient) AssignToGlobalLoadBalancerRule(ctx context.Context, in *AssignToGlobalLoadBalancerRuleRequest, opts ...grpc.CallOption) (*AssignToGlobalLoadBalancerRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignToGlobalLoadBalancerRuleResponse)
	err := c.cc.Invoke(ctx, GslbService_AssignToGlobalLoadBalancerRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gslbServiceClient) CreateGlobalLoadBalancerRule(ctx context.Context, in *CreateGlobalLoadBalancerRuleRequest, opts ...grpc.CallOption) (*CreateGlobalLoadBalancerRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateGlobalLoadBalancerRuleResponse)
	err := c.cc.Invoke(ctx, GslbService_CreateGlobalLoadBalancerRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gslbServiceClient) DeleteGlobalLoadBalancerRule(ctx context.Context, in *DeleteGlobalLoadBalancerRuleRequest, opts ...grpc.CallOption) (*DeleteGlobalLoadBalancerRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteGlobalLoadBalancerRuleResponse)
	err := c.cc.Invoke(ctx, GslbService_DeleteGlobalLoadBalancerRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gslbServiceClient) ListGlobalLoadBalancerRule(ctx context.Context, in *ListGlobalLoadBalancerRuleRequest, opts ...grpc.CallOption) (*ListGlobalLoadBalancerRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListGlobalLoadBalancerRuleResponse)
	err := c.cc.Invoke(ctx, GslbService_ListGlobalLoadBalancerRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gslbServiceClient) RemoveFromGlobalLoadBalancerRule(ctx context.Context, in *RemoveFromGlobalLoadBalancerRuleRequest, opts ...grpc.CallOption) (*RemoveFromGlobalLoadBalancerRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveFromGlobalLoadBalancerRuleResponse)
	err := c.cc.Invoke(ctx, GslbService_RemoveFromGlobalLoadBalancerRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gslbServiceClient) UpdateGlobalLoadBalancerRule(ctx context.Context, in *UpdateGlobalLoadBalancerRuleRequest, opts ...grpc.CallOption) (*UpdateGlobalLoadBalancerRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateGlobalLoadBalancerRuleResponse)
	err := c.cc.Invoke(ctx, GslbService_UpdateGlobalLoadBalancerRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GslbServiceServer is the server API for GslbService service.
// All implementations must embed UnimplementedGslbServiceServer
// for forward compatibility.
//
// GslbService provides operations for managing Region.Ha.Gslbs
type GslbServiceServer interface {
	// AssignToGlobalLoadBalancerRule Assign load balancer rule or list of load balancer rules to a global load balancer rules.
	AssignToGlobalLoadBalancerRule(context.Context, *AssignToGlobalLoadBalancerRuleRequest) (*AssignToGlobalLoadBalancerRuleResponse, error)
	// CreateGlobalLoadBalancerRule Creates a global load balancer rule
	CreateGlobalLoadBalancerRule(context.Context, *CreateGlobalLoadBalancerRuleRequest) (*CreateGlobalLoadBalancerRuleResponse, error)
	// DeleteGlobalLoadBalancerRule Deletes a global load balancer rule.
	DeleteGlobalLoadBalancerRule(context.Context, *DeleteGlobalLoadBalancerRuleRequest) (*DeleteGlobalLoadBalancerRuleResponse, error)
	// ListGlobalLoadBalancerRule Lists load balancer rules.
	ListGlobalLoadBalancerRule(context.Context, *ListGlobalLoadBalancerRuleRequest) (*ListGlobalLoadBalancerRuleResponse, error)
	// RemoveFromGlobalLoadBalancerRule Removes a load balancer rule association with global load balancer rule
	RemoveFromGlobalLoadBalancerRule(context.Context, *RemoveFromGlobalLoadBalancerRuleRequest) (*RemoveFromGlobalLoadBalancerRuleResponse, error)
	// UpdateGlobalLoadBalancerRule update global load balancer rules.
	UpdateGlobalLoadBalancerRule(context.Context, *UpdateGlobalLoadBalancerRuleRequest) (*UpdateGlobalLoadBalancerRuleResponse, error)
	mustEmbedUnimplementedGslbServiceServer()
}

// UnimplementedGslbServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGslbServiceServer struct{}

func (UnimplementedGslbServiceServer) AssignToGlobalLoadBalancerRule(context.Context, *AssignToGlobalLoadBalancerRuleRequest) (*AssignToGlobalLoadBalancerRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignToGlobalLoadBalancerRule not implemented")
}
func (UnimplementedGslbServiceServer) CreateGlobalLoadBalancerRule(context.Context, *CreateGlobalLoadBalancerRuleRequest) (*CreateGlobalLoadBalancerRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGlobalLoadBalancerRule not implemented")
}
func (UnimplementedGslbServiceServer) DeleteGlobalLoadBalancerRule(context.Context, *DeleteGlobalLoadBalancerRuleRequest) (*DeleteGlobalLoadBalancerRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGlobalLoadBalancerRule not implemented")
}
func (UnimplementedGslbServiceServer) ListGlobalLoadBalancerRule(context.Context, *ListGlobalLoadBalancerRuleRequest) (*ListGlobalLoadBalancerRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGlobalLoadBalancerRule not implemented")
}
func (UnimplementedGslbServiceServer) RemoveFromGlobalLoadBalancerRule(context.Context, *RemoveFromGlobalLoadBalancerRuleRequest) (*RemoveFromGlobalLoadBalancerRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromGlobalLoadBalancerRule not implemented")
}
func (UnimplementedGslbServiceServer) UpdateGlobalLoadBalancerRule(context.Context, *UpdateGlobalLoadBalancerRuleRequest) (*UpdateGlobalLoadBalancerRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGlobalLoadBalancerRule not implemented")
}
func (UnimplementedGslbServiceServer) mustEmbedUnimplementedGslbServiceServer() {}
func (UnimplementedGslbServiceServer) testEmbeddedByValue()                     {}

// UnsafeGslbServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GslbServiceServer will
// result in compilation errors.
type UnsafeGslbServiceServer interface {
	mustEmbedUnimplementedGslbServiceServer()
}

func RegisterGslbServiceServer(s grpc.ServiceRegistrar, srv GslbServiceServer) {
	// If the following call pancis, it indicates UnimplementedGslbServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GslbService_ServiceDesc, srv)
}

func _GslbService_AssignToGlobalLoadBalancerRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignToGlobalLoadBalancerRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GslbServiceServer).AssignToGlobalLoadBalancerRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GslbService_AssignToGlobalLoadBalancerRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GslbServiceServer).AssignToGlobalLoadBalancerRule(ctx, req.(*AssignToGlobalLoadBalancerRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GslbService_CreateGlobalLoadBalancerRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGlobalLoadBalancerRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GslbServiceServer).CreateGlobalLoadBalancerRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GslbService_CreateGlobalLoadBalancerRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GslbServiceServer).CreateGlobalLoadBalancerRule(ctx, req.(*CreateGlobalLoadBalancerRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GslbService_DeleteGlobalLoadBalancerRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGlobalLoadBalancerRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GslbServiceServer).DeleteGlobalLoadBalancerRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GslbService_DeleteGlobalLoadBalancerRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GslbServiceServer).DeleteGlobalLoadBalancerRule(ctx, req.(*DeleteGlobalLoadBalancerRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GslbService_ListGlobalLoadBalancerRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGlobalLoadBalancerRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GslbServiceServer).ListGlobalLoadBalancerRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GslbService_ListGlobalLoadBalancerRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GslbServiceServer).ListGlobalLoadBalancerRule(ctx, req.(*ListGlobalLoadBalancerRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GslbService_RemoveFromGlobalLoadBalancerRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFromGlobalLoadBalancerRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GslbServiceServer).RemoveFromGlobalLoadBalancerRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GslbService_RemoveFromGlobalLoadBalancerRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GslbServiceServer).RemoveFromGlobalLoadBalancerRule(ctx, req.(*RemoveFromGlobalLoadBalancerRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GslbService_UpdateGlobalLoadBalancerRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGlobalLoadBalancerRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GslbServiceServer).UpdateGlobalLoadBalancerRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GslbService_UpdateGlobalLoadBalancerRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GslbServiceServer).UpdateGlobalLoadBalancerRule(ctx, req.(*UpdateGlobalLoadBalancerRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GslbService_ServiceDesc is the grpc.ServiceDesc for GslbService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GslbService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloudstack.management.region.ha.gslb.v1.GslbService",
	HandlerType: (*GslbServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AssignToGlobalLoadBalancerRule",
			Handler:    _GslbService_AssignToGlobalLoadBalancerRule_Handler,
		},
		{
			MethodName: "CreateGlobalLoadBalancerRule",
			Handler:    _GslbService_CreateGlobalLoadBalancerRule_Handler,
		},
		{
			MethodName: "DeleteGlobalLoadBalancerRule",
			Handler:    _GslbService_DeleteGlobalLoadBalancerRule_Handler,
		},
		{
			MethodName: "ListGlobalLoadBalancerRule",
			Handler:    _GslbService_ListGlobalLoadBalancerRule_Handler,
		},
		{
			MethodName: "RemoveFromGlobalLoadBalancerRule",
			Handler:    _GslbService_RemoveFromGlobalLoadBalancerRule_Handler,
		},
		{
			MethodName: "UpdateGlobalLoadBalancerRule",
			Handler:    _GslbService_UpdateGlobalLoadBalancerRule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloudstack/management/region/ha/gslb/v1/gslb.gen.proto",
}
