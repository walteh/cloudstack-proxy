// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cloudstack/management/vpc/v1/vpc.gen.proto

package vpcv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/walteh/cloudstack-proxy/gen/proto/golang/cloudstack/management/vpc/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// VpcServiceName is the fully-qualified name of the VpcService service.
	VpcServiceName = "cloudstack.management.vpc.v1.VpcService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// VpcServiceDeleteStaticRouteProcedure is the fully-qualified name of the VpcService's
	// DeleteStaticRoute RPC.
	VpcServiceDeleteStaticRouteProcedure = "/cloudstack.management.vpc.v1.VpcService/DeleteStaticRoute"
	// VpcServiceCreateVPCProcedure is the fully-qualified name of the VpcService's CreateVPC RPC.
	VpcServiceCreateVPCProcedure = "/cloudstack.management.vpc.v1.VpcService/CreateVPC"
	// VpcServiceUpdateVPCCmdByAdminProcedure is the fully-qualified name of the VpcService's
	// UpdateVPCCmdByAdmin RPC.
	VpcServiceUpdateVPCCmdByAdminProcedure = "/cloudstack.management.vpc.v1.VpcService/UpdateVPCCmdByAdmin"
	// VpcServiceListStaticRoutesProcedure is the fully-qualified name of the VpcService's
	// ListStaticRoutes RPC.
	VpcServiceListStaticRoutesProcedure = "/cloudstack.management.vpc.v1.VpcService/ListStaticRoutes"
	// VpcServiceListVPCsCmdByAdminProcedure is the fully-qualified name of the VpcService's
	// ListVPCsCmdByAdmin RPC.
	VpcServiceListVPCsCmdByAdminProcedure = "/cloudstack.management.vpc.v1.VpcService/ListVPCsCmdByAdmin"
	// VpcServiceListPrivateGatewaysCmdByAdminProcedure is the fully-qualified name of the VpcService's
	// ListPrivateGatewaysCmdByAdmin RPC.
	VpcServiceListPrivateGatewaysCmdByAdminProcedure = "/cloudstack.management.vpc.v1.VpcService/ListPrivateGatewaysCmdByAdmin"
	// VpcServiceCreatePrivateGatewayByAdminProcedure is the fully-qualified name of the VpcService's
	// CreatePrivateGatewayByAdmin RPC.
	VpcServiceCreatePrivateGatewayByAdminProcedure = "/cloudstack.management.vpc.v1.VpcService/CreatePrivateGatewayByAdmin"
	// VpcServiceCreatePrivateGatewayProcedure is the fully-qualified name of the VpcService's
	// CreatePrivateGateway RPC.
	VpcServiceCreatePrivateGatewayProcedure = "/cloudstack.management.vpc.v1.VpcService/CreatePrivateGateway"
	// VpcServiceListVPCsProcedure is the fully-qualified name of the VpcService's ListVPCs RPC.
	VpcServiceListVPCsProcedure = "/cloudstack.management.vpc.v1.VpcService/ListVPCs"
	// VpcServiceUpdateVPCOfferingProcedure is the fully-qualified name of the VpcService's
	// UpdateVPCOffering RPC.
	VpcServiceUpdateVPCOfferingProcedure = "/cloudstack.management.vpc.v1.VpcService/UpdateVPCOffering"
	// VpcServiceListPrivateGatewaysProcedure is the fully-qualified name of the VpcService's
	// ListPrivateGateways RPC.
	VpcServiceListPrivateGatewaysProcedure = "/cloudstack.management.vpc.v1.VpcService/ListPrivateGateways"
	// VpcServiceCreateVPCOfferingProcedure is the fully-qualified name of the VpcService's
	// CreateVPCOffering RPC.
	VpcServiceCreateVPCOfferingProcedure = "/cloudstack.management.vpc.v1.VpcService/CreateVPCOffering"
	// VpcServiceDeletePrivateGatewayProcedure is the fully-qualified name of the VpcService's
	// DeletePrivateGateway RPC.
	VpcServiceDeletePrivateGatewayProcedure = "/cloudstack.management.vpc.v1.VpcService/DeletePrivateGateway"
	// VpcServiceCreateStaticRouteProcedure is the fully-qualified name of the VpcService's
	// CreateStaticRoute RPC.
	VpcServiceCreateStaticRouteProcedure = "/cloudstack.management.vpc.v1.VpcService/CreateStaticRoute"
	// VpcServiceRestartVPCProcedure is the fully-qualified name of the VpcService's RestartVPC RPC.
	VpcServiceRestartVPCProcedure = "/cloudstack.management.vpc.v1.VpcService/RestartVPC"
	// VpcServiceDeleteVPCProcedure is the fully-qualified name of the VpcService's DeleteVPC RPC.
	VpcServiceDeleteVPCProcedure = "/cloudstack.management.vpc.v1.VpcService/DeleteVPC"
	// VpcServiceDeleteVPCOfferingProcedure is the fully-qualified name of the VpcService's
	// DeleteVPCOffering RPC.
	VpcServiceDeleteVPCOfferingProcedure = "/cloudstack.management.vpc.v1.VpcService/DeleteVPCOffering"
	// VpcServiceListVPCOfferingsProcedure is the fully-qualified name of the VpcService's
	// ListVPCOfferings RPC.
	VpcServiceListVPCOfferingsProcedure = "/cloudstack.management.vpc.v1.VpcService/ListVPCOfferings"
	// VpcServiceUpdateVPCProcedure is the fully-qualified name of the VpcService's UpdateVPC RPC.
	VpcServiceUpdateVPCProcedure = "/cloudstack.management.vpc.v1.VpcService/UpdateVPC"
)

// VpcServiceClient is a client for the cloudstack.management.vpc.v1.VpcService service.
type VpcServiceClient interface {
	// DeleteStaticRoute Deletes a static route
	DeleteStaticRoute(context.Context, *connect.Request[v1.DeleteStaticRouteRequest]) (*connect.Response[v1.DeleteStaticRouteResponse], error)
	// CreateVPC Creates a VPC
	CreateVPC(context.Context, *connect.Request[v1.CreateVPCRequest]) (*connect.Response[v1.CreateVPCResponse], error)
	// UpdateVPCCmdByAdmin Updates a VPC
	UpdateVPCCmdByAdmin(context.Context, *connect.Request[v1.UpdateVPCCmdByAdminRequest]) (*connect.Response[v1.UpdateVPCCmdByAdminResponse], error)
	// ListStaticRoutes Lists all static routes
	ListStaticRoutes(context.Context, *connect.Request[v1.ListStaticRoutesRequest]) (*connect.Response[v1.ListStaticRoutesResponse], error)
	// ListVPCsCmdByAdmin Lists VPCs
	ListVPCsCmdByAdmin(context.Context, *connect.Request[v1.ListVPCsCmdByAdminRequest]) (*connect.Response[v1.ListVPCsCmdByAdminResponse], error)
	// ListPrivateGatewaysCmdByAdmin List private gateways
	ListPrivateGatewaysCmdByAdmin(context.Context, *connect.Request[v1.ListPrivateGatewaysCmdByAdminRequest]) (*connect.Response[v1.ListPrivateGatewaysCmdByAdminResponse], error)
	// CreatePrivateGatewayByAdmin Creates a private gateway
	CreatePrivateGatewayByAdmin(context.Context, *connect.Request[v1.CreatePrivateGatewayByAdminRequest]) (*connect.Response[v1.CreatePrivateGatewayByAdminResponse], error)
	// CreatePrivateGateway Creates a private gateway
	CreatePrivateGateway(context.Context, *connect.Request[v1.CreatePrivateGatewayRequest]) (*connect.Response[v1.CreatePrivateGatewayResponse], error)
	// ListVPCs Lists VPCs
	ListVPCs(context.Context, *connect.Request[v1.ListVPCsRequest]) (*connect.Response[v1.ListVPCsResponse], error)
	// UpdateVPCOffering Updates VPC offering
	UpdateVPCOffering(context.Context, *connect.Request[v1.UpdateVPCOfferingRequest]) (*connect.Response[v1.UpdateVPCOfferingResponse], error)
	// ListPrivateGateways List private gateways
	ListPrivateGateways(context.Context, *connect.Request[v1.ListPrivateGatewaysRequest]) (*connect.Response[v1.ListPrivateGatewaysResponse], error)
	// CreateVPCOffering Creates VPC offering
	CreateVPCOffering(context.Context, *connect.Request[v1.CreateVPCOfferingRequest]) (*connect.Response[v1.CreateVPCOfferingResponse], error)
	// DeletePrivateGateway Deletes a Private gateway
	DeletePrivateGateway(context.Context, *connect.Request[v1.DeletePrivateGatewayRequest]) (*connect.Response[v1.DeletePrivateGatewayResponse], error)
	// CreateStaticRoute Creates a static route
	CreateStaticRoute(context.Context, *connect.Request[v1.CreateStaticRouteRequest]) (*connect.Response[v1.CreateStaticRouteResponse], error)
	// RestartVPC Restarts a VPC
	RestartVPC(context.Context, *connect.Request[v1.RestartVPCRequest]) (*connect.Response[v1.RestartVPCResponse], error)
	// DeleteVPC Deletes a VPC
	DeleteVPC(context.Context, *connect.Request[v1.DeleteVPCRequest]) (*connect.Response[v1.DeleteVPCResponse], error)
	// DeleteVPCOffering Deletes VPC offering
	DeleteVPCOffering(context.Context, *connect.Request[v1.DeleteVPCOfferingRequest]) (*connect.Response[v1.DeleteVPCOfferingResponse], error)
	// ListVPCOfferings Lists VPC offerings
	ListVPCOfferings(context.Context, *connect.Request[v1.ListVPCOfferingsRequest]) (*connect.Response[v1.ListVPCOfferingsResponse], error)
	// UpdateVPC Updates a VPC
	UpdateVPC(context.Context, *connect.Request[v1.UpdateVPCRequest]) (*connect.Response[v1.UpdateVPCResponse], error)
}

// NewVpcServiceClient constructs a client for the cloudstack.management.vpc.v1.VpcService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewVpcServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) VpcServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	vpcServiceMethods := v1.File_cloudstack_management_vpc_v1_vpc_gen_proto.Services().ByName("VpcService").Methods()
	return &vpcServiceClient{
		deleteStaticRoute: connect.NewClient[v1.DeleteStaticRouteRequest, v1.DeleteStaticRouteResponse](
			httpClient,
			baseURL+VpcServiceDeleteStaticRouteProcedure,
			connect.WithSchema(vpcServiceMethods.ByName("DeleteStaticRoute")),
			connect.WithClientOptions(opts...),
		),
		createVPC: connect.NewClient[v1.CreateVPCRequest, v1.CreateVPCResponse](
			httpClient,
			baseURL+VpcServiceCreateVPCProcedure,
			connect.WithSchema(vpcServiceMethods.ByName("CreateVPC")),
			connect.WithClientOptions(opts...),
		),
		updateVPCCmdByAdmin: connect.NewClient[v1.UpdateVPCCmdByAdminRequest, v1.UpdateVPCCmdByAdminResponse](
			httpClient,
			baseURL+VpcServiceUpdateVPCCmdByAdminProcedure,
			connect.WithSchema(vpcServiceMethods.ByName("UpdateVPCCmdByAdmin")),
			connect.WithClientOptions(opts...),
		),
		listStaticRoutes: connect.NewClient[v1.ListStaticRoutesRequest, v1.ListStaticRoutesResponse](
			httpClient,
			baseURL+VpcServiceListStaticRoutesProcedure,
			connect.WithSchema(vpcServiceMethods.ByName("ListStaticRoutes")),
			connect.WithClientOptions(opts...),
		),
		listVPCsCmdByAdmin: connect.NewClient[v1.ListVPCsCmdByAdminRequest, v1.ListVPCsCmdByAdminResponse](
			httpClient,
			baseURL+VpcServiceListVPCsCmdByAdminProcedure,
			connect.WithSchema(vpcServiceMethods.ByName("ListVPCsCmdByAdmin")),
			connect.WithClientOptions(opts...),
		),
		listPrivateGatewaysCmdByAdmin: connect.NewClient[v1.ListPrivateGatewaysCmdByAdminRequest, v1.ListPrivateGatewaysCmdByAdminResponse](
			httpClient,
			baseURL+VpcServiceListPrivateGatewaysCmdByAdminProcedure,
			connect.WithSchema(vpcServiceMethods.ByName("ListPrivateGatewaysCmdByAdmin")),
			connect.WithClientOptions(opts...),
		),
		createPrivateGatewayByAdmin: connect.NewClient[v1.CreatePrivateGatewayByAdminRequest, v1.CreatePrivateGatewayByAdminResponse](
			httpClient,
			baseURL+VpcServiceCreatePrivateGatewayByAdminProcedure,
			connect.WithSchema(vpcServiceMethods.ByName("CreatePrivateGatewayByAdmin")),
			connect.WithClientOptions(opts...),
		),
		createPrivateGateway: connect.NewClient[v1.CreatePrivateGatewayRequest, v1.CreatePrivateGatewayResponse](
			httpClient,
			baseURL+VpcServiceCreatePrivateGatewayProcedure,
			connect.WithSchema(vpcServiceMethods.ByName("CreatePrivateGateway")),
			connect.WithClientOptions(opts...),
		),
		listVPCs: connect.NewClient[v1.ListVPCsRequest, v1.ListVPCsResponse](
			httpClient,
			baseURL+VpcServiceListVPCsProcedure,
			connect.WithSchema(vpcServiceMethods.ByName("ListVPCs")),
			connect.WithClientOptions(opts...),
		),
		updateVPCOffering: connect.NewClient[v1.UpdateVPCOfferingRequest, v1.UpdateVPCOfferingResponse](
			httpClient,
			baseURL+VpcServiceUpdateVPCOfferingProcedure,
			connect.WithSchema(vpcServiceMethods.ByName("UpdateVPCOffering")),
			connect.WithClientOptions(opts...),
		),
		listPrivateGateways: connect.NewClient[v1.ListPrivateGatewaysRequest, v1.ListPrivateGatewaysResponse](
			httpClient,
			baseURL+VpcServiceListPrivateGatewaysProcedure,
			connect.WithSchema(vpcServiceMethods.ByName("ListPrivateGateways")),
			connect.WithClientOptions(opts...),
		),
		createVPCOffering: connect.NewClient[v1.CreateVPCOfferingRequest, v1.CreateVPCOfferingResponse](
			httpClient,
			baseURL+VpcServiceCreateVPCOfferingProcedure,
			connect.WithSchema(vpcServiceMethods.ByName("CreateVPCOffering")),
			connect.WithClientOptions(opts...),
		),
		deletePrivateGateway: connect.NewClient[v1.DeletePrivateGatewayRequest, v1.DeletePrivateGatewayResponse](
			httpClient,
			baseURL+VpcServiceDeletePrivateGatewayProcedure,
			connect.WithSchema(vpcServiceMethods.ByName("DeletePrivateGateway")),
			connect.WithClientOptions(opts...),
		),
		createStaticRoute: connect.NewClient[v1.CreateStaticRouteRequest, v1.CreateStaticRouteResponse](
			httpClient,
			baseURL+VpcServiceCreateStaticRouteProcedure,
			connect.WithSchema(vpcServiceMethods.ByName("CreateStaticRoute")),
			connect.WithClientOptions(opts...),
		),
		restartVPC: connect.NewClient[v1.RestartVPCRequest, v1.RestartVPCResponse](
			httpClient,
			baseURL+VpcServiceRestartVPCProcedure,
			connect.WithSchema(vpcServiceMethods.ByName("RestartVPC")),
			connect.WithClientOptions(opts...),
		),
		deleteVPC: connect.NewClient[v1.DeleteVPCRequest, v1.DeleteVPCResponse](
			httpClient,
			baseURL+VpcServiceDeleteVPCProcedure,
			connect.WithSchema(vpcServiceMethods.ByName("DeleteVPC")),
			connect.WithClientOptions(opts...),
		),
		deleteVPCOffering: connect.NewClient[v1.DeleteVPCOfferingRequest, v1.DeleteVPCOfferingResponse](
			httpClient,
			baseURL+VpcServiceDeleteVPCOfferingProcedure,
			connect.WithSchema(vpcServiceMethods.ByName("DeleteVPCOffering")),
			connect.WithClientOptions(opts...),
		),
		listVPCOfferings: connect.NewClient[v1.ListVPCOfferingsRequest, v1.ListVPCOfferingsResponse](
			httpClient,
			baseURL+VpcServiceListVPCOfferingsProcedure,
			connect.WithSchema(vpcServiceMethods.ByName("ListVPCOfferings")),
			connect.WithClientOptions(opts...),
		),
		updateVPC: connect.NewClient[v1.UpdateVPCRequest, v1.UpdateVPCResponse](
			httpClient,
			baseURL+VpcServiceUpdateVPCProcedure,
			connect.WithSchema(vpcServiceMethods.ByName("UpdateVPC")),
			connect.WithClientOptions(opts...),
		),
	}
}

// vpcServiceClient implements VpcServiceClient.
type vpcServiceClient struct {
	deleteStaticRoute             *connect.Client[v1.DeleteStaticRouteRequest, v1.DeleteStaticRouteResponse]
	createVPC                     *connect.Client[v1.CreateVPCRequest, v1.CreateVPCResponse]
	updateVPCCmdByAdmin           *connect.Client[v1.UpdateVPCCmdByAdminRequest, v1.UpdateVPCCmdByAdminResponse]
	listStaticRoutes              *connect.Client[v1.ListStaticRoutesRequest, v1.ListStaticRoutesResponse]
	listVPCsCmdByAdmin            *connect.Client[v1.ListVPCsCmdByAdminRequest, v1.ListVPCsCmdByAdminResponse]
	listPrivateGatewaysCmdByAdmin *connect.Client[v1.ListPrivateGatewaysCmdByAdminRequest, v1.ListPrivateGatewaysCmdByAdminResponse]
	createPrivateGatewayByAdmin   *connect.Client[v1.CreatePrivateGatewayByAdminRequest, v1.CreatePrivateGatewayByAdminResponse]
	createPrivateGateway          *connect.Client[v1.CreatePrivateGatewayRequest, v1.CreatePrivateGatewayResponse]
	listVPCs                      *connect.Client[v1.ListVPCsRequest, v1.ListVPCsResponse]
	updateVPCOffering             *connect.Client[v1.UpdateVPCOfferingRequest, v1.UpdateVPCOfferingResponse]
	listPrivateGateways           *connect.Client[v1.ListPrivateGatewaysRequest, v1.ListPrivateGatewaysResponse]
	createVPCOffering             *connect.Client[v1.CreateVPCOfferingRequest, v1.CreateVPCOfferingResponse]
	deletePrivateGateway          *connect.Client[v1.DeletePrivateGatewayRequest, v1.DeletePrivateGatewayResponse]
	createStaticRoute             *connect.Client[v1.CreateStaticRouteRequest, v1.CreateStaticRouteResponse]
	restartVPC                    *connect.Client[v1.RestartVPCRequest, v1.RestartVPCResponse]
	deleteVPC                     *connect.Client[v1.DeleteVPCRequest, v1.DeleteVPCResponse]
	deleteVPCOffering             *connect.Client[v1.DeleteVPCOfferingRequest, v1.DeleteVPCOfferingResponse]
	listVPCOfferings              *connect.Client[v1.ListVPCOfferingsRequest, v1.ListVPCOfferingsResponse]
	updateVPC                     *connect.Client[v1.UpdateVPCRequest, v1.UpdateVPCResponse]
}

// DeleteStaticRoute calls cloudstack.management.vpc.v1.VpcService.DeleteStaticRoute.
func (c *vpcServiceClient) DeleteStaticRoute(ctx context.Context, req *connect.Request[v1.DeleteStaticRouteRequest]) (*connect.Response[v1.DeleteStaticRouteResponse], error) {
	return c.deleteStaticRoute.CallUnary(ctx, req)
}

// CreateVPC calls cloudstack.management.vpc.v1.VpcService.CreateVPC.
func (c *vpcServiceClient) CreateVPC(ctx context.Context, req *connect.Request[v1.CreateVPCRequest]) (*connect.Response[v1.CreateVPCResponse], error) {
	return c.createVPC.CallUnary(ctx, req)
}

// UpdateVPCCmdByAdmin calls cloudstack.management.vpc.v1.VpcService.UpdateVPCCmdByAdmin.
func (c *vpcServiceClient) UpdateVPCCmdByAdmin(ctx context.Context, req *connect.Request[v1.UpdateVPCCmdByAdminRequest]) (*connect.Response[v1.UpdateVPCCmdByAdminResponse], error) {
	return c.updateVPCCmdByAdmin.CallUnary(ctx, req)
}

// ListStaticRoutes calls cloudstack.management.vpc.v1.VpcService.ListStaticRoutes.
func (c *vpcServiceClient) ListStaticRoutes(ctx context.Context, req *connect.Request[v1.ListStaticRoutesRequest]) (*connect.Response[v1.ListStaticRoutesResponse], error) {
	return c.listStaticRoutes.CallUnary(ctx, req)
}

// ListVPCsCmdByAdmin calls cloudstack.management.vpc.v1.VpcService.ListVPCsCmdByAdmin.
func (c *vpcServiceClient) ListVPCsCmdByAdmin(ctx context.Context, req *connect.Request[v1.ListVPCsCmdByAdminRequest]) (*connect.Response[v1.ListVPCsCmdByAdminResponse], error) {
	return c.listVPCsCmdByAdmin.CallUnary(ctx, req)
}

// ListPrivateGatewaysCmdByAdmin calls
// cloudstack.management.vpc.v1.VpcService.ListPrivateGatewaysCmdByAdmin.
func (c *vpcServiceClient) ListPrivateGatewaysCmdByAdmin(ctx context.Context, req *connect.Request[v1.ListPrivateGatewaysCmdByAdminRequest]) (*connect.Response[v1.ListPrivateGatewaysCmdByAdminResponse], error) {
	return c.listPrivateGatewaysCmdByAdmin.CallUnary(ctx, req)
}

// CreatePrivateGatewayByAdmin calls
// cloudstack.management.vpc.v1.VpcService.CreatePrivateGatewayByAdmin.
func (c *vpcServiceClient) CreatePrivateGatewayByAdmin(ctx context.Context, req *connect.Request[v1.CreatePrivateGatewayByAdminRequest]) (*connect.Response[v1.CreatePrivateGatewayByAdminResponse], error) {
	return c.createPrivateGatewayByAdmin.CallUnary(ctx, req)
}

// CreatePrivateGateway calls cloudstack.management.vpc.v1.VpcService.CreatePrivateGateway.
func (c *vpcServiceClient) CreatePrivateGateway(ctx context.Context, req *connect.Request[v1.CreatePrivateGatewayRequest]) (*connect.Response[v1.CreatePrivateGatewayResponse], error) {
	return c.createPrivateGateway.CallUnary(ctx, req)
}

// ListVPCs calls cloudstack.management.vpc.v1.VpcService.ListVPCs.
func (c *vpcServiceClient) ListVPCs(ctx context.Context, req *connect.Request[v1.ListVPCsRequest]) (*connect.Response[v1.ListVPCsResponse], error) {
	return c.listVPCs.CallUnary(ctx, req)
}

// UpdateVPCOffering calls cloudstack.management.vpc.v1.VpcService.UpdateVPCOffering.
func (c *vpcServiceClient) UpdateVPCOffering(ctx context.Context, req *connect.Request[v1.UpdateVPCOfferingRequest]) (*connect.Response[v1.UpdateVPCOfferingResponse], error) {
	return c.updateVPCOffering.CallUnary(ctx, req)
}

// ListPrivateGateways calls cloudstack.management.vpc.v1.VpcService.ListPrivateGateways.
func (c *vpcServiceClient) ListPrivateGateways(ctx context.Context, req *connect.Request[v1.ListPrivateGatewaysRequest]) (*connect.Response[v1.ListPrivateGatewaysResponse], error) {
	return c.listPrivateGateways.CallUnary(ctx, req)
}

// CreateVPCOffering calls cloudstack.management.vpc.v1.VpcService.CreateVPCOffering.
func (c *vpcServiceClient) CreateVPCOffering(ctx context.Context, req *connect.Request[v1.CreateVPCOfferingRequest]) (*connect.Response[v1.CreateVPCOfferingResponse], error) {
	return c.createVPCOffering.CallUnary(ctx, req)
}

// DeletePrivateGateway calls cloudstack.management.vpc.v1.VpcService.DeletePrivateGateway.
func (c *vpcServiceClient) DeletePrivateGateway(ctx context.Context, req *connect.Request[v1.DeletePrivateGatewayRequest]) (*connect.Response[v1.DeletePrivateGatewayResponse], error) {
	return c.deletePrivateGateway.CallUnary(ctx, req)
}

// CreateStaticRoute calls cloudstack.management.vpc.v1.VpcService.CreateStaticRoute.
func (c *vpcServiceClient) CreateStaticRoute(ctx context.Context, req *connect.Request[v1.CreateStaticRouteRequest]) (*connect.Response[v1.CreateStaticRouteResponse], error) {
	return c.createStaticRoute.CallUnary(ctx, req)
}

// RestartVPC calls cloudstack.management.vpc.v1.VpcService.RestartVPC.
func (c *vpcServiceClient) RestartVPC(ctx context.Context, req *connect.Request[v1.RestartVPCRequest]) (*connect.Response[v1.RestartVPCResponse], error) {
	return c.restartVPC.CallUnary(ctx, req)
}

// DeleteVPC calls cloudstack.management.vpc.v1.VpcService.DeleteVPC.
func (c *vpcServiceClient) DeleteVPC(ctx context.Context, req *connect.Request[v1.DeleteVPCRequest]) (*connect.Response[v1.DeleteVPCResponse], error) {
	return c.deleteVPC.CallUnary(ctx, req)
}

// DeleteVPCOffering calls cloudstack.management.vpc.v1.VpcService.DeleteVPCOffering.
func (c *vpcServiceClient) DeleteVPCOffering(ctx context.Context, req *connect.Request[v1.DeleteVPCOfferingRequest]) (*connect.Response[v1.DeleteVPCOfferingResponse], error) {
	return c.deleteVPCOffering.CallUnary(ctx, req)
}

// ListVPCOfferings calls cloudstack.management.vpc.v1.VpcService.ListVPCOfferings.
func (c *vpcServiceClient) ListVPCOfferings(ctx context.Context, req *connect.Request[v1.ListVPCOfferingsRequest]) (*connect.Response[v1.ListVPCOfferingsResponse], error) {
	return c.listVPCOfferings.CallUnary(ctx, req)
}

// UpdateVPC calls cloudstack.management.vpc.v1.VpcService.UpdateVPC.
func (c *vpcServiceClient) UpdateVPC(ctx context.Context, req *connect.Request[v1.UpdateVPCRequest]) (*connect.Response[v1.UpdateVPCResponse], error) {
	return c.updateVPC.CallUnary(ctx, req)
}

// VpcServiceHandler is an implementation of the cloudstack.management.vpc.v1.VpcService service.
type VpcServiceHandler interface {
	// DeleteStaticRoute Deletes a static route
	DeleteStaticRoute(context.Context, *connect.Request[v1.DeleteStaticRouteRequest]) (*connect.Response[v1.DeleteStaticRouteResponse], error)
	// CreateVPC Creates a VPC
	CreateVPC(context.Context, *connect.Request[v1.CreateVPCRequest]) (*connect.Response[v1.CreateVPCResponse], error)
	// UpdateVPCCmdByAdmin Updates a VPC
	UpdateVPCCmdByAdmin(context.Context, *connect.Request[v1.UpdateVPCCmdByAdminRequest]) (*connect.Response[v1.UpdateVPCCmdByAdminResponse], error)
	// ListStaticRoutes Lists all static routes
	ListStaticRoutes(context.Context, *connect.Request[v1.ListStaticRoutesRequest]) (*connect.Response[v1.ListStaticRoutesResponse], error)
	// ListVPCsCmdByAdmin Lists VPCs
	ListVPCsCmdByAdmin(context.Context, *connect.Request[v1.ListVPCsCmdByAdminRequest]) (*connect.Response[v1.ListVPCsCmdByAdminResponse], error)
	// ListPrivateGatewaysCmdByAdmin List private gateways
	ListPrivateGatewaysCmdByAdmin(context.Context, *connect.Request[v1.ListPrivateGatewaysCmdByAdminRequest]) (*connect.Response[v1.ListPrivateGatewaysCmdByAdminResponse], error)
	// CreatePrivateGatewayByAdmin Creates a private gateway
	CreatePrivateGatewayByAdmin(context.Context, *connect.Request[v1.CreatePrivateGatewayByAdminRequest]) (*connect.Response[v1.CreatePrivateGatewayByAdminResponse], error)
	// CreatePrivateGateway Creates a private gateway
	CreatePrivateGateway(context.Context, *connect.Request[v1.CreatePrivateGatewayRequest]) (*connect.Response[v1.CreatePrivateGatewayResponse], error)
	// ListVPCs Lists VPCs
	ListVPCs(context.Context, *connect.Request[v1.ListVPCsRequest]) (*connect.Response[v1.ListVPCsResponse], error)
	// UpdateVPCOffering Updates VPC offering
	UpdateVPCOffering(context.Context, *connect.Request[v1.UpdateVPCOfferingRequest]) (*connect.Response[v1.UpdateVPCOfferingResponse], error)
	// ListPrivateGateways List private gateways
	ListPrivateGateways(context.Context, *connect.Request[v1.ListPrivateGatewaysRequest]) (*connect.Response[v1.ListPrivateGatewaysResponse], error)
	// CreateVPCOffering Creates VPC offering
	CreateVPCOffering(context.Context, *connect.Request[v1.CreateVPCOfferingRequest]) (*connect.Response[v1.CreateVPCOfferingResponse], error)
	// DeletePrivateGateway Deletes a Private gateway
	DeletePrivateGateway(context.Context, *connect.Request[v1.DeletePrivateGatewayRequest]) (*connect.Response[v1.DeletePrivateGatewayResponse], error)
	// CreateStaticRoute Creates a static route
	CreateStaticRoute(context.Context, *connect.Request[v1.CreateStaticRouteRequest]) (*connect.Response[v1.CreateStaticRouteResponse], error)
	// RestartVPC Restarts a VPC
	RestartVPC(context.Context, *connect.Request[v1.RestartVPCRequest]) (*connect.Response[v1.RestartVPCResponse], error)
	// DeleteVPC Deletes a VPC
	DeleteVPC(context.Context, *connect.Request[v1.DeleteVPCRequest]) (*connect.Response[v1.DeleteVPCResponse], error)
	// DeleteVPCOffering Deletes VPC offering
	DeleteVPCOffering(context.Context, *connect.Request[v1.DeleteVPCOfferingRequest]) (*connect.Response[v1.DeleteVPCOfferingResponse], error)
	// ListVPCOfferings Lists VPC offerings
	ListVPCOfferings(context.Context, *connect.Request[v1.ListVPCOfferingsRequest]) (*connect.Response[v1.ListVPCOfferingsResponse], error)
	// UpdateVPC Updates a VPC
	UpdateVPC(context.Context, *connect.Request[v1.UpdateVPCRequest]) (*connect.Response[v1.UpdateVPCResponse], error)
}

// NewVpcServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewVpcServiceHandler(svc VpcServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	vpcServiceMethods := v1.File_cloudstack_management_vpc_v1_vpc_gen_proto.Services().ByName("VpcService").Methods()
	vpcServiceDeleteStaticRouteHandler := connect.NewUnaryHandler(
		VpcServiceDeleteStaticRouteProcedure,
		svc.DeleteStaticRoute,
		connect.WithSchema(vpcServiceMethods.ByName("DeleteStaticRoute")),
		connect.WithHandlerOptions(opts...),
	)
	vpcServiceCreateVPCHandler := connect.NewUnaryHandler(
		VpcServiceCreateVPCProcedure,
		svc.CreateVPC,
		connect.WithSchema(vpcServiceMethods.ByName("CreateVPC")),
		connect.WithHandlerOptions(opts...),
	)
	vpcServiceUpdateVPCCmdByAdminHandler := connect.NewUnaryHandler(
		VpcServiceUpdateVPCCmdByAdminProcedure,
		svc.UpdateVPCCmdByAdmin,
		connect.WithSchema(vpcServiceMethods.ByName("UpdateVPCCmdByAdmin")),
		connect.WithHandlerOptions(opts...),
	)
	vpcServiceListStaticRoutesHandler := connect.NewUnaryHandler(
		VpcServiceListStaticRoutesProcedure,
		svc.ListStaticRoutes,
		connect.WithSchema(vpcServiceMethods.ByName("ListStaticRoutes")),
		connect.WithHandlerOptions(opts...),
	)
	vpcServiceListVPCsCmdByAdminHandler := connect.NewUnaryHandler(
		VpcServiceListVPCsCmdByAdminProcedure,
		svc.ListVPCsCmdByAdmin,
		connect.WithSchema(vpcServiceMethods.ByName("ListVPCsCmdByAdmin")),
		connect.WithHandlerOptions(opts...),
	)
	vpcServiceListPrivateGatewaysCmdByAdminHandler := connect.NewUnaryHandler(
		VpcServiceListPrivateGatewaysCmdByAdminProcedure,
		svc.ListPrivateGatewaysCmdByAdmin,
		connect.WithSchema(vpcServiceMethods.ByName("ListPrivateGatewaysCmdByAdmin")),
		connect.WithHandlerOptions(opts...),
	)
	vpcServiceCreatePrivateGatewayByAdminHandler := connect.NewUnaryHandler(
		VpcServiceCreatePrivateGatewayByAdminProcedure,
		svc.CreatePrivateGatewayByAdmin,
		connect.WithSchema(vpcServiceMethods.ByName("CreatePrivateGatewayByAdmin")),
		connect.WithHandlerOptions(opts...),
	)
	vpcServiceCreatePrivateGatewayHandler := connect.NewUnaryHandler(
		VpcServiceCreatePrivateGatewayProcedure,
		svc.CreatePrivateGateway,
		connect.WithSchema(vpcServiceMethods.ByName("CreatePrivateGateway")),
		connect.WithHandlerOptions(opts...),
	)
	vpcServiceListVPCsHandler := connect.NewUnaryHandler(
		VpcServiceListVPCsProcedure,
		svc.ListVPCs,
		connect.WithSchema(vpcServiceMethods.ByName("ListVPCs")),
		connect.WithHandlerOptions(opts...),
	)
	vpcServiceUpdateVPCOfferingHandler := connect.NewUnaryHandler(
		VpcServiceUpdateVPCOfferingProcedure,
		svc.UpdateVPCOffering,
		connect.WithSchema(vpcServiceMethods.ByName("UpdateVPCOffering")),
		connect.WithHandlerOptions(opts...),
	)
	vpcServiceListPrivateGatewaysHandler := connect.NewUnaryHandler(
		VpcServiceListPrivateGatewaysProcedure,
		svc.ListPrivateGateways,
		connect.WithSchema(vpcServiceMethods.ByName("ListPrivateGateways")),
		connect.WithHandlerOptions(opts...),
	)
	vpcServiceCreateVPCOfferingHandler := connect.NewUnaryHandler(
		VpcServiceCreateVPCOfferingProcedure,
		svc.CreateVPCOffering,
		connect.WithSchema(vpcServiceMethods.ByName("CreateVPCOffering")),
		connect.WithHandlerOptions(opts...),
	)
	vpcServiceDeletePrivateGatewayHandler := connect.NewUnaryHandler(
		VpcServiceDeletePrivateGatewayProcedure,
		svc.DeletePrivateGateway,
		connect.WithSchema(vpcServiceMethods.ByName("DeletePrivateGateway")),
		connect.WithHandlerOptions(opts...),
	)
	vpcServiceCreateStaticRouteHandler := connect.NewUnaryHandler(
		VpcServiceCreateStaticRouteProcedure,
		svc.CreateStaticRoute,
		connect.WithSchema(vpcServiceMethods.ByName("CreateStaticRoute")),
		connect.WithHandlerOptions(opts...),
	)
	vpcServiceRestartVPCHandler := connect.NewUnaryHandler(
		VpcServiceRestartVPCProcedure,
		svc.RestartVPC,
		connect.WithSchema(vpcServiceMethods.ByName("RestartVPC")),
		connect.WithHandlerOptions(opts...),
	)
	vpcServiceDeleteVPCHandler := connect.NewUnaryHandler(
		VpcServiceDeleteVPCProcedure,
		svc.DeleteVPC,
		connect.WithSchema(vpcServiceMethods.ByName("DeleteVPC")),
		connect.WithHandlerOptions(opts...),
	)
	vpcServiceDeleteVPCOfferingHandler := connect.NewUnaryHandler(
		VpcServiceDeleteVPCOfferingProcedure,
		svc.DeleteVPCOffering,
		connect.WithSchema(vpcServiceMethods.ByName("DeleteVPCOffering")),
		connect.WithHandlerOptions(opts...),
	)
	vpcServiceListVPCOfferingsHandler := connect.NewUnaryHandler(
		VpcServiceListVPCOfferingsProcedure,
		svc.ListVPCOfferings,
		connect.WithSchema(vpcServiceMethods.ByName("ListVPCOfferings")),
		connect.WithHandlerOptions(opts...),
	)
	vpcServiceUpdateVPCHandler := connect.NewUnaryHandler(
		VpcServiceUpdateVPCProcedure,
		svc.UpdateVPC,
		connect.WithSchema(vpcServiceMethods.ByName("UpdateVPC")),
		connect.WithHandlerOptions(opts...),
	)
	return "/cloudstack.management.vpc.v1.VpcService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case VpcServiceDeleteStaticRouteProcedure:
			vpcServiceDeleteStaticRouteHandler.ServeHTTP(w, r)
		case VpcServiceCreateVPCProcedure:
			vpcServiceCreateVPCHandler.ServeHTTP(w, r)
		case VpcServiceUpdateVPCCmdByAdminProcedure:
			vpcServiceUpdateVPCCmdByAdminHandler.ServeHTTP(w, r)
		case VpcServiceListStaticRoutesProcedure:
			vpcServiceListStaticRoutesHandler.ServeHTTP(w, r)
		case VpcServiceListVPCsCmdByAdminProcedure:
			vpcServiceListVPCsCmdByAdminHandler.ServeHTTP(w, r)
		case VpcServiceListPrivateGatewaysCmdByAdminProcedure:
			vpcServiceListPrivateGatewaysCmdByAdminHandler.ServeHTTP(w, r)
		case VpcServiceCreatePrivateGatewayByAdminProcedure:
			vpcServiceCreatePrivateGatewayByAdminHandler.ServeHTTP(w, r)
		case VpcServiceCreatePrivateGatewayProcedure:
			vpcServiceCreatePrivateGatewayHandler.ServeHTTP(w, r)
		case VpcServiceListVPCsProcedure:
			vpcServiceListVPCsHandler.ServeHTTP(w, r)
		case VpcServiceUpdateVPCOfferingProcedure:
			vpcServiceUpdateVPCOfferingHandler.ServeHTTP(w, r)
		case VpcServiceListPrivateGatewaysProcedure:
			vpcServiceListPrivateGatewaysHandler.ServeHTTP(w, r)
		case VpcServiceCreateVPCOfferingProcedure:
			vpcServiceCreateVPCOfferingHandler.ServeHTTP(w, r)
		case VpcServiceDeletePrivateGatewayProcedure:
			vpcServiceDeletePrivateGatewayHandler.ServeHTTP(w, r)
		case VpcServiceCreateStaticRouteProcedure:
			vpcServiceCreateStaticRouteHandler.ServeHTTP(w, r)
		case VpcServiceRestartVPCProcedure:
			vpcServiceRestartVPCHandler.ServeHTTP(w, r)
		case VpcServiceDeleteVPCProcedure:
			vpcServiceDeleteVPCHandler.ServeHTTP(w, r)
		case VpcServiceDeleteVPCOfferingProcedure:
			vpcServiceDeleteVPCOfferingHandler.ServeHTTP(w, r)
		case VpcServiceListVPCOfferingsProcedure:
			vpcServiceListVPCOfferingsHandler.ServeHTTP(w, r)
		case VpcServiceUpdateVPCProcedure:
			vpcServiceUpdateVPCHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedVpcServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedVpcServiceHandler struct{}

func (UnimplementedVpcServiceHandler) DeleteStaticRoute(context.Context, *connect.Request[v1.DeleteStaticRouteRequest]) (*connect.Response[v1.DeleteStaticRouteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.vpc.v1.VpcService.DeleteStaticRoute is not implemented"))
}

func (UnimplementedVpcServiceHandler) CreateVPC(context.Context, *connect.Request[v1.CreateVPCRequest]) (*connect.Response[v1.CreateVPCResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.vpc.v1.VpcService.CreateVPC is not implemented"))
}

func (UnimplementedVpcServiceHandler) UpdateVPCCmdByAdmin(context.Context, *connect.Request[v1.UpdateVPCCmdByAdminRequest]) (*connect.Response[v1.UpdateVPCCmdByAdminResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.vpc.v1.VpcService.UpdateVPCCmdByAdmin is not implemented"))
}

func (UnimplementedVpcServiceHandler) ListStaticRoutes(context.Context, *connect.Request[v1.ListStaticRoutesRequest]) (*connect.Response[v1.ListStaticRoutesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.vpc.v1.VpcService.ListStaticRoutes is not implemented"))
}

func (UnimplementedVpcServiceHandler) ListVPCsCmdByAdmin(context.Context, *connect.Request[v1.ListVPCsCmdByAdminRequest]) (*connect.Response[v1.ListVPCsCmdByAdminResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.vpc.v1.VpcService.ListVPCsCmdByAdmin is not implemented"))
}

func (UnimplementedVpcServiceHandler) ListPrivateGatewaysCmdByAdmin(context.Context, *connect.Request[v1.ListPrivateGatewaysCmdByAdminRequest]) (*connect.Response[v1.ListPrivateGatewaysCmdByAdminResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.vpc.v1.VpcService.ListPrivateGatewaysCmdByAdmin is not implemented"))
}

func (UnimplementedVpcServiceHandler) CreatePrivateGatewayByAdmin(context.Context, *connect.Request[v1.CreatePrivateGatewayByAdminRequest]) (*connect.Response[v1.CreatePrivateGatewayByAdminResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.vpc.v1.VpcService.CreatePrivateGatewayByAdmin is not implemented"))
}

func (UnimplementedVpcServiceHandler) CreatePrivateGateway(context.Context, *connect.Request[v1.CreatePrivateGatewayRequest]) (*connect.Response[v1.CreatePrivateGatewayResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.vpc.v1.VpcService.CreatePrivateGateway is not implemented"))
}

func (UnimplementedVpcServiceHandler) ListVPCs(context.Context, *connect.Request[v1.ListVPCsRequest]) (*connect.Response[v1.ListVPCsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.vpc.v1.VpcService.ListVPCs is not implemented"))
}

func (UnimplementedVpcServiceHandler) UpdateVPCOffering(context.Context, *connect.Request[v1.UpdateVPCOfferingRequest]) (*connect.Response[v1.UpdateVPCOfferingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.vpc.v1.VpcService.UpdateVPCOffering is not implemented"))
}

func (UnimplementedVpcServiceHandler) ListPrivateGateways(context.Context, *connect.Request[v1.ListPrivateGatewaysRequest]) (*connect.Response[v1.ListPrivateGatewaysResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.vpc.v1.VpcService.ListPrivateGateways is not implemented"))
}

func (UnimplementedVpcServiceHandler) CreateVPCOffering(context.Context, *connect.Request[v1.CreateVPCOfferingRequest]) (*connect.Response[v1.CreateVPCOfferingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.vpc.v1.VpcService.CreateVPCOffering is not implemented"))
}

func (UnimplementedVpcServiceHandler) DeletePrivateGateway(context.Context, *connect.Request[v1.DeletePrivateGatewayRequest]) (*connect.Response[v1.DeletePrivateGatewayResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.vpc.v1.VpcService.DeletePrivateGateway is not implemented"))
}

func (UnimplementedVpcServiceHandler) CreateStaticRoute(context.Context, *connect.Request[v1.CreateStaticRouteRequest]) (*connect.Response[v1.CreateStaticRouteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.vpc.v1.VpcService.CreateStaticRoute is not implemented"))
}

func (UnimplementedVpcServiceHandler) RestartVPC(context.Context, *connect.Request[v1.RestartVPCRequest]) (*connect.Response[v1.RestartVPCResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.vpc.v1.VpcService.RestartVPC is not implemented"))
}

func (UnimplementedVpcServiceHandler) DeleteVPC(context.Context, *connect.Request[v1.DeleteVPCRequest]) (*connect.Response[v1.DeleteVPCResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.vpc.v1.VpcService.DeleteVPC is not implemented"))
}

func (UnimplementedVpcServiceHandler) DeleteVPCOffering(context.Context, *connect.Request[v1.DeleteVPCOfferingRequest]) (*connect.Response[v1.DeleteVPCOfferingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.vpc.v1.VpcService.DeleteVPCOffering is not implemented"))
}

func (UnimplementedVpcServiceHandler) ListVPCOfferings(context.Context, *connect.Request[v1.ListVPCOfferingsRequest]) (*connect.Response[v1.ListVPCOfferingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.vpc.v1.VpcService.ListVPCOfferings is not implemented"))
}

func (UnimplementedVpcServiceHandler) UpdateVPC(context.Context, *connect.Request[v1.UpdateVPCRequest]) (*connect.Response[v1.UpdateVPCResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.vpc.v1.VpcService.UpdateVPC is not implemented"))
}
