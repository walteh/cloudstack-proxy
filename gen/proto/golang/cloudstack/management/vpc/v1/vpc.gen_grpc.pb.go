// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: cloudstack/management/vpc/v1/vpc.gen.proto

package vpcv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VpcService_DeleteStaticRoute_FullMethodName             = "/cloudstack.management.vpc.v1.VpcService/DeleteStaticRoute"
	VpcService_CreateVPC_FullMethodName                     = "/cloudstack.management.vpc.v1.VpcService/CreateVPC"
	VpcService_UpdateVPCCmdByAdmin_FullMethodName           = "/cloudstack.management.vpc.v1.VpcService/UpdateVPCCmdByAdmin"
	VpcService_ListStaticRoutes_FullMethodName              = "/cloudstack.management.vpc.v1.VpcService/ListStaticRoutes"
	VpcService_ListVPCsCmdByAdmin_FullMethodName            = "/cloudstack.management.vpc.v1.VpcService/ListVPCsCmdByAdmin"
	VpcService_ListPrivateGatewaysCmdByAdmin_FullMethodName = "/cloudstack.management.vpc.v1.VpcService/ListPrivateGatewaysCmdByAdmin"
	VpcService_CreatePrivateGatewayByAdmin_FullMethodName   = "/cloudstack.management.vpc.v1.VpcService/CreatePrivateGatewayByAdmin"
	VpcService_CreatePrivateGateway_FullMethodName          = "/cloudstack.management.vpc.v1.VpcService/CreatePrivateGateway"
	VpcService_ListVPCs_FullMethodName                      = "/cloudstack.management.vpc.v1.VpcService/ListVPCs"
	VpcService_UpdateVPCOffering_FullMethodName             = "/cloudstack.management.vpc.v1.VpcService/UpdateVPCOffering"
	VpcService_ListPrivateGateways_FullMethodName           = "/cloudstack.management.vpc.v1.VpcService/ListPrivateGateways"
	VpcService_CreateVPCOffering_FullMethodName             = "/cloudstack.management.vpc.v1.VpcService/CreateVPCOffering"
	VpcService_DeletePrivateGateway_FullMethodName          = "/cloudstack.management.vpc.v1.VpcService/DeletePrivateGateway"
	VpcService_CreateStaticRoute_FullMethodName             = "/cloudstack.management.vpc.v1.VpcService/CreateStaticRoute"
	VpcService_RestartVPC_FullMethodName                    = "/cloudstack.management.vpc.v1.VpcService/RestartVPC"
	VpcService_DeleteVPC_FullMethodName                     = "/cloudstack.management.vpc.v1.VpcService/DeleteVPC"
	VpcService_DeleteVPCOffering_FullMethodName             = "/cloudstack.management.vpc.v1.VpcService/DeleteVPCOffering"
	VpcService_ListVPCOfferings_FullMethodName              = "/cloudstack.management.vpc.v1.VpcService/ListVPCOfferings"
	VpcService_UpdateVPC_FullMethodName                     = "/cloudstack.management.vpc.v1.VpcService/UpdateVPC"
)

// VpcServiceClient is the client API for VpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// VpcService provides operations for managing Vpcs
type VpcServiceClient interface {
	// DeleteStaticRoute Deletes a static route
	DeleteStaticRoute(ctx context.Context, in *DeleteStaticRouteRequest, opts ...grpc.CallOption) (*DeleteStaticRouteResponse, error)
	// CreateVPC Creates a VPC
	CreateVPC(ctx context.Context, in *CreateVPCRequest, opts ...grpc.CallOption) (*CreateVPCResponse, error)
	// UpdateVPCCmdByAdmin Updates a VPC
	UpdateVPCCmdByAdmin(ctx context.Context, in *UpdateVPCCmdByAdminRequest, opts ...grpc.CallOption) (*UpdateVPCCmdByAdminResponse, error)
	// ListStaticRoutes Lists all static routes
	ListStaticRoutes(ctx context.Context, in *ListStaticRoutesRequest, opts ...grpc.CallOption) (*ListStaticRoutesResponse, error)
	// ListVPCsCmdByAdmin Lists VPCs
	ListVPCsCmdByAdmin(ctx context.Context, in *ListVPCsCmdByAdminRequest, opts ...grpc.CallOption) (*ListVPCsCmdByAdminResponse, error)
	// ListPrivateGatewaysCmdByAdmin List private gateways
	ListPrivateGatewaysCmdByAdmin(ctx context.Context, in *ListPrivateGatewaysCmdByAdminRequest, opts ...grpc.CallOption) (*ListPrivateGatewaysCmdByAdminResponse, error)
	// CreatePrivateGatewayByAdmin Creates a private gateway
	CreatePrivateGatewayByAdmin(ctx context.Context, in *CreatePrivateGatewayByAdminRequest, opts ...grpc.CallOption) (*CreatePrivateGatewayByAdminResponse, error)
	// CreatePrivateGateway Creates a private gateway
	CreatePrivateGateway(ctx context.Context, in *CreatePrivateGatewayRequest, opts ...grpc.CallOption) (*CreatePrivateGatewayResponse, error)
	// ListVPCs Lists VPCs
	ListVPCs(ctx context.Context, in *ListVPCsRequest, opts ...grpc.CallOption) (*ListVPCsResponse, error)
	// UpdateVPCOffering Updates VPC offering
	UpdateVPCOffering(ctx context.Context, in *UpdateVPCOfferingRequest, opts ...grpc.CallOption) (*UpdateVPCOfferingResponse, error)
	// ListPrivateGateways List private gateways
	ListPrivateGateways(ctx context.Context, in *ListPrivateGatewaysRequest, opts ...grpc.CallOption) (*ListPrivateGatewaysResponse, error)
	// CreateVPCOffering Creates VPC offering
	CreateVPCOffering(ctx context.Context, in *CreateVPCOfferingRequest, opts ...grpc.CallOption) (*CreateVPCOfferingResponse, error)
	// DeletePrivateGateway Deletes a Private gateway
	DeletePrivateGateway(ctx context.Context, in *DeletePrivateGatewayRequest, opts ...grpc.CallOption) (*DeletePrivateGatewayResponse, error)
	// CreateStaticRoute Creates a static route
	CreateStaticRoute(ctx context.Context, in *CreateStaticRouteRequest, opts ...grpc.CallOption) (*CreateStaticRouteResponse, error)
	// RestartVPC Restarts a VPC
	RestartVPC(ctx context.Context, in *RestartVPCRequest, opts ...grpc.CallOption) (*RestartVPCResponse, error)
	// DeleteVPC Deletes a VPC
	DeleteVPC(ctx context.Context, in *DeleteVPCRequest, opts ...grpc.CallOption) (*DeleteVPCResponse, error)
	// DeleteVPCOffering Deletes VPC offering
	DeleteVPCOffering(ctx context.Context, in *DeleteVPCOfferingRequest, opts ...grpc.CallOption) (*DeleteVPCOfferingResponse, error)
	// ListVPCOfferings Lists VPC offerings
	ListVPCOfferings(ctx context.Context, in *ListVPCOfferingsRequest, opts ...grpc.CallOption) (*ListVPCOfferingsResponse, error)
	// UpdateVPC Updates a VPC
	UpdateVPC(ctx context.Context, in *UpdateVPCRequest, opts ...grpc.CallOption) (*UpdateVPCResponse, error)
}

type vpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVpcServiceClient(cc grpc.ClientConnInterface) VpcServiceClient {
	return &vpcServiceClient{cc}
}

func (c *vpcServiceClient) DeleteStaticRoute(ctx context.Context, in *DeleteStaticRouteRequest, opts ...grpc.CallOption) (*DeleteStaticRouteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteStaticRouteResponse)
	err := c.cc.Invoke(ctx, VpcService_DeleteStaticRoute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpcServiceClient) CreateVPC(ctx context.Context, in *CreateVPCRequest, opts ...grpc.CallOption) (*CreateVPCResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateVPCResponse)
	err := c.cc.Invoke(ctx, VpcService_CreateVPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpcServiceClient) UpdateVPCCmdByAdmin(ctx context.Context, in *UpdateVPCCmdByAdminRequest, opts ...grpc.CallOption) (*UpdateVPCCmdByAdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateVPCCmdByAdminResponse)
	err := c.cc.Invoke(ctx, VpcService_UpdateVPCCmdByAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpcServiceClient) ListStaticRoutes(ctx context.Context, in *ListStaticRoutesRequest, opts ...grpc.CallOption) (*ListStaticRoutesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStaticRoutesResponse)
	err := c.cc.Invoke(ctx, VpcService_ListStaticRoutes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpcServiceClient) ListVPCsCmdByAdmin(ctx context.Context, in *ListVPCsCmdByAdminRequest, opts ...grpc.CallOption) (*ListVPCsCmdByAdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVPCsCmdByAdminResponse)
	err := c.cc.Invoke(ctx, VpcService_ListVPCsCmdByAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpcServiceClient) ListPrivateGatewaysCmdByAdmin(ctx context.Context, in *ListPrivateGatewaysCmdByAdminRequest, opts ...grpc.CallOption) (*ListPrivateGatewaysCmdByAdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPrivateGatewaysCmdByAdminResponse)
	err := c.cc.Invoke(ctx, VpcService_ListPrivateGatewaysCmdByAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpcServiceClient) CreatePrivateGatewayByAdmin(ctx context.Context, in *CreatePrivateGatewayByAdminRequest, opts ...grpc.CallOption) (*CreatePrivateGatewayByAdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePrivateGatewayByAdminResponse)
	err := c.cc.Invoke(ctx, VpcService_CreatePrivateGatewayByAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpcServiceClient) CreatePrivateGateway(ctx context.Context, in *CreatePrivateGatewayRequest, opts ...grpc.CallOption) (*CreatePrivateGatewayResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePrivateGatewayResponse)
	err := c.cc.Invoke(ctx, VpcService_CreatePrivateGateway_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpcServiceClient) ListVPCs(ctx context.Context, in *ListVPCsRequest, opts ...grpc.CallOption) (*ListVPCsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVPCsResponse)
	err := c.cc.Invoke(ctx, VpcService_ListVPCs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpcServiceClient) UpdateVPCOffering(ctx context.Context, in *UpdateVPCOfferingRequest, opts ...grpc.CallOption) (*UpdateVPCOfferingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateVPCOfferingResponse)
	err := c.cc.Invoke(ctx, VpcService_UpdateVPCOffering_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpcServiceClient) ListPrivateGateways(ctx context.Context, in *ListPrivateGatewaysRequest, opts ...grpc.CallOption) (*ListPrivateGatewaysResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPrivateGatewaysResponse)
	err := c.cc.Invoke(ctx, VpcService_ListPrivateGateways_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpcServiceClient) CreateVPCOffering(ctx context.Context, in *CreateVPCOfferingRequest, opts ...grpc.CallOption) (*CreateVPCOfferingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateVPCOfferingResponse)
	err := c.cc.Invoke(ctx, VpcService_CreateVPCOffering_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpcServiceClient) DeletePrivateGateway(ctx context.Context, in *DeletePrivateGatewayRequest, opts ...grpc.CallOption) (*DeletePrivateGatewayResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePrivateGatewayResponse)
	err := c.cc.Invoke(ctx, VpcService_DeletePrivateGateway_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpcServiceClient) CreateStaticRoute(ctx context.Context, in *CreateStaticRouteRequest, opts ...grpc.CallOption) (*CreateStaticRouteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateStaticRouteResponse)
	err := c.cc.Invoke(ctx, VpcService_CreateStaticRoute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpcServiceClient) RestartVPC(ctx context.Context, in *RestartVPCRequest, opts ...grpc.CallOption) (*RestartVPCResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RestartVPCResponse)
	err := c.cc.Invoke(ctx, VpcService_RestartVPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpcServiceClient) DeleteVPC(ctx context.Context, in *DeleteVPCRequest, opts ...grpc.CallOption) (*DeleteVPCResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteVPCResponse)
	err := c.cc.Invoke(ctx, VpcService_DeleteVPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpcServiceClient) DeleteVPCOffering(ctx context.Context, in *DeleteVPCOfferingRequest, opts ...grpc.CallOption) (*DeleteVPCOfferingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteVPCOfferingResponse)
	err := c.cc.Invoke(ctx, VpcService_DeleteVPCOffering_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpcServiceClient) ListVPCOfferings(ctx context.Context, in *ListVPCOfferingsRequest, opts ...grpc.CallOption) (*ListVPCOfferingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVPCOfferingsResponse)
	err := c.cc.Invoke(ctx, VpcService_ListVPCOfferings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpcServiceClient) UpdateVPC(ctx context.Context, in *UpdateVPCRequest, opts ...grpc.CallOption) (*UpdateVPCResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateVPCResponse)
	err := c.cc.Invoke(ctx, VpcService_UpdateVPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VpcServiceServer is the server API for VpcService service.
// All implementations must embed UnimplementedVpcServiceServer
// for forward compatibility.
//
// VpcService provides operations for managing Vpcs
type VpcServiceServer interface {
	// DeleteStaticRoute Deletes a static route
	DeleteStaticRoute(context.Context, *DeleteStaticRouteRequest) (*DeleteStaticRouteResponse, error)
	// CreateVPC Creates a VPC
	CreateVPC(context.Context, *CreateVPCRequest) (*CreateVPCResponse, error)
	// UpdateVPCCmdByAdmin Updates a VPC
	UpdateVPCCmdByAdmin(context.Context, *UpdateVPCCmdByAdminRequest) (*UpdateVPCCmdByAdminResponse, error)
	// ListStaticRoutes Lists all static routes
	ListStaticRoutes(context.Context, *ListStaticRoutesRequest) (*ListStaticRoutesResponse, error)
	// ListVPCsCmdByAdmin Lists VPCs
	ListVPCsCmdByAdmin(context.Context, *ListVPCsCmdByAdminRequest) (*ListVPCsCmdByAdminResponse, error)
	// ListPrivateGatewaysCmdByAdmin List private gateways
	ListPrivateGatewaysCmdByAdmin(context.Context, *ListPrivateGatewaysCmdByAdminRequest) (*ListPrivateGatewaysCmdByAdminResponse, error)
	// CreatePrivateGatewayByAdmin Creates a private gateway
	CreatePrivateGatewayByAdmin(context.Context, *CreatePrivateGatewayByAdminRequest) (*CreatePrivateGatewayByAdminResponse, error)
	// CreatePrivateGateway Creates a private gateway
	CreatePrivateGateway(context.Context, *CreatePrivateGatewayRequest) (*CreatePrivateGatewayResponse, error)
	// ListVPCs Lists VPCs
	ListVPCs(context.Context, *ListVPCsRequest) (*ListVPCsResponse, error)
	// UpdateVPCOffering Updates VPC offering
	UpdateVPCOffering(context.Context, *UpdateVPCOfferingRequest) (*UpdateVPCOfferingResponse, error)
	// ListPrivateGateways List private gateways
	ListPrivateGateways(context.Context, *ListPrivateGatewaysRequest) (*ListPrivateGatewaysResponse, error)
	// CreateVPCOffering Creates VPC offering
	CreateVPCOffering(context.Context, *CreateVPCOfferingRequest) (*CreateVPCOfferingResponse, error)
	// DeletePrivateGateway Deletes a Private gateway
	DeletePrivateGateway(context.Context, *DeletePrivateGatewayRequest) (*DeletePrivateGatewayResponse, error)
	// CreateStaticRoute Creates a static route
	CreateStaticRoute(context.Context, *CreateStaticRouteRequest) (*CreateStaticRouteResponse, error)
	// RestartVPC Restarts a VPC
	RestartVPC(context.Context, *RestartVPCRequest) (*RestartVPCResponse, error)
	// DeleteVPC Deletes a VPC
	DeleteVPC(context.Context, *DeleteVPCRequest) (*DeleteVPCResponse, error)
	// DeleteVPCOffering Deletes VPC offering
	DeleteVPCOffering(context.Context, *DeleteVPCOfferingRequest) (*DeleteVPCOfferingResponse, error)
	// ListVPCOfferings Lists VPC offerings
	ListVPCOfferings(context.Context, *ListVPCOfferingsRequest) (*ListVPCOfferingsResponse, error)
	// UpdateVPC Updates a VPC
	UpdateVPC(context.Context, *UpdateVPCRequest) (*UpdateVPCResponse, error)
	mustEmbedUnimplementedVpcServiceServer()
}

// UnimplementedVpcServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVpcServiceServer struct{}

func (UnimplementedVpcServiceServer) DeleteStaticRoute(context.Context, *DeleteStaticRouteRequest) (*DeleteStaticRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStaticRoute not implemented")
}
func (UnimplementedVpcServiceServer) CreateVPC(context.Context, *CreateVPCRequest) (*CreateVPCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVPC not implemented")
}
func (UnimplementedVpcServiceServer) UpdateVPCCmdByAdmin(context.Context, *UpdateVPCCmdByAdminRequest) (*UpdateVPCCmdByAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVPCCmdByAdmin not implemented")
}
func (UnimplementedVpcServiceServer) ListStaticRoutes(context.Context, *ListStaticRoutesRequest) (*ListStaticRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStaticRoutes not implemented")
}
func (UnimplementedVpcServiceServer) ListVPCsCmdByAdmin(context.Context, *ListVPCsCmdByAdminRequest) (*ListVPCsCmdByAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVPCsCmdByAdmin not implemented")
}
func (UnimplementedVpcServiceServer) ListPrivateGatewaysCmdByAdmin(context.Context, *ListPrivateGatewaysCmdByAdminRequest) (*ListPrivateGatewaysCmdByAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPrivateGatewaysCmdByAdmin not implemented")
}
func (UnimplementedVpcServiceServer) CreatePrivateGatewayByAdmin(context.Context, *CreatePrivateGatewayByAdminRequest) (*CreatePrivateGatewayByAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePrivateGatewayByAdmin not implemented")
}
func (UnimplementedVpcServiceServer) CreatePrivateGateway(context.Context, *CreatePrivateGatewayRequest) (*CreatePrivateGatewayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePrivateGateway not implemented")
}
func (UnimplementedVpcServiceServer) ListVPCs(context.Context, *ListVPCsRequest) (*ListVPCsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVPCs not implemented")
}
func (UnimplementedVpcServiceServer) UpdateVPCOffering(context.Context, *UpdateVPCOfferingRequest) (*UpdateVPCOfferingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVPCOffering not implemented")
}
func (UnimplementedVpcServiceServer) ListPrivateGateways(context.Context, *ListPrivateGatewaysRequest) (*ListPrivateGatewaysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPrivateGateways not implemented")
}
func (UnimplementedVpcServiceServer) CreateVPCOffering(context.Context, *CreateVPCOfferingRequest) (*CreateVPCOfferingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVPCOffering not implemented")
}
func (UnimplementedVpcServiceServer) DeletePrivateGateway(context.Context, *DeletePrivateGatewayRequest) (*DeletePrivateGatewayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePrivateGateway not implemented")
}
func (UnimplementedVpcServiceServer) CreateStaticRoute(context.Context, *CreateStaticRouteRequest) (*CreateStaticRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStaticRoute not implemented")
}
func (UnimplementedVpcServiceServer) RestartVPC(context.Context, *RestartVPCRequest) (*RestartVPCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartVPC not implemented")
}
func (UnimplementedVpcServiceServer) DeleteVPC(context.Context, *DeleteVPCRequest) (*DeleteVPCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVPC not implemented")
}
func (UnimplementedVpcServiceServer) DeleteVPCOffering(context.Context, *DeleteVPCOfferingRequest) (*DeleteVPCOfferingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVPCOffering not implemented")
}
func (UnimplementedVpcServiceServer) ListVPCOfferings(context.Context, *ListVPCOfferingsRequest) (*ListVPCOfferingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVPCOfferings not implemented")
}
func (UnimplementedVpcServiceServer) UpdateVPC(context.Context, *UpdateVPCRequest) (*UpdateVPCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVPC not implemented")
}
func (UnimplementedVpcServiceServer) mustEmbedUnimplementedVpcServiceServer() {}
func (UnimplementedVpcServiceServer) testEmbeddedByValue()                    {}

// UnsafeVpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VpcServiceServer will
// result in compilation errors.
type UnsafeVpcServiceServer interface {
	mustEmbedUnimplementedVpcServiceServer()
}

func RegisterVpcServiceServer(s grpc.ServiceRegistrar, srv VpcServiceServer) {
	// If the following call pancis, it indicates UnimplementedVpcServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VpcService_ServiceDesc, srv)
}

func _VpcService_DeleteStaticRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStaticRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpcServiceServer).DeleteStaticRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VpcService_DeleteStaticRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpcServiceServer).DeleteStaticRoute(ctx, req.(*DeleteStaticRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VpcService_CreateVPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpcServiceServer).CreateVPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VpcService_CreateVPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpcServiceServer).CreateVPC(ctx, req.(*CreateVPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VpcService_UpdateVPCCmdByAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVPCCmdByAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpcServiceServer).UpdateVPCCmdByAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VpcService_UpdateVPCCmdByAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpcServiceServer).UpdateVPCCmdByAdmin(ctx, req.(*UpdateVPCCmdByAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VpcService_ListStaticRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStaticRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpcServiceServer).ListStaticRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VpcService_ListStaticRoutes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpcServiceServer).ListStaticRoutes(ctx, req.(*ListStaticRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VpcService_ListVPCsCmdByAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVPCsCmdByAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpcServiceServer).ListVPCsCmdByAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VpcService_ListVPCsCmdByAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpcServiceServer).ListVPCsCmdByAdmin(ctx, req.(*ListVPCsCmdByAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VpcService_ListPrivateGatewaysCmdByAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPrivateGatewaysCmdByAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpcServiceServer).ListPrivateGatewaysCmdByAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VpcService_ListPrivateGatewaysCmdByAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpcServiceServer).ListPrivateGatewaysCmdByAdmin(ctx, req.(*ListPrivateGatewaysCmdByAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VpcService_CreatePrivateGatewayByAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePrivateGatewayByAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpcServiceServer).CreatePrivateGatewayByAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VpcService_CreatePrivateGatewayByAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpcServiceServer).CreatePrivateGatewayByAdmin(ctx, req.(*CreatePrivateGatewayByAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VpcService_CreatePrivateGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePrivateGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpcServiceServer).CreatePrivateGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VpcService_CreatePrivateGateway_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpcServiceServer).CreatePrivateGateway(ctx, req.(*CreatePrivateGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VpcService_ListVPCs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVPCsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpcServiceServer).ListVPCs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VpcService_ListVPCs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpcServiceServer).ListVPCs(ctx, req.(*ListVPCsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VpcService_UpdateVPCOffering_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVPCOfferingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpcServiceServer).UpdateVPCOffering(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VpcService_UpdateVPCOffering_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpcServiceServer).UpdateVPCOffering(ctx, req.(*UpdateVPCOfferingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VpcService_ListPrivateGateways_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPrivateGatewaysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpcServiceServer).ListPrivateGateways(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VpcService_ListPrivateGateways_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpcServiceServer).ListPrivateGateways(ctx, req.(*ListPrivateGatewaysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VpcService_CreateVPCOffering_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVPCOfferingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpcServiceServer).CreateVPCOffering(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VpcService_CreateVPCOffering_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpcServiceServer).CreateVPCOffering(ctx, req.(*CreateVPCOfferingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VpcService_DeletePrivateGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePrivateGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpcServiceServer).DeletePrivateGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VpcService_DeletePrivateGateway_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpcServiceServer).DeletePrivateGateway(ctx, req.(*DeletePrivateGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VpcService_CreateStaticRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStaticRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpcServiceServer).CreateStaticRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VpcService_CreateStaticRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpcServiceServer).CreateStaticRoute(ctx, req.(*CreateStaticRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VpcService_RestartVPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartVPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpcServiceServer).RestartVPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VpcService_RestartVPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpcServiceServer).RestartVPC(ctx, req.(*RestartVPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VpcService_DeleteVPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpcServiceServer).DeleteVPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VpcService_DeleteVPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpcServiceServer).DeleteVPC(ctx, req.(*DeleteVPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VpcService_DeleteVPCOffering_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVPCOfferingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpcServiceServer).DeleteVPCOffering(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VpcService_DeleteVPCOffering_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpcServiceServer).DeleteVPCOffering(ctx, req.(*DeleteVPCOfferingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VpcService_ListVPCOfferings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVPCOfferingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpcServiceServer).ListVPCOfferings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VpcService_ListVPCOfferings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpcServiceServer).ListVPCOfferings(ctx, req.(*ListVPCOfferingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VpcService_UpdateVPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpcServiceServer).UpdateVPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VpcService_UpdateVPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpcServiceServer).UpdateVPC(ctx, req.(*UpdateVPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VpcService_ServiceDesc is the grpc.ServiceDesc for VpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloudstack.management.vpc.v1.VpcService",
	HandlerType: (*VpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteStaticRoute",
			Handler:    _VpcService_DeleteStaticRoute_Handler,
		},
		{
			MethodName: "CreateVPC",
			Handler:    _VpcService_CreateVPC_Handler,
		},
		{
			MethodName: "UpdateVPCCmdByAdmin",
			Handler:    _VpcService_UpdateVPCCmdByAdmin_Handler,
		},
		{
			MethodName: "ListStaticRoutes",
			Handler:    _VpcService_ListStaticRoutes_Handler,
		},
		{
			MethodName: "ListVPCsCmdByAdmin",
			Handler:    _VpcService_ListVPCsCmdByAdmin_Handler,
		},
		{
			MethodName: "ListPrivateGatewaysCmdByAdmin",
			Handler:    _VpcService_ListPrivateGatewaysCmdByAdmin_Handler,
		},
		{
			MethodName: "CreatePrivateGatewayByAdmin",
			Handler:    _VpcService_CreatePrivateGatewayByAdmin_Handler,
		},
		{
			MethodName: "CreatePrivateGateway",
			Handler:    _VpcService_CreatePrivateGateway_Handler,
		},
		{
			MethodName: "ListVPCs",
			Handler:    _VpcService_ListVPCs_Handler,
		},
		{
			MethodName: "UpdateVPCOffering",
			Handler:    _VpcService_UpdateVPCOffering_Handler,
		},
		{
			MethodName: "ListPrivateGateways",
			Handler:    _VpcService_ListPrivateGateways_Handler,
		},
		{
			MethodName: "CreateVPCOffering",
			Handler:    _VpcService_CreateVPCOffering_Handler,
		},
		{
			MethodName: "DeletePrivateGateway",
			Handler:    _VpcService_DeletePrivateGateway_Handler,
		},
		{
			MethodName: "CreateStaticRoute",
			Handler:    _VpcService_CreateStaticRoute_Handler,
		},
		{
			MethodName: "RestartVPC",
			Handler:    _VpcService_RestartVPC_Handler,
		},
		{
			MethodName: "DeleteVPC",
			Handler:    _VpcService_DeleteVPC_Handler,
		},
		{
			MethodName: "DeleteVPCOffering",
			Handler:    _VpcService_DeleteVPCOffering_Handler,
		},
		{
			MethodName: "ListVPCOfferings",
			Handler:    _VpcService_ListVPCOfferings_Handler,
		},
		{
			MethodName: "UpdateVPC",
			Handler:    _VpcService_UpdateVPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloudstack/management/vpc/v1/vpc.gen.proto",
}
