// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cloudstack/management/event/v1/event.gen.proto

package eventv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/walteh/cloudstack-proxy/gen/proto/golang/cloudstack/management/event/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EventServiceName is the fully-qualified name of the EventService service.
	EventServiceName = "cloudstack.management.event.v1.EventService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EventServiceListEventsProcedure is the fully-qualified name of the EventService's ListEvents RPC.
	EventServiceListEventsProcedure = "/cloudstack.management.event.v1.EventService/ListEvents"
	// EventServiceListEventTypesProcedure is the fully-qualified name of the EventService's
	// ListEventTypes RPC.
	EventServiceListEventTypesProcedure = "/cloudstack.management.event.v1.EventService/ListEventTypes"
	// EventServiceArchiveEventsProcedure is the fully-qualified name of the EventService's
	// ArchiveEvents RPC.
	EventServiceArchiveEventsProcedure = "/cloudstack.management.event.v1.EventService/ArchiveEvents"
	// EventServiceDeleteEventsProcedure is the fully-qualified name of the EventService's DeleteEvents
	// RPC.
	EventServiceDeleteEventsProcedure = "/cloudstack.management.event.v1.EventService/DeleteEvents"
)

// EventServiceClient is a client for the cloudstack.management.event.v1.EventService service.
type EventServiceClient interface {
	// ListEvents A command to list events.
	ListEvents(context.Context, *connect.Request[v1.ListEventsRequest]) (*connect.Response[v1.ListEventsResponse], error)
	// ListEventTypes List Event Types
	ListEventTypes(context.Context, *connect.Request[v1.ListEventTypesRequest]) (*connect.Response[v1.ListEventTypesResponse], error)
	// ArchiveEvents Archive one or more events.
	ArchiveEvents(context.Context, *connect.Request[v1.ArchiveEventsRequest]) (*connect.Response[v1.ArchiveEventsResponse], error)
	// DeleteEvents Delete one or more events.
	DeleteEvents(context.Context, *connect.Request[v1.DeleteEventsRequest]) (*connect.Response[v1.DeleteEventsResponse], error)
}

// NewEventServiceClient constructs a client for the cloudstack.management.event.v1.EventService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEventServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EventServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	eventServiceMethods := v1.File_cloudstack_management_event_v1_event_gen_proto.Services().ByName("EventService").Methods()
	return &eventServiceClient{
		listEvents: connect.NewClient[v1.ListEventsRequest, v1.ListEventsResponse](
			httpClient,
			baseURL+EventServiceListEventsProcedure,
			connect.WithSchema(eventServiceMethods.ByName("ListEvents")),
			connect.WithClientOptions(opts...),
		),
		listEventTypes: connect.NewClient[v1.ListEventTypesRequest, v1.ListEventTypesResponse](
			httpClient,
			baseURL+EventServiceListEventTypesProcedure,
			connect.WithSchema(eventServiceMethods.ByName("ListEventTypes")),
			connect.WithClientOptions(opts...),
		),
		archiveEvents: connect.NewClient[v1.ArchiveEventsRequest, v1.ArchiveEventsResponse](
			httpClient,
			baseURL+EventServiceArchiveEventsProcedure,
			connect.WithSchema(eventServiceMethods.ByName("ArchiveEvents")),
			connect.WithClientOptions(opts...),
		),
		deleteEvents: connect.NewClient[v1.DeleteEventsRequest, v1.DeleteEventsResponse](
			httpClient,
			baseURL+EventServiceDeleteEventsProcedure,
			connect.WithSchema(eventServiceMethods.ByName("DeleteEvents")),
			connect.WithClientOptions(opts...),
		),
	}
}

// eventServiceClient implements EventServiceClient.
type eventServiceClient struct {
	listEvents     *connect.Client[v1.ListEventsRequest, v1.ListEventsResponse]
	listEventTypes *connect.Client[v1.ListEventTypesRequest, v1.ListEventTypesResponse]
	archiveEvents  *connect.Client[v1.ArchiveEventsRequest, v1.ArchiveEventsResponse]
	deleteEvents   *connect.Client[v1.DeleteEventsRequest, v1.DeleteEventsResponse]
}

// ListEvents calls cloudstack.management.event.v1.EventService.ListEvents.
func (c *eventServiceClient) ListEvents(ctx context.Context, req *connect.Request[v1.ListEventsRequest]) (*connect.Response[v1.ListEventsResponse], error) {
	return c.listEvents.CallUnary(ctx, req)
}

// ListEventTypes calls cloudstack.management.event.v1.EventService.ListEventTypes.
func (c *eventServiceClient) ListEventTypes(ctx context.Context, req *connect.Request[v1.ListEventTypesRequest]) (*connect.Response[v1.ListEventTypesResponse], error) {
	return c.listEventTypes.CallUnary(ctx, req)
}

// ArchiveEvents calls cloudstack.management.event.v1.EventService.ArchiveEvents.
func (c *eventServiceClient) ArchiveEvents(ctx context.Context, req *connect.Request[v1.ArchiveEventsRequest]) (*connect.Response[v1.ArchiveEventsResponse], error) {
	return c.archiveEvents.CallUnary(ctx, req)
}

// DeleteEvents calls cloudstack.management.event.v1.EventService.DeleteEvents.
func (c *eventServiceClient) DeleteEvents(ctx context.Context, req *connect.Request[v1.DeleteEventsRequest]) (*connect.Response[v1.DeleteEventsResponse], error) {
	return c.deleteEvents.CallUnary(ctx, req)
}

// EventServiceHandler is an implementation of the cloudstack.management.event.v1.EventService
// service.
type EventServiceHandler interface {
	// ListEvents A command to list events.
	ListEvents(context.Context, *connect.Request[v1.ListEventsRequest]) (*connect.Response[v1.ListEventsResponse], error)
	// ListEventTypes List Event Types
	ListEventTypes(context.Context, *connect.Request[v1.ListEventTypesRequest]) (*connect.Response[v1.ListEventTypesResponse], error)
	// ArchiveEvents Archive one or more events.
	ArchiveEvents(context.Context, *connect.Request[v1.ArchiveEventsRequest]) (*connect.Response[v1.ArchiveEventsResponse], error)
	// DeleteEvents Delete one or more events.
	DeleteEvents(context.Context, *connect.Request[v1.DeleteEventsRequest]) (*connect.Response[v1.DeleteEventsResponse], error)
}

// NewEventServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEventServiceHandler(svc EventServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	eventServiceMethods := v1.File_cloudstack_management_event_v1_event_gen_proto.Services().ByName("EventService").Methods()
	eventServiceListEventsHandler := connect.NewUnaryHandler(
		EventServiceListEventsProcedure,
		svc.ListEvents,
		connect.WithSchema(eventServiceMethods.ByName("ListEvents")),
		connect.WithHandlerOptions(opts...),
	)
	eventServiceListEventTypesHandler := connect.NewUnaryHandler(
		EventServiceListEventTypesProcedure,
		svc.ListEventTypes,
		connect.WithSchema(eventServiceMethods.ByName("ListEventTypes")),
		connect.WithHandlerOptions(opts...),
	)
	eventServiceArchiveEventsHandler := connect.NewUnaryHandler(
		EventServiceArchiveEventsProcedure,
		svc.ArchiveEvents,
		connect.WithSchema(eventServiceMethods.ByName("ArchiveEvents")),
		connect.WithHandlerOptions(opts...),
	)
	eventServiceDeleteEventsHandler := connect.NewUnaryHandler(
		EventServiceDeleteEventsProcedure,
		svc.DeleteEvents,
		connect.WithSchema(eventServiceMethods.ByName("DeleteEvents")),
		connect.WithHandlerOptions(opts...),
	)
	return "/cloudstack.management.event.v1.EventService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EventServiceListEventsProcedure:
			eventServiceListEventsHandler.ServeHTTP(w, r)
		case EventServiceListEventTypesProcedure:
			eventServiceListEventTypesHandler.ServeHTTP(w, r)
		case EventServiceArchiveEventsProcedure:
			eventServiceArchiveEventsHandler.ServeHTTP(w, r)
		case EventServiceDeleteEventsProcedure:
			eventServiceDeleteEventsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEventServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEventServiceHandler struct{}

func (UnimplementedEventServiceHandler) ListEvents(context.Context, *connect.Request[v1.ListEventsRequest]) (*connect.Response[v1.ListEventsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.event.v1.EventService.ListEvents is not implemented"))
}

func (UnimplementedEventServiceHandler) ListEventTypes(context.Context, *connect.Request[v1.ListEventTypesRequest]) (*connect.Response[v1.ListEventTypesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.event.v1.EventService.ListEventTypes is not implemented"))
}

func (UnimplementedEventServiceHandler) ArchiveEvents(context.Context, *connect.Request[v1.ArchiveEventsRequest]) (*connect.Response[v1.ArchiveEventsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.event.v1.EventService.ArchiveEvents is not implemented"))
}

func (UnimplementedEventServiceHandler) DeleteEvents(context.Context, *connect.Request[v1.DeleteEventsRequest]) (*connect.Response[v1.DeleteEventsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.event.v1.EventService.DeleteEvents is not implemented"))
}
