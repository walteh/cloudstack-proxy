// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: cloudstack/management/diagnostics/v1/diagnostics.gen.proto

package diagnosticsv1

import (
	_ "github.com/walteh/cloudstack-proxy/gen/proto/golang/cloudstack/annotations"
	_ "github.com/walteh/cloudstack-proxy/gen/proto/golang/cloudstack/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// GetDiagnosticsDataRequest represents the parameters for get diagnostics and files from system vms
type GetDiagnosticsDataRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the system VM instance to retrieve diagnostics data files from
	Id *int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// A comma separated list of diagnostics data files to be retrieved. Defaults are taken from global settings if none has been provided.
	FilesList []string `protobuf:"bytes,2,rep,name=files_list,json=filesList" json:"files_list,omitempty"`
	StartEventId *int64 `protobuf:"varint,3,opt,name=start_event_id,json=startEventId" json:"start_event_id,omitempty"`
	InjectedJobId *string `protobuf:"bytes,4,opt,name=injected_job_id,json=injectedJobId" json:"injected_job_id,omitempty"`
	ResponseType  *string `protobuf:"bytes,5,opt,name=response_type,json=responseType" json:"response_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDiagnosticsDataRequest) Reset() {
	*x = GetDiagnosticsDataRequest{}
	mi := &file_cloudstack_management_diagnostics_v1_diagnostics_gen_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDiagnosticsDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDiagnosticsDataRequest) ProtoMessage() {}

func (x *GetDiagnosticsDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_diagnostics_v1_diagnostics_gen_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDiagnosticsDataRequest.ProtoReflect.Descriptor instead.
func (*GetDiagnosticsDataRequest) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_diagnostics_v1_diagnostics_gen_proto_rawDescGZIP(), []int{0}
}

func (x *GetDiagnosticsDataRequest) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *GetDiagnosticsDataRequest) GetFilesList() []string {
	if x != nil {
		return x.FilesList
	}
	return nil
}

func (x *GetDiagnosticsDataRequest) GetStartEventId() int64 {
	if x != nil && x.StartEventId != nil {
		return *x.StartEventId
	}
	return 0
}

func (x *GetDiagnosticsDataRequest) GetInjectedJobId() string {
	if x != nil && x.InjectedJobId != nil {
		return *x.InjectedJobId
	}
	return ""
}

func (x *GetDiagnosticsDataRequest) GetResponseType() string {
	if x != nil && x.ResponseType != nil {
		return *x.ResponseType
	}
	return ""
}

// GetDiagnosticsDataResponse represents the response from get diagnostics and files from system vms
type GetDiagnosticsDataResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Result
	Result        *Result `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDiagnosticsDataResponse) Reset() {
	*x = GetDiagnosticsDataResponse{}
	mi := &file_cloudstack_management_diagnostics_v1_diagnostics_gen_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDiagnosticsDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDiagnosticsDataResponse) ProtoMessage() {}

func (x *GetDiagnosticsDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_diagnostics_v1_diagnostics_gen_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDiagnosticsDataResponse.ProtoReflect.Descriptor instead.
func (*GetDiagnosticsDataResponse) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_diagnostics_v1_diagnostics_gen_proto_rawDescGZIP(), []int{1}
}

func (x *GetDiagnosticsDataResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

// RunDiagnosticsRequest represents the parameters for execute network-utility command (ping/arping/tracert) on system vms remotely
type RunDiagnosticsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the system VM instance to diagnose
	Id *int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// The IP/Domain address to test connection to
	Address *string `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
	// The system VM diagnostics type  valid options are: ping, traceroute, arping
	Type *string `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	// Additional command line options that apply for each command
	OptionalArguments_ *string `protobuf:"bytes,4,opt,name=optional_arguments_,json=optionalArguments" json:"optional_arguments_,omitempty"`
	StartEventId *int64 `protobuf:"varint,5,opt,name=start_event_id,json=startEventId" json:"start_event_id,omitempty"`
	InjectedJobId *string `protobuf:"bytes,6,opt,name=injected_job_id,json=injectedJobId" json:"injected_job_id,omitempty"`
	ResponseType  *string `protobuf:"bytes,7,opt,name=response_type,json=responseType" json:"response_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunDiagnosticsRequest) Reset() {
	*x = RunDiagnosticsRequest{}
	mi := &file_cloudstack_management_diagnostics_v1_diagnostics_gen_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunDiagnosticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunDiagnosticsRequest) ProtoMessage() {}

func (x *RunDiagnosticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_diagnostics_v1_diagnostics_gen_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunDiagnosticsRequest.ProtoReflect.Descriptor instead.
func (*RunDiagnosticsRequest) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_diagnostics_v1_diagnostics_gen_proto_rawDescGZIP(), []int{2}
}

func (x *RunDiagnosticsRequest) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *RunDiagnosticsRequest) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *RunDiagnosticsRequest) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *RunDiagnosticsRequest) GetOptionalArguments_() string {
	if x != nil && x.OptionalArguments_ != nil {
		return *x.OptionalArguments_
	}
	return ""
}

func (x *RunDiagnosticsRequest) GetStartEventId() int64 {
	if x != nil && x.StartEventId != nil {
		return *x.StartEventId
	}
	return 0
}

func (x *RunDiagnosticsRequest) GetInjectedJobId() string {
	if x != nil && x.InjectedJobId != nil {
		return *x.InjectedJobId
	}
	return ""
}

func (x *RunDiagnosticsRequest) GetResponseType() string {
	if x != nil && x.ResponseType != nil {
		return *x.ResponseType
	}
	return ""
}

// RunDiagnosticsResponse represents the response from execute network-utility command (ping/arping/tracert) on system vms remotely
type RunDiagnosticsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Result
	Result        *Result `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunDiagnosticsResponse) Reset() {
	*x = RunDiagnosticsResponse{}
	mi := &file_cloudstack_management_diagnostics_v1_diagnostics_gen_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunDiagnosticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunDiagnosticsResponse) ProtoMessage() {}

func (x *RunDiagnosticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_diagnostics_v1_diagnostics_gen_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunDiagnosticsResponse.ProtoReflect.Descriptor instead.
func (*RunDiagnosticsResponse) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_diagnostics_v1_diagnostics_gen_proto_rawDescGZIP(), []int{3}
}

func (x *RunDiagnosticsResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

// Success represents a Success Operation Response
type Success struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// true if operation is executed successfully
	Success *bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	// any text associated with the success or failure
	DisplayText   *string `protobuf:"bytes,2,opt,name=display_text,json=displayText" json:"display_text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Success) Reset() {
	*x = Success{}
	mi := &file_cloudstack_management_diagnostics_v1_diagnostics_gen_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Success) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Success) ProtoMessage() {}

func (x *Success) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_diagnostics_v1_diagnostics_gen_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Success.ProtoReflect.Descriptor instead.
func (*Success) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_diagnostics_v1_diagnostics_gen_proto_rawDescGZIP(), []int{4}
}

func (x *Success) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *Success) GetDisplayText() string {
	if x != nil && x.DisplayText != nil {
		return *x.DisplayText
	}
	return ""
}

// Result represents a generic operation result
type Result struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether the operation was successful
	Success *bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	// Any text associated with the success or failure
	DisplayText *string `protobuf:"bytes,2,opt,name=display_text,json=displayText" json:"display_text,omitempty"`
	// The ID of the resource affected by the operation
	Id *string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	// The job ID for an async operation
	JobId *string `protobuf:"bytes,4,opt,name=job_id,json=jobId" json:"job_id,omitempty"`
	// The status of the job
	JobStatus     *string `protobuf:"bytes,5,opt,name=job_status,json=jobStatus" json:"job_status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Result) Reset() {
	*x = Result{}
	mi := &file_cloudstack_management_diagnostics_v1_diagnostics_gen_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_diagnostics_v1_diagnostics_gen_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_diagnostics_v1_diagnostics_gen_proto_rawDescGZIP(), []int{5}
}

func (x *Result) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *Result) GetDisplayText() string {
	if x != nil && x.DisplayText != nil {
		return *x.DisplayText
	}
	return ""
}

func (x *Result) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Result) GetJobId() string {
	if x != nil && x.JobId != nil {
		return *x.JobId
	}
	return ""
}

func (x *Result) GetJobStatus() string {
	if x != nil && x.JobStatus != nil {
		return *x.JobStatus
	}
	return ""
}

var File_cloudstack_management_diagnostics_v1_diagnostics_gen_proto protoreflect.FileDescriptor

const file_cloudstack_management_diagnostics_v1_diagnostics_gen_proto_rawDesc = "" +
	"\n" +
	":cloudstack/management/diagnostics/v1/diagnostics.gen.proto\x12$cloudstack.management.diagnostics.v1\x1a(cloudstack/annotations/annotations.proto\x1a\"cloudstack/validate/validate.proto\x1a google/protobuf/descriptor.proto\"\xcf\x01\n" +
	"\x19GetDiagnosticsDataRequest\x12\x16\n" +
	"\x02id\x18\x01 \x01(\x03B\x06\xbaH\x03\xc8\x01\x01R\x02id\x12\x1d\n" +
	"\n" +
	"files_list\x18\x02 \x03(\tR\tfilesList\x12$\n" +
	"\x0estart_event_id\x18\x03 \x01(\x03R\fstartEventId\x120\n" +
	"\x0finjected_job_id\x18\x04 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\rinjectedJobId\x12#\n" +
	"\rresponse_type\x18\x05 \x01(\tR\fresponseType\"b\n" +
	"\x1aGetDiagnosticsDataResponse\x12D\n" +
	"\x06result\x18\x01 \x01(\v2,.cloudstack.management.diagnostics.v1.ResultR\x06result\"\x9e\x02\n" +
	"\x15RunDiagnosticsRequest\x12\x16\n" +
	"\x02id\x18\x01 \x01(\x03B\x06\xbaH\x03\xc8\x01\x01R\x02id\x12$\n" +
	"\aaddress\x18\x02 \x01(\tB\n" +
	"\xbaH\a\xc8\x01\x01r\x02x\x01R\aaddress\x12\x1a\n" +
	"\x04type\x18\x03 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x04type\x12.\n" +
	"\x13optional_arguments_\x18\x04 \x01(\tR\x11optionalArguments\x12$\n" +
	"\x0estart_event_id\x18\x05 \x01(\x03R\fstartEventId\x120\n" +
	"\x0finjected_job_id\x18\x06 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\rinjectedJobId\x12#\n" +
	"\rresponse_type\x18\a \x01(\tR\fresponseType\"^\n" +
	"\x16RunDiagnosticsResponse\x12D\n" +
	"\x06result\x18\x01 \x01(\v2,.cloudstack.management.diagnostics.v1.ResultR\x06result\"F\n" +
	"\aSuccess\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12!\n" +
	"\fdisplay_text\x18\x02 \x01(\tR\vdisplayText\"\x9f\x01\n" +
	"\x06Result\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12!\n" +
	"\fdisplay_text\x18\x02 \x01(\tR\vdisplayText\x12\x18\n" +
	"\x02id\x18\x03 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\x02id\x12\x1f\n" +
	"\x06job_id\x18\x04 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\x05jobId\x12\x1d\n" +
	"\n" +
	"job_status\x18\x05 \x01(\tR\tjobStatus2\xd7\x02\n" +
	"\x12DiagnosticsService\x12\xa0\x01\n" +
	"\x12GetDiagnosticsData\x12?.cloudstack.management.diagnostics.v1.GetDiagnosticsDataRequest\x1a@.cloudstack.management.diagnostics.v1.GetDiagnosticsDataResponse\"\a\xc2>\x04\xc2>\x01\x02\x12\x94\x01\n" +
	"\x0eRunDiagnostics\x12;.cloudstack.management.diagnostics.v1.RunDiagnosticsRequest\x1a<.cloudstack.management.diagnostics.v1.RunDiagnosticsResponse\"\a\xc2>\x04\xc2>\x01\x02\x1a\a\xc2>\x04\xc2>\x01\x02B\xda\x02\n" +
	"(com.cloudstack.management.diagnostics.v1B\x13DiagnosticsGenProtoP\x01Zfgithub.com/walteh/cloudstack-proxy/gen/proto/golang/cloudstack/management/diagnostics/v1;diagnosticsv1\xa2\x02\x03CMD\xaa\x02$Cloudstack.Management.Diagnostics.V1\xca\x02$Cloudstack\\Management\\Diagnostics\\V1\xe2\x020Cloudstack\\Management\\Diagnostics\\V1\\GPBMetadata\xea\x02'Cloudstack::Management::Diagnostics::V1b\beditionsp\xe8\a"

var (
	file_cloudstack_management_diagnostics_v1_diagnostics_gen_proto_rawDescOnce sync.Once
	file_cloudstack_management_diagnostics_v1_diagnostics_gen_proto_rawDescData []byte
)

func file_cloudstack_management_diagnostics_v1_diagnostics_gen_proto_rawDescGZIP() []byte {
	file_cloudstack_management_diagnostics_v1_diagnostics_gen_proto_rawDescOnce.Do(func() {
		file_cloudstack_management_diagnostics_v1_diagnostics_gen_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_cloudstack_management_diagnostics_v1_diagnostics_gen_proto_rawDesc), len(file_cloudstack_management_diagnostics_v1_diagnostics_gen_proto_rawDesc)))
	})
	return file_cloudstack_management_diagnostics_v1_diagnostics_gen_proto_rawDescData
}

var file_cloudstack_management_diagnostics_v1_diagnostics_gen_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_cloudstack_management_diagnostics_v1_diagnostics_gen_proto_goTypes = []any{
	(*GetDiagnosticsDataRequest)(nil),  // 0: cloudstack.management.diagnostics.v1.GetDiagnosticsDataRequest
	(*GetDiagnosticsDataResponse)(nil), // 1: cloudstack.management.diagnostics.v1.GetDiagnosticsDataResponse
	(*RunDiagnosticsRequest)(nil),      // 2: cloudstack.management.diagnostics.v1.RunDiagnosticsRequest
	(*RunDiagnosticsResponse)(nil),     // 3: cloudstack.management.diagnostics.v1.RunDiagnosticsResponse
	(*Success)(nil),                    // 4: cloudstack.management.diagnostics.v1.Success
	(*Result)(nil),                     // 5: cloudstack.management.diagnostics.v1.Result
}
var file_cloudstack_management_diagnostics_v1_diagnostics_gen_proto_depIdxs = []int32{
	5, // 0: cloudstack.management.diagnostics.v1.GetDiagnosticsDataResponse.result:type_name -> cloudstack.management.diagnostics.v1.Result
	5, // 1: cloudstack.management.diagnostics.v1.RunDiagnosticsResponse.result:type_name -> cloudstack.management.diagnostics.v1.Result
	0, // 2: cloudstack.management.diagnostics.v1.DiagnosticsService.GetDiagnosticsData:input_type -> cloudstack.management.diagnostics.v1.GetDiagnosticsDataRequest
	2, // 3: cloudstack.management.diagnostics.v1.DiagnosticsService.RunDiagnostics:input_type -> cloudstack.management.diagnostics.v1.RunDiagnosticsRequest
	1, // 4: cloudstack.management.diagnostics.v1.DiagnosticsService.GetDiagnosticsData:output_type -> cloudstack.management.diagnostics.v1.GetDiagnosticsDataResponse
	3, // 5: cloudstack.management.diagnostics.v1.DiagnosticsService.RunDiagnostics:output_type -> cloudstack.management.diagnostics.v1.RunDiagnosticsResponse
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_cloudstack_management_diagnostics_v1_diagnostics_gen_proto_init() }
func file_cloudstack_management_diagnostics_v1_diagnostics_gen_proto_init() {
	if File_cloudstack_management_diagnostics_v1_diagnostics_gen_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_cloudstack_management_diagnostics_v1_diagnostics_gen_proto_rawDesc), len(file_cloudstack_management_diagnostics_v1_diagnostics_gen_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cloudstack_management_diagnostics_v1_diagnostics_gen_proto_goTypes,
		DependencyIndexes: file_cloudstack_management_diagnostics_v1_diagnostics_gen_proto_depIdxs,
		MessageInfos:      file_cloudstack_management_diagnostics_v1_diagnostics_gen_proto_msgTypes,
	}.Build()
	File_cloudstack_management_diagnostics_v1_diagnostics_gen_proto = out.File
	file_cloudstack_management_diagnostics_v1_diagnostics_gen_proto_goTypes = nil
	file_cloudstack_management_diagnostics_v1_diagnostics_gen_proto_depIdxs = nil
}
