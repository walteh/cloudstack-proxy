// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: cloudstack/management/diagnostics/v1/diagnostics.gen.proto

package diagnosticsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DiagnosticsService_GetDiagnosticsData_FullMethodName = "/cloudstack.management.diagnostics.v1.DiagnosticsService/GetDiagnosticsData"
	DiagnosticsService_RunDiagnostics_FullMethodName     = "/cloudstack.management.diagnostics.v1.DiagnosticsService/RunDiagnostics"
)

// DiagnosticsServiceClient is the client API for DiagnosticsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// DiagnosticsService provides operations for managing Diagnosticss
type DiagnosticsServiceClient interface {
	// GetDiagnosticsData Get diagnostics and files from system VMs
	GetDiagnosticsData(ctx context.Context, in *GetDiagnosticsDataRequest, opts ...grpc.CallOption) (*GetDiagnosticsDataResponse, error)
	// RunDiagnostics Execute network-utility command (ping/arping/tracert) on system VMs remotely
	RunDiagnostics(ctx context.Context, in *RunDiagnosticsRequest, opts ...grpc.CallOption) (*RunDiagnosticsResponse, error)
}

type diagnosticsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDiagnosticsServiceClient(cc grpc.ClientConnInterface) DiagnosticsServiceClient {
	return &diagnosticsServiceClient{cc}
}

func (c *diagnosticsServiceClient) GetDiagnosticsData(ctx context.Context, in *GetDiagnosticsDataRequest, opts ...grpc.CallOption) (*GetDiagnosticsDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDiagnosticsDataResponse)
	err := c.cc.Invoke(ctx, DiagnosticsService_GetDiagnosticsData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diagnosticsServiceClient) RunDiagnostics(ctx context.Context, in *RunDiagnosticsRequest, opts ...grpc.CallOption) (*RunDiagnosticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RunDiagnosticsResponse)
	err := c.cc.Invoke(ctx, DiagnosticsService_RunDiagnostics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiagnosticsServiceServer is the server API for DiagnosticsService service.
// All implementations must embed UnimplementedDiagnosticsServiceServer
// for forward compatibility.
//
// DiagnosticsService provides operations for managing Diagnosticss
type DiagnosticsServiceServer interface {
	// GetDiagnosticsData Get diagnostics and files from system VMs
	GetDiagnosticsData(context.Context, *GetDiagnosticsDataRequest) (*GetDiagnosticsDataResponse, error)
	// RunDiagnostics Execute network-utility command (ping/arping/tracert) on system VMs remotely
	RunDiagnostics(context.Context, *RunDiagnosticsRequest) (*RunDiagnosticsResponse, error)
	mustEmbedUnimplementedDiagnosticsServiceServer()
}

// UnimplementedDiagnosticsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDiagnosticsServiceServer struct{}

func (UnimplementedDiagnosticsServiceServer) GetDiagnosticsData(context.Context, *GetDiagnosticsDataRequest) (*GetDiagnosticsDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiagnosticsData not implemented")
}
func (UnimplementedDiagnosticsServiceServer) RunDiagnostics(context.Context, *RunDiagnosticsRequest) (*RunDiagnosticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunDiagnostics not implemented")
}
func (UnimplementedDiagnosticsServiceServer) mustEmbedUnimplementedDiagnosticsServiceServer() {}
func (UnimplementedDiagnosticsServiceServer) testEmbeddedByValue()                            {}

// UnsafeDiagnosticsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiagnosticsServiceServer will
// result in compilation errors.
type UnsafeDiagnosticsServiceServer interface {
	mustEmbedUnimplementedDiagnosticsServiceServer()
}

func RegisterDiagnosticsServiceServer(s grpc.ServiceRegistrar, srv DiagnosticsServiceServer) {
	// If the following call pancis, it indicates UnimplementedDiagnosticsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DiagnosticsService_ServiceDesc, srv)
}

func _DiagnosticsService_GetDiagnosticsData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDiagnosticsDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosticsServiceServer).GetDiagnosticsData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiagnosticsService_GetDiagnosticsData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosticsServiceServer).GetDiagnosticsData(ctx, req.(*GetDiagnosticsDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiagnosticsService_RunDiagnostics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunDiagnosticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosticsServiceServer).RunDiagnostics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiagnosticsService_RunDiagnostics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosticsServiceServer).RunDiagnostics(ctx, req.(*RunDiagnosticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DiagnosticsService_ServiceDesc is the grpc.ServiceDesc for DiagnosticsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DiagnosticsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloudstack.management.diagnostics.v1.DiagnosticsService",
	HandlerType: (*DiagnosticsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDiagnosticsData",
			Handler:    _DiagnosticsService_GetDiagnosticsData_Handler,
		},
		{
			MethodName: "RunDiagnostics",
			Handler:    _DiagnosticsService_RunDiagnostics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloudstack/management/diagnostics/v1/diagnostics.gen.proto",
}
