// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cloudstack/management/diagnostics/v1/diagnostics.gen.proto

package diagnosticsv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/walteh/cloudstack-proxy/gen/proto/golang/cloudstack/management/diagnostics/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DiagnosticsServiceName is the fully-qualified name of the DiagnosticsService service.
	DiagnosticsServiceName = "cloudstack.management.diagnostics.v1.DiagnosticsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DiagnosticsServiceRunDiagnosticsProcedure is the fully-qualified name of the DiagnosticsService's
	// RunDiagnostics RPC.
	DiagnosticsServiceRunDiagnosticsProcedure = "/cloudstack.management.diagnostics.v1.DiagnosticsService/RunDiagnostics"
	// DiagnosticsServiceGetDiagnosticsDataProcedure is the fully-qualified name of the
	// DiagnosticsService's GetDiagnosticsData RPC.
	DiagnosticsServiceGetDiagnosticsDataProcedure = "/cloudstack.management.diagnostics.v1.DiagnosticsService/GetDiagnosticsData"
)

// DiagnosticsServiceClient is a client for the
// cloudstack.management.diagnostics.v1.DiagnosticsService service.
type DiagnosticsServiceClient interface {
	// RunDiagnostics Execute network-utility command (ping/arping/tracert) on system VMs remotely
	RunDiagnostics(context.Context, *connect.Request[v1.RunDiagnosticsRequest]) (*connect.Response[v1.RunDiagnosticsResponse], error)
	// GetDiagnosticsData Get diagnostics and files from system VMs
	GetDiagnosticsData(context.Context, *connect.Request[v1.GetDiagnosticsDataRequest]) (*connect.Response[v1.GetDiagnosticsDataResponse], error)
}

// NewDiagnosticsServiceClient constructs a client for the
// cloudstack.management.diagnostics.v1.DiagnosticsService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDiagnosticsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DiagnosticsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	diagnosticsServiceMethods := v1.File_cloudstack_management_diagnostics_v1_diagnostics_gen_proto.Services().ByName("DiagnosticsService").Methods()
	return &diagnosticsServiceClient{
		runDiagnostics: connect.NewClient[v1.RunDiagnosticsRequest, v1.RunDiagnosticsResponse](
			httpClient,
			baseURL+DiagnosticsServiceRunDiagnosticsProcedure,
			connect.WithSchema(diagnosticsServiceMethods.ByName("RunDiagnostics")),
			connect.WithClientOptions(opts...),
		),
		getDiagnosticsData: connect.NewClient[v1.GetDiagnosticsDataRequest, v1.GetDiagnosticsDataResponse](
			httpClient,
			baseURL+DiagnosticsServiceGetDiagnosticsDataProcedure,
			connect.WithSchema(diagnosticsServiceMethods.ByName("GetDiagnosticsData")),
			connect.WithClientOptions(opts...),
		),
	}
}

// diagnosticsServiceClient implements DiagnosticsServiceClient.
type diagnosticsServiceClient struct {
	runDiagnostics     *connect.Client[v1.RunDiagnosticsRequest, v1.RunDiagnosticsResponse]
	getDiagnosticsData *connect.Client[v1.GetDiagnosticsDataRequest, v1.GetDiagnosticsDataResponse]
}

// RunDiagnostics calls cloudstack.management.diagnostics.v1.DiagnosticsService.RunDiagnostics.
func (c *diagnosticsServiceClient) RunDiagnostics(ctx context.Context, req *connect.Request[v1.RunDiagnosticsRequest]) (*connect.Response[v1.RunDiagnosticsResponse], error) {
	return c.runDiagnostics.CallUnary(ctx, req)
}

// GetDiagnosticsData calls
// cloudstack.management.diagnostics.v1.DiagnosticsService.GetDiagnosticsData.
func (c *diagnosticsServiceClient) GetDiagnosticsData(ctx context.Context, req *connect.Request[v1.GetDiagnosticsDataRequest]) (*connect.Response[v1.GetDiagnosticsDataResponse], error) {
	return c.getDiagnosticsData.CallUnary(ctx, req)
}

// DiagnosticsServiceHandler is an implementation of the
// cloudstack.management.diagnostics.v1.DiagnosticsService service.
type DiagnosticsServiceHandler interface {
	// RunDiagnostics Execute network-utility command (ping/arping/tracert) on system VMs remotely
	RunDiagnostics(context.Context, *connect.Request[v1.RunDiagnosticsRequest]) (*connect.Response[v1.RunDiagnosticsResponse], error)
	// GetDiagnosticsData Get diagnostics and files from system VMs
	GetDiagnosticsData(context.Context, *connect.Request[v1.GetDiagnosticsDataRequest]) (*connect.Response[v1.GetDiagnosticsDataResponse], error)
}

// NewDiagnosticsServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDiagnosticsServiceHandler(svc DiagnosticsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	diagnosticsServiceMethods := v1.File_cloudstack_management_diagnostics_v1_diagnostics_gen_proto.Services().ByName("DiagnosticsService").Methods()
	diagnosticsServiceRunDiagnosticsHandler := connect.NewUnaryHandler(
		DiagnosticsServiceRunDiagnosticsProcedure,
		svc.RunDiagnostics,
		connect.WithSchema(diagnosticsServiceMethods.ByName("RunDiagnostics")),
		connect.WithHandlerOptions(opts...),
	)
	diagnosticsServiceGetDiagnosticsDataHandler := connect.NewUnaryHandler(
		DiagnosticsServiceGetDiagnosticsDataProcedure,
		svc.GetDiagnosticsData,
		connect.WithSchema(diagnosticsServiceMethods.ByName("GetDiagnosticsData")),
		connect.WithHandlerOptions(opts...),
	)
	return "/cloudstack.management.diagnostics.v1.DiagnosticsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DiagnosticsServiceRunDiagnosticsProcedure:
			diagnosticsServiceRunDiagnosticsHandler.ServeHTTP(w, r)
		case DiagnosticsServiceGetDiagnosticsDataProcedure:
			diagnosticsServiceGetDiagnosticsDataHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDiagnosticsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDiagnosticsServiceHandler struct{}

func (UnimplementedDiagnosticsServiceHandler) RunDiagnostics(context.Context, *connect.Request[v1.RunDiagnosticsRequest]) (*connect.Response[v1.RunDiagnosticsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.diagnostics.v1.DiagnosticsService.RunDiagnostics is not implemented"))
}

func (UnimplementedDiagnosticsServiceHandler) GetDiagnosticsData(context.Context, *connect.Request[v1.GetDiagnosticsDataRequest]) (*connect.Response[v1.GetDiagnosticsDataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.diagnostics.v1.DiagnosticsService.GetDiagnosticsData is not implemented"))
}
