// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: cloudstack/management/annotation/v1/annotation.gen.proto

package annotationv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AnnotationService_AddAnnotation_FullMethodName              = "/cloudstack.management.annotation.v1.AnnotationService/AddAnnotation"
	AnnotationService_ListAnnotations_FullMethodName            = "/cloudstack.management.annotation.v1.AnnotationService/ListAnnotations"
	AnnotationService_RemoveAnnotation_FullMethodName           = "/cloudstack.management.annotation.v1.AnnotationService/RemoveAnnotation"
	AnnotationService_UpdateAnnotationVisibility_FullMethodName = "/cloudstack.management.annotation.v1.AnnotationService/UpdateAnnotationVisibility"
)

// AnnotationServiceClient is the client API for AnnotationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// AnnotationService provides operations for managing Annotations
type AnnotationServiceClient interface {
	// AddAnnotation add an annotation.
	AddAnnotation(ctx context.Context, in *AddAnnotationRequest, opts ...grpc.CallOption) (*AddAnnotationResponse, error)
	// ListAnnotations Lists annotations.
	ListAnnotations(ctx context.Context, in *ListAnnotationsRequest, opts ...grpc.CallOption) (*ListAnnotationsResponse, error)
	// RemoveAnnotation remove an annotation.
	RemoveAnnotation(ctx context.Context, in *RemoveAnnotationRequest, opts ...grpc.CallOption) (*RemoveAnnotationResponse, error)
	// UpdateAnnotationVisibility update an annotation visibility.
	UpdateAnnotationVisibility(ctx context.Context, in *UpdateAnnotationVisibilityRequest, opts ...grpc.CallOption) (*UpdateAnnotationVisibilityResponse, error)
}

type annotationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnnotationServiceClient(cc grpc.ClientConnInterface) AnnotationServiceClient {
	return &annotationServiceClient{cc}
}

func (c *annotationServiceClient) AddAnnotation(ctx context.Context, in *AddAnnotationRequest, opts ...grpc.CallOption) (*AddAnnotationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddAnnotationResponse)
	err := c.cc.Invoke(ctx, AnnotationService_AddAnnotation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *annotationServiceClient) ListAnnotations(ctx context.Context, in *ListAnnotationsRequest, opts ...grpc.CallOption) (*ListAnnotationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAnnotationsResponse)
	err := c.cc.Invoke(ctx, AnnotationService_ListAnnotations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *annotationServiceClient) RemoveAnnotation(ctx context.Context, in *RemoveAnnotationRequest, opts ...grpc.CallOption) (*RemoveAnnotationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveAnnotationResponse)
	err := c.cc.Invoke(ctx, AnnotationService_RemoveAnnotation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *annotationServiceClient) UpdateAnnotationVisibility(ctx context.Context, in *UpdateAnnotationVisibilityRequest, opts ...grpc.CallOption) (*UpdateAnnotationVisibilityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAnnotationVisibilityResponse)
	err := c.cc.Invoke(ctx, AnnotationService_UpdateAnnotationVisibility_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnnotationServiceServer is the server API for AnnotationService service.
// All implementations must embed UnimplementedAnnotationServiceServer
// for forward compatibility.
//
// AnnotationService provides operations for managing Annotations
type AnnotationServiceServer interface {
	// AddAnnotation add an annotation.
	AddAnnotation(context.Context, *AddAnnotationRequest) (*AddAnnotationResponse, error)
	// ListAnnotations Lists annotations.
	ListAnnotations(context.Context, *ListAnnotationsRequest) (*ListAnnotationsResponse, error)
	// RemoveAnnotation remove an annotation.
	RemoveAnnotation(context.Context, *RemoveAnnotationRequest) (*RemoveAnnotationResponse, error)
	// UpdateAnnotationVisibility update an annotation visibility.
	UpdateAnnotationVisibility(context.Context, *UpdateAnnotationVisibilityRequest) (*UpdateAnnotationVisibilityResponse, error)
	mustEmbedUnimplementedAnnotationServiceServer()
}

// UnimplementedAnnotationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAnnotationServiceServer struct{}

func (UnimplementedAnnotationServiceServer) AddAnnotation(context.Context, *AddAnnotationRequest) (*AddAnnotationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAnnotation not implemented")
}
func (UnimplementedAnnotationServiceServer) ListAnnotations(context.Context, *ListAnnotationsRequest) (*ListAnnotationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAnnotations not implemented")
}
func (UnimplementedAnnotationServiceServer) RemoveAnnotation(context.Context, *RemoveAnnotationRequest) (*RemoveAnnotationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAnnotation not implemented")
}
func (UnimplementedAnnotationServiceServer) UpdateAnnotationVisibility(context.Context, *UpdateAnnotationVisibilityRequest) (*UpdateAnnotationVisibilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAnnotationVisibility not implemented")
}
func (UnimplementedAnnotationServiceServer) mustEmbedUnimplementedAnnotationServiceServer() {}
func (UnimplementedAnnotationServiceServer) testEmbeddedByValue()                           {}

// UnsafeAnnotationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnnotationServiceServer will
// result in compilation errors.
type UnsafeAnnotationServiceServer interface {
	mustEmbedUnimplementedAnnotationServiceServer()
}

func RegisterAnnotationServiceServer(s grpc.ServiceRegistrar, srv AnnotationServiceServer) {
	// If the following call pancis, it indicates UnimplementedAnnotationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AnnotationService_ServiceDesc, srv)
}

func _AnnotationService_AddAnnotation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAnnotationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnnotationServiceServer).AddAnnotation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnnotationService_AddAnnotation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnnotationServiceServer).AddAnnotation(ctx, req.(*AddAnnotationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnnotationService_ListAnnotations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAnnotationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnnotationServiceServer).ListAnnotations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnnotationService_ListAnnotations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnnotationServiceServer).ListAnnotations(ctx, req.(*ListAnnotationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnnotationService_RemoveAnnotation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAnnotationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnnotationServiceServer).RemoveAnnotation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnnotationService_RemoveAnnotation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnnotationServiceServer).RemoveAnnotation(ctx, req.(*RemoveAnnotationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnnotationService_UpdateAnnotationVisibility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAnnotationVisibilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnnotationServiceServer).UpdateAnnotationVisibility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnnotationService_UpdateAnnotationVisibility_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnnotationServiceServer).UpdateAnnotationVisibility(ctx, req.(*UpdateAnnotationVisibilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AnnotationService_ServiceDesc is the grpc.ServiceDesc for AnnotationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnnotationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloudstack.management.annotation.v1.AnnotationService",
	HandlerType: (*AnnotationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddAnnotation",
			Handler:    _AnnotationService_AddAnnotation_Handler,
		},
		{
			MethodName: "ListAnnotations",
			Handler:    _AnnotationService_ListAnnotations_Handler,
		},
		{
			MethodName: "RemoveAnnotation",
			Handler:    _AnnotationService_RemoveAnnotation_Handler,
		},
		{
			MethodName: "UpdateAnnotationVisibility",
			Handler:    _AnnotationService_UpdateAnnotationVisibility_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloudstack/management/annotation/v1/annotation.gen.proto",
}
