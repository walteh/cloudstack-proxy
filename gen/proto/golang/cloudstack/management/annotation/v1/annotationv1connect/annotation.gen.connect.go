// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cloudstack/management/annotation/v1/annotation.gen.proto

package annotationv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/walteh/cloudstack-proxy/gen/proto/golang/cloudstack/management/annotation/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AnnotationServiceName is the fully-qualified name of the AnnotationService service.
	AnnotationServiceName = "cloudstack.management.annotation.v1.AnnotationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AnnotationServiceAddAnnotationProcedure is the fully-qualified name of the AnnotationService's
	// AddAnnotation RPC.
	AnnotationServiceAddAnnotationProcedure = "/cloudstack.management.annotation.v1.AnnotationService/AddAnnotation"
	// AnnotationServiceListAnnotationsProcedure is the fully-qualified name of the AnnotationService's
	// ListAnnotations RPC.
	AnnotationServiceListAnnotationsProcedure = "/cloudstack.management.annotation.v1.AnnotationService/ListAnnotations"
	// AnnotationServiceRemoveAnnotationProcedure is the fully-qualified name of the AnnotationService's
	// RemoveAnnotation RPC.
	AnnotationServiceRemoveAnnotationProcedure = "/cloudstack.management.annotation.v1.AnnotationService/RemoveAnnotation"
	// AnnotationServiceUpdateAnnotationVisibilityProcedure is the fully-qualified name of the
	// AnnotationService's UpdateAnnotationVisibility RPC.
	AnnotationServiceUpdateAnnotationVisibilityProcedure = "/cloudstack.management.annotation.v1.AnnotationService/UpdateAnnotationVisibility"
)

// AnnotationServiceClient is a client for the cloudstack.management.annotation.v1.AnnotationService
// service.
type AnnotationServiceClient interface {
	// AddAnnotation add an annotation.
	AddAnnotation(context.Context, *connect.Request[v1.AddAnnotationRequest]) (*connect.Response[v1.AddAnnotationResponse], error)
	// ListAnnotations Lists annotations.
	ListAnnotations(context.Context, *connect.Request[v1.ListAnnotationsRequest]) (*connect.Response[v1.ListAnnotationsResponse], error)
	// RemoveAnnotation remove an annotation.
	RemoveAnnotation(context.Context, *connect.Request[v1.RemoveAnnotationRequest]) (*connect.Response[v1.RemoveAnnotationResponse], error)
	// UpdateAnnotationVisibility update an annotation visibility.
	UpdateAnnotationVisibility(context.Context, *connect.Request[v1.UpdateAnnotationVisibilityRequest]) (*connect.Response[v1.UpdateAnnotationVisibilityResponse], error)
}

// NewAnnotationServiceClient constructs a client for the
// cloudstack.management.annotation.v1.AnnotationService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAnnotationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AnnotationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	annotationServiceMethods := v1.File_cloudstack_management_annotation_v1_annotation_gen_proto.Services().ByName("AnnotationService").Methods()
	return &annotationServiceClient{
		addAnnotation: connect.NewClient[v1.AddAnnotationRequest, v1.AddAnnotationResponse](
			httpClient,
			baseURL+AnnotationServiceAddAnnotationProcedure,
			connect.WithSchema(annotationServiceMethods.ByName("AddAnnotation")),
			connect.WithClientOptions(opts...),
		),
		listAnnotations: connect.NewClient[v1.ListAnnotationsRequest, v1.ListAnnotationsResponse](
			httpClient,
			baseURL+AnnotationServiceListAnnotationsProcedure,
			connect.WithSchema(annotationServiceMethods.ByName("ListAnnotations")),
			connect.WithClientOptions(opts...),
		),
		removeAnnotation: connect.NewClient[v1.RemoveAnnotationRequest, v1.RemoveAnnotationResponse](
			httpClient,
			baseURL+AnnotationServiceRemoveAnnotationProcedure,
			connect.WithSchema(annotationServiceMethods.ByName("RemoveAnnotation")),
			connect.WithClientOptions(opts...),
		),
		updateAnnotationVisibility: connect.NewClient[v1.UpdateAnnotationVisibilityRequest, v1.UpdateAnnotationVisibilityResponse](
			httpClient,
			baseURL+AnnotationServiceUpdateAnnotationVisibilityProcedure,
			connect.WithSchema(annotationServiceMethods.ByName("UpdateAnnotationVisibility")),
			connect.WithClientOptions(opts...),
		),
	}
}

// annotationServiceClient implements AnnotationServiceClient.
type annotationServiceClient struct {
	addAnnotation              *connect.Client[v1.AddAnnotationRequest, v1.AddAnnotationResponse]
	listAnnotations            *connect.Client[v1.ListAnnotationsRequest, v1.ListAnnotationsResponse]
	removeAnnotation           *connect.Client[v1.RemoveAnnotationRequest, v1.RemoveAnnotationResponse]
	updateAnnotationVisibility *connect.Client[v1.UpdateAnnotationVisibilityRequest, v1.UpdateAnnotationVisibilityResponse]
}

// AddAnnotation calls cloudstack.management.annotation.v1.AnnotationService.AddAnnotation.
func (c *annotationServiceClient) AddAnnotation(ctx context.Context, req *connect.Request[v1.AddAnnotationRequest]) (*connect.Response[v1.AddAnnotationResponse], error) {
	return c.addAnnotation.CallUnary(ctx, req)
}

// ListAnnotations calls cloudstack.management.annotation.v1.AnnotationService.ListAnnotations.
func (c *annotationServiceClient) ListAnnotations(ctx context.Context, req *connect.Request[v1.ListAnnotationsRequest]) (*connect.Response[v1.ListAnnotationsResponse], error) {
	return c.listAnnotations.CallUnary(ctx, req)
}

// RemoveAnnotation calls cloudstack.management.annotation.v1.AnnotationService.RemoveAnnotation.
func (c *annotationServiceClient) RemoveAnnotation(ctx context.Context, req *connect.Request[v1.RemoveAnnotationRequest]) (*connect.Response[v1.RemoveAnnotationResponse], error) {
	return c.removeAnnotation.CallUnary(ctx, req)
}

// UpdateAnnotationVisibility calls
// cloudstack.management.annotation.v1.AnnotationService.UpdateAnnotationVisibility.
func (c *annotationServiceClient) UpdateAnnotationVisibility(ctx context.Context, req *connect.Request[v1.UpdateAnnotationVisibilityRequest]) (*connect.Response[v1.UpdateAnnotationVisibilityResponse], error) {
	return c.updateAnnotationVisibility.CallUnary(ctx, req)
}

// AnnotationServiceHandler is an implementation of the
// cloudstack.management.annotation.v1.AnnotationService service.
type AnnotationServiceHandler interface {
	// AddAnnotation add an annotation.
	AddAnnotation(context.Context, *connect.Request[v1.AddAnnotationRequest]) (*connect.Response[v1.AddAnnotationResponse], error)
	// ListAnnotations Lists annotations.
	ListAnnotations(context.Context, *connect.Request[v1.ListAnnotationsRequest]) (*connect.Response[v1.ListAnnotationsResponse], error)
	// RemoveAnnotation remove an annotation.
	RemoveAnnotation(context.Context, *connect.Request[v1.RemoveAnnotationRequest]) (*connect.Response[v1.RemoveAnnotationResponse], error)
	// UpdateAnnotationVisibility update an annotation visibility.
	UpdateAnnotationVisibility(context.Context, *connect.Request[v1.UpdateAnnotationVisibilityRequest]) (*connect.Response[v1.UpdateAnnotationVisibilityResponse], error)
}

// NewAnnotationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAnnotationServiceHandler(svc AnnotationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	annotationServiceMethods := v1.File_cloudstack_management_annotation_v1_annotation_gen_proto.Services().ByName("AnnotationService").Methods()
	annotationServiceAddAnnotationHandler := connect.NewUnaryHandler(
		AnnotationServiceAddAnnotationProcedure,
		svc.AddAnnotation,
		connect.WithSchema(annotationServiceMethods.ByName("AddAnnotation")),
		connect.WithHandlerOptions(opts...),
	)
	annotationServiceListAnnotationsHandler := connect.NewUnaryHandler(
		AnnotationServiceListAnnotationsProcedure,
		svc.ListAnnotations,
		connect.WithSchema(annotationServiceMethods.ByName("ListAnnotations")),
		connect.WithHandlerOptions(opts...),
	)
	annotationServiceRemoveAnnotationHandler := connect.NewUnaryHandler(
		AnnotationServiceRemoveAnnotationProcedure,
		svc.RemoveAnnotation,
		connect.WithSchema(annotationServiceMethods.ByName("RemoveAnnotation")),
		connect.WithHandlerOptions(opts...),
	)
	annotationServiceUpdateAnnotationVisibilityHandler := connect.NewUnaryHandler(
		AnnotationServiceUpdateAnnotationVisibilityProcedure,
		svc.UpdateAnnotationVisibility,
		connect.WithSchema(annotationServiceMethods.ByName("UpdateAnnotationVisibility")),
		connect.WithHandlerOptions(opts...),
	)
	return "/cloudstack.management.annotation.v1.AnnotationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AnnotationServiceAddAnnotationProcedure:
			annotationServiceAddAnnotationHandler.ServeHTTP(w, r)
		case AnnotationServiceListAnnotationsProcedure:
			annotationServiceListAnnotationsHandler.ServeHTTP(w, r)
		case AnnotationServiceRemoveAnnotationProcedure:
			annotationServiceRemoveAnnotationHandler.ServeHTTP(w, r)
		case AnnotationServiceUpdateAnnotationVisibilityProcedure:
			annotationServiceUpdateAnnotationVisibilityHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAnnotationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAnnotationServiceHandler struct{}

func (UnimplementedAnnotationServiceHandler) AddAnnotation(context.Context, *connect.Request[v1.AddAnnotationRequest]) (*connect.Response[v1.AddAnnotationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.annotation.v1.AnnotationService.AddAnnotation is not implemented"))
}

func (UnimplementedAnnotationServiceHandler) ListAnnotations(context.Context, *connect.Request[v1.ListAnnotationsRequest]) (*connect.Response[v1.ListAnnotationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.annotation.v1.AnnotationService.ListAnnotations is not implemented"))
}

func (UnimplementedAnnotationServiceHandler) RemoveAnnotation(context.Context, *connect.Request[v1.RemoveAnnotationRequest]) (*connect.Response[v1.RemoveAnnotationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.annotation.v1.AnnotationService.RemoveAnnotation is not implemented"))
}

func (UnimplementedAnnotationServiceHandler) UpdateAnnotationVisibility(context.Context, *connect.Request[v1.UpdateAnnotationVisibilityRequest]) (*connect.Response[v1.UpdateAnnotationVisibilityResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.annotation.v1.AnnotationService.UpdateAnnotationVisibility is not implemented"))
}
