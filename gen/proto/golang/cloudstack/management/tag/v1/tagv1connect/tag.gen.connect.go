// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cloudstack/management/tag/v1/tag.gen.proto

package tagv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/walteh/cloudstack-proxy/gen/proto/golang/cloudstack/management/tag/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TagServiceName is the fully-qualified name of the TagService service.
	TagServiceName = "cloudstack.management.tag.v1.TagService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TagServiceListTagsProcedure is the fully-qualified name of the TagService's ListTags RPC.
	TagServiceListTagsProcedure = "/cloudstack.management.tag.v1.TagService/ListTags"
	// TagServiceDeleteTagsProcedure is the fully-qualified name of the TagService's DeleteTags RPC.
	TagServiceDeleteTagsProcedure = "/cloudstack.management.tag.v1.TagService/DeleteTags"
	// TagServiceCreateTagsProcedure is the fully-qualified name of the TagService's CreateTags RPC.
	TagServiceCreateTagsProcedure = "/cloudstack.management.tag.v1.TagService/CreateTags"
)

// TagServiceClient is a client for the cloudstack.management.tag.v1.TagService service.
type TagServiceClient interface {
	// ListTags List resource tag(s)
	ListTags(context.Context, *connect.Request[v1.ListTagsRequest]) (*connect.Response[v1.ListTagsResponse], error)
	// DeleteTags Deleting resource tag(s)
	DeleteTags(context.Context, *connect.Request[v1.DeleteTagsRequest]) (*connect.Response[v1.DeleteTagsResponse], error)
	// CreateTags Creates resource tag(s)
	CreateTags(context.Context, *connect.Request[v1.CreateTagsRequest]) (*connect.Response[v1.CreateTagsResponse], error)
}

// NewTagServiceClient constructs a client for the cloudstack.management.tag.v1.TagService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTagServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TagServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	tagServiceMethods := v1.File_cloudstack_management_tag_v1_tag_gen_proto.Services().ByName("TagService").Methods()
	return &tagServiceClient{
		listTags: connect.NewClient[v1.ListTagsRequest, v1.ListTagsResponse](
			httpClient,
			baseURL+TagServiceListTagsProcedure,
			connect.WithSchema(tagServiceMethods.ByName("ListTags")),
			connect.WithClientOptions(opts...),
		),
		deleteTags: connect.NewClient[v1.DeleteTagsRequest, v1.DeleteTagsResponse](
			httpClient,
			baseURL+TagServiceDeleteTagsProcedure,
			connect.WithSchema(tagServiceMethods.ByName("DeleteTags")),
			connect.WithClientOptions(opts...),
		),
		createTags: connect.NewClient[v1.CreateTagsRequest, v1.CreateTagsResponse](
			httpClient,
			baseURL+TagServiceCreateTagsProcedure,
			connect.WithSchema(tagServiceMethods.ByName("CreateTags")),
			connect.WithClientOptions(opts...),
		),
	}
}

// tagServiceClient implements TagServiceClient.
type tagServiceClient struct {
	listTags   *connect.Client[v1.ListTagsRequest, v1.ListTagsResponse]
	deleteTags *connect.Client[v1.DeleteTagsRequest, v1.DeleteTagsResponse]
	createTags *connect.Client[v1.CreateTagsRequest, v1.CreateTagsResponse]
}

// ListTags calls cloudstack.management.tag.v1.TagService.ListTags.
func (c *tagServiceClient) ListTags(ctx context.Context, req *connect.Request[v1.ListTagsRequest]) (*connect.Response[v1.ListTagsResponse], error) {
	return c.listTags.CallUnary(ctx, req)
}

// DeleteTags calls cloudstack.management.tag.v1.TagService.DeleteTags.
func (c *tagServiceClient) DeleteTags(ctx context.Context, req *connect.Request[v1.DeleteTagsRequest]) (*connect.Response[v1.DeleteTagsResponse], error) {
	return c.deleteTags.CallUnary(ctx, req)
}

// CreateTags calls cloudstack.management.tag.v1.TagService.CreateTags.
func (c *tagServiceClient) CreateTags(ctx context.Context, req *connect.Request[v1.CreateTagsRequest]) (*connect.Response[v1.CreateTagsResponse], error) {
	return c.createTags.CallUnary(ctx, req)
}

// TagServiceHandler is an implementation of the cloudstack.management.tag.v1.TagService service.
type TagServiceHandler interface {
	// ListTags List resource tag(s)
	ListTags(context.Context, *connect.Request[v1.ListTagsRequest]) (*connect.Response[v1.ListTagsResponse], error)
	// DeleteTags Deleting resource tag(s)
	DeleteTags(context.Context, *connect.Request[v1.DeleteTagsRequest]) (*connect.Response[v1.DeleteTagsResponse], error)
	// CreateTags Creates resource tag(s)
	CreateTags(context.Context, *connect.Request[v1.CreateTagsRequest]) (*connect.Response[v1.CreateTagsResponse], error)
}

// NewTagServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTagServiceHandler(svc TagServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	tagServiceMethods := v1.File_cloudstack_management_tag_v1_tag_gen_proto.Services().ByName("TagService").Methods()
	tagServiceListTagsHandler := connect.NewUnaryHandler(
		TagServiceListTagsProcedure,
		svc.ListTags,
		connect.WithSchema(tagServiceMethods.ByName("ListTags")),
		connect.WithHandlerOptions(opts...),
	)
	tagServiceDeleteTagsHandler := connect.NewUnaryHandler(
		TagServiceDeleteTagsProcedure,
		svc.DeleteTags,
		connect.WithSchema(tagServiceMethods.ByName("DeleteTags")),
		connect.WithHandlerOptions(opts...),
	)
	tagServiceCreateTagsHandler := connect.NewUnaryHandler(
		TagServiceCreateTagsProcedure,
		svc.CreateTags,
		connect.WithSchema(tagServiceMethods.ByName("CreateTags")),
		connect.WithHandlerOptions(opts...),
	)
	return "/cloudstack.management.tag.v1.TagService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TagServiceListTagsProcedure:
			tagServiceListTagsHandler.ServeHTTP(w, r)
		case TagServiceDeleteTagsProcedure:
			tagServiceDeleteTagsHandler.ServeHTTP(w, r)
		case TagServiceCreateTagsProcedure:
			tagServiceCreateTagsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTagServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTagServiceHandler struct{}

func (UnimplementedTagServiceHandler) ListTags(context.Context, *connect.Request[v1.ListTagsRequest]) (*connect.Response[v1.ListTagsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.tag.v1.TagService.ListTags is not implemented"))
}

func (UnimplementedTagServiceHandler) DeleteTags(context.Context, *connect.Request[v1.DeleteTagsRequest]) (*connect.Response[v1.DeleteTagsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.tag.v1.TagService.DeleteTags is not implemented"))
}

func (UnimplementedTagServiceHandler) CreateTags(context.Context, *connect.Request[v1.CreateTagsRequest]) (*connect.Response[v1.CreateTagsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.tag.v1.TagService.CreateTags is not implemented"))
}
