// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cloudstack/management/zone/v1/zone.gen.proto

package zonev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/walteh/cloudstack-proxy/gen/proto/golang/cloudstack/management/zone/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ZoneServiceName is the fully-qualified name of the ZoneService service.
	ZoneServiceName = "cloudstack.management.zone.v1.ZoneService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ZoneServiceCreateZoneProcedure is the fully-qualified name of the ZoneService's CreateZone RPC.
	ZoneServiceCreateZoneProcedure = "/cloudstack.management.zone.v1.ZoneService/CreateZone"
	// ZoneServiceDeleteZoneProcedure is the fully-qualified name of the ZoneService's DeleteZone RPC.
	ZoneServiceDeleteZoneProcedure = "/cloudstack.management.zone.v1.ZoneService/DeleteZone"
	// ZoneServiceListZonesProcedure is the fully-qualified name of the ZoneService's ListZones RPC.
	ZoneServiceListZonesProcedure = "/cloudstack.management.zone.v1.ZoneService/ListZones"
	// ZoneServiceListZonesCmdByAdminProcedure is the fully-qualified name of the ZoneService's
	// ListZonesCmdByAdmin RPC.
	ZoneServiceListZonesCmdByAdminProcedure = "/cloudstack.management.zone.v1.ZoneService/ListZonesCmdByAdmin"
	// ZoneServiceMarkDefaultZoneForAccountProcedure is the fully-qualified name of the ZoneService's
	// MarkDefaultZoneForAccount RPC.
	ZoneServiceMarkDefaultZoneForAccountProcedure = "/cloudstack.management.zone.v1.ZoneService/MarkDefaultZoneForAccount"
	// ZoneServiceUpdateZoneProcedure is the fully-qualified name of the ZoneService's UpdateZone RPC.
	ZoneServiceUpdateZoneProcedure = "/cloudstack.management.zone.v1.ZoneService/UpdateZone"
)

// ZoneServiceClient is a client for the cloudstack.management.zone.v1.ZoneService service.
type ZoneServiceClient interface {
	// CreateZone Creates a Zone.
	CreateZone(context.Context, *connect.Request[v1.CreateZoneRequest]) (*connect.Response[v1.CreateZoneResponse], error)
	// DeleteZone Deletes a Zone.
	DeleteZone(context.Context, *connect.Request[v1.DeleteZoneRequest]) (*connect.Response[v1.DeleteZoneResponse], error)
	// ListZones Lists zones
	ListZones(context.Context, *connect.Request[v1.ListZonesRequest]) (*connect.Response[v1.ListZonesResponse], error)
	// ListZonesCmdByAdmin Lists zones
	ListZonesCmdByAdmin(context.Context, *connect.Request[v1.ListZonesCmdByAdminRequest]) (*connect.Response[v1.ListZonesCmdByAdminResponse], error)
	// MarkDefaultZoneForAccount Marks a default zone for this account
	MarkDefaultZoneForAccount(context.Context, *connect.Request[v1.MarkDefaultZoneForAccountRequest]) (*connect.Response[v1.MarkDefaultZoneForAccountResponse], error)
	// UpdateZone Updates a Zone.
	UpdateZone(context.Context, *connect.Request[v1.UpdateZoneRequest]) (*connect.Response[v1.UpdateZoneResponse], error)
}

// NewZoneServiceClient constructs a client for the cloudstack.management.zone.v1.ZoneService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewZoneServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ZoneServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	zoneServiceMethods := v1.File_cloudstack_management_zone_v1_zone_gen_proto.Services().ByName("ZoneService").Methods()
	return &zoneServiceClient{
		createZone: connect.NewClient[v1.CreateZoneRequest, v1.CreateZoneResponse](
			httpClient,
			baseURL+ZoneServiceCreateZoneProcedure,
			connect.WithSchema(zoneServiceMethods.ByName("CreateZone")),
			connect.WithClientOptions(opts...),
		),
		deleteZone: connect.NewClient[v1.DeleteZoneRequest, v1.DeleteZoneResponse](
			httpClient,
			baseURL+ZoneServiceDeleteZoneProcedure,
			connect.WithSchema(zoneServiceMethods.ByName("DeleteZone")),
			connect.WithClientOptions(opts...),
		),
		listZones: connect.NewClient[v1.ListZonesRequest, v1.ListZonesResponse](
			httpClient,
			baseURL+ZoneServiceListZonesProcedure,
			connect.WithSchema(zoneServiceMethods.ByName("ListZones")),
			connect.WithClientOptions(opts...),
		),
		listZonesCmdByAdmin: connect.NewClient[v1.ListZonesCmdByAdminRequest, v1.ListZonesCmdByAdminResponse](
			httpClient,
			baseURL+ZoneServiceListZonesCmdByAdminProcedure,
			connect.WithSchema(zoneServiceMethods.ByName("ListZonesCmdByAdmin")),
			connect.WithClientOptions(opts...),
		),
		markDefaultZoneForAccount: connect.NewClient[v1.MarkDefaultZoneForAccountRequest, v1.MarkDefaultZoneForAccountResponse](
			httpClient,
			baseURL+ZoneServiceMarkDefaultZoneForAccountProcedure,
			connect.WithSchema(zoneServiceMethods.ByName("MarkDefaultZoneForAccount")),
			connect.WithClientOptions(opts...),
		),
		updateZone: connect.NewClient[v1.UpdateZoneRequest, v1.UpdateZoneResponse](
			httpClient,
			baseURL+ZoneServiceUpdateZoneProcedure,
			connect.WithSchema(zoneServiceMethods.ByName("UpdateZone")),
			connect.WithClientOptions(opts...),
		),
	}
}

// zoneServiceClient implements ZoneServiceClient.
type zoneServiceClient struct {
	createZone                *connect.Client[v1.CreateZoneRequest, v1.CreateZoneResponse]
	deleteZone                *connect.Client[v1.DeleteZoneRequest, v1.DeleteZoneResponse]
	listZones                 *connect.Client[v1.ListZonesRequest, v1.ListZonesResponse]
	listZonesCmdByAdmin       *connect.Client[v1.ListZonesCmdByAdminRequest, v1.ListZonesCmdByAdminResponse]
	markDefaultZoneForAccount *connect.Client[v1.MarkDefaultZoneForAccountRequest, v1.MarkDefaultZoneForAccountResponse]
	updateZone                *connect.Client[v1.UpdateZoneRequest, v1.UpdateZoneResponse]
}

// CreateZone calls cloudstack.management.zone.v1.ZoneService.CreateZone.
func (c *zoneServiceClient) CreateZone(ctx context.Context, req *connect.Request[v1.CreateZoneRequest]) (*connect.Response[v1.CreateZoneResponse], error) {
	return c.createZone.CallUnary(ctx, req)
}

// DeleteZone calls cloudstack.management.zone.v1.ZoneService.DeleteZone.
func (c *zoneServiceClient) DeleteZone(ctx context.Context, req *connect.Request[v1.DeleteZoneRequest]) (*connect.Response[v1.DeleteZoneResponse], error) {
	return c.deleteZone.CallUnary(ctx, req)
}

// ListZones calls cloudstack.management.zone.v1.ZoneService.ListZones.
func (c *zoneServiceClient) ListZones(ctx context.Context, req *connect.Request[v1.ListZonesRequest]) (*connect.Response[v1.ListZonesResponse], error) {
	return c.listZones.CallUnary(ctx, req)
}

// ListZonesCmdByAdmin calls cloudstack.management.zone.v1.ZoneService.ListZonesCmdByAdmin.
func (c *zoneServiceClient) ListZonesCmdByAdmin(ctx context.Context, req *connect.Request[v1.ListZonesCmdByAdminRequest]) (*connect.Response[v1.ListZonesCmdByAdminResponse], error) {
	return c.listZonesCmdByAdmin.CallUnary(ctx, req)
}

// MarkDefaultZoneForAccount calls
// cloudstack.management.zone.v1.ZoneService.MarkDefaultZoneForAccount.
func (c *zoneServiceClient) MarkDefaultZoneForAccount(ctx context.Context, req *connect.Request[v1.MarkDefaultZoneForAccountRequest]) (*connect.Response[v1.MarkDefaultZoneForAccountResponse], error) {
	return c.markDefaultZoneForAccount.CallUnary(ctx, req)
}

// UpdateZone calls cloudstack.management.zone.v1.ZoneService.UpdateZone.
func (c *zoneServiceClient) UpdateZone(ctx context.Context, req *connect.Request[v1.UpdateZoneRequest]) (*connect.Response[v1.UpdateZoneResponse], error) {
	return c.updateZone.CallUnary(ctx, req)
}

// ZoneServiceHandler is an implementation of the cloudstack.management.zone.v1.ZoneService service.
type ZoneServiceHandler interface {
	// CreateZone Creates a Zone.
	CreateZone(context.Context, *connect.Request[v1.CreateZoneRequest]) (*connect.Response[v1.CreateZoneResponse], error)
	// DeleteZone Deletes a Zone.
	DeleteZone(context.Context, *connect.Request[v1.DeleteZoneRequest]) (*connect.Response[v1.DeleteZoneResponse], error)
	// ListZones Lists zones
	ListZones(context.Context, *connect.Request[v1.ListZonesRequest]) (*connect.Response[v1.ListZonesResponse], error)
	// ListZonesCmdByAdmin Lists zones
	ListZonesCmdByAdmin(context.Context, *connect.Request[v1.ListZonesCmdByAdminRequest]) (*connect.Response[v1.ListZonesCmdByAdminResponse], error)
	// MarkDefaultZoneForAccount Marks a default zone for this account
	MarkDefaultZoneForAccount(context.Context, *connect.Request[v1.MarkDefaultZoneForAccountRequest]) (*connect.Response[v1.MarkDefaultZoneForAccountResponse], error)
	// UpdateZone Updates a Zone.
	UpdateZone(context.Context, *connect.Request[v1.UpdateZoneRequest]) (*connect.Response[v1.UpdateZoneResponse], error)
}

// NewZoneServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewZoneServiceHandler(svc ZoneServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	zoneServiceMethods := v1.File_cloudstack_management_zone_v1_zone_gen_proto.Services().ByName("ZoneService").Methods()
	zoneServiceCreateZoneHandler := connect.NewUnaryHandler(
		ZoneServiceCreateZoneProcedure,
		svc.CreateZone,
		connect.WithSchema(zoneServiceMethods.ByName("CreateZone")),
		connect.WithHandlerOptions(opts...),
	)
	zoneServiceDeleteZoneHandler := connect.NewUnaryHandler(
		ZoneServiceDeleteZoneProcedure,
		svc.DeleteZone,
		connect.WithSchema(zoneServiceMethods.ByName("DeleteZone")),
		connect.WithHandlerOptions(opts...),
	)
	zoneServiceListZonesHandler := connect.NewUnaryHandler(
		ZoneServiceListZonesProcedure,
		svc.ListZones,
		connect.WithSchema(zoneServiceMethods.ByName("ListZones")),
		connect.WithHandlerOptions(opts...),
	)
	zoneServiceListZonesCmdByAdminHandler := connect.NewUnaryHandler(
		ZoneServiceListZonesCmdByAdminProcedure,
		svc.ListZonesCmdByAdmin,
		connect.WithSchema(zoneServiceMethods.ByName("ListZonesCmdByAdmin")),
		connect.WithHandlerOptions(opts...),
	)
	zoneServiceMarkDefaultZoneForAccountHandler := connect.NewUnaryHandler(
		ZoneServiceMarkDefaultZoneForAccountProcedure,
		svc.MarkDefaultZoneForAccount,
		connect.WithSchema(zoneServiceMethods.ByName("MarkDefaultZoneForAccount")),
		connect.WithHandlerOptions(opts...),
	)
	zoneServiceUpdateZoneHandler := connect.NewUnaryHandler(
		ZoneServiceUpdateZoneProcedure,
		svc.UpdateZone,
		connect.WithSchema(zoneServiceMethods.ByName("UpdateZone")),
		connect.WithHandlerOptions(opts...),
	)
	return "/cloudstack.management.zone.v1.ZoneService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ZoneServiceCreateZoneProcedure:
			zoneServiceCreateZoneHandler.ServeHTTP(w, r)
		case ZoneServiceDeleteZoneProcedure:
			zoneServiceDeleteZoneHandler.ServeHTTP(w, r)
		case ZoneServiceListZonesProcedure:
			zoneServiceListZonesHandler.ServeHTTP(w, r)
		case ZoneServiceListZonesCmdByAdminProcedure:
			zoneServiceListZonesCmdByAdminHandler.ServeHTTP(w, r)
		case ZoneServiceMarkDefaultZoneForAccountProcedure:
			zoneServiceMarkDefaultZoneForAccountHandler.ServeHTTP(w, r)
		case ZoneServiceUpdateZoneProcedure:
			zoneServiceUpdateZoneHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedZoneServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedZoneServiceHandler struct{}

func (UnimplementedZoneServiceHandler) CreateZone(context.Context, *connect.Request[v1.CreateZoneRequest]) (*connect.Response[v1.CreateZoneResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.zone.v1.ZoneService.CreateZone is not implemented"))
}

func (UnimplementedZoneServiceHandler) DeleteZone(context.Context, *connect.Request[v1.DeleteZoneRequest]) (*connect.Response[v1.DeleteZoneResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.zone.v1.ZoneService.DeleteZone is not implemented"))
}

func (UnimplementedZoneServiceHandler) ListZones(context.Context, *connect.Request[v1.ListZonesRequest]) (*connect.Response[v1.ListZonesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.zone.v1.ZoneService.ListZones is not implemented"))
}

func (UnimplementedZoneServiceHandler) ListZonesCmdByAdmin(context.Context, *connect.Request[v1.ListZonesCmdByAdminRequest]) (*connect.Response[v1.ListZonesCmdByAdminResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.zone.v1.ZoneService.ListZonesCmdByAdmin is not implemented"))
}

func (UnimplementedZoneServiceHandler) MarkDefaultZoneForAccount(context.Context, *connect.Request[v1.MarkDefaultZoneForAccountRequest]) (*connect.Response[v1.MarkDefaultZoneForAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.zone.v1.ZoneService.MarkDefaultZoneForAccount is not implemented"))
}

func (UnimplementedZoneServiceHandler) UpdateZone(context.Context, *connect.Request[v1.UpdateZoneRequest]) (*connect.Response[v1.UpdateZoneResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.zone.v1.ZoneService.UpdateZone is not implemented"))
}
