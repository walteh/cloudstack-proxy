// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: cloudstack/management/swift/v1/swift.gen.proto

package swiftv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SwiftService_AddSwift_FullMethodName   = "/cloudstack.management.swift.v1.SwiftService/AddSwift"
	SwiftService_ListSwifts_FullMethodName = "/cloudstack.management.swift.v1.SwiftService/ListSwifts"
)

// SwiftServiceClient is the client API for SwiftService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SwiftService provides operations for managing Swifts
type SwiftServiceClient interface {
	// AddSwift Adds Swift.
	AddSwift(ctx context.Context, in *AddSwiftRequest, opts ...grpc.CallOption) (*AddSwiftResponse, error)
	// ListSwifts List Swift.
	ListSwifts(ctx context.Context, in *ListSwiftsRequest, opts ...grpc.CallOption) (*ListSwiftsResponse, error)
}

type swiftServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSwiftServiceClient(cc grpc.ClientConnInterface) SwiftServiceClient {
	return &swiftServiceClient{cc}
}

func (c *swiftServiceClient) AddSwift(ctx context.Context, in *AddSwiftRequest, opts ...grpc.CallOption) (*AddSwiftResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddSwiftResponse)
	err := c.cc.Invoke(ctx, SwiftService_AddSwift_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swiftServiceClient) ListSwifts(ctx context.Context, in *ListSwiftsRequest, opts ...grpc.CallOption) (*ListSwiftsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSwiftsResponse)
	err := c.cc.Invoke(ctx, SwiftService_ListSwifts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SwiftServiceServer is the server API for SwiftService service.
// All implementations must embed UnimplementedSwiftServiceServer
// for forward compatibility.
//
// SwiftService provides operations for managing Swifts
type SwiftServiceServer interface {
	// AddSwift Adds Swift.
	AddSwift(context.Context, *AddSwiftRequest) (*AddSwiftResponse, error)
	// ListSwifts List Swift.
	ListSwifts(context.Context, *ListSwiftsRequest) (*ListSwiftsResponse, error)
	mustEmbedUnimplementedSwiftServiceServer()
}

// UnimplementedSwiftServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSwiftServiceServer struct{}

func (UnimplementedSwiftServiceServer) AddSwift(context.Context, *AddSwiftRequest) (*AddSwiftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSwift not implemented")
}
func (UnimplementedSwiftServiceServer) ListSwifts(context.Context, *ListSwiftsRequest) (*ListSwiftsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSwifts not implemented")
}
func (UnimplementedSwiftServiceServer) mustEmbedUnimplementedSwiftServiceServer() {}
func (UnimplementedSwiftServiceServer) testEmbeddedByValue()                      {}

// UnsafeSwiftServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SwiftServiceServer will
// result in compilation errors.
type UnsafeSwiftServiceServer interface {
	mustEmbedUnimplementedSwiftServiceServer()
}

func RegisterSwiftServiceServer(s grpc.ServiceRegistrar, srv SwiftServiceServer) {
	// If the following call pancis, it indicates UnimplementedSwiftServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SwiftService_ServiceDesc, srv)
}

func _SwiftService_AddSwift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSwiftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwiftServiceServer).AddSwift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SwiftService_AddSwift_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwiftServiceServer).AddSwift(ctx, req.(*AddSwiftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwiftService_ListSwifts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSwiftsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwiftServiceServer).ListSwifts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SwiftService_ListSwifts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwiftServiceServer).ListSwifts(ctx, req.(*ListSwiftsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SwiftService_ServiceDesc is the grpc.ServiceDesc for SwiftService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SwiftService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloudstack.management.swift.v1.SwiftService",
	HandlerType: (*SwiftServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSwift",
			Handler:    _SwiftService_AddSwift_Handler,
		},
		{
			MethodName: "ListSwifts",
			Handler:    _SwiftService_ListSwifts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloudstack/management/swift/v1/swift.gen.proto",
}
