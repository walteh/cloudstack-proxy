// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: cloudstack/management/ha/v1/ha.gen.proto

package hav1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HaService_DisableHAForZone_FullMethodName    = "/cloudstack.management.ha.v1.HaService/DisableHAForZone"
	HaService_EnableHAForHost_FullMethodName     = "/cloudstack.management.ha.v1.HaService/EnableHAForHost"
	HaService_ConfigureHAForHost_FullMethodName  = "/cloudstack.management.ha.v1.HaService/ConfigureHAForHost"
	HaService_DisableHAForCluster_FullMethodName = "/cloudstack.management.ha.v1.HaService/DisableHAForCluster"
	HaService_EnableHAForZone_FullMethodName     = "/cloudstack.management.ha.v1.HaService/EnableHAForZone"
	HaService_ListHostHAResources_FullMethodName = "/cloudstack.management.ha.v1.HaService/ListHostHAResources"
	HaService_DisableHAForHost_FullMethodName    = "/cloudstack.management.ha.v1.HaService/DisableHAForHost"
	HaService_ListHostHAProviders_FullMethodName = "/cloudstack.management.ha.v1.HaService/ListHostHAProviders"
	HaService_EnableHAForCluster_FullMethodName  = "/cloudstack.management.ha.v1.HaService/EnableHAForCluster"
)

// HaServiceClient is the client API for HaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// HaService provides operations for managing Has
type HaServiceClient interface {
	// DisableHAForZone Disables HA for a zone
	DisableHAForZone(ctx context.Context, in *DisableHAForZoneRequest, opts ...grpc.CallOption) (*DisableHAForZoneResponse, error)
	// EnableHAForHost Enables HA for a host
	EnableHAForHost(ctx context.Context, in *EnableHAForHostRequest, opts ...grpc.CallOption) (*EnableHAForHostResponse, error)
	// ConfigureHAForHost Configures HA for a host
	ConfigureHAForHost(ctx context.Context, in *ConfigureHAForHostRequest, opts ...grpc.CallOption) (*ConfigureHAForHostResponse, error)
	// DisableHAForCluster Disables HA cluster-wide
	DisableHAForCluster(ctx context.Context, in *DisableHAForClusterRequest, opts ...grpc.CallOption) (*DisableHAForClusterResponse, error)
	// EnableHAForZone Enables HA for a zone
	EnableHAForZone(ctx context.Context, in *EnableHAForZoneRequest, opts ...grpc.CallOption) (*EnableHAForZoneResponse, error)
	// ListHostHAResources Lists host HA resources
	ListHostHAResources(ctx context.Context, in *ListHostHAResourcesRequest, opts ...grpc.CallOption) (*ListHostHAResourcesResponse, error)
	// DisableHAForHost Disables HA for a host
	DisableHAForHost(ctx context.Context, in *DisableHAForHostRequest, opts ...grpc.CallOption) (*DisableHAForHostResponse, error)
	// ListHostHAProviders Lists HA providers
	ListHostHAProviders(ctx context.Context, in *ListHostHAProvidersRequest, opts ...grpc.CallOption) (*ListHostHAProvidersResponse, error)
	// EnableHAForCluster Enables HA cluster-wide
	EnableHAForCluster(ctx context.Context, in *EnableHAForClusterRequest, opts ...grpc.CallOption) (*EnableHAForClusterResponse, error)
}

type haServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHaServiceClient(cc grpc.ClientConnInterface) HaServiceClient {
	return &haServiceClient{cc}
}

func (c *haServiceClient) DisableHAForZone(ctx context.Context, in *DisableHAForZoneRequest, opts ...grpc.CallOption) (*DisableHAForZoneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisableHAForZoneResponse)
	err := c.cc.Invoke(ctx, HaService_DisableHAForZone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *haServiceClient) EnableHAForHost(ctx context.Context, in *EnableHAForHostRequest, opts ...grpc.CallOption) (*EnableHAForHostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnableHAForHostResponse)
	err := c.cc.Invoke(ctx, HaService_EnableHAForHost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *haServiceClient) ConfigureHAForHost(ctx context.Context, in *ConfigureHAForHostRequest, opts ...grpc.CallOption) (*ConfigureHAForHostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfigureHAForHostResponse)
	err := c.cc.Invoke(ctx, HaService_ConfigureHAForHost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *haServiceClient) DisableHAForCluster(ctx context.Context, in *DisableHAForClusterRequest, opts ...grpc.CallOption) (*DisableHAForClusterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisableHAForClusterResponse)
	err := c.cc.Invoke(ctx, HaService_DisableHAForCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *haServiceClient) EnableHAForZone(ctx context.Context, in *EnableHAForZoneRequest, opts ...grpc.CallOption) (*EnableHAForZoneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnableHAForZoneResponse)
	err := c.cc.Invoke(ctx, HaService_EnableHAForZone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *haServiceClient) ListHostHAResources(ctx context.Context, in *ListHostHAResourcesRequest, opts ...grpc.CallOption) (*ListHostHAResourcesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListHostHAResourcesResponse)
	err := c.cc.Invoke(ctx, HaService_ListHostHAResources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *haServiceClient) DisableHAForHost(ctx context.Context, in *DisableHAForHostRequest, opts ...grpc.CallOption) (*DisableHAForHostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisableHAForHostResponse)
	err := c.cc.Invoke(ctx, HaService_DisableHAForHost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *haServiceClient) ListHostHAProviders(ctx context.Context, in *ListHostHAProvidersRequest, opts ...grpc.CallOption) (*ListHostHAProvidersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListHostHAProvidersResponse)
	err := c.cc.Invoke(ctx, HaService_ListHostHAProviders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *haServiceClient) EnableHAForCluster(ctx context.Context, in *EnableHAForClusterRequest, opts ...grpc.CallOption) (*EnableHAForClusterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnableHAForClusterResponse)
	err := c.cc.Invoke(ctx, HaService_EnableHAForCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HaServiceServer is the server API for HaService service.
// All implementations must embed UnimplementedHaServiceServer
// for forward compatibility.
//
// HaService provides operations for managing Has
type HaServiceServer interface {
	// DisableHAForZone Disables HA for a zone
	DisableHAForZone(context.Context, *DisableHAForZoneRequest) (*DisableHAForZoneResponse, error)
	// EnableHAForHost Enables HA for a host
	EnableHAForHost(context.Context, *EnableHAForHostRequest) (*EnableHAForHostResponse, error)
	// ConfigureHAForHost Configures HA for a host
	ConfigureHAForHost(context.Context, *ConfigureHAForHostRequest) (*ConfigureHAForHostResponse, error)
	// DisableHAForCluster Disables HA cluster-wide
	DisableHAForCluster(context.Context, *DisableHAForClusterRequest) (*DisableHAForClusterResponse, error)
	// EnableHAForZone Enables HA for a zone
	EnableHAForZone(context.Context, *EnableHAForZoneRequest) (*EnableHAForZoneResponse, error)
	// ListHostHAResources Lists host HA resources
	ListHostHAResources(context.Context, *ListHostHAResourcesRequest) (*ListHostHAResourcesResponse, error)
	// DisableHAForHost Disables HA for a host
	DisableHAForHost(context.Context, *DisableHAForHostRequest) (*DisableHAForHostResponse, error)
	// ListHostHAProviders Lists HA providers
	ListHostHAProviders(context.Context, *ListHostHAProvidersRequest) (*ListHostHAProvidersResponse, error)
	// EnableHAForCluster Enables HA cluster-wide
	EnableHAForCluster(context.Context, *EnableHAForClusterRequest) (*EnableHAForClusterResponse, error)
	mustEmbedUnimplementedHaServiceServer()
}

// UnimplementedHaServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHaServiceServer struct{}

func (UnimplementedHaServiceServer) DisableHAForZone(context.Context, *DisableHAForZoneRequest) (*DisableHAForZoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableHAForZone not implemented")
}
func (UnimplementedHaServiceServer) EnableHAForHost(context.Context, *EnableHAForHostRequest) (*EnableHAForHostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableHAForHost not implemented")
}
func (UnimplementedHaServiceServer) ConfigureHAForHost(context.Context, *ConfigureHAForHostRequest) (*ConfigureHAForHostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureHAForHost not implemented")
}
func (UnimplementedHaServiceServer) DisableHAForCluster(context.Context, *DisableHAForClusterRequest) (*DisableHAForClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableHAForCluster not implemented")
}
func (UnimplementedHaServiceServer) EnableHAForZone(context.Context, *EnableHAForZoneRequest) (*EnableHAForZoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableHAForZone not implemented")
}
func (UnimplementedHaServiceServer) ListHostHAResources(context.Context, *ListHostHAResourcesRequest) (*ListHostHAResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHostHAResources not implemented")
}
func (UnimplementedHaServiceServer) DisableHAForHost(context.Context, *DisableHAForHostRequest) (*DisableHAForHostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableHAForHost not implemented")
}
func (UnimplementedHaServiceServer) ListHostHAProviders(context.Context, *ListHostHAProvidersRequest) (*ListHostHAProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHostHAProviders not implemented")
}
func (UnimplementedHaServiceServer) EnableHAForCluster(context.Context, *EnableHAForClusterRequest) (*EnableHAForClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableHAForCluster not implemented")
}
func (UnimplementedHaServiceServer) mustEmbedUnimplementedHaServiceServer() {}
func (UnimplementedHaServiceServer) testEmbeddedByValue()                   {}

// UnsafeHaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HaServiceServer will
// result in compilation errors.
type UnsafeHaServiceServer interface {
	mustEmbedUnimplementedHaServiceServer()
}

func RegisterHaServiceServer(s grpc.ServiceRegistrar, srv HaServiceServer) {
	// If the following call pancis, it indicates UnimplementedHaServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HaService_ServiceDesc, srv)
}

func _HaService_DisableHAForZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableHAForZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HaServiceServer).DisableHAForZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HaService_DisableHAForZone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HaServiceServer).DisableHAForZone(ctx, req.(*DisableHAForZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HaService_EnableHAForHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableHAForHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HaServiceServer).EnableHAForHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HaService_EnableHAForHost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HaServiceServer).EnableHAForHost(ctx, req.(*EnableHAForHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HaService_ConfigureHAForHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureHAForHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HaServiceServer).ConfigureHAForHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HaService_ConfigureHAForHost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HaServiceServer).ConfigureHAForHost(ctx, req.(*ConfigureHAForHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HaService_DisableHAForCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableHAForClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HaServiceServer).DisableHAForCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HaService_DisableHAForCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HaServiceServer).DisableHAForCluster(ctx, req.(*DisableHAForClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HaService_EnableHAForZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableHAForZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HaServiceServer).EnableHAForZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HaService_EnableHAForZone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HaServiceServer).EnableHAForZone(ctx, req.(*EnableHAForZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HaService_ListHostHAResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHostHAResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HaServiceServer).ListHostHAResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HaService_ListHostHAResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HaServiceServer).ListHostHAResources(ctx, req.(*ListHostHAResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HaService_DisableHAForHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableHAForHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HaServiceServer).DisableHAForHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HaService_DisableHAForHost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HaServiceServer).DisableHAForHost(ctx, req.(*DisableHAForHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HaService_ListHostHAProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHostHAProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HaServiceServer).ListHostHAProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HaService_ListHostHAProviders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HaServiceServer).ListHostHAProviders(ctx, req.(*ListHostHAProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HaService_EnableHAForCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableHAForClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HaServiceServer).EnableHAForCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HaService_EnableHAForCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HaServiceServer).EnableHAForCluster(ctx, req.(*EnableHAForClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HaService_ServiceDesc is the grpc.ServiceDesc for HaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloudstack.management.ha.v1.HaService",
	HandlerType: (*HaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DisableHAForZone",
			Handler:    _HaService_DisableHAForZone_Handler,
		},
		{
			MethodName: "EnableHAForHost",
			Handler:    _HaService_EnableHAForHost_Handler,
		},
		{
			MethodName: "ConfigureHAForHost",
			Handler:    _HaService_ConfigureHAForHost_Handler,
		},
		{
			MethodName: "DisableHAForCluster",
			Handler:    _HaService_DisableHAForCluster_Handler,
		},
		{
			MethodName: "EnableHAForZone",
			Handler:    _HaService_EnableHAForZone_Handler,
		},
		{
			MethodName: "ListHostHAResources",
			Handler:    _HaService_ListHostHAResources_Handler,
		},
		{
			MethodName: "DisableHAForHost",
			Handler:    _HaService_DisableHAForHost_Handler,
		},
		{
			MethodName: "ListHostHAProviders",
			Handler:    _HaService_ListHostHAProviders_Handler,
		},
		{
			MethodName: "EnableHAForCluster",
			Handler:    _HaService_EnableHAForCluster_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloudstack/management/ha/v1/ha.gen.proto",
}
