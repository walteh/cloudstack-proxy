// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cloudstack/management/ha/v1/ha.gen.proto

package hav1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/walteh/cloudstack-proxy/gen/proto/golang/cloudstack/management/ha/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// HaServiceName is the fully-qualified name of the HaService service.
	HaServiceName = "cloudstack.management.ha.v1.HaService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// HaServiceDisableHAForZoneProcedure is the fully-qualified name of the HaService's
	// DisableHAForZone RPC.
	HaServiceDisableHAForZoneProcedure = "/cloudstack.management.ha.v1.HaService/DisableHAForZone"
	// HaServiceEnableHAForHostProcedure is the fully-qualified name of the HaService's EnableHAForHost
	// RPC.
	HaServiceEnableHAForHostProcedure = "/cloudstack.management.ha.v1.HaService/EnableHAForHost"
	// HaServiceConfigureHAForHostProcedure is the fully-qualified name of the HaService's
	// ConfigureHAForHost RPC.
	HaServiceConfigureHAForHostProcedure = "/cloudstack.management.ha.v1.HaService/ConfigureHAForHost"
	// HaServiceDisableHAForClusterProcedure is the fully-qualified name of the HaService's
	// DisableHAForCluster RPC.
	HaServiceDisableHAForClusterProcedure = "/cloudstack.management.ha.v1.HaService/DisableHAForCluster"
	// HaServiceEnableHAForZoneProcedure is the fully-qualified name of the HaService's EnableHAForZone
	// RPC.
	HaServiceEnableHAForZoneProcedure = "/cloudstack.management.ha.v1.HaService/EnableHAForZone"
	// HaServiceListHostHAResourcesProcedure is the fully-qualified name of the HaService's
	// ListHostHAResources RPC.
	HaServiceListHostHAResourcesProcedure = "/cloudstack.management.ha.v1.HaService/ListHostHAResources"
	// HaServiceDisableHAForHostProcedure is the fully-qualified name of the HaService's
	// DisableHAForHost RPC.
	HaServiceDisableHAForHostProcedure = "/cloudstack.management.ha.v1.HaService/DisableHAForHost"
	// HaServiceListHostHAProvidersProcedure is the fully-qualified name of the HaService's
	// ListHostHAProviders RPC.
	HaServiceListHostHAProvidersProcedure = "/cloudstack.management.ha.v1.HaService/ListHostHAProviders"
	// HaServiceEnableHAForClusterProcedure is the fully-qualified name of the HaService's
	// EnableHAForCluster RPC.
	HaServiceEnableHAForClusterProcedure = "/cloudstack.management.ha.v1.HaService/EnableHAForCluster"
)

// HaServiceClient is a client for the cloudstack.management.ha.v1.HaService service.
type HaServiceClient interface {
	// DisableHAForZone Disables HA for a zone
	DisableHAForZone(context.Context, *connect.Request[v1.DisableHAForZoneRequest]) (*connect.Response[v1.DisableHAForZoneResponse], error)
	// EnableHAForHost Enables HA for a host
	EnableHAForHost(context.Context, *connect.Request[v1.EnableHAForHostRequest]) (*connect.Response[v1.EnableHAForHostResponse], error)
	// ConfigureHAForHost Configures HA for a host
	ConfigureHAForHost(context.Context, *connect.Request[v1.ConfigureHAForHostRequest]) (*connect.Response[v1.ConfigureHAForHostResponse], error)
	// DisableHAForCluster Disables HA cluster-wide
	DisableHAForCluster(context.Context, *connect.Request[v1.DisableHAForClusterRequest]) (*connect.Response[v1.DisableHAForClusterResponse], error)
	// EnableHAForZone Enables HA for a zone
	EnableHAForZone(context.Context, *connect.Request[v1.EnableHAForZoneRequest]) (*connect.Response[v1.EnableHAForZoneResponse], error)
	// ListHostHAResources Lists host HA resources
	ListHostHAResources(context.Context, *connect.Request[v1.ListHostHAResourcesRequest]) (*connect.Response[v1.ListHostHAResourcesResponse], error)
	// DisableHAForHost Disables HA for a host
	DisableHAForHost(context.Context, *connect.Request[v1.DisableHAForHostRequest]) (*connect.Response[v1.DisableHAForHostResponse], error)
	// ListHostHAProviders Lists HA providers
	ListHostHAProviders(context.Context, *connect.Request[v1.ListHostHAProvidersRequest]) (*connect.Response[v1.ListHostHAProvidersResponse], error)
	// EnableHAForCluster Enables HA cluster-wide
	EnableHAForCluster(context.Context, *connect.Request[v1.EnableHAForClusterRequest]) (*connect.Response[v1.EnableHAForClusterResponse], error)
}

// NewHaServiceClient constructs a client for the cloudstack.management.ha.v1.HaService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewHaServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) HaServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	haServiceMethods := v1.File_cloudstack_management_ha_v1_ha_gen_proto.Services().ByName("HaService").Methods()
	return &haServiceClient{
		disableHAForZone: connect.NewClient[v1.DisableHAForZoneRequest, v1.DisableHAForZoneResponse](
			httpClient,
			baseURL+HaServiceDisableHAForZoneProcedure,
			connect.WithSchema(haServiceMethods.ByName("DisableHAForZone")),
			connect.WithClientOptions(opts...),
		),
		enableHAForHost: connect.NewClient[v1.EnableHAForHostRequest, v1.EnableHAForHostResponse](
			httpClient,
			baseURL+HaServiceEnableHAForHostProcedure,
			connect.WithSchema(haServiceMethods.ByName("EnableHAForHost")),
			connect.WithClientOptions(opts...),
		),
		configureHAForHost: connect.NewClient[v1.ConfigureHAForHostRequest, v1.ConfigureHAForHostResponse](
			httpClient,
			baseURL+HaServiceConfigureHAForHostProcedure,
			connect.WithSchema(haServiceMethods.ByName("ConfigureHAForHost")),
			connect.WithClientOptions(opts...),
		),
		disableHAForCluster: connect.NewClient[v1.DisableHAForClusterRequest, v1.DisableHAForClusterResponse](
			httpClient,
			baseURL+HaServiceDisableHAForClusterProcedure,
			connect.WithSchema(haServiceMethods.ByName("DisableHAForCluster")),
			connect.WithClientOptions(opts...),
		),
		enableHAForZone: connect.NewClient[v1.EnableHAForZoneRequest, v1.EnableHAForZoneResponse](
			httpClient,
			baseURL+HaServiceEnableHAForZoneProcedure,
			connect.WithSchema(haServiceMethods.ByName("EnableHAForZone")),
			connect.WithClientOptions(opts...),
		),
		listHostHAResources: connect.NewClient[v1.ListHostHAResourcesRequest, v1.ListHostHAResourcesResponse](
			httpClient,
			baseURL+HaServiceListHostHAResourcesProcedure,
			connect.WithSchema(haServiceMethods.ByName("ListHostHAResources")),
			connect.WithClientOptions(opts...),
		),
		disableHAForHost: connect.NewClient[v1.DisableHAForHostRequest, v1.DisableHAForHostResponse](
			httpClient,
			baseURL+HaServiceDisableHAForHostProcedure,
			connect.WithSchema(haServiceMethods.ByName("DisableHAForHost")),
			connect.WithClientOptions(opts...),
		),
		listHostHAProviders: connect.NewClient[v1.ListHostHAProvidersRequest, v1.ListHostHAProvidersResponse](
			httpClient,
			baseURL+HaServiceListHostHAProvidersProcedure,
			connect.WithSchema(haServiceMethods.ByName("ListHostHAProviders")),
			connect.WithClientOptions(opts...),
		),
		enableHAForCluster: connect.NewClient[v1.EnableHAForClusterRequest, v1.EnableHAForClusterResponse](
			httpClient,
			baseURL+HaServiceEnableHAForClusterProcedure,
			connect.WithSchema(haServiceMethods.ByName("EnableHAForCluster")),
			connect.WithClientOptions(opts...),
		),
	}
}

// haServiceClient implements HaServiceClient.
type haServiceClient struct {
	disableHAForZone    *connect.Client[v1.DisableHAForZoneRequest, v1.DisableHAForZoneResponse]
	enableHAForHost     *connect.Client[v1.EnableHAForHostRequest, v1.EnableHAForHostResponse]
	configureHAForHost  *connect.Client[v1.ConfigureHAForHostRequest, v1.ConfigureHAForHostResponse]
	disableHAForCluster *connect.Client[v1.DisableHAForClusterRequest, v1.DisableHAForClusterResponse]
	enableHAForZone     *connect.Client[v1.EnableHAForZoneRequest, v1.EnableHAForZoneResponse]
	listHostHAResources *connect.Client[v1.ListHostHAResourcesRequest, v1.ListHostHAResourcesResponse]
	disableHAForHost    *connect.Client[v1.DisableHAForHostRequest, v1.DisableHAForHostResponse]
	listHostHAProviders *connect.Client[v1.ListHostHAProvidersRequest, v1.ListHostHAProvidersResponse]
	enableHAForCluster  *connect.Client[v1.EnableHAForClusterRequest, v1.EnableHAForClusterResponse]
}

// DisableHAForZone calls cloudstack.management.ha.v1.HaService.DisableHAForZone.
func (c *haServiceClient) DisableHAForZone(ctx context.Context, req *connect.Request[v1.DisableHAForZoneRequest]) (*connect.Response[v1.DisableHAForZoneResponse], error) {
	return c.disableHAForZone.CallUnary(ctx, req)
}

// EnableHAForHost calls cloudstack.management.ha.v1.HaService.EnableHAForHost.
func (c *haServiceClient) EnableHAForHost(ctx context.Context, req *connect.Request[v1.EnableHAForHostRequest]) (*connect.Response[v1.EnableHAForHostResponse], error) {
	return c.enableHAForHost.CallUnary(ctx, req)
}

// ConfigureHAForHost calls cloudstack.management.ha.v1.HaService.ConfigureHAForHost.
func (c *haServiceClient) ConfigureHAForHost(ctx context.Context, req *connect.Request[v1.ConfigureHAForHostRequest]) (*connect.Response[v1.ConfigureHAForHostResponse], error) {
	return c.configureHAForHost.CallUnary(ctx, req)
}

// DisableHAForCluster calls cloudstack.management.ha.v1.HaService.DisableHAForCluster.
func (c *haServiceClient) DisableHAForCluster(ctx context.Context, req *connect.Request[v1.DisableHAForClusterRequest]) (*connect.Response[v1.DisableHAForClusterResponse], error) {
	return c.disableHAForCluster.CallUnary(ctx, req)
}

// EnableHAForZone calls cloudstack.management.ha.v1.HaService.EnableHAForZone.
func (c *haServiceClient) EnableHAForZone(ctx context.Context, req *connect.Request[v1.EnableHAForZoneRequest]) (*connect.Response[v1.EnableHAForZoneResponse], error) {
	return c.enableHAForZone.CallUnary(ctx, req)
}

// ListHostHAResources calls cloudstack.management.ha.v1.HaService.ListHostHAResources.
func (c *haServiceClient) ListHostHAResources(ctx context.Context, req *connect.Request[v1.ListHostHAResourcesRequest]) (*connect.Response[v1.ListHostHAResourcesResponse], error) {
	return c.listHostHAResources.CallUnary(ctx, req)
}

// DisableHAForHost calls cloudstack.management.ha.v1.HaService.DisableHAForHost.
func (c *haServiceClient) DisableHAForHost(ctx context.Context, req *connect.Request[v1.DisableHAForHostRequest]) (*connect.Response[v1.DisableHAForHostResponse], error) {
	return c.disableHAForHost.CallUnary(ctx, req)
}

// ListHostHAProviders calls cloudstack.management.ha.v1.HaService.ListHostHAProviders.
func (c *haServiceClient) ListHostHAProviders(ctx context.Context, req *connect.Request[v1.ListHostHAProvidersRequest]) (*connect.Response[v1.ListHostHAProvidersResponse], error) {
	return c.listHostHAProviders.CallUnary(ctx, req)
}

// EnableHAForCluster calls cloudstack.management.ha.v1.HaService.EnableHAForCluster.
func (c *haServiceClient) EnableHAForCluster(ctx context.Context, req *connect.Request[v1.EnableHAForClusterRequest]) (*connect.Response[v1.EnableHAForClusterResponse], error) {
	return c.enableHAForCluster.CallUnary(ctx, req)
}

// HaServiceHandler is an implementation of the cloudstack.management.ha.v1.HaService service.
type HaServiceHandler interface {
	// DisableHAForZone Disables HA for a zone
	DisableHAForZone(context.Context, *connect.Request[v1.DisableHAForZoneRequest]) (*connect.Response[v1.DisableHAForZoneResponse], error)
	// EnableHAForHost Enables HA for a host
	EnableHAForHost(context.Context, *connect.Request[v1.EnableHAForHostRequest]) (*connect.Response[v1.EnableHAForHostResponse], error)
	// ConfigureHAForHost Configures HA for a host
	ConfigureHAForHost(context.Context, *connect.Request[v1.ConfigureHAForHostRequest]) (*connect.Response[v1.ConfigureHAForHostResponse], error)
	// DisableHAForCluster Disables HA cluster-wide
	DisableHAForCluster(context.Context, *connect.Request[v1.DisableHAForClusterRequest]) (*connect.Response[v1.DisableHAForClusterResponse], error)
	// EnableHAForZone Enables HA for a zone
	EnableHAForZone(context.Context, *connect.Request[v1.EnableHAForZoneRequest]) (*connect.Response[v1.EnableHAForZoneResponse], error)
	// ListHostHAResources Lists host HA resources
	ListHostHAResources(context.Context, *connect.Request[v1.ListHostHAResourcesRequest]) (*connect.Response[v1.ListHostHAResourcesResponse], error)
	// DisableHAForHost Disables HA for a host
	DisableHAForHost(context.Context, *connect.Request[v1.DisableHAForHostRequest]) (*connect.Response[v1.DisableHAForHostResponse], error)
	// ListHostHAProviders Lists HA providers
	ListHostHAProviders(context.Context, *connect.Request[v1.ListHostHAProvidersRequest]) (*connect.Response[v1.ListHostHAProvidersResponse], error)
	// EnableHAForCluster Enables HA cluster-wide
	EnableHAForCluster(context.Context, *connect.Request[v1.EnableHAForClusterRequest]) (*connect.Response[v1.EnableHAForClusterResponse], error)
}

// NewHaServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewHaServiceHandler(svc HaServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	haServiceMethods := v1.File_cloudstack_management_ha_v1_ha_gen_proto.Services().ByName("HaService").Methods()
	haServiceDisableHAForZoneHandler := connect.NewUnaryHandler(
		HaServiceDisableHAForZoneProcedure,
		svc.DisableHAForZone,
		connect.WithSchema(haServiceMethods.ByName("DisableHAForZone")),
		connect.WithHandlerOptions(opts...),
	)
	haServiceEnableHAForHostHandler := connect.NewUnaryHandler(
		HaServiceEnableHAForHostProcedure,
		svc.EnableHAForHost,
		connect.WithSchema(haServiceMethods.ByName("EnableHAForHost")),
		connect.WithHandlerOptions(opts...),
	)
	haServiceConfigureHAForHostHandler := connect.NewUnaryHandler(
		HaServiceConfigureHAForHostProcedure,
		svc.ConfigureHAForHost,
		connect.WithSchema(haServiceMethods.ByName("ConfigureHAForHost")),
		connect.WithHandlerOptions(opts...),
	)
	haServiceDisableHAForClusterHandler := connect.NewUnaryHandler(
		HaServiceDisableHAForClusterProcedure,
		svc.DisableHAForCluster,
		connect.WithSchema(haServiceMethods.ByName("DisableHAForCluster")),
		connect.WithHandlerOptions(opts...),
	)
	haServiceEnableHAForZoneHandler := connect.NewUnaryHandler(
		HaServiceEnableHAForZoneProcedure,
		svc.EnableHAForZone,
		connect.WithSchema(haServiceMethods.ByName("EnableHAForZone")),
		connect.WithHandlerOptions(opts...),
	)
	haServiceListHostHAResourcesHandler := connect.NewUnaryHandler(
		HaServiceListHostHAResourcesProcedure,
		svc.ListHostHAResources,
		connect.WithSchema(haServiceMethods.ByName("ListHostHAResources")),
		connect.WithHandlerOptions(opts...),
	)
	haServiceDisableHAForHostHandler := connect.NewUnaryHandler(
		HaServiceDisableHAForHostProcedure,
		svc.DisableHAForHost,
		connect.WithSchema(haServiceMethods.ByName("DisableHAForHost")),
		connect.WithHandlerOptions(opts...),
	)
	haServiceListHostHAProvidersHandler := connect.NewUnaryHandler(
		HaServiceListHostHAProvidersProcedure,
		svc.ListHostHAProviders,
		connect.WithSchema(haServiceMethods.ByName("ListHostHAProviders")),
		connect.WithHandlerOptions(opts...),
	)
	haServiceEnableHAForClusterHandler := connect.NewUnaryHandler(
		HaServiceEnableHAForClusterProcedure,
		svc.EnableHAForCluster,
		connect.WithSchema(haServiceMethods.ByName("EnableHAForCluster")),
		connect.WithHandlerOptions(opts...),
	)
	return "/cloudstack.management.ha.v1.HaService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case HaServiceDisableHAForZoneProcedure:
			haServiceDisableHAForZoneHandler.ServeHTTP(w, r)
		case HaServiceEnableHAForHostProcedure:
			haServiceEnableHAForHostHandler.ServeHTTP(w, r)
		case HaServiceConfigureHAForHostProcedure:
			haServiceConfigureHAForHostHandler.ServeHTTP(w, r)
		case HaServiceDisableHAForClusterProcedure:
			haServiceDisableHAForClusterHandler.ServeHTTP(w, r)
		case HaServiceEnableHAForZoneProcedure:
			haServiceEnableHAForZoneHandler.ServeHTTP(w, r)
		case HaServiceListHostHAResourcesProcedure:
			haServiceListHostHAResourcesHandler.ServeHTTP(w, r)
		case HaServiceDisableHAForHostProcedure:
			haServiceDisableHAForHostHandler.ServeHTTP(w, r)
		case HaServiceListHostHAProvidersProcedure:
			haServiceListHostHAProvidersHandler.ServeHTTP(w, r)
		case HaServiceEnableHAForClusterProcedure:
			haServiceEnableHAForClusterHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedHaServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedHaServiceHandler struct{}

func (UnimplementedHaServiceHandler) DisableHAForZone(context.Context, *connect.Request[v1.DisableHAForZoneRequest]) (*connect.Response[v1.DisableHAForZoneResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.ha.v1.HaService.DisableHAForZone is not implemented"))
}

func (UnimplementedHaServiceHandler) EnableHAForHost(context.Context, *connect.Request[v1.EnableHAForHostRequest]) (*connect.Response[v1.EnableHAForHostResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.ha.v1.HaService.EnableHAForHost is not implemented"))
}

func (UnimplementedHaServiceHandler) ConfigureHAForHost(context.Context, *connect.Request[v1.ConfigureHAForHostRequest]) (*connect.Response[v1.ConfigureHAForHostResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.ha.v1.HaService.ConfigureHAForHost is not implemented"))
}

func (UnimplementedHaServiceHandler) DisableHAForCluster(context.Context, *connect.Request[v1.DisableHAForClusterRequest]) (*connect.Response[v1.DisableHAForClusterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.ha.v1.HaService.DisableHAForCluster is not implemented"))
}

func (UnimplementedHaServiceHandler) EnableHAForZone(context.Context, *connect.Request[v1.EnableHAForZoneRequest]) (*connect.Response[v1.EnableHAForZoneResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.ha.v1.HaService.EnableHAForZone is not implemented"))
}

func (UnimplementedHaServiceHandler) ListHostHAResources(context.Context, *connect.Request[v1.ListHostHAResourcesRequest]) (*connect.Response[v1.ListHostHAResourcesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.ha.v1.HaService.ListHostHAResources is not implemented"))
}

func (UnimplementedHaServiceHandler) DisableHAForHost(context.Context, *connect.Request[v1.DisableHAForHostRequest]) (*connect.Response[v1.DisableHAForHostResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.ha.v1.HaService.DisableHAForHost is not implemented"))
}

func (UnimplementedHaServiceHandler) ListHostHAProviders(context.Context, *connect.Request[v1.ListHostHAProvidersRequest]) (*connect.Response[v1.ListHostHAProvidersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.ha.v1.HaService.ListHostHAProviders is not implemented"))
}

func (UnimplementedHaServiceHandler) EnableHAForCluster(context.Context, *connect.Request[v1.EnableHAForClusterRequest]) (*connect.Response[v1.EnableHAForClusterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.ha.v1.HaService.EnableHAForCluster is not implemented"))
}
