// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cloudstack/management/resource/icon/v1/icon.gen.proto

package iconv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/walteh/cloudstack-proxy/gen/proto/golang/cloudstack/management/resource/icon/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// IconServiceName is the fully-qualified name of the IconService service.
	IconServiceName = "cloudstack.management.resource.icon.v1.IconService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// IconServiceDeleteResourceIconProcedure is the fully-qualified name of the IconService's
	// DeleteResourceIcon RPC.
	IconServiceDeleteResourceIconProcedure = "/cloudstack.management.resource.icon.v1.IconService/DeleteResourceIcon"
	// IconServiceUploadResourceIconProcedure is the fully-qualified name of the IconService's
	// UploadResourceIcon RPC.
	IconServiceUploadResourceIconProcedure = "/cloudstack.management.resource.icon.v1.IconService/UploadResourceIcon"
	// IconServiceListResourceIconProcedure is the fully-qualified name of the IconService's
	// ListResourceIcon RPC.
	IconServiceListResourceIconProcedure = "/cloudstack.management.resource.icon.v1.IconService/ListResourceIcon"
)

// IconServiceClient is a client for the cloudstack.management.resource.icon.v1.IconService service.
type IconServiceClient interface {
	// DeleteResourceIcon deletes the resource icon from the specified resource(s)
	DeleteResourceIcon(context.Context, *connect.Request[v1.DeleteResourceIconRequest]) (*connect.Response[v1.DeleteResourceIconResponse], error)
	// UploadResourceIcon Uploads an icon for the specified resource(s)
	UploadResourceIcon(context.Context, *connect.Request[v1.UploadResourceIconRequest]) (*connect.Response[v1.UploadResourceIconResponse], error)
	// ListResourceIcon Lists the resource icon for the specified resource(s)
	ListResourceIcon(context.Context, *connect.Request[v1.ListResourceIconRequest]) (*connect.Response[v1.ListResourceIconResponse], error)
}

// NewIconServiceClient constructs a client for the
// cloudstack.management.resource.icon.v1.IconService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewIconServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) IconServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	iconServiceMethods := v1.File_cloudstack_management_resource_icon_v1_icon_gen_proto.Services().ByName("IconService").Methods()
	return &iconServiceClient{
		deleteResourceIcon: connect.NewClient[v1.DeleteResourceIconRequest, v1.DeleteResourceIconResponse](
			httpClient,
			baseURL+IconServiceDeleteResourceIconProcedure,
			connect.WithSchema(iconServiceMethods.ByName("DeleteResourceIcon")),
			connect.WithClientOptions(opts...),
		),
		uploadResourceIcon: connect.NewClient[v1.UploadResourceIconRequest, v1.UploadResourceIconResponse](
			httpClient,
			baseURL+IconServiceUploadResourceIconProcedure,
			connect.WithSchema(iconServiceMethods.ByName("UploadResourceIcon")),
			connect.WithClientOptions(opts...),
		),
		listResourceIcon: connect.NewClient[v1.ListResourceIconRequest, v1.ListResourceIconResponse](
			httpClient,
			baseURL+IconServiceListResourceIconProcedure,
			connect.WithSchema(iconServiceMethods.ByName("ListResourceIcon")),
			connect.WithClientOptions(opts...),
		),
	}
}

// iconServiceClient implements IconServiceClient.
type iconServiceClient struct {
	deleteResourceIcon *connect.Client[v1.DeleteResourceIconRequest, v1.DeleteResourceIconResponse]
	uploadResourceIcon *connect.Client[v1.UploadResourceIconRequest, v1.UploadResourceIconResponse]
	listResourceIcon   *connect.Client[v1.ListResourceIconRequest, v1.ListResourceIconResponse]
}

// DeleteResourceIcon calls cloudstack.management.resource.icon.v1.IconService.DeleteResourceIcon.
func (c *iconServiceClient) DeleteResourceIcon(ctx context.Context, req *connect.Request[v1.DeleteResourceIconRequest]) (*connect.Response[v1.DeleteResourceIconResponse], error) {
	return c.deleteResourceIcon.CallUnary(ctx, req)
}

// UploadResourceIcon calls cloudstack.management.resource.icon.v1.IconService.UploadResourceIcon.
func (c *iconServiceClient) UploadResourceIcon(ctx context.Context, req *connect.Request[v1.UploadResourceIconRequest]) (*connect.Response[v1.UploadResourceIconResponse], error) {
	return c.uploadResourceIcon.CallUnary(ctx, req)
}

// ListResourceIcon calls cloudstack.management.resource.icon.v1.IconService.ListResourceIcon.
func (c *iconServiceClient) ListResourceIcon(ctx context.Context, req *connect.Request[v1.ListResourceIconRequest]) (*connect.Response[v1.ListResourceIconResponse], error) {
	return c.listResourceIcon.CallUnary(ctx, req)
}

// IconServiceHandler is an implementation of the cloudstack.management.resource.icon.v1.IconService
// service.
type IconServiceHandler interface {
	// DeleteResourceIcon deletes the resource icon from the specified resource(s)
	DeleteResourceIcon(context.Context, *connect.Request[v1.DeleteResourceIconRequest]) (*connect.Response[v1.DeleteResourceIconResponse], error)
	// UploadResourceIcon Uploads an icon for the specified resource(s)
	UploadResourceIcon(context.Context, *connect.Request[v1.UploadResourceIconRequest]) (*connect.Response[v1.UploadResourceIconResponse], error)
	// ListResourceIcon Lists the resource icon for the specified resource(s)
	ListResourceIcon(context.Context, *connect.Request[v1.ListResourceIconRequest]) (*connect.Response[v1.ListResourceIconResponse], error)
}

// NewIconServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewIconServiceHandler(svc IconServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	iconServiceMethods := v1.File_cloudstack_management_resource_icon_v1_icon_gen_proto.Services().ByName("IconService").Methods()
	iconServiceDeleteResourceIconHandler := connect.NewUnaryHandler(
		IconServiceDeleteResourceIconProcedure,
		svc.DeleteResourceIcon,
		connect.WithSchema(iconServiceMethods.ByName("DeleteResourceIcon")),
		connect.WithHandlerOptions(opts...),
	)
	iconServiceUploadResourceIconHandler := connect.NewUnaryHandler(
		IconServiceUploadResourceIconProcedure,
		svc.UploadResourceIcon,
		connect.WithSchema(iconServiceMethods.ByName("UploadResourceIcon")),
		connect.WithHandlerOptions(opts...),
	)
	iconServiceListResourceIconHandler := connect.NewUnaryHandler(
		IconServiceListResourceIconProcedure,
		svc.ListResourceIcon,
		connect.WithSchema(iconServiceMethods.ByName("ListResourceIcon")),
		connect.WithHandlerOptions(opts...),
	)
	return "/cloudstack.management.resource.icon.v1.IconService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case IconServiceDeleteResourceIconProcedure:
			iconServiceDeleteResourceIconHandler.ServeHTTP(w, r)
		case IconServiceUploadResourceIconProcedure:
			iconServiceUploadResourceIconHandler.ServeHTTP(w, r)
		case IconServiceListResourceIconProcedure:
			iconServiceListResourceIconHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedIconServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedIconServiceHandler struct{}

func (UnimplementedIconServiceHandler) DeleteResourceIcon(context.Context, *connect.Request[v1.DeleteResourceIconRequest]) (*connect.Response[v1.DeleteResourceIconResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.resource.icon.v1.IconService.DeleteResourceIcon is not implemented"))
}

func (UnimplementedIconServiceHandler) UploadResourceIcon(context.Context, *connect.Request[v1.UploadResourceIconRequest]) (*connect.Response[v1.UploadResourceIconResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.resource.icon.v1.IconService.UploadResourceIcon is not implemented"))
}

func (UnimplementedIconServiceHandler) ListResourceIcon(context.Context, *connect.Request[v1.ListResourceIconRequest]) (*connect.Response[v1.ListResourceIconResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.resource.icon.v1.IconService.ListResourceIcon is not implemented"))
}
