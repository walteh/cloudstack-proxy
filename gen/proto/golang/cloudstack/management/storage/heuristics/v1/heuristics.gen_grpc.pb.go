// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: cloudstack/management/storage/heuristics/v1/heuristics.gen.proto

package heuristicsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HeuristicsService_CreateSecondaryStorageSelector_FullMethodName = "/cloudstack.management.storage.heuristics.v1.HeuristicsService/CreateSecondaryStorageSelector"
	HeuristicsService_ListSecondaryStorageSelectors_FullMethodName  = "/cloudstack.management.storage.heuristics.v1.HeuristicsService/ListSecondaryStorageSelectors"
	HeuristicsService_RemoveSecondaryStorageSelector_FullMethodName = "/cloudstack.management.storage.heuristics.v1.HeuristicsService/RemoveSecondaryStorageSelector"
	HeuristicsService_UpdateSecondaryStorageSelector_FullMethodName = "/cloudstack.management.storage.heuristics.v1.HeuristicsService/UpdateSecondaryStorageSelector"
)

// HeuristicsServiceClient is the client API for HeuristicsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// HeuristicsService provides operations for managing Storage.Heuristicss
type HeuristicsServiceClient interface {
	// CreateSecondaryStorageSelector Creates a secondary storage selector, described by the heuristic rule.
	CreateSecondaryStorageSelector(ctx context.Context, in *CreateSecondaryStorageSelectorRequest, opts ...grpc.CallOption) (*CreateSecondaryStorageSelectorResponse, error)
	// ListSecondaryStorageSelectors Lists the secondary storage selectors and their rules.
	ListSecondaryStorageSelectors(ctx context.Context, in *ListSecondaryStorageSelectorsRequest, opts ...grpc.CallOption) (*ListSecondaryStorageSelectorsResponse, error)
	// RemoveSecondaryStorageSelector Removes an existing secondary storage selector.
	RemoveSecondaryStorageSelector(ctx context.Context, in *RemoveSecondaryStorageSelectorRequest, opts ...grpc.CallOption) (*RemoveSecondaryStorageSelectorResponse, error)
	// UpdateSecondaryStorageSelector Updates an existing secondary storage selector.
	UpdateSecondaryStorageSelector(ctx context.Context, in *UpdateSecondaryStorageSelectorRequest, opts ...grpc.CallOption) (*UpdateSecondaryStorageSelectorResponse, error)
}

type heuristicsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHeuristicsServiceClient(cc grpc.ClientConnInterface) HeuristicsServiceClient {
	return &heuristicsServiceClient{cc}
}

func (c *heuristicsServiceClient) CreateSecondaryStorageSelector(ctx context.Context, in *CreateSecondaryStorageSelectorRequest, opts ...grpc.CallOption) (*CreateSecondaryStorageSelectorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSecondaryStorageSelectorResponse)
	err := c.cc.Invoke(ctx, HeuristicsService_CreateSecondaryStorageSelector_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heuristicsServiceClient) ListSecondaryStorageSelectors(ctx context.Context, in *ListSecondaryStorageSelectorsRequest, opts ...grpc.CallOption) (*ListSecondaryStorageSelectorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSecondaryStorageSelectorsResponse)
	err := c.cc.Invoke(ctx, HeuristicsService_ListSecondaryStorageSelectors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heuristicsServiceClient) RemoveSecondaryStorageSelector(ctx context.Context, in *RemoveSecondaryStorageSelectorRequest, opts ...grpc.CallOption) (*RemoveSecondaryStorageSelectorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveSecondaryStorageSelectorResponse)
	err := c.cc.Invoke(ctx, HeuristicsService_RemoveSecondaryStorageSelector_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heuristicsServiceClient) UpdateSecondaryStorageSelector(ctx context.Context, in *UpdateSecondaryStorageSelectorRequest, opts ...grpc.CallOption) (*UpdateSecondaryStorageSelectorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSecondaryStorageSelectorResponse)
	err := c.cc.Invoke(ctx, HeuristicsService_UpdateSecondaryStorageSelector_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HeuristicsServiceServer is the server API for HeuristicsService service.
// All implementations must embed UnimplementedHeuristicsServiceServer
// for forward compatibility.
//
// HeuristicsService provides operations for managing Storage.Heuristicss
type HeuristicsServiceServer interface {
	// CreateSecondaryStorageSelector Creates a secondary storage selector, described by the heuristic rule.
	CreateSecondaryStorageSelector(context.Context, *CreateSecondaryStorageSelectorRequest) (*CreateSecondaryStorageSelectorResponse, error)
	// ListSecondaryStorageSelectors Lists the secondary storage selectors and their rules.
	ListSecondaryStorageSelectors(context.Context, *ListSecondaryStorageSelectorsRequest) (*ListSecondaryStorageSelectorsResponse, error)
	// RemoveSecondaryStorageSelector Removes an existing secondary storage selector.
	RemoveSecondaryStorageSelector(context.Context, *RemoveSecondaryStorageSelectorRequest) (*RemoveSecondaryStorageSelectorResponse, error)
	// UpdateSecondaryStorageSelector Updates an existing secondary storage selector.
	UpdateSecondaryStorageSelector(context.Context, *UpdateSecondaryStorageSelectorRequest) (*UpdateSecondaryStorageSelectorResponse, error)
	mustEmbedUnimplementedHeuristicsServiceServer()
}

// UnimplementedHeuristicsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHeuristicsServiceServer struct{}

func (UnimplementedHeuristicsServiceServer) CreateSecondaryStorageSelector(context.Context, *CreateSecondaryStorageSelectorRequest) (*CreateSecondaryStorageSelectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSecondaryStorageSelector not implemented")
}
func (UnimplementedHeuristicsServiceServer) ListSecondaryStorageSelectors(context.Context, *ListSecondaryStorageSelectorsRequest) (*ListSecondaryStorageSelectorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSecondaryStorageSelectors not implemented")
}
func (UnimplementedHeuristicsServiceServer) RemoveSecondaryStorageSelector(context.Context, *RemoveSecondaryStorageSelectorRequest) (*RemoveSecondaryStorageSelectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSecondaryStorageSelector not implemented")
}
func (UnimplementedHeuristicsServiceServer) UpdateSecondaryStorageSelector(context.Context, *UpdateSecondaryStorageSelectorRequest) (*UpdateSecondaryStorageSelectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSecondaryStorageSelector not implemented")
}
func (UnimplementedHeuristicsServiceServer) mustEmbedUnimplementedHeuristicsServiceServer() {}
func (UnimplementedHeuristicsServiceServer) testEmbeddedByValue()                           {}

// UnsafeHeuristicsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HeuristicsServiceServer will
// result in compilation errors.
type UnsafeHeuristicsServiceServer interface {
	mustEmbedUnimplementedHeuristicsServiceServer()
}

func RegisterHeuristicsServiceServer(s grpc.ServiceRegistrar, srv HeuristicsServiceServer) {
	// If the following call pancis, it indicates UnimplementedHeuristicsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HeuristicsService_ServiceDesc, srv)
}

func _HeuristicsService_CreateSecondaryStorageSelector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSecondaryStorageSelectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeuristicsServiceServer).CreateSecondaryStorageSelector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HeuristicsService_CreateSecondaryStorageSelector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeuristicsServiceServer).CreateSecondaryStorageSelector(ctx, req.(*CreateSecondaryStorageSelectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeuristicsService_ListSecondaryStorageSelectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSecondaryStorageSelectorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeuristicsServiceServer).ListSecondaryStorageSelectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HeuristicsService_ListSecondaryStorageSelectors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeuristicsServiceServer).ListSecondaryStorageSelectors(ctx, req.(*ListSecondaryStorageSelectorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeuristicsService_RemoveSecondaryStorageSelector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSecondaryStorageSelectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeuristicsServiceServer).RemoveSecondaryStorageSelector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HeuristicsService_RemoveSecondaryStorageSelector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeuristicsServiceServer).RemoveSecondaryStorageSelector(ctx, req.(*RemoveSecondaryStorageSelectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeuristicsService_UpdateSecondaryStorageSelector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSecondaryStorageSelectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeuristicsServiceServer).UpdateSecondaryStorageSelector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HeuristicsService_UpdateSecondaryStorageSelector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeuristicsServiceServer).UpdateSecondaryStorageSelector(ctx, req.(*UpdateSecondaryStorageSelectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HeuristicsService_ServiceDesc is the grpc.ServiceDesc for HeuristicsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HeuristicsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloudstack.management.storage.heuristics.v1.HeuristicsService",
	HandlerType: (*HeuristicsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSecondaryStorageSelector",
			Handler:    _HeuristicsService_CreateSecondaryStorageSelector_Handler,
		},
		{
			MethodName: "ListSecondaryStorageSelectors",
			Handler:    _HeuristicsService_ListSecondaryStorageSelectors_Handler,
		},
		{
			MethodName: "RemoveSecondaryStorageSelector",
			Handler:    _HeuristicsService_RemoveSecondaryStorageSelector_Handler,
		},
		{
			MethodName: "UpdateSecondaryStorageSelector",
			Handler:    _HeuristicsService_UpdateSecondaryStorageSelector_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloudstack/management/storage/heuristics/v1/heuristics.gen.proto",
}
