// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cloudstack/management/storage/heuristics/v1/heuristics.gen.proto

package heuristicsv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/walteh/cloudstack-proxy/gen/proto/golang/cloudstack/management/storage/heuristics/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// HeuristicsServiceName is the fully-qualified name of the HeuristicsService service.
	HeuristicsServiceName = "cloudstack.management.storage.heuristics.v1.HeuristicsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// HeuristicsServiceCreateSecondaryStorageSelectorProcedure is the fully-qualified name of the
	// HeuristicsService's CreateSecondaryStorageSelector RPC.
	HeuristicsServiceCreateSecondaryStorageSelectorProcedure = "/cloudstack.management.storage.heuristics.v1.HeuristicsService/CreateSecondaryStorageSelector"
	// HeuristicsServiceListSecondaryStorageSelectorsProcedure is the fully-qualified name of the
	// HeuristicsService's ListSecondaryStorageSelectors RPC.
	HeuristicsServiceListSecondaryStorageSelectorsProcedure = "/cloudstack.management.storage.heuristics.v1.HeuristicsService/ListSecondaryStorageSelectors"
	// HeuristicsServiceRemoveSecondaryStorageSelectorProcedure is the fully-qualified name of the
	// HeuristicsService's RemoveSecondaryStorageSelector RPC.
	HeuristicsServiceRemoveSecondaryStorageSelectorProcedure = "/cloudstack.management.storage.heuristics.v1.HeuristicsService/RemoveSecondaryStorageSelector"
	// HeuristicsServiceUpdateSecondaryStorageSelectorProcedure is the fully-qualified name of the
	// HeuristicsService's UpdateSecondaryStorageSelector RPC.
	HeuristicsServiceUpdateSecondaryStorageSelectorProcedure = "/cloudstack.management.storage.heuristics.v1.HeuristicsService/UpdateSecondaryStorageSelector"
)

// HeuristicsServiceClient is a client for the
// cloudstack.management.storage.heuristics.v1.HeuristicsService service.
type HeuristicsServiceClient interface {
	// CreateSecondaryStorageSelector Creates a secondary storage selector, described by the heuristic rule.
	CreateSecondaryStorageSelector(context.Context, *connect.Request[v1.CreateSecondaryStorageSelectorRequest]) (*connect.Response[v1.CreateSecondaryStorageSelectorResponse], error)
	// ListSecondaryStorageSelectors Lists the secondary storage selectors and their rules.
	ListSecondaryStorageSelectors(context.Context, *connect.Request[v1.ListSecondaryStorageSelectorsRequest]) (*connect.Response[v1.ListSecondaryStorageSelectorsResponse], error)
	// RemoveSecondaryStorageSelector Removes an existing secondary storage selector.
	RemoveSecondaryStorageSelector(context.Context, *connect.Request[v1.RemoveSecondaryStorageSelectorRequest]) (*connect.Response[v1.RemoveSecondaryStorageSelectorResponse], error)
	// UpdateSecondaryStorageSelector Updates an existing secondary storage selector.
	UpdateSecondaryStorageSelector(context.Context, *connect.Request[v1.UpdateSecondaryStorageSelectorRequest]) (*connect.Response[v1.UpdateSecondaryStorageSelectorResponse], error)
}

// NewHeuristicsServiceClient constructs a client for the
// cloudstack.management.storage.heuristics.v1.HeuristicsService service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewHeuristicsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) HeuristicsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	heuristicsServiceMethods := v1.File_cloudstack_management_storage_heuristics_v1_heuristics_gen_proto.Services().ByName("HeuristicsService").Methods()
	return &heuristicsServiceClient{
		createSecondaryStorageSelector: connect.NewClient[v1.CreateSecondaryStorageSelectorRequest, v1.CreateSecondaryStorageSelectorResponse](
			httpClient,
			baseURL+HeuristicsServiceCreateSecondaryStorageSelectorProcedure,
			connect.WithSchema(heuristicsServiceMethods.ByName("CreateSecondaryStorageSelector")),
			connect.WithClientOptions(opts...),
		),
		listSecondaryStorageSelectors: connect.NewClient[v1.ListSecondaryStorageSelectorsRequest, v1.ListSecondaryStorageSelectorsResponse](
			httpClient,
			baseURL+HeuristicsServiceListSecondaryStorageSelectorsProcedure,
			connect.WithSchema(heuristicsServiceMethods.ByName("ListSecondaryStorageSelectors")),
			connect.WithClientOptions(opts...),
		),
		removeSecondaryStorageSelector: connect.NewClient[v1.RemoveSecondaryStorageSelectorRequest, v1.RemoveSecondaryStorageSelectorResponse](
			httpClient,
			baseURL+HeuristicsServiceRemoveSecondaryStorageSelectorProcedure,
			connect.WithSchema(heuristicsServiceMethods.ByName("RemoveSecondaryStorageSelector")),
			connect.WithClientOptions(opts...),
		),
		updateSecondaryStorageSelector: connect.NewClient[v1.UpdateSecondaryStorageSelectorRequest, v1.UpdateSecondaryStorageSelectorResponse](
			httpClient,
			baseURL+HeuristicsServiceUpdateSecondaryStorageSelectorProcedure,
			connect.WithSchema(heuristicsServiceMethods.ByName("UpdateSecondaryStorageSelector")),
			connect.WithClientOptions(opts...),
		),
	}
}

// heuristicsServiceClient implements HeuristicsServiceClient.
type heuristicsServiceClient struct {
	createSecondaryStorageSelector *connect.Client[v1.CreateSecondaryStorageSelectorRequest, v1.CreateSecondaryStorageSelectorResponse]
	listSecondaryStorageSelectors  *connect.Client[v1.ListSecondaryStorageSelectorsRequest, v1.ListSecondaryStorageSelectorsResponse]
	removeSecondaryStorageSelector *connect.Client[v1.RemoveSecondaryStorageSelectorRequest, v1.RemoveSecondaryStorageSelectorResponse]
	updateSecondaryStorageSelector *connect.Client[v1.UpdateSecondaryStorageSelectorRequest, v1.UpdateSecondaryStorageSelectorResponse]
}

// CreateSecondaryStorageSelector calls
// cloudstack.management.storage.heuristics.v1.HeuristicsService.CreateSecondaryStorageSelector.
func (c *heuristicsServiceClient) CreateSecondaryStorageSelector(ctx context.Context, req *connect.Request[v1.CreateSecondaryStorageSelectorRequest]) (*connect.Response[v1.CreateSecondaryStorageSelectorResponse], error) {
	return c.createSecondaryStorageSelector.CallUnary(ctx, req)
}

// ListSecondaryStorageSelectors calls
// cloudstack.management.storage.heuristics.v1.HeuristicsService.ListSecondaryStorageSelectors.
func (c *heuristicsServiceClient) ListSecondaryStorageSelectors(ctx context.Context, req *connect.Request[v1.ListSecondaryStorageSelectorsRequest]) (*connect.Response[v1.ListSecondaryStorageSelectorsResponse], error) {
	return c.listSecondaryStorageSelectors.CallUnary(ctx, req)
}

// RemoveSecondaryStorageSelector calls
// cloudstack.management.storage.heuristics.v1.HeuristicsService.RemoveSecondaryStorageSelector.
func (c *heuristicsServiceClient) RemoveSecondaryStorageSelector(ctx context.Context, req *connect.Request[v1.RemoveSecondaryStorageSelectorRequest]) (*connect.Response[v1.RemoveSecondaryStorageSelectorResponse], error) {
	return c.removeSecondaryStorageSelector.CallUnary(ctx, req)
}

// UpdateSecondaryStorageSelector calls
// cloudstack.management.storage.heuristics.v1.HeuristicsService.UpdateSecondaryStorageSelector.
func (c *heuristicsServiceClient) UpdateSecondaryStorageSelector(ctx context.Context, req *connect.Request[v1.UpdateSecondaryStorageSelectorRequest]) (*connect.Response[v1.UpdateSecondaryStorageSelectorResponse], error) {
	return c.updateSecondaryStorageSelector.CallUnary(ctx, req)
}

// HeuristicsServiceHandler is an implementation of the
// cloudstack.management.storage.heuristics.v1.HeuristicsService service.
type HeuristicsServiceHandler interface {
	// CreateSecondaryStorageSelector Creates a secondary storage selector, described by the heuristic rule.
	CreateSecondaryStorageSelector(context.Context, *connect.Request[v1.CreateSecondaryStorageSelectorRequest]) (*connect.Response[v1.CreateSecondaryStorageSelectorResponse], error)
	// ListSecondaryStorageSelectors Lists the secondary storage selectors and their rules.
	ListSecondaryStorageSelectors(context.Context, *connect.Request[v1.ListSecondaryStorageSelectorsRequest]) (*connect.Response[v1.ListSecondaryStorageSelectorsResponse], error)
	// RemoveSecondaryStorageSelector Removes an existing secondary storage selector.
	RemoveSecondaryStorageSelector(context.Context, *connect.Request[v1.RemoveSecondaryStorageSelectorRequest]) (*connect.Response[v1.RemoveSecondaryStorageSelectorResponse], error)
	// UpdateSecondaryStorageSelector Updates an existing secondary storage selector.
	UpdateSecondaryStorageSelector(context.Context, *connect.Request[v1.UpdateSecondaryStorageSelectorRequest]) (*connect.Response[v1.UpdateSecondaryStorageSelectorResponse], error)
}

// NewHeuristicsServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewHeuristicsServiceHandler(svc HeuristicsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	heuristicsServiceMethods := v1.File_cloudstack_management_storage_heuristics_v1_heuristics_gen_proto.Services().ByName("HeuristicsService").Methods()
	heuristicsServiceCreateSecondaryStorageSelectorHandler := connect.NewUnaryHandler(
		HeuristicsServiceCreateSecondaryStorageSelectorProcedure,
		svc.CreateSecondaryStorageSelector,
		connect.WithSchema(heuristicsServiceMethods.ByName("CreateSecondaryStorageSelector")),
		connect.WithHandlerOptions(opts...),
	)
	heuristicsServiceListSecondaryStorageSelectorsHandler := connect.NewUnaryHandler(
		HeuristicsServiceListSecondaryStorageSelectorsProcedure,
		svc.ListSecondaryStorageSelectors,
		connect.WithSchema(heuristicsServiceMethods.ByName("ListSecondaryStorageSelectors")),
		connect.WithHandlerOptions(opts...),
	)
	heuristicsServiceRemoveSecondaryStorageSelectorHandler := connect.NewUnaryHandler(
		HeuristicsServiceRemoveSecondaryStorageSelectorProcedure,
		svc.RemoveSecondaryStorageSelector,
		connect.WithSchema(heuristicsServiceMethods.ByName("RemoveSecondaryStorageSelector")),
		connect.WithHandlerOptions(opts...),
	)
	heuristicsServiceUpdateSecondaryStorageSelectorHandler := connect.NewUnaryHandler(
		HeuristicsServiceUpdateSecondaryStorageSelectorProcedure,
		svc.UpdateSecondaryStorageSelector,
		connect.WithSchema(heuristicsServiceMethods.ByName("UpdateSecondaryStorageSelector")),
		connect.WithHandlerOptions(opts...),
	)
	return "/cloudstack.management.storage.heuristics.v1.HeuristicsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case HeuristicsServiceCreateSecondaryStorageSelectorProcedure:
			heuristicsServiceCreateSecondaryStorageSelectorHandler.ServeHTTP(w, r)
		case HeuristicsServiceListSecondaryStorageSelectorsProcedure:
			heuristicsServiceListSecondaryStorageSelectorsHandler.ServeHTTP(w, r)
		case HeuristicsServiceRemoveSecondaryStorageSelectorProcedure:
			heuristicsServiceRemoveSecondaryStorageSelectorHandler.ServeHTTP(w, r)
		case HeuristicsServiceUpdateSecondaryStorageSelectorProcedure:
			heuristicsServiceUpdateSecondaryStorageSelectorHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedHeuristicsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedHeuristicsServiceHandler struct{}

func (UnimplementedHeuristicsServiceHandler) CreateSecondaryStorageSelector(context.Context, *connect.Request[v1.CreateSecondaryStorageSelectorRequest]) (*connect.Response[v1.CreateSecondaryStorageSelectorResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.storage.heuristics.v1.HeuristicsService.CreateSecondaryStorageSelector is not implemented"))
}

func (UnimplementedHeuristicsServiceHandler) ListSecondaryStorageSelectors(context.Context, *connect.Request[v1.ListSecondaryStorageSelectorsRequest]) (*connect.Response[v1.ListSecondaryStorageSelectorsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.storage.heuristics.v1.HeuristicsService.ListSecondaryStorageSelectors is not implemented"))
}

func (UnimplementedHeuristicsServiceHandler) RemoveSecondaryStorageSelector(context.Context, *connect.Request[v1.RemoveSecondaryStorageSelectorRequest]) (*connect.Response[v1.RemoveSecondaryStorageSelectorResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.storage.heuristics.v1.HeuristicsService.RemoveSecondaryStorageSelector is not implemented"))
}

func (UnimplementedHeuristicsServiceHandler) UpdateSecondaryStorageSelector(context.Context, *connect.Request[v1.UpdateSecondaryStorageSelectorRequest]) (*connect.Response[v1.UpdateSecondaryStorageSelectorResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.storage.heuristics.v1.HeuristicsService.UpdateSecondaryStorageSelector is not implemented"))
}
