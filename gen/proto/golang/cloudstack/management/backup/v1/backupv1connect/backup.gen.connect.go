// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cloudstack/management/backup/v1/backup.gen.proto

package backupv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/walteh/cloudstack-proxy/gen/proto/golang/cloudstack/management/backup/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BackupServiceName is the fully-qualified name of the BackupService service.
	BackupServiceName = "cloudstack.management.backup.v1.BackupService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BackupServiceListBackupScheduleProcedure is the fully-qualified name of the BackupService's
	// ListBackupSchedule RPC.
	BackupServiceListBackupScheduleProcedure = "/cloudstack.management.backup.v1.BackupService/ListBackupSchedule"
	// BackupServiceImportBackupOfferingProcedure is the fully-qualified name of the BackupService's
	// ImportBackupOffering RPC.
	BackupServiceImportBackupOfferingProcedure = "/cloudstack.management.backup.v1.BackupService/ImportBackupOffering"
	// BackupServiceDeleteBackupOfferingProcedure is the fully-qualified name of the BackupService's
	// DeleteBackupOffering RPC.
	BackupServiceDeleteBackupOfferingProcedure = "/cloudstack.management.backup.v1.BackupService/DeleteBackupOffering"
	// BackupServiceDeleteBackupScheduleProcedure is the fully-qualified name of the BackupService's
	// DeleteBackupSchedule RPC.
	BackupServiceDeleteBackupScheduleProcedure = "/cloudstack.management.backup.v1.BackupService/DeleteBackupSchedule"
	// BackupServiceAssignVirtualMachineToBackupOfferingProcedure is the fully-qualified name of the
	// BackupService's AssignVirtualMachineToBackupOffering RPC.
	BackupServiceAssignVirtualMachineToBackupOfferingProcedure = "/cloudstack.management.backup.v1.BackupService/AssignVirtualMachineToBackupOffering"
	// BackupServiceCreateBackupScheduleProcedure is the fully-qualified name of the BackupService's
	// CreateBackupSchedule RPC.
	BackupServiceCreateBackupScheduleProcedure = "/cloudstack.management.backup.v1.BackupService/CreateBackupSchedule"
	// BackupServiceListBackupsProcedure is the fully-qualified name of the BackupService's ListBackups
	// RPC.
	BackupServiceListBackupsProcedure = "/cloudstack.management.backup.v1.BackupService/ListBackups"
	// BackupServiceListBackupProvidersProcedure is the fully-qualified name of the BackupService's
	// ListBackupProviders RPC.
	BackupServiceListBackupProvidersProcedure = "/cloudstack.management.backup.v1.BackupService/ListBackupProviders"
	// BackupServiceListBackupProviderOfferingsProcedure is the fully-qualified name of the
	// BackupService's ListBackupProviderOfferings RPC.
	BackupServiceListBackupProviderOfferingsProcedure = "/cloudstack.management.backup.v1.BackupService/ListBackupProviderOfferings"
	// BackupServiceRestoreBackupProcedure is the fully-qualified name of the BackupService's
	// RestoreBackup RPC.
	BackupServiceRestoreBackupProcedure = "/cloudstack.management.backup.v1.BackupService/RestoreBackup"
	// BackupServiceUpdateBackupScheduleProcedure is the fully-qualified name of the BackupService's
	// UpdateBackupSchedule RPC.
	BackupServiceUpdateBackupScheduleProcedure = "/cloudstack.management.backup.v1.BackupService/UpdateBackupSchedule"
	// BackupServiceDeleteBackupProcedure is the fully-qualified name of the BackupService's
	// DeleteBackup RPC.
	BackupServiceDeleteBackupProcedure = "/cloudstack.management.backup.v1.BackupService/DeleteBackup"
	// BackupServiceUpdateBackupOfferingProcedure is the fully-qualified name of the BackupService's
	// UpdateBackupOffering RPC.
	BackupServiceUpdateBackupOfferingProcedure = "/cloudstack.management.backup.v1.BackupService/UpdateBackupOffering"
	// BackupServiceRemoveVirtualMachineFromBackupOfferingProcedure is the fully-qualified name of the
	// BackupService's RemoveVirtualMachineFromBackupOffering RPC.
	BackupServiceRemoveVirtualMachineFromBackupOfferingProcedure = "/cloudstack.management.backup.v1.BackupService/RemoveVirtualMachineFromBackupOffering"
	// BackupServiceRestoreVolumeFromBackupAndAttachToVMProcedure is the fully-qualified name of the
	// BackupService's RestoreVolumeFromBackupAndAttachToVM RPC.
	BackupServiceRestoreVolumeFromBackupAndAttachToVMProcedure = "/cloudstack.management.backup.v1.BackupService/RestoreVolumeFromBackupAndAttachToVM"
	// BackupServiceCreateBackupProcedure is the fully-qualified name of the BackupService's
	// CreateBackup RPC.
	BackupServiceCreateBackupProcedure = "/cloudstack.management.backup.v1.BackupService/CreateBackup"
	// BackupServiceListBackupOfferingsProcedure is the fully-qualified name of the BackupService's
	// ListBackupOfferings RPC.
	BackupServiceListBackupOfferingsProcedure = "/cloudstack.management.backup.v1.BackupService/ListBackupOfferings"
)

// BackupServiceClient is a client for the cloudstack.management.backup.v1.BackupService service.
type BackupServiceClient interface {
	// ListBackupSchedule List backup schedule of a VM
	ListBackupSchedule(context.Context, *connect.Request[v1.ListBackupScheduleRequest]) (*connect.Response[v1.ListBackupScheduleResponse], error)
	// ImportBackupOffering Imports a backup offering using a backup provider
	ImportBackupOffering(context.Context, *connect.Request[v1.ImportBackupOfferingRequest]) (*connect.Response[v1.ImportBackupOfferingResponse], error)
	// DeleteBackupOffering Deletes a backup offering
	DeleteBackupOffering(context.Context, *connect.Request[v1.DeleteBackupOfferingRequest]) (*connect.Response[v1.DeleteBackupOfferingResponse], error)
	// DeleteBackupSchedule Deletes the backup schedule of a VM
	DeleteBackupSchedule(context.Context, *connect.Request[v1.DeleteBackupScheduleRequest]) (*connect.Response[v1.DeleteBackupScheduleResponse], error)
	// AssignVirtualMachineToBackupOffering Assigns a VM to a backup offering
	AssignVirtualMachineToBackupOffering(context.Context, *connect.Request[v1.AssignVirtualMachineToBackupOfferingRequest]) (*connect.Response[v1.AssignVirtualMachineToBackupOfferingResponse], error)
	// CreateBackupSchedule Creates a user-defined VM backup schedule
	CreateBackupSchedule(context.Context, *connect.Request[v1.CreateBackupScheduleRequest]) (*connect.Response[v1.CreateBackupScheduleResponse], error)
	// ListBackups Lists VM backups
	ListBackups(context.Context, *connect.Request[v1.ListBackupsRequest]) (*connect.Response[v1.ListBackupsResponse], error)
	// ListBackupProviders Lists Backup and Recovery providers
	ListBackupProviders(context.Context, *connect.Request[v1.ListBackupProvidersRequest]) (*connect.Response[v1.ListBackupProvidersResponse], error)
	// ListBackupProviderOfferings Lists external backup offerings of the provider
	ListBackupProviderOfferings(context.Context, *connect.Request[v1.ListBackupProviderOfferingsRequest]) (*connect.Response[v1.ListBackupProviderOfferingsResponse], error)
	// RestoreBackup Restores an existing stopped or deleted VM using a VM backup
	RestoreBackup(context.Context, *connect.Request[v1.RestoreBackupRequest]) (*connect.Response[v1.RestoreBackupResponse], error)
	// UpdateBackupSchedule Updates a user-defined VM backup schedule
	UpdateBackupSchedule(context.Context, *connect.Request[v1.UpdateBackupScheduleRequest]) (*connect.Response[v1.UpdateBackupScheduleResponse], error)
	// DeleteBackup Delete VM backup
	DeleteBackup(context.Context, *connect.Request[v1.DeleteBackupRequest]) (*connect.Response[v1.DeleteBackupResponse], error)
	// UpdateBackupOffering Updates a backup offering.
	UpdateBackupOffering(context.Context, *connect.Request[v1.UpdateBackupOfferingRequest]) (*connect.Response[v1.UpdateBackupOfferingResponse], error)
	// RemoveVirtualMachineFromBackupOffering Removes a VM from any existing backup offering
	RemoveVirtualMachineFromBackupOffering(context.Context, *connect.Request[v1.RemoveVirtualMachineFromBackupOfferingRequest]) (*connect.Response[v1.RemoveVirtualMachineFromBackupOfferingResponse], error)
	// RestoreVolumeFromBackupAndAttachToVM Restore and attach a backed up volume to VM
	RestoreVolumeFromBackupAndAttachToVM(context.Context, *connect.Request[v1.RestoreVolumeFromBackupAndAttachToVMRequest]) (*connect.Response[v1.RestoreVolumeFromBackupAndAttachToVMResponse], error)
	// CreateBackup Create VM backup
	CreateBackup(context.Context, *connect.Request[v1.CreateBackupRequest]) (*connect.Response[v1.CreateBackupResponse], error)
	// ListBackupOfferings Lists backup offerings
	ListBackupOfferings(context.Context, *connect.Request[v1.ListBackupOfferingsRequest]) (*connect.Response[v1.ListBackupOfferingsResponse], error)
}

// NewBackupServiceClient constructs a client for the cloudstack.management.backup.v1.BackupService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBackupServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BackupServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	backupServiceMethods := v1.File_cloudstack_management_backup_v1_backup_gen_proto.Services().ByName("BackupService").Methods()
	return &backupServiceClient{
		listBackupSchedule: connect.NewClient[v1.ListBackupScheduleRequest, v1.ListBackupScheduleResponse](
			httpClient,
			baseURL+BackupServiceListBackupScheduleProcedure,
			connect.WithSchema(backupServiceMethods.ByName("ListBackupSchedule")),
			connect.WithClientOptions(opts...),
		),
		importBackupOffering: connect.NewClient[v1.ImportBackupOfferingRequest, v1.ImportBackupOfferingResponse](
			httpClient,
			baseURL+BackupServiceImportBackupOfferingProcedure,
			connect.WithSchema(backupServiceMethods.ByName("ImportBackupOffering")),
			connect.WithClientOptions(opts...),
		),
		deleteBackupOffering: connect.NewClient[v1.DeleteBackupOfferingRequest, v1.DeleteBackupOfferingResponse](
			httpClient,
			baseURL+BackupServiceDeleteBackupOfferingProcedure,
			connect.WithSchema(backupServiceMethods.ByName("DeleteBackupOffering")),
			connect.WithClientOptions(opts...),
		),
		deleteBackupSchedule: connect.NewClient[v1.DeleteBackupScheduleRequest, v1.DeleteBackupScheduleResponse](
			httpClient,
			baseURL+BackupServiceDeleteBackupScheduleProcedure,
			connect.WithSchema(backupServiceMethods.ByName("DeleteBackupSchedule")),
			connect.WithClientOptions(opts...),
		),
		assignVirtualMachineToBackupOffering: connect.NewClient[v1.AssignVirtualMachineToBackupOfferingRequest, v1.AssignVirtualMachineToBackupOfferingResponse](
			httpClient,
			baseURL+BackupServiceAssignVirtualMachineToBackupOfferingProcedure,
			connect.WithSchema(backupServiceMethods.ByName("AssignVirtualMachineToBackupOffering")),
			connect.WithClientOptions(opts...),
		),
		createBackupSchedule: connect.NewClient[v1.CreateBackupScheduleRequest, v1.CreateBackupScheduleResponse](
			httpClient,
			baseURL+BackupServiceCreateBackupScheduleProcedure,
			connect.WithSchema(backupServiceMethods.ByName("CreateBackupSchedule")),
			connect.WithClientOptions(opts...),
		),
		listBackups: connect.NewClient[v1.ListBackupsRequest, v1.ListBackupsResponse](
			httpClient,
			baseURL+BackupServiceListBackupsProcedure,
			connect.WithSchema(backupServiceMethods.ByName("ListBackups")),
			connect.WithClientOptions(opts...),
		),
		listBackupProviders: connect.NewClient[v1.ListBackupProvidersRequest, v1.ListBackupProvidersResponse](
			httpClient,
			baseURL+BackupServiceListBackupProvidersProcedure,
			connect.WithSchema(backupServiceMethods.ByName("ListBackupProviders")),
			connect.WithClientOptions(opts...),
		),
		listBackupProviderOfferings: connect.NewClient[v1.ListBackupProviderOfferingsRequest, v1.ListBackupProviderOfferingsResponse](
			httpClient,
			baseURL+BackupServiceListBackupProviderOfferingsProcedure,
			connect.WithSchema(backupServiceMethods.ByName("ListBackupProviderOfferings")),
			connect.WithClientOptions(opts...),
		),
		restoreBackup: connect.NewClient[v1.RestoreBackupRequest, v1.RestoreBackupResponse](
			httpClient,
			baseURL+BackupServiceRestoreBackupProcedure,
			connect.WithSchema(backupServiceMethods.ByName("RestoreBackup")),
			connect.WithClientOptions(opts...),
		),
		updateBackupSchedule: connect.NewClient[v1.UpdateBackupScheduleRequest, v1.UpdateBackupScheduleResponse](
			httpClient,
			baseURL+BackupServiceUpdateBackupScheduleProcedure,
			connect.WithSchema(backupServiceMethods.ByName("UpdateBackupSchedule")),
			connect.WithClientOptions(opts...),
		),
		deleteBackup: connect.NewClient[v1.DeleteBackupRequest, v1.DeleteBackupResponse](
			httpClient,
			baseURL+BackupServiceDeleteBackupProcedure,
			connect.WithSchema(backupServiceMethods.ByName("DeleteBackup")),
			connect.WithClientOptions(opts...),
		),
		updateBackupOffering: connect.NewClient[v1.UpdateBackupOfferingRequest, v1.UpdateBackupOfferingResponse](
			httpClient,
			baseURL+BackupServiceUpdateBackupOfferingProcedure,
			connect.WithSchema(backupServiceMethods.ByName("UpdateBackupOffering")),
			connect.WithClientOptions(opts...),
		),
		removeVirtualMachineFromBackupOffering: connect.NewClient[v1.RemoveVirtualMachineFromBackupOfferingRequest, v1.RemoveVirtualMachineFromBackupOfferingResponse](
			httpClient,
			baseURL+BackupServiceRemoveVirtualMachineFromBackupOfferingProcedure,
			connect.WithSchema(backupServiceMethods.ByName("RemoveVirtualMachineFromBackupOffering")),
			connect.WithClientOptions(opts...),
		),
		restoreVolumeFromBackupAndAttachToVM: connect.NewClient[v1.RestoreVolumeFromBackupAndAttachToVMRequest, v1.RestoreVolumeFromBackupAndAttachToVMResponse](
			httpClient,
			baseURL+BackupServiceRestoreVolumeFromBackupAndAttachToVMProcedure,
			connect.WithSchema(backupServiceMethods.ByName("RestoreVolumeFromBackupAndAttachToVM")),
			connect.WithClientOptions(opts...),
		),
		createBackup: connect.NewClient[v1.CreateBackupRequest, v1.CreateBackupResponse](
			httpClient,
			baseURL+BackupServiceCreateBackupProcedure,
			connect.WithSchema(backupServiceMethods.ByName("CreateBackup")),
			connect.WithClientOptions(opts...),
		),
		listBackupOfferings: connect.NewClient[v1.ListBackupOfferingsRequest, v1.ListBackupOfferingsResponse](
			httpClient,
			baseURL+BackupServiceListBackupOfferingsProcedure,
			connect.WithSchema(backupServiceMethods.ByName("ListBackupOfferings")),
			connect.WithClientOptions(opts...),
		),
	}
}

// backupServiceClient implements BackupServiceClient.
type backupServiceClient struct {
	listBackupSchedule                     *connect.Client[v1.ListBackupScheduleRequest, v1.ListBackupScheduleResponse]
	importBackupOffering                   *connect.Client[v1.ImportBackupOfferingRequest, v1.ImportBackupOfferingResponse]
	deleteBackupOffering                   *connect.Client[v1.DeleteBackupOfferingRequest, v1.DeleteBackupOfferingResponse]
	deleteBackupSchedule                   *connect.Client[v1.DeleteBackupScheduleRequest, v1.DeleteBackupScheduleResponse]
	assignVirtualMachineToBackupOffering   *connect.Client[v1.AssignVirtualMachineToBackupOfferingRequest, v1.AssignVirtualMachineToBackupOfferingResponse]
	createBackupSchedule                   *connect.Client[v1.CreateBackupScheduleRequest, v1.CreateBackupScheduleResponse]
	listBackups                            *connect.Client[v1.ListBackupsRequest, v1.ListBackupsResponse]
	listBackupProviders                    *connect.Client[v1.ListBackupProvidersRequest, v1.ListBackupProvidersResponse]
	listBackupProviderOfferings            *connect.Client[v1.ListBackupProviderOfferingsRequest, v1.ListBackupProviderOfferingsResponse]
	restoreBackup                          *connect.Client[v1.RestoreBackupRequest, v1.RestoreBackupResponse]
	updateBackupSchedule                   *connect.Client[v1.UpdateBackupScheduleRequest, v1.UpdateBackupScheduleResponse]
	deleteBackup                           *connect.Client[v1.DeleteBackupRequest, v1.DeleteBackupResponse]
	updateBackupOffering                   *connect.Client[v1.UpdateBackupOfferingRequest, v1.UpdateBackupOfferingResponse]
	removeVirtualMachineFromBackupOffering *connect.Client[v1.RemoveVirtualMachineFromBackupOfferingRequest, v1.RemoveVirtualMachineFromBackupOfferingResponse]
	restoreVolumeFromBackupAndAttachToVM   *connect.Client[v1.RestoreVolumeFromBackupAndAttachToVMRequest, v1.RestoreVolumeFromBackupAndAttachToVMResponse]
	createBackup                           *connect.Client[v1.CreateBackupRequest, v1.CreateBackupResponse]
	listBackupOfferings                    *connect.Client[v1.ListBackupOfferingsRequest, v1.ListBackupOfferingsResponse]
}

// ListBackupSchedule calls cloudstack.management.backup.v1.BackupService.ListBackupSchedule.
func (c *backupServiceClient) ListBackupSchedule(ctx context.Context, req *connect.Request[v1.ListBackupScheduleRequest]) (*connect.Response[v1.ListBackupScheduleResponse], error) {
	return c.listBackupSchedule.CallUnary(ctx, req)
}

// ImportBackupOffering calls cloudstack.management.backup.v1.BackupService.ImportBackupOffering.
func (c *backupServiceClient) ImportBackupOffering(ctx context.Context, req *connect.Request[v1.ImportBackupOfferingRequest]) (*connect.Response[v1.ImportBackupOfferingResponse], error) {
	return c.importBackupOffering.CallUnary(ctx, req)
}

// DeleteBackupOffering calls cloudstack.management.backup.v1.BackupService.DeleteBackupOffering.
func (c *backupServiceClient) DeleteBackupOffering(ctx context.Context, req *connect.Request[v1.DeleteBackupOfferingRequest]) (*connect.Response[v1.DeleteBackupOfferingResponse], error) {
	return c.deleteBackupOffering.CallUnary(ctx, req)
}

// DeleteBackupSchedule calls cloudstack.management.backup.v1.BackupService.DeleteBackupSchedule.
func (c *backupServiceClient) DeleteBackupSchedule(ctx context.Context, req *connect.Request[v1.DeleteBackupScheduleRequest]) (*connect.Response[v1.DeleteBackupScheduleResponse], error) {
	return c.deleteBackupSchedule.CallUnary(ctx, req)
}

// AssignVirtualMachineToBackupOffering calls
// cloudstack.management.backup.v1.BackupService.AssignVirtualMachineToBackupOffering.
func (c *backupServiceClient) AssignVirtualMachineToBackupOffering(ctx context.Context, req *connect.Request[v1.AssignVirtualMachineToBackupOfferingRequest]) (*connect.Response[v1.AssignVirtualMachineToBackupOfferingResponse], error) {
	return c.assignVirtualMachineToBackupOffering.CallUnary(ctx, req)
}

// CreateBackupSchedule calls cloudstack.management.backup.v1.BackupService.CreateBackupSchedule.
func (c *backupServiceClient) CreateBackupSchedule(ctx context.Context, req *connect.Request[v1.CreateBackupScheduleRequest]) (*connect.Response[v1.CreateBackupScheduleResponse], error) {
	return c.createBackupSchedule.CallUnary(ctx, req)
}

// ListBackups calls cloudstack.management.backup.v1.BackupService.ListBackups.
func (c *backupServiceClient) ListBackups(ctx context.Context, req *connect.Request[v1.ListBackupsRequest]) (*connect.Response[v1.ListBackupsResponse], error) {
	return c.listBackups.CallUnary(ctx, req)
}

// ListBackupProviders calls cloudstack.management.backup.v1.BackupService.ListBackupProviders.
func (c *backupServiceClient) ListBackupProviders(ctx context.Context, req *connect.Request[v1.ListBackupProvidersRequest]) (*connect.Response[v1.ListBackupProvidersResponse], error) {
	return c.listBackupProviders.CallUnary(ctx, req)
}

// ListBackupProviderOfferings calls
// cloudstack.management.backup.v1.BackupService.ListBackupProviderOfferings.
func (c *backupServiceClient) ListBackupProviderOfferings(ctx context.Context, req *connect.Request[v1.ListBackupProviderOfferingsRequest]) (*connect.Response[v1.ListBackupProviderOfferingsResponse], error) {
	return c.listBackupProviderOfferings.CallUnary(ctx, req)
}

// RestoreBackup calls cloudstack.management.backup.v1.BackupService.RestoreBackup.
func (c *backupServiceClient) RestoreBackup(ctx context.Context, req *connect.Request[v1.RestoreBackupRequest]) (*connect.Response[v1.RestoreBackupResponse], error) {
	return c.restoreBackup.CallUnary(ctx, req)
}

// UpdateBackupSchedule calls cloudstack.management.backup.v1.BackupService.UpdateBackupSchedule.
func (c *backupServiceClient) UpdateBackupSchedule(ctx context.Context, req *connect.Request[v1.UpdateBackupScheduleRequest]) (*connect.Response[v1.UpdateBackupScheduleResponse], error) {
	return c.updateBackupSchedule.CallUnary(ctx, req)
}

// DeleteBackup calls cloudstack.management.backup.v1.BackupService.DeleteBackup.
func (c *backupServiceClient) DeleteBackup(ctx context.Context, req *connect.Request[v1.DeleteBackupRequest]) (*connect.Response[v1.DeleteBackupResponse], error) {
	return c.deleteBackup.CallUnary(ctx, req)
}

// UpdateBackupOffering calls cloudstack.management.backup.v1.BackupService.UpdateBackupOffering.
func (c *backupServiceClient) UpdateBackupOffering(ctx context.Context, req *connect.Request[v1.UpdateBackupOfferingRequest]) (*connect.Response[v1.UpdateBackupOfferingResponse], error) {
	return c.updateBackupOffering.CallUnary(ctx, req)
}

// RemoveVirtualMachineFromBackupOffering calls
// cloudstack.management.backup.v1.BackupService.RemoveVirtualMachineFromBackupOffering.
func (c *backupServiceClient) RemoveVirtualMachineFromBackupOffering(ctx context.Context, req *connect.Request[v1.RemoveVirtualMachineFromBackupOfferingRequest]) (*connect.Response[v1.RemoveVirtualMachineFromBackupOfferingResponse], error) {
	return c.removeVirtualMachineFromBackupOffering.CallUnary(ctx, req)
}

// RestoreVolumeFromBackupAndAttachToVM calls
// cloudstack.management.backup.v1.BackupService.RestoreVolumeFromBackupAndAttachToVM.
func (c *backupServiceClient) RestoreVolumeFromBackupAndAttachToVM(ctx context.Context, req *connect.Request[v1.RestoreVolumeFromBackupAndAttachToVMRequest]) (*connect.Response[v1.RestoreVolumeFromBackupAndAttachToVMResponse], error) {
	return c.restoreVolumeFromBackupAndAttachToVM.CallUnary(ctx, req)
}

// CreateBackup calls cloudstack.management.backup.v1.BackupService.CreateBackup.
func (c *backupServiceClient) CreateBackup(ctx context.Context, req *connect.Request[v1.CreateBackupRequest]) (*connect.Response[v1.CreateBackupResponse], error) {
	return c.createBackup.CallUnary(ctx, req)
}

// ListBackupOfferings calls cloudstack.management.backup.v1.BackupService.ListBackupOfferings.
func (c *backupServiceClient) ListBackupOfferings(ctx context.Context, req *connect.Request[v1.ListBackupOfferingsRequest]) (*connect.Response[v1.ListBackupOfferingsResponse], error) {
	return c.listBackupOfferings.CallUnary(ctx, req)
}

// BackupServiceHandler is an implementation of the cloudstack.management.backup.v1.BackupService
// service.
type BackupServiceHandler interface {
	// ListBackupSchedule List backup schedule of a VM
	ListBackupSchedule(context.Context, *connect.Request[v1.ListBackupScheduleRequest]) (*connect.Response[v1.ListBackupScheduleResponse], error)
	// ImportBackupOffering Imports a backup offering using a backup provider
	ImportBackupOffering(context.Context, *connect.Request[v1.ImportBackupOfferingRequest]) (*connect.Response[v1.ImportBackupOfferingResponse], error)
	// DeleteBackupOffering Deletes a backup offering
	DeleteBackupOffering(context.Context, *connect.Request[v1.DeleteBackupOfferingRequest]) (*connect.Response[v1.DeleteBackupOfferingResponse], error)
	// DeleteBackupSchedule Deletes the backup schedule of a VM
	DeleteBackupSchedule(context.Context, *connect.Request[v1.DeleteBackupScheduleRequest]) (*connect.Response[v1.DeleteBackupScheduleResponse], error)
	// AssignVirtualMachineToBackupOffering Assigns a VM to a backup offering
	AssignVirtualMachineToBackupOffering(context.Context, *connect.Request[v1.AssignVirtualMachineToBackupOfferingRequest]) (*connect.Response[v1.AssignVirtualMachineToBackupOfferingResponse], error)
	// CreateBackupSchedule Creates a user-defined VM backup schedule
	CreateBackupSchedule(context.Context, *connect.Request[v1.CreateBackupScheduleRequest]) (*connect.Response[v1.CreateBackupScheduleResponse], error)
	// ListBackups Lists VM backups
	ListBackups(context.Context, *connect.Request[v1.ListBackupsRequest]) (*connect.Response[v1.ListBackupsResponse], error)
	// ListBackupProviders Lists Backup and Recovery providers
	ListBackupProviders(context.Context, *connect.Request[v1.ListBackupProvidersRequest]) (*connect.Response[v1.ListBackupProvidersResponse], error)
	// ListBackupProviderOfferings Lists external backup offerings of the provider
	ListBackupProviderOfferings(context.Context, *connect.Request[v1.ListBackupProviderOfferingsRequest]) (*connect.Response[v1.ListBackupProviderOfferingsResponse], error)
	// RestoreBackup Restores an existing stopped or deleted VM using a VM backup
	RestoreBackup(context.Context, *connect.Request[v1.RestoreBackupRequest]) (*connect.Response[v1.RestoreBackupResponse], error)
	// UpdateBackupSchedule Updates a user-defined VM backup schedule
	UpdateBackupSchedule(context.Context, *connect.Request[v1.UpdateBackupScheduleRequest]) (*connect.Response[v1.UpdateBackupScheduleResponse], error)
	// DeleteBackup Delete VM backup
	DeleteBackup(context.Context, *connect.Request[v1.DeleteBackupRequest]) (*connect.Response[v1.DeleteBackupResponse], error)
	// UpdateBackupOffering Updates a backup offering.
	UpdateBackupOffering(context.Context, *connect.Request[v1.UpdateBackupOfferingRequest]) (*connect.Response[v1.UpdateBackupOfferingResponse], error)
	// RemoveVirtualMachineFromBackupOffering Removes a VM from any existing backup offering
	RemoveVirtualMachineFromBackupOffering(context.Context, *connect.Request[v1.RemoveVirtualMachineFromBackupOfferingRequest]) (*connect.Response[v1.RemoveVirtualMachineFromBackupOfferingResponse], error)
	// RestoreVolumeFromBackupAndAttachToVM Restore and attach a backed up volume to VM
	RestoreVolumeFromBackupAndAttachToVM(context.Context, *connect.Request[v1.RestoreVolumeFromBackupAndAttachToVMRequest]) (*connect.Response[v1.RestoreVolumeFromBackupAndAttachToVMResponse], error)
	// CreateBackup Create VM backup
	CreateBackup(context.Context, *connect.Request[v1.CreateBackupRequest]) (*connect.Response[v1.CreateBackupResponse], error)
	// ListBackupOfferings Lists backup offerings
	ListBackupOfferings(context.Context, *connect.Request[v1.ListBackupOfferingsRequest]) (*connect.Response[v1.ListBackupOfferingsResponse], error)
}

// NewBackupServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBackupServiceHandler(svc BackupServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	backupServiceMethods := v1.File_cloudstack_management_backup_v1_backup_gen_proto.Services().ByName("BackupService").Methods()
	backupServiceListBackupScheduleHandler := connect.NewUnaryHandler(
		BackupServiceListBackupScheduleProcedure,
		svc.ListBackupSchedule,
		connect.WithSchema(backupServiceMethods.ByName("ListBackupSchedule")),
		connect.WithHandlerOptions(opts...),
	)
	backupServiceImportBackupOfferingHandler := connect.NewUnaryHandler(
		BackupServiceImportBackupOfferingProcedure,
		svc.ImportBackupOffering,
		connect.WithSchema(backupServiceMethods.ByName("ImportBackupOffering")),
		connect.WithHandlerOptions(opts...),
	)
	backupServiceDeleteBackupOfferingHandler := connect.NewUnaryHandler(
		BackupServiceDeleteBackupOfferingProcedure,
		svc.DeleteBackupOffering,
		connect.WithSchema(backupServiceMethods.ByName("DeleteBackupOffering")),
		connect.WithHandlerOptions(opts...),
	)
	backupServiceDeleteBackupScheduleHandler := connect.NewUnaryHandler(
		BackupServiceDeleteBackupScheduleProcedure,
		svc.DeleteBackupSchedule,
		connect.WithSchema(backupServiceMethods.ByName("DeleteBackupSchedule")),
		connect.WithHandlerOptions(opts...),
	)
	backupServiceAssignVirtualMachineToBackupOfferingHandler := connect.NewUnaryHandler(
		BackupServiceAssignVirtualMachineToBackupOfferingProcedure,
		svc.AssignVirtualMachineToBackupOffering,
		connect.WithSchema(backupServiceMethods.ByName("AssignVirtualMachineToBackupOffering")),
		connect.WithHandlerOptions(opts...),
	)
	backupServiceCreateBackupScheduleHandler := connect.NewUnaryHandler(
		BackupServiceCreateBackupScheduleProcedure,
		svc.CreateBackupSchedule,
		connect.WithSchema(backupServiceMethods.ByName("CreateBackupSchedule")),
		connect.WithHandlerOptions(opts...),
	)
	backupServiceListBackupsHandler := connect.NewUnaryHandler(
		BackupServiceListBackupsProcedure,
		svc.ListBackups,
		connect.WithSchema(backupServiceMethods.ByName("ListBackups")),
		connect.WithHandlerOptions(opts...),
	)
	backupServiceListBackupProvidersHandler := connect.NewUnaryHandler(
		BackupServiceListBackupProvidersProcedure,
		svc.ListBackupProviders,
		connect.WithSchema(backupServiceMethods.ByName("ListBackupProviders")),
		connect.WithHandlerOptions(opts...),
	)
	backupServiceListBackupProviderOfferingsHandler := connect.NewUnaryHandler(
		BackupServiceListBackupProviderOfferingsProcedure,
		svc.ListBackupProviderOfferings,
		connect.WithSchema(backupServiceMethods.ByName("ListBackupProviderOfferings")),
		connect.WithHandlerOptions(opts...),
	)
	backupServiceRestoreBackupHandler := connect.NewUnaryHandler(
		BackupServiceRestoreBackupProcedure,
		svc.RestoreBackup,
		connect.WithSchema(backupServiceMethods.ByName("RestoreBackup")),
		connect.WithHandlerOptions(opts...),
	)
	backupServiceUpdateBackupScheduleHandler := connect.NewUnaryHandler(
		BackupServiceUpdateBackupScheduleProcedure,
		svc.UpdateBackupSchedule,
		connect.WithSchema(backupServiceMethods.ByName("UpdateBackupSchedule")),
		connect.WithHandlerOptions(opts...),
	)
	backupServiceDeleteBackupHandler := connect.NewUnaryHandler(
		BackupServiceDeleteBackupProcedure,
		svc.DeleteBackup,
		connect.WithSchema(backupServiceMethods.ByName("DeleteBackup")),
		connect.WithHandlerOptions(opts...),
	)
	backupServiceUpdateBackupOfferingHandler := connect.NewUnaryHandler(
		BackupServiceUpdateBackupOfferingProcedure,
		svc.UpdateBackupOffering,
		connect.WithSchema(backupServiceMethods.ByName("UpdateBackupOffering")),
		connect.WithHandlerOptions(opts...),
	)
	backupServiceRemoveVirtualMachineFromBackupOfferingHandler := connect.NewUnaryHandler(
		BackupServiceRemoveVirtualMachineFromBackupOfferingProcedure,
		svc.RemoveVirtualMachineFromBackupOffering,
		connect.WithSchema(backupServiceMethods.ByName("RemoveVirtualMachineFromBackupOffering")),
		connect.WithHandlerOptions(opts...),
	)
	backupServiceRestoreVolumeFromBackupAndAttachToVMHandler := connect.NewUnaryHandler(
		BackupServiceRestoreVolumeFromBackupAndAttachToVMProcedure,
		svc.RestoreVolumeFromBackupAndAttachToVM,
		connect.WithSchema(backupServiceMethods.ByName("RestoreVolumeFromBackupAndAttachToVM")),
		connect.WithHandlerOptions(opts...),
	)
	backupServiceCreateBackupHandler := connect.NewUnaryHandler(
		BackupServiceCreateBackupProcedure,
		svc.CreateBackup,
		connect.WithSchema(backupServiceMethods.ByName("CreateBackup")),
		connect.WithHandlerOptions(opts...),
	)
	backupServiceListBackupOfferingsHandler := connect.NewUnaryHandler(
		BackupServiceListBackupOfferingsProcedure,
		svc.ListBackupOfferings,
		connect.WithSchema(backupServiceMethods.ByName("ListBackupOfferings")),
		connect.WithHandlerOptions(opts...),
	)
	return "/cloudstack.management.backup.v1.BackupService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BackupServiceListBackupScheduleProcedure:
			backupServiceListBackupScheduleHandler.ServeHTTP(w, r)
		case BackupServiceImportBackupOfferingProcedure:
			backupServiceImportBackupOfferingHandler.ServeHTTP(w, r)
		case BackupServiceDeleteBackupOfferingProcedure:
			backupServiceDeleteBackupOfferingHandler.ServeHTTP(w, r)
		case BackupServiceDeleteBackupScheduleProcedure:
			backupServiceDeleteBackupScheduleHandler.ServeHTTP(w, r)
		case BackupServiceAssignVirtualMachineToBackupOfferingProcedure:
			backupServiceAssignVirtualMachineToBackupOfferingHandler.ServeHTTP(w, r)
		case BackupServiceCreateBackupScheduleProcedure:
			backupServiceCreateBackupScheduleHandler.ServeHTTP(w, r)
		case BackupServiceListBackupsProcedure:
			backupServiceListBackupsHandler.ServeHTTP(w, r)
		case BackupServiceListBackupProvidersProcedure:
			backupServiceListBackupProvidersHandler.ServeHTTP(w, r)
		case BackupServiceListBackupProviderOfferingsProcedure:
			backupServiceListBackupProviderOfferingsHandler.ServeHTTP(w, r)
		case BackupServiceRestoreBackupProcedure:
			backupServiceRestoreBackupHandler.ServeHTTP(w, r)
		case BackupServiceUpdateBackupScheduleProcedure:
			backupServiceUpdateBackupScheduleHandler.ServeHTTP(w, r)
		case BackupServiceDeleteBackupProcedure:
			backupServiceDeleteBackupHandler.ServeHTTP(w, r)
		case BackupServiceUpdateBackupOfferingProcedure:
			backupServiceUpdateBackupOfferingHandler.ServeHTTP(w, r)
		case BackupServiceRemoveVirtualMachineFromBackupOfferingProcedure:
			backupServiceRemoveVirtualMachineFromBackupOfferingHandler.ServeHTTP(w, r)
		case BackupServiceRestoreVolumeFromBackupAndAttachToVMProcedure:
			backupServiceRestoreVolumeFromBackupAndAttachToVMHandler.ServeHTTP(w, r)
		case BackupServiceCreateBackupProcedure:
			backupServiceCreateBackupHandler.ServeHTTP(w, r)
		case BackupServiceListBackupOfferingsProcedure:
			backupServiceListBackupOfferingsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBackupServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBackupServiceHandler struct{}

func (UnimplementedBackupServiceHandler) ListBackupSchedule(context.Context, *connect.Request[v1.ListBackupScheduleRequest]) (*connect.Response[v1.ListBackupScheduleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.backup.v1.BackupService.ListBackupSchedule is not implemented"))
}

func (UnimplementedBackupServiceHandler) ImportBackupOffering(context.Context, *connect.Request[v1.ImportBackupOfferingRequest]) (*connect.Response[v1.ImportBackupOfferingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.backup.v1.BackupService.ImportBackupOffering is not implemented"))
}

func (UnimplementedBackupServiceHandler) DeleteBackupOffering(context.Context, *connect.Request[v1.DeleteBackupOfferingRequest]) (*connect.Response[v1.DeleteBackupOfferingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.backup.v1.BackupService.DeleteBackupOffering is not implemented"))
}

func (UnimplementedBackupServiceHandler) DeleteBackupSchedule(context.Context, *connect.Request[v1.DeleteBackupScheduleRequest]) (*connect.Response[v1.DeleteBackupScheduleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.backup.v1.BackupService.DeleteBackupSchedule is not implemented"))
}

func (UnimplementedBackupServiceHandler) AssignVirtualMachineToBackupOffering(context.Context, *connect.Request[v1.AssignVirtualMachineToBackupOfferingRequest]) (*connect.Response[v1.AssignVirtualMachineToBackupOfferingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.backup.v1.BackupService.AssignVirtualMachineToBackupOffering is not implemented"))
}

func (UnimplementedBackupServiceHandler) CreateBackupSchedule(context.Context, *connect.Request[v1.CreateBackupScheduleRequest]) (*connect.Response[v1.CreateBackupScheduleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.backup.v1.BackupService.CreateBackupSchedule is not implemented"))
}

func (UnimplementedBackupServiceHandler) ListBackups(context.Context, *connect.Request[v1.ListBackupsRequest]) (*connect.Response[v1.ListBackupsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.backup.v1.BackupService.ListBackups is not implemented"))
}

func (UnimplementedBackupServiceHandler) ListBackupProviders(context.Context, *connect.Request[v1.ListBackupProvidersRequest]) (*connect.Response[v1.ListBackupProvidersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.backup.v1.BackupService.ListBackupProviders is not implemented"))
}

func (UnimplementedBackupServiceHandler) ListBackupProviderOfferings(context.Context, *connect.Request[v1.ListBackupProviderOfferingsRequest]) (*connect.Response[v1.ListBackupProviderOfferingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.backup.v1.BackupService.ListBackupProviderOfferings is not implemented"))
}

func (UnimplementedBackupServiceHandler) RestoreBackup(context.Context, *connect.Request[v1.RestoreBackupRequest]) (*connect.Response[v1.RestoreBackupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.backup.v1.BackupService.RestoreBackup is not implemented"))
}

func (UnimplementedBackupServiceHandler) UpdateBackupSchedule(context.Context, *connect.Request[v1.UpdateBackupScheduleRequest]) (*connect.Response[v1.UpdateBackupScheduleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.backup.v1.BackupService.UpdateBackupSchedule is not implemented"))
}

func (UnimplementedBackupServiceHandler) DeleteBackup(context.Context, *connect.Request[v1.DeleteBackupRequest]) (*connect.Response[v1.DeleteBackupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.backup.v1.BackupService.DeleteBackup is not implemented"))
}

func (UnimplementedBackupServiceHandler) UpdateBackupOffering(context.Context, *connect.Request[v1.UpdateBackupOfferingRequest]) (*connect.Response[v1.UpdateBackupOfferingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.backup.v1.BackupService.UpdateBackupOffering is not implemented"))
}

func (UnimplementedBackupServiceHandler) RemoveVirtualMachineFromBackupOffering(context.Context, *connect.Request[v1.RemoveVirtualMachineFromBackupOfferingRequest]) (*connect.Response[v1.RemoveVirtualMachineFromBackupOfferingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.backup.v1.BackupService.RemoveVirtualMachineFromBackupOffering is not implemented"))
}

func (UnimplementedBackupServiceHandler) RestoreVolumeFromBackupAndAttachToVM(context.Context, *connect.Request[v1.RestoreVolumeFromBackupAndAttachToVMRequest]) (*connect.Response[v1.RestoreVolumeFromBackupAndAttachToVMResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.backup.v1.BackupService.RestoreVolumeFromBackupAndAttachToVM is not implemented"))
}

func (UnimplementedBackupServiceHandler) CreateBackup(context.Context, *connect.Request[v1.CreateBackupRequest]) (*connect.Response[v1.CreateBackupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.backup.v1.BackupService.CreateBackup is not implemented"))
}

func (UnimplementedBackupServiceHandler) ListBackupOfferings(context.Context, *connect.Request[v1.ListBackupOfferingsRequest]) (*connect.Response[v1.ListBackupOfferingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.backup.v1.BackupService.ListBackupOfferings is not implemented"))
}
