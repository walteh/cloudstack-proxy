// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: cloudstack/management/backup/repository/v1/repository.gen.proto

package repositoryv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RepositoryService_ListBackupRepositories_FullMethodName = "/cloudstack.management.backup.repository.v1.RepositoryService/ListBackupRepositories"
	RepositoryService_DeleteBackupRepository_FullMethodName = "/cloudstack.management.backup.repository.v1.RepositoryService/DeleteBackupRepository"
	RepositoryService_AddBackupRepository_FullMethodName    = "/cloudstack.management.backup.repository.v1.RepositoryService/AddBackupRepository"
)

// RepositoryServiceClient is the client API for RepositoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// RepositoryService provides operations for managing Backup.Repositorys
type RepositoryServiceClient interface {
	// ListBackupRepositories Lists all backup repositories
	ListBackupRepositories(ctx context.Context, in *ListBackupRepositoriesRequest, opts ...grpc.CallOption) (*ListBackupRepositoriesResponse, error)
	// DeleteBackupRepository delete a backup repository
	DeleteBackupRepository(ctx context.Context, in *DeleteBackupRepositoryRequest, opts ...grpc.CallOption) (*DeleteBackupRepositoryResponse, error)
	// AddBackupRepository Adds a backup repository to store NAS backups
	AddBackupRepository(ctx context.Context, in *AddBackupRepositoryRequest, opts ...grpc.CallOption) (*AddBackupRepositoryResponse, error)
}

type repositoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRepositoryServiceClient(cc grpc.ClientConnInterface) RepositoryServiceClient {
	return &repositoryServiceClient{cc}
}

func (c *repositoryServiceClient) ListBackupRepositories(ctx context.Context, in *ListBackupRepositoriesRequest, opts ...grpc.CallOption) (*ListBackupRepositoriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBackupRepositoriesResponse)
	err := c.cc.Invoke(ctx, RepositoryService_ListBackupRepositories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) DeleteBackupRepository(ctx context.Context, in *DeleteBackupRepositoryRequest, opts ...grpc.CallOption) (*DeleteBackupRepositoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBackupRepositoryResponse)
	err := c.cc.Invoke(ctx, RepositoryService_DeleteBackupRepository_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryServiceClient) AddBackupRepository(ctx context.Context, in *AddBackupRepositoryRequest, opts ...grpc.CallOption) (*AddBackupRepositoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddBackupRepositoryResponse)
	err := c.cc.Invoke(ctx, RepositoryService_AddBackupRepository_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RepositoryServiceServer is the server API for RepositoryService service.
// All implementations must embed UnimplementedRepositoryServiceServer
// for forward compatibility.
//
// RepositoryService provides operations for managing Backup.Repositorys
type RepositoryServiceServer interface {
	// ListBackupRepositories Lists all backup repositories
	ListBackupRepositories(context.Context, *ListBackupRepositoriesRequest) (*ListBackupRepositoriesResponse, error)
	// DeleteBackupRepository delete a backup repository
	DeleteBackupRepository(context.Context, *DeleteBackupRepositoryRequest) (*DeleteBackupRepositoryResponse, error)
	// AddBackupRepository Adds a backup repository to store NAS backups
	AddBackupRepository(context.Context, *AddBackupRepositoryRequest) (*AddBackupRepositoryResponse, error)
	mustEmbedUnimplementedRepositoryServiceServer()
}

// UnimplementedRepositoryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRepositoryServiceServer struct{}

func (UnimplementedRepositoryServiceServer) ListBackupRepositories(context.Context, *ListBackupRepositoriesRequest) (*ListBackupRepositoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBackupRepositories not implemented")
}
func (UnimplementedRepositoryServiceServer) DeleteBackupRepository(context.Context, *DeleteBackupRepositoryRequest) (*DeleteBackupRepositoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBackupRepository not implemented")
}
func (UnimplementedRepositoryServiceServer) AddBackupRepository(context.Context, *AddBackupRepositoryRequest) (*AddBackupRepositoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBackupRepository not implemented")
}
func (UnimplementedRepositoryServiceServer) mustEmbedUnimplementedRepositoryServiceServer() {}
func (UnimplementedRepositoryServiceServer) testEmbeddedByValue()                           {}

// UnsafeRepositoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RepositoryServiceServer will
// result in compilation errors.
type UnsafeRepositoryServiceServer interface {
	mustEmbedUnimplementedRepositoryServiceServer()
}

func RegisterRepositoryServiceServer(s grpc.ServiceRegistrar, srv RepositoryServiceServer) {
	// If the following call pancis, it indicates UnimplementedRepositoryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RepositoryService_ServiceDesc, srv)
}

func _RepositoryService_ListBackupRepositories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBackupRepositoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).ListBackupRepositories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepositoryService_ListBackupRepositories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).ListBackupRepositories(ctx, req.(*ListBackupRepositoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_DeleteBackupRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBackupRepositoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).DeleteBackupRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepositoryService_DeleteBackupRepository_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).DeleteBackupRepository(ctx, req.(*DeleteBackupRepositoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepositoryService_AddBackupRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBackupRepositoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).AddBackupRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepositoryService_AddBackupRepository_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).AddBackupRepository(ctx, req.(*AddBackupRepositoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RepositoryService_ServiceDesc is the grpc.ServiceDesc for RepositoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RepositoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloudstack.management.backup.repository.v1.RepositoryService",
	HandlerType: (*RepositoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListBackupRepositories",
			Handler:    _RepositoryService_ListBackupRepositories_Handler,
		},
		{
			MethodName: "DeleteBackupRepository",
			Handler:    _RepositoryService_DeleteBackupRepository_Handler,
		},
		{
			MethodName: "AddBackupRepository",
			Handler:    _RepositoryService_AddBackupRepository_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloudstack/management/backup/repository/v1/repository.gen.proto",
}
