// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cloudstack/management/backup/repository/v1/repository.gen.proto

package repositoryv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/walteh/cloudstack-proxy/gen/proto/golang/cloudstack/management/backup/repository/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RepositoryServiceName is the fully-qualified name of the RepositoryService service.
	RepositoryServiceName = "cloudstack.management.backup.repository.v1.RepositoryService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RepositoryServiceListBackupRepositoriesProcedure is the fully-qualified name of the
	// RepositoryService's ListBackupRepositories RPC.
	RepositoryServiceListBackupRepositoriesProcedure = "/cloudstack.management.backup.repository.v1.RepositoryService/ListBackupRepositories"
	// RepositoryServiceAddBackupRepositoryProcedure is the fully-qualified name of the
	// RepositoryService's AddBackupRepository RPC.
	RepositoryServiceAddBackupRepositoryProcedure = "/cloudstack.management.backup.repository.v1.RepositoryService/AddBackupRepository"
	// RepositoryServiceDeleteBackupRepositoryProcedure is the fully-qualified name of the
	// RepositoryService's DeleteBackupRepository RPC.
	RepositoryServiceDeleteBackupRepositoryProcedure = "/cloudstack.management.backup.repository.v1.RepositoryService/DeleteBackupRepository"
)

// RepositoryServiceClient is a client for the
// cloudstack.management.backup.repository.v1.RepositoryService service.
type RepositoryServiceClient interface {
	// ListBackupRepositories Lists all backup repositories
	ListBackupRepositories(context.Context, *connect.Request[v1.ListBackupRepositoriesRequest]) (*connect.Response[v1.ListBackupRepositoriesResponse], error)
	// AddBackupRepository Adds a backup repository to store NAS backups
	AddBackupRepository(context.Context, *connect.Request[v1.AddBackupRepositoryRequest]) (*connect.Response[v1.AddBackupRepositoryResponse], error)
	// DeleteBackupRepository delete a backup repository
	DeleteBackupRepository(context.Context, *connect.Request[v1.DeleteBackupRepositoryRequest]) (*connect.Response[v1.DeleteBackupRepositoryResponse], error)
}

// NewRepositoryServiceClient constructs a client for the
// cloudstack.management.backup.repository.v1.RepositoryService service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRepositoryServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RepositoryServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	repositoryServiceMethods := v1.File_cloudstack_management_backup_repository_v1_repository_gen_proto.Services().ByName("RepositoryService").Methods()
	return &repositoryServiceClient{
		listBackupRepositories: connect.NewClient[v1.ListBackupRepositoriesRequest, v1.ListBackupRepositoriesResponse](
			httpClient,
			baseURL+RepositoryServiceListBackupRepositoriesProcedure,
			connect.WithSchema(repositoryServiceMethods.ByName("ListBackupRepositories")),
			connect.WithClientOptions(opts...),
		),
		addBackupRepository: connect.NewClient[v1.AddBackupRepositoryRequest, v1.AddBackupRepositoryResponse](
			httpClient,
			baseURL+RepositoryServiceAddBackupRepositoryProcedure,
			connect.WithSchema(repositoryServiceMethods.ByName("AddBackupRepository")),
			connect.WithClientOptions(opts...),
		),
		deleteBackupRepository: connect.NewClient[v1.DeleteBackupRepositoryRequest, v1.DeleteBackupRepositoryResponse](
			httpClient,
			baseURL+RepositoryServiceDeleteBackupRepositoryProcedure,
			connect.WithSchema(repositoryServiceMethods.ByName("DeleteBackupRepository")),
			connect.WithClientOptions(opts...),
		),
	}
}

// repositoryServiceClient implements RepositoryServiceClient.
type repositoryServiceClient struct {
	listBackupRepositories *connect.Client[v1.ListBackupRepositoriesRequest, v1.ListBackupRepositoriesResponse]
	addBackupRepository    *connect.Client[v1.AddBackupRepositoryRequest, v1.AddBackupRepositoryResponse]
	deleteBackupRepository *connect.Client[v1.DeleteBackupRepositoryRequest, v1.DeleteBackupRepositoryResponse]
}

// ListBackupRepositories calls
// cloudstack.management.backup.repository.v1.RepositoryService.ListBackupRepositories.
func (c *repositoryServiceClient) ListBackupRepositories(ctx context.Context, req *connect.Request[v1.ListBackupRepositoriesRequest]) (*connect.Response[v1.ListBackupRepositoriesResponse], error) {
	return c.listBackupRepositories.CallUnary(ctx, req)
}

// AddBackupRepository calls
// cloudstack.management.backup.repository.v1.RepositoryService.AddBackupRepository.
func (c *repositoryServiceClient) AddBackupRepository(ctx context.Context, req *connect.Request[v1.AddBackupRepositoryRequest]) (*connect.Response[v1.AddBackupRepositoryResponse], error) {
	return c.addBackupRepository.CallUnary(ctx, req)
}

// DeleteBackupRepository calls
// cloudstack.management.backup.repository.v1.RepositoryService.DeleteBackupRepository.
func (c *repositoryServiceClient) DeleteBackupRepository(ctx context.Context, req *connect.Request[v1.DeleteBackupRepositoryRequest]) (*connect.Response[v1.DeleteBackupRepositoryResponse], error) {
	return c.deleteBackupRepository.CallUnary(ctx, req)
}

// RepositoryServiceHandler is an implementation of the
// cloudstack.management.backup.repository.v1.RepositoryService service.
type RepositoryServiceHandler interface {
	// ListBackupRepositories Lists all backup repositories
	ListBackupRepositories(context.Context, *connect.Request[v1.ListBackupRepositoriesRequest]) (*connect.Response[v1.ListBackupRepositoriesResponse], error)
	// AddBackupRepository Adds a backup repository to store NAS backups
	AddBackupRepository(context.Context, *connect.Request[v1.AddBackupRepositoryRequest]) (*connect.Response[v1.AddBackupRepositoryResponse], error)
	// DeleteBackupRepository delete a backup repository
	DeleteBackupRepository(context.Context, *connect.Request[v1.DeleteBackupRepositoryRequest]) (*connect.Response[v1.DeleteBackupRepositoryResponse], error)
}

// NewRepositoryServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRepositoryServiceHandler(svc RepositoryServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	repositoryServiceMethods := v1.File_cloudstack_management_backup_repository_v1_repository_gen_proto.Services().ByName("RepositoryService").Methods()
	repositoryServiceListBackupRepositoriesHandler := connect.NewUnaryHandler(
		RepositoryServiceListBackupRepositoriesProcedure,
		svc.ListBackupRepositories,
		connect.WithSchema(repositoryServiceMethods.ByName("ListBackupRepositories")),
		connect.WithHandlerOptions(opts...),
	)
	repositoryServiceAddBackupRepositoryHandler := connect.NewUnaryHandler(
		RepositoryServiceAddBackupRepositoryProcedure,
		svc.AddBackupRepository,
		connect.WithSchema(repositoryServiceMethods.ByName("AddBackupRepository")),
		connect.WithHandlerOptions(opts...),
	)
	repositoryServiceDeleteBackupRepositoryHandler := connect.NewUnaryHandler(
		RepositoryServiceDeleteBackupRepositoryProcedure,
		svc.DeleteBackupRepository,
		connect.WithSchema(repositoryServiceMethods.ByName("DeleteBackupRepository")),
		connect.WithHandlerOptions(opts...),
	)
	return "/cloudstack.management.backup.repository.v1.RepositoryService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RepositoryServiceListBackupRepositoriesProcedure:
			repositoryServiceListBackupRepositoriesHandler.ServeHTTP(w, r)
		case RepositoryServiceAddBackupRepositoryProcedure:
			repositoryServiceAddBackupRepositoryHandler.ServeHTTP(w, r)
		case RepositoryServiceDeleteBackupRepositoryProcedure:
			repositoryServiceDeleteBackupRepositoryHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRepositoryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRepositoryServiceHandler struct{}

func (UnimplementedRepositoryServiceHandler) ListBackupRepositories(context.Context, *connect.Request[v1.ListBackupRepositoriesRequest]) (*connect.Response[v1.ListBackupRepositoriesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.backup.repository.v1.RepositoryService.ListBackupRepositories is not implemented"))
}

func (UnimplementedRepositoryServiceHandler) AddBackupRepository(context.Context, *connect.Request[v1.AddBackupRepositoryRequest]) (*connect.Response[v1.AddBackupRepositoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.backup.repository.v1.RepositoryService.AddBackupRepository is not implemented"))
}

func (UnimplementedRepositoryServiceHandler) DeleteBackupRepository(context.Context, *connect.Request[v1.DeleteBackupRepositoryRequest]) (*connect.Response[v1.DeleteBackupRepositoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.backup.repository.v1.RepositoryService.DeleteBackupRepository is not implemented"))
}
