// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cloudstack/management/management/v1/management.gen.proto

package managementv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/walteh/cloudstack-proxy/gen/proto/golang/cloudstack/management/management/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ManagementServiceName is the fully-qualified name of the ManagementService service.
	ManagementServiceName = "cloudstack.management.management.v1.ManagementService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ManagementServiceListMgmtsProcedure is the fully-qualified name of the ManagementService's
	// ListMgmts RPC.
	ManagementServiceListMgmtsProcedure = "/cloudstack.management.management.v1.ManagementService/ListMgmts"
)

// ManagementServiceClient is a client for the cloudstack.management.management.v1.ManagementService
// service.
type ManagementServiceClient interface {
	// ListMgmts Lists management servers.
	ListMgmts(context.Context, *connect.Request[v1.ListMgmtsRequest]) (*connect.Response[v1.ListMgmtsResponse], error)
}

// NewManagementServiceClient constructs a client for the
// cloudstack.management.management.v1.ManagementService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewManagementServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ManagementServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	managementServiceMethods := v1.File_cloudstack_management_management_v1_management_gen_proto.Services().ByName("ManagementService").Methods()
	return &managementServiceClient{
		listMgmts: connect.NewClient[v1.ListMgmtsRequest, v1.ListMgmtsResponse](
			httpClient,
			baseURL+ManagementServiceListMgmtsProcedure,
			connect.WithSchema(managementServiceMethods.ByName("ListMgmts")),
			connect.WithClientOptions(opts...),
		),
	}
}

// managementServiceClient implements ManagementServiceClient.
type managementServiceClient struct {
	listMgmts *connect.Client[v1.ListMgmtsRequest, v1.ListMgmtsResponse]
}

// ListMgmts calls cloudstack.management.management.v1.ManagementService.ListMgmts.
func (c *managementServiceClient) ListMgmts(ctx context.Context, req *connect.Request[v1.ListMgmtsRequest]) (*connect.Response[v1.ListMgmtsResponse], error) {
	return c.listMgmts.CallUnary(ctx, req)
}

// ManagementServiceHandler is an implementation of the
// cloudstack.management.management.v1.ManagementService service.
type ManagementServiceHandler interface {
	// ListMgmts Lists management servers.
	ListMgmts(context.Context, *connect.Request[v1.ListMgmtsRequest]) (*connect.Response[v1.ListMgmtsResponse], error)
}

// NewManagementServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewManagementServiceHandler(svc ManagementServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	managementServiceMethods := v1.File_cloudstack_management_management_v1_management_gen_proto.Services().ByName("ManagementService").Methods()
	managementServiceListMgmtsHandler := connect.NewUnaryHandler(
		ManagementServiceListMgmtsProcedure,
		svc.ListMgmts,
		connect.WithSchema(managementServiceMethods.ByName("ListMgmts")),
		connect.WithHandlerOptions(opts...),
	)
	return "/cloudstack.management.management.v1.ManagementService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ManagementServiceListMgmtsProcedure:
			managementServiceListMgmtsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedManagementServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedManagementServiceHandler struct{}

func (UnimplementedManagementServiceHandler) ListMgmts(context.Context, *connect.Request[v1.ListMgmtsRequest]) (*connect.Response[v1.ListMgmtsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.management.v1.ManagementService.ListMgmts is not implemented"))
}
