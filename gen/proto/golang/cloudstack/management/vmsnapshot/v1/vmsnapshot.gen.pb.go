// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: cloudstack/management/vmsnapshot/v1/vmsnapshot.gen.proto

package vmsnapshotv1

import (
	_ "github.com/walteh/cloudstack-proxy/gen/proto/golang/cloudstack/annotations"
	_ "github.com/walteh/cloudstack-proxy/gen/proto/golang/cloudstack/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CreateVMSnapshotRequest represents the parameters for creates snapshot for a vm.
type CreateVMSnapshotRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the vm
	VmId *int64 `protobuf:"varint,1,opt,name=vm_id,json=vmId" json:"vm_id,omitempty"`
	// The description of the snapshot
	Description *string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	// The display name of the snapshot
	DisplayName *string `protobuf:"bytes,3,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
	// snapshot memory if true
	SnapshotMemory *bool `protobuf:"varint,4,opt,name=snapshot_memory,json=snapshotMemory" json:"snapshot_memory,omitempty"`
	// quiesce vm if true
	Quiescevm *bool `protobuf:"varint,5,opt,name=quiescevm" json:"quiescevm,omitempty"`
	StartEventId *int64 `protobuf:"varint,6,opt,name=start_event_id,json=startEventId" json:"start_event_id,omitempty"`
	InjectedJobId *string `protobuf:"bytes,7,opt,name=injected_job_id,json=injectedJobId" json:"injected_job_id,omitempty"`
	ResponseType  *string `protobuf:"bytes,8,opt,name=response_type,json=responseType" json:"response_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateVMSnapshotRequest) Reset() {
	*x = CreateVMSnapshotRequest{}
	mi := &file_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateVMSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVMSnapshotRequest) ProtoMessage() {}

func (x *CreateVMSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVMSnapshotRequest.ProtoReflect.Descriptor instead.
func (*CreateVMSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto_rawDescGZIP(), []int{0}
}

func (x *CreateVMSnapshotRequest) GetVmId() int64 {
	if x != nil && x.VmId != nil {
		return *x.VmId
	}
	return 0
}

func (x *CreateVMSnapshotRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CreateVMSnapshotRequest) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *CreateVMSnapshotRequest) GetSnapshotMemory() bool {
	if x != nil && x.SnapshotMemory != nil {
		return *x.SnapshotMemory
	}
	return false
}

func (x *CreateVMSnapshotRequest) GetQuiescevm() bool {
	if x != nil && x.Quiescevm != nil {
		return *x.Quiescevm
	}
	return false
}

func (x *CreateVMSnapshotRequest) GetStartEventId() int64 {
	if x != nil && x.StartEventId != nil {
		return *x.StartEventId
	}
	return 0
}

func (x *CreateVMSnapshotRequest) GetInjectedJobId() string {
	if x != nil && x.InjectedJobId != nil {
		return *x.InjectedJobId
	}
	return ""
}

func (x *CreateVMSnapshotRequest) GetResponseType() string {
	if x != nil && x.ResponseType != nil {
		return *x.ResponseType
	}
	return ""
}

// CreateVMSnapshotResponse represents the response from creates snapshot for a vm.
type CreateVMSnapshotResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Result
	Result        *Result `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateVMSnapshotResponse) Reset() {
	*x = CreateVMSnapshotResponse{}
	mi := &file_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateVMSnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVMSnapshotResponse) ProtoMessage() {}

func (x *CreateVMSnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVMSnapshotResponse.ProtoReflect.Descriptor instead.
func (*CreateVMSnapshotResponse) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto_rawDescGZIP(), []int{1}
}

func (x *CreateVMSnapshotResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

// DeleteVMSnapshotRequest represents the parameters for deletes a vmsnapshot.
type DeleteVMSnapshotRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the VM snapshot
	Id *int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	StartEventId *int64 `protobuf:"varint,2,opt,name=start_event_id,json=startEventId" json:"start_event_id,omitempty"`
	InjectedJobId *string `protobuf:"bytes,3,opt,name=injected_job_id,json=injectedJobId" json:"injected_job_id,omitempty"`
	ResponseType  *string `protobuf:"bytes,4,opt,name=response_type,json=responseType" json:"response_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteVMSnapshotRequest) Reset() {
	*x = DeleteVMSnapshotRequest{}
	mi := &file_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteVMSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVMSnapshotRequest) ProtoMessage() {}

func (x *DeleteVMSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVMSnapshotRequest.ProtoReflect.Descriptor instead.
func (*DeleteVMSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteVMSnapshotRequest) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *DeleteVMSnapshotRequest) GetStartEventId() int64 {
	if x != nil && x.StartEventId != nil {
		return *x.StartEventId
	}
	return 0
}

func (x *DeleteVMSnapshotRequest) GetInjectedJobId() string {
	if x != nil && x.InjectedJobId != nil {
		return *x.InjectedJobId
	}
	return ""
}

func (x *DeleteVMSnapshotRequest) GetResponseType() string {
	if x != nil && x.ResponseType != nil {
		return *x.ResponseType
	}
	return ""
}

// DeleteVMSnapshotResponse represents the response from deletes a vmsnapshot.
type DeleteVMSnapshotResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Result
	Result        *Result `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteVMSnapshotResponse) Reset() {
	*x = DeleteVMSnapshotResponse{}
	mi := &file_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteVMSnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVMSnapshotResponse) ProtoMessage() {}

func (x *DeleteVMSnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVMSnapshotResponse.ProtoReflect.Descriptor instead.
func (*DeleteVMSnapshotResponse) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteVMSnapshotResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

// ListVMSnapshotRequest represents the parameters for list virtual machine snapshot by conditions
type ListVMSnapshotRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the VM snapshot
	Id *int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// the IDs of the vm snapshots, mutually exclusive with vmsnapshotid
	Ids []string `protobuf:"bytes,2,rep,name=ids" json:"ids,omitempty"`
	// state of the virtual machine snapshot
	State *string `protobuf:"bytes,3,opt,name=state" json:"state,omitempty"`
	// the ID of the vm
	VmId *int64 `protobuf:"varint,4,opt,name=vm_id,json=vmId" json:"vm_id,omitempty"`
	// lists snapshot by snapshot name or display name
	VmSnapshotName *string `protobuf:"bytes,5,opt,name=vm_snapshot_name,json=vmSnapshotName" json:"vm_snapshot_name,omitempty"`
	// List resources by tags (key/value pairs)
	Tags map[string]string `protobuf:"bytes,6,rep,name=tags" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// list objects by project; if projectid=-1 lists All VMs
	ProjectId *int64 `protobuf:"varint,7,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	// list resources by account. Must be used with the domainId parameter.
	AccountName *string `protobuf:"bytes,8,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	// If set to false, list only resources belonging to the command's caller; if set to true - list resources that the caller is authorized to see. Default value is false. Resources dedicated to a project are listed only if using the projectid parameter.
	ListAll *bool `protobuf:"varint,9,opt,name=list_all,json=listAll" json:"list_all,omitempty"`
	// list only resources belonging to the domain specified
	DomainId *int64 `protobuf:"varint,10,opt,name=domain_id,json=domainId" json:"domain_id,omitempty"`
	// defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.
	Recursive *bool `protobuf:"varint,11,opt,name=recursive" json:"recursive,omitempty"`
	// List by keyword
	Keyword *string `protobuf:"bytes,12,opt,name=keyword" json:"keyword,omitempty"`
	Page *int32 `protobuf:"varint,13,opt,name=page" json:"page,omitempty"`
	PageSize *int32 `protobuf:"varint,14,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	ResponseType  *string `protobuf:"bytes,15,opt,name=response_type,json=responseType" json:"response_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListVMSnapshotRequest) Reset() {
	*x = ListVMSnapshotRequest{}
	mi := &file_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVMSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVMSnapshotRequest) ProtoMessage() {}

func (x *ListVMSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVMSnapshotRequest.ProtoReflect.Descriptor instead.
func (*ListVMSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto_rawDescGZIP(), []int{4}
}

func (x *ListVMSnapshotRequest) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ListVMSnapshotRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *ListVMSnapshotRequest) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

func (x *ListVMSnapshotRequest) GetVmId() int64 {
	if x != nil && x.VmId != nil {
		return *x.VmId
	}
	return 0
}

func (x *ListVMSnapshotRequest) GetVmSnapshotName() string {
	if x != nil && x.VmSnapshotName != nil {
		return *x.VmSnapshotName
	}
	return ""
}

func (x *ListVMSnapshotRequest) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ListVMSnapshotRequest) GetProjectId() int64 {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return 0
}

func (x *ListVMSnapshotRequest) GetAccountName() string {
	if x != nil && x.AccountName != nil {
		return *x.AccountName
	}
	return ""
}

func (x *ListVMSnapshotRequest) GetListAll() bool {
	if x != nil && x.ListAll != nil {
		return *x.ListAll
	}
	return false
}

func (x *ListVMSnapshotRequest) GetDomainId() int64 {
	if x != nil && x.DomainId != nil {
		return *x.DomainId
	}
	return 0
}

func (x *ListVMSnapshotRequest) GetRecursive() bool {
	if x != nil && x.Recursive != nil {
		return *x.Recursive
	}
	return false
}

func (x *ListVMSnapshotRequest) GetKeyword() string {
	if x != nil && x.Keyword != nil {
		return *x.Keyword
	}
	return ""
}

func (x *ListVMSnapshotRequest) GetPage() int32 {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return 0
}

func (x *ListVMSnapshotRequest) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *ListVMSnapshotRequest) GetResponseType() string {
	if x != nil && x.ResponseType != nil {
		return *x.ResponseType
	}
	return ""
}

// ListVMSnapshotResponse represents the response from list virtual machine snapshot by conditions
type ListVMSnapshotResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The list of VMSnapshots
	Items []*VMSnapshot `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	// The total count of VMSnapshots
	TotalCount    *int32 `protobuf:"varint,2,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListVMSnapshotResponse) Reset() {
	*x = ListVMSnapshotResponse{}
	mi := &file_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVMSnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVMSnapshotResponse) ProtoMessage() {}

func (x *ListVMSnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVMSnapshotResponse.ProtoReflect.Descriptor instead.
func (*ListVMSnapshotResponse) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto_rawDescGZIP(), []int{5}
}

func (x *ListVMSnapshotResponse) GetItems() []*VMSnapshot {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListVMSnapshotResponse) GetTotalCount() int32 {
	if x != nil && x.TotalCount != nil {
		return *x.TotalCount
	}
	return 0
}

// RevertToVMSnapshotRequest represents the parameters for revert vm from a vmsnapshot.
type RevertToVMSnapshotRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether to run this operation as an administrator
	RunAsAdmin *bool `protobuf:"varint,1,opt,name=run_as_admin,json=runAsAdmin" json:"run_as_admin,omitempty"`
	// The ID of the vm snapshot
	VmSnapShotId *int64 `protobuf:"varint,2,opt,name=vm_snap_shot_id,json=vmSnapShotId" json:"vm_snap_shot_id,omitempty"`
	StartEventId *int64 `protobuf:"varint,3,opt,name=start_event_id,json=startEventId" json:"start_event_id,omitempty"`
	InjectedJobId *string `protobuf:"bytes,4,opt,name=injected_job_id,json=injectedJobId" json:"injected_job_id,omitempty"`
	ResponseType  *string `protobuf:"bytes,5,opt,name=response_type,json=responseType" json:"response_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RevertToVMSnapshotRequest) Reset() {
	*x = RevertToVMSnapshotRequest{}
	mi := &file_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RevertToVMSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevertToVMSnapshotRequest) ProtoMessage() {}

func (x *RevertToVMSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevertToVMSnapshotRequest.ProtoReflect.Descriptor instead.
func (*RevertToVMSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto_rawDescGZIP(), []int{6}
}

func (x *RevertToVMSnapshotRequest) GetRunAsAdmin() bool {
	if x != nil && x.RunAsAdmin != nil {
		return *x.RunAsAdmin
	}
	return false
}

func (x *RevertToVMSnapshotRequest) GetVmSnapShotId() int64 {
	if x != nil && x.VmSnapShotId != nil {
		return *x.VmSnapShotId
	}
	return 0
}

func (x *RevertToVMSnapshotRequest) GetStartEventId() int64 {
	if x != nil && x.StartEventId != nil {
		return *x.StartEventId
	}
	return 0
}

func (x *RevertToVMSnapshotRequest) GetInjectedJobId() string {
	if x != nil && x.InjectedJobId != nil {
		return *x.InjectedJobId
	}
	return ""
}

func (x *RevertToVMSnapshotRequest) GetResponseType() string {
	if x != nil && x.ResponseType != nil {
		return *x.ResponseType
	}
	return ""
}

// RevertToVMSnapshotResponse represents the response from revert vm from a vmsnapshot.
type RevertToVMSnapshotResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Result
	Result        *Result `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RevertToVMSnapshotResponse) Reset() {
	*x = RevertToVMSnapshotResponse{}
	mi := &file_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RevertToVMSnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevertToVMSnapshotResponse) ProtoMessage() {}

func (x *RevertToVMSnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevertToVMSnapshotResponse.ProtoReflect.Descriptor instead.
func (*RevertToVMSnapshotResponse) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto_rawDescGZIP(), []int{7}
}

func (x *RevertToVMSnapshotResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

// RevertToVMSnapshotCmdByAdminRequest represents the parameters for revert vm from a vmsnapshot.
type RevertToVMSnapshotCmdByAdminRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the vm snapshot
	VmSnapShotId *int64 `protobuf:"varint,1,opt,name=vm_snap_shot_id,json=vmSnapShotId" json:"vm_snap_shot_id,omitempty"`
	StartEventId *int64 `protobuf:"varint,2,opt,name=start_event_id,json=startEventId" json:"start_event_id,omitempty"`
	InjectedJobId *string `protobuf:"bytes,3,opt,name=injected_job_id,json=injectedJobId" json:"injected_job_id,omitempty"`
	ResponseType  *string `protobuf:"bytes,4,opt,name=response_type,json=responseType" json:"response_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RevertToVMSnapshotCmdByAdminRequest) Reset() {
	*x = RevertToVMSnapshotCmdByAdminRequest{}
	mi := &file_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RevertToVMSnapshotCmdByAdminRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevertToVMSnapshotCmdByAdminRequest) ProtoMessage() {}

func (x *RevertToVMSnapshotCmdByAdminRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevertToVMSnapshotCmdByAdminRequest.ProtoReflect.Descriptor instead.
func (*RevertToVMSnapshotCmdByAdminRequest) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto_rawDescGZIP(), []int{8}
}

func (x *RevertToVMSnapshotCmdByAdminRequest) GetVmSnapShotId() int64 {
	if x != nil && x.VmSnapShotId != nil {
		return *x.VmSnapShotId
	}
	return 0
}

func (x *RevertToVMSnapshotCmdByAdminRequest) GetStartEventId() int64 {
	if x != nil && x.StartEventId != nil {
		return *x.StartEventId
	}
	return 0
}

func (x *RevertToVMSnapshotCmdByAdminRequest) GetInjectedJobId() string {
	if x != nil && x.InjectedJobId != nil {
		return *x.InjectedJobId
	}
	return ""
}

func (x *RevertToVMSnapshotCmdByAdminRequest) GetResponseType() string {
	if x != nil && x.ResponseType != nil {
		return *x.ResponseType
	}
	return ""
}

// RevertToVMSnapshotCmdByAdminResponse represents the response from revert vm from a vmsnapshot.
type RevertToVMSnapshotCmdByAdminResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Result
	Result        *Result `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RevertToVMSnapshotCmdByAdminResponse) Reset() {
	*x = RevertToVMSnapshotCmdByAdminResponse{}
	mi := &file_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RevertToVMSnapshotCmdByAdminResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevertToVMSnapshotCmdByAdminResponse) ProtoMessage() {}

func (x *RevertToVMSnapshotCmdByAdminResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevertToVMSnapshotCmdByAdminResponse.ProtoReflect.Descriptor instead.
func (*RevertToVMSnapshotCmdByAdminResponse) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto_rawDescGZIP(), []int{9}
}

func (x *RevertToVMSnapshotCmdByAdminResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

// VMSnapshot represents a VMSnapshot Item
type VMSnapshot struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the VMSnapshot
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The name of the VMSnapshot
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// The display name of the VMSnapshot
	DisplayName *string `protobuf:"bytes,3,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
	// The description of the VMSnapshot
	Description *string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	// The date this entity was created
	Created       *string `protobuf:"bytes,5,opt,name=created" json:"created,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VMSnapshot) Reset() {
	*x = VMSnapshot{}
	mi := &file_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VMSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VMSnapshot) ProtoMessage() {}

func (x *VMSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VMSnapshot.ProtoReflect.Descriptor instead.
func (*VMSnapshot) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto_rawDescGZIP(), []int{10}
}

func (x *VMSnapshot) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *VMSnapshot) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *VMSnapshot) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *VMSnapshot) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *VMSnapshot) GetCreated() string {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return ""
}

// Success represents a Success Operation Response
type Success struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// true if operation is executed successfully
	Success *bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	// any text associated with the success or failure
	DisplayText   *string `protobuf:"bytes,2,opt,name=display_text,json=displayText" json:"display_text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Success) Reset() {
	*x = Success{}
	mi := &file_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Success) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Success) ProtoMessage() {}

func (x *Success) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Success.ProtoReflect.Descriptor instead.
func (*Success) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto_rawDescGZIP(), []int{11}
}

func (x *Success) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *Success) GetDisplayText() string {
	if x != nil && x.DisplayText != nil {
		return *x.DisplayText
	}
	return ""
}

// Result represents a generic operation result
type Result struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether the operation was successful
	Success *bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	// Any text associated with the success or failure
	DisplayText *string `protobuf:"bytes,2,opt,name=display_text,json=displayText" json:"display_text,omitempty"`
	// The ID of the resource affected by the operation
	Id *string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	// The job ID for an async operation
	JobId *string `protobuf:"bytes,4,opt,name=job_id,json=jobId" json:"job_id,omitempty"`
	// The status of the job
	JobStatus     *string `protobuf:"bytes,5,opt,name=job_status,json=jobStatus" json:"job_status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Result) Reset() {
	*x = Result{}
	mi := &file_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto_rawDescGZIP(), []int{12}
}

func (x *Result) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *Result) GetDisplayText() string {
	if x != nil && x.DisplayText != nil {
		return *x.DisplayText
	}
	return ""
}

func (x *Result) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Result) GetJobId() string {
	if x != nil && x.JobId != nil {
		return *x.JobId
	}
	return ""
}

func (x *Result) GetJobStatus() string {
	if x != nil && x.JobStatus != nil {
		return *x.JobStatus
	}
	return ""
}

var File_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto protoreflect.FileDescriptor

const file_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto_rawDesc = "" +
	"\n" +
	"8cloudstack/management/vmsnapshot/v1/vmsnapshot.gen.proto\x12#cloudstack.management.vmsnapshot.v1\x1a(cloudstack/annotations/annotations.proto\x1a\"cloudstack/validate/validate.proto\x1a google/protobuf/descriptor.proto\"\xe5\x02\n" +
	"\x17CreateVMSnapshotRequest\x12\x1b\n" +
	"\x05vm_id\x18\x01 \x01(\x03B\x06\xbaH\x03\xc8\x01\x01R\x04vmId\x12,\n" +
	"\vdescription\x18\x02 \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x01\x18\x80\bR\vdescription\x12-\n" +
	"\fdisplay_name\x18\x03 \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x01\x18\xff\x01R\vdisplayName\x12.\n" +
	"\x0fsnapshot_memory\x18\x04 \x01(\bB\x05\xaa\x01\x02\b\x01R\x0esnapshotMemory\x12#\n" +
	"\tquiescevm\x18\x05 \x01(\bB\x05\xaa\x01\x02\b\x01R\tquiescevm\x12$\n" +
	"\x0estart_event_id\x18\x06 \x01(\x03R\fstartEventId\x120\n" +
	"\x0finjected_job_id\x18\a \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\rinjectedJobId\x12#\n" +
	"\rresponse_type\x18\b \x01(\tR\fresponseType\"_\n" +
	"\x18CreateVMSnapshotResponse\x12C\n" +
	"\x06result\x18\x01 \x01(\v2+.cloudstack.management.vmsnapshot.v1.ResultR\x06result\"\xae\x01\n" +
	"\x17DeleteVMSnapshotRequest\x12\x16\n" +
	"\x02id\x18\x01 \x01(\x03B\x06\xbaH\x03\xc8\x01\x01R\x02id\x12$\n" +
	"\x0estart_event_id\x18\x02 \x01(\x03R\fstartEventId\x120\n" +
	"\x0finjected_job_id\x18\x03 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\rinjectedJobId\x12#\n" +
	"\rresponse_type\x18\x04 \x01(\tR\fresponseType\"_\n" +
	"\x18DeleteVMSnapshotResponse\x12C\n" +
	"\x06result\x18\x01 \x01(\v2+.cloudstack.management.vmsnapshot.v1.ResultR\x06result\"\xc3\x05\n" +
	"\x15ListVMSnapshotRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x10\n" +
	"\x03ids\x18\x02 \x03(\tR\x03ids\x12\x14\n" +
	"\x05state\x18\x03 \x01(\tR\x05state\x12\x13\n" +
	"\x05vm_id\x18\x04 \x01(\x03R\x04vmId\x124\n" +
	"\x10vm_snapshot_name\x18\x05 \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x01\x18\xff\x01R\x0evmSnapshotName\x12X\n" +
	"\x04tags\x18\x06 \x03(\v2D.cloudstack.management.vmsnapshot.v1.ListVMSnapshotRequest.TagsEntryR\x04tags\x12\x1d\n" +
	"\n" +
	"project_id\x18\a \x01(\x03R\tprojectId\x12\xa0\x01\n" +
	"\faccount_name\x18\b \x01(\tB}\xbaHz\xba\x01w\n" +
	"\x1baccount_name_with_domain_id\x122account_name must be used with domain_id parameter\x1a$!has(account_name) || has(domain_id)R\vaccountName\x12 \n" +
	"\blist_all\x18\t \x01(\bB\x05\xaa\x01\x02\b\x01R\alistAll\x12\x1b\n" +
	"\tdomain_id\x18\n" +
	" \x01(\x03R\bdomainId\x12#\n" +
	"\trecursive\x18\v \x01(\bB\x05\xaa\x01\x02\b\x01R\trecursive\x12\x18\n" +
	"\akeyword\x18\f \x01(\tR\akeyword\x12\x12\n" +
	"\x04page\x18\r \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\x0e \x01(\x05R\bpageSize\x12#\n" +
	"\rresponse_type\x18\x0f \x01(\tR\fresponseType\x1a7\n" +
	"\tTagsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x87\x01\n" +
	"\x16ListVMSnapshotResponse\x12E\n" +
	"\x05items\x18\x01 \x03(\v2/.cloudstack.management.vmsnapshot.v1.VMSnapshotR\x05items\x12\x1f\n" +
	"\vtotal_count\x18\x02 \x01(\x05R\n" +
	"totalCount:\x05\xbaH\x02\b\x00\"\xe9\x01\n" +
	"\x19RevertToVMSnapshotRequest\x12 \n" +
	"\frun_as_admin\x18\x01 \x01(\bR\n" +
	"runAsAdmin\x12-\n" +
	"\x0fvm_snap_shot_id\x18\x02 \x01(\x03B\x06\xbaH\x03\xc8\x01\x01R\fvmSnapShotId\x12$\n" +
	"\x0estart_event_id\x18\x03 \x01(\x03R\fstartEventId\x120\n" +
	"\x0finjected_job_id\x18\x04 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\rinjectedJobId\x12#\n" +
	"\rresponse_type\x18\x05 \x01(\tR\fresponseType\"a\n" +
	"\x1aRevertToVMSnapshotResponse\x12C\n" +
	"\x06result\x18\x01 \x01(\v2+.cloudstack.management.vmsnapshot.v1.ResultR\x06result\"\xd1\x01\n" +
	"#RevertToVMSnapshotCmdByAdminRequest\x12-\n" +
	"\x0fvm_snap_shot_id\x18\x01 \x01(\x03B\x06\xbaH\x03\xc8\x01\x01R\fvmSnapShotId\x12$\n" +
	"\x0estart_event_id\x18\x02 \x01(\x03R\fstartEventId\x120\n" +
	"\x0finjected_job_id\x18\x03 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\rinjectedJobId\x12#\n" +
	"\rresponse_type\x18\x04 \x01(\tR\fresponseType\"k\n" +
	"$RevertToVMSnapshotCmdByAdminResponse\x12C\n" +
	"\x06result\x18\x01 \x01(\v2+.cloudstack.management.vmsnapshot.v1.ResultR\x06result\"\x99\x01\n" +
	"\n" +
	"VMSnapshot\x12\x18\n" +
	"\x02id\x18\x01 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12!\n" +
	"\fdisplay_name\x18\x03 \x01(\tR\vdisplayName\x12 \n" +
	"\vdescription\x18\x04 \x01(\tR\vdescription\x12\x18\n" +
	"\acreated\x18\x05 \x01(\tR\acreated\"F\n" +
	"\aSuccess\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12!\n" +
	"\fdisplay_text\x18\x02 \x01(\tR\vdisplayText\"\x9f\x01\n" +
	"\x06Result\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12!\n" +
	"\fdisplay_text\x18\x02 \x01(\tR\vdisplayText\x12\x18\n" +
	"\x02id\x18\x03 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\x02id\x12\x1f\n" +
	"\x06job_id\x18\x04 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\x05jobId\x12\x1d\n" +
	"\n" +
	"job_status\x18\x05 \x01(\tR\tjobStatus2\xc8\x06\n" +
	"\x11VmsnapshotService\x12\x98\x01\n" +
	"\x10CreateVMSnapshot\x12<.cloudstack.management.vmsnapshot.v1.CreateVMSnapshotRequest\x1a=.cloudstack.management.vmsnapshot.v1.CreateVMSnapshotResponse\"\a\xc2>\x04\xc2>\x01\x02\x12\x98\x01\n" +
	"\x10DeleteVMSnapshot\x12<.cloudstack.management.vmsnapshot.v1.DeleteVMSnapshotRequest\x1a=.cloudstack.management.vmsnapshot.v1.DeleteVMSnapshotResponse\"\a\xc2>\x04\xc2>\x01\x02\x12\x92\x01\n" +
	"\x0eListVMSnapshot\x12:.cloudstack.management.vmsnapshot.v1.ListVMSnapshotRequest\x1a;.cloudstack.management.vmsnapshot.v1.ListVMSnapshotResponse\"\a\xc2>\x04\xc2>\x01\x02\x12\x9f\x01\n" +
	"\x12RevertToVMSnapshot\x12>.cloudstack.management.vmsnapshot.v1.RevertToVMSnapshotRequest\x1a?.cloudstack.management.vmsnapshot.v1.RevertToVMSnapshotResponse\"\b\xc2>\x05\xc2>\x02\x01\x02\x12\xbc\x01\n" +
	"\x1cRevertToVMSnapshotCmdByAdmin\x12H.cloudstack.management.vmsnapshot.v1.RevertToVMSnapshotCmdByAdminRequest\x1aI.cloudstack.management.vmsnapshot.v1.RevertToVMSnapshotCmdByAdminResponse\"\a\xc2>\x04\xc2>\x01\x02\x1a\a\xc2>\x04\xc2>\x01\x02B\xd2\x02\n" +
	"'com.cloudstack.management.vmsnapshot.v1B\x12VmsnapshotGenProtoP\x01Zdgithub.com/walteh/cloudstack-proxy/gen/proto/golang/cloudstack/management/vmsnapshot/v1;vmsnapshotv1\xa2\x02\x03CMV\xaa\x02#Cloudstack.Management.Vmsnapshot.V1\xca\x02#Cloudstack\\Management\\Vmsnapshot\\V1\xe2\x02/Cloudstack\\Management\\Vmsnapshot\\V1\\GPBMetadata\xea\x02&Cloudstack::Management::Vmsnapshot::V1b\beditionsp\xe8\a"

var (
	file_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto_rawDescOnce sync.Once
	file_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto_rawDescData []byte
)

func file_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto_rawDescGZIP() []byte {
	file_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto_rawDescOnce.Do(func() {
		file_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto_rawDesc), len(file_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto_rawDesc)))
	})
	return file_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto_rawDescData
}

var file_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto_goTypes = []any{
	(*CreateVMSnapshotRequest)(nil),              // 0: cloudstack.management.vmsnapshot.v1.CreateVMSnapshotRequest
	(*CreateVMSnapshotResponse)(nil),             // 1: cloudstack.management.vmsnapshot.v1.CreateVMSnapshotResponse
	(*DeleteVMSnapshotRequest)(nil),              // 2: cloudstack.management.vmsnapshot.v1.DeleteVMSnapshotRequest
	(*DeleteVMSnapshotResponse)(nil),             // 3: cloudstack.management.vmsnapshot.v1.DeleteVMSnapshotResponse
	(*ListVMSnapshotRequest)(nil),                // 4: cloudstack.management.vmsnapshot.v1.ListVMSnapshotRequest
	(*ListVMSnapshotResponse)(nil),               // 5: cloudstack.management.vmsnapshot.v1.ListVMSnapshotResponse
	(*RevertToVMSnapshotRequest)(nil),            // 6: cloudstack.management.vmsnapshot.v1.RevertToVMSnapshotRequest
	(*RevertToVMSnapshotResponse)(nil),           // 7: cloudstack.management.vmsnapshot.v1.RevertToVMSnapshotResponse
	(*RevertToVMSnapshotCmdByAdminRequest)(nil),  // 8: cloudstack.management.vmsnapshot.v1.RevertToVMSnapshotCmdByAdminRequest
	(*RevertToVMSnapshotCmdByAdminResponse)(nil), // 9: cloudstack.management.vmsnapshot.v1.RevertToVMSnapshotCmdByAdminResponse
	(*VMSnapshot)(nil),                           // 10: cloudstack.management.vmsnapshot.v1.VMSnapshot
	(*Success)(nil),                              // 11: cloudstack.management.vmsnapshot.v1.Success
	(*Result)(nil),                               // 12: cloudstack.management.vmsnapshot.v1.Result
	nil,                                          // 13: cloudstack.management.vmsnapshot.v1.ListVMSnapshotRequest.TagsEntry
}
var file_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto_depIdxs = []int32{
	12, // 0: cloudstack.management.vmsnapshot.v1.CreateVMSnapshotResponse.result:type_name -> cloudstack.management.vmsnapshot.v1.Result
	12, // 1: cloudstack.management.vmsnapshot.v1.DeleteVMSnapshotResponse.result:type_name -> cloudstack.management.vmsnapshot.v1.Result
	13, // 2: cloudstack.management.vmsnapshot.v1.ListVMSnapshotRequest.tags:type_name -> cloudstack.management.vmsnapshot.v1.ListVMSnapshotRequest.TagsEntry
	10, // 3: cloudstack.management.vmsnapshot.v1.ListVMSnapshotResponse.items:type_name -> cloudstack.management.vmsnapshot.v1.VMSnapshot
	12, // 4: cloudstack.management.vmsnapshot.v1.RevertToVMSnapshotResponse.result:type_name -> cloudstack.management.vmsnapshot.v1.Result
	12, // 5: cloudstack.management.vmsnapshot.v1.RevertToVMSnapshotCmdByAdminResponse.result:type_name -> cloudstack.management.vmsnapshot.v1.Result
	0,  // 6: cloudstack.management.vmsnapshot.v1.VmsnapshotService.CreateVMSnapshot:input_type -> cloudstack.management.vmsnapshot.v1.CreateVMSnapshotRequest
	2,  // 7: cloudstack.management.vmsnapshot.v1.VmsnapshotService.DeleteVMSnapshot:input_type -> cloudstack.management.vmsnapshot.v1.DeleteVMSnapshotRequest
	4,  // 8: cloudstack.management.vmsnapshot.v1.VmsnapshotService.ListVMSnapshot:input_type -> cloudstack.management.vmsnapshot.v1.ListVMSnapshotRequest
	6,  // 9: cloudstack.management.vmsnapshot.v1.VmsnapshotService.RevertToVMSnapshot:input_type -> cloudstack.management.vmsnapshot.v1.RevertToVMSnapshotRequest
	8,  // 10: cloudstack.management.vmsnapshot.v1.VmsnapshotService.RevertToVMSnapshotCmdByAdmin:input_type -> cloudstack.management.vmsnapshot.v1.RevertToVMSnapshotCmdByAdminRequest
	1,  // 11: cloudstack.management.vmsnapshot.v1.VmsnapshotService.CreateVMSnapshot:output_type -> cloudstack.management.vmsnapshot.v1.CreateVMSnapshotResponse
	3,  // 12: cloudstack.management.vmsnapshot.v1.VmsnapshotService.DeleteVMSnapshot:output_type -> cloudstack.management.vmsnapshot.v1.DeleteVMSnapshotResponse
	5,  // 13: cloudstack.management.vmsnapshot.v1.VmsnapshotService.ListVMSnapshot:output_type -> cloudstack.management.vmsnapshot.v1.ListVMSnapshotResponse
	7,  // 14: cloudstack.management.vmsnapshot.v1.VmsnapshotService.RevertToVMSnapshot:output_type -> cloudstack.management.vmsnapshot.v1.RevertToVMSnapshotResponse
	9,  // 15: cloudstack.management.vmsnapshot.v1.VmsnapshotService.RevertToVMSnapshotCmdByAdmin:output_type -> cloudstack.management.vmsnapshot.v1.RevertToVMSnapshotCmdByAdminResponse
	11, // [11:16] is the sub-list for method output_type
	6,  // [6:11] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto_init() }
func file_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto_init() {
	if File_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto_rawDesc), len(file_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto_goTypes,
		DependencyIndexes: file_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto_depIdxs,
		MessageInfos:      file_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto_msgTypes,
	}.Build()
	File_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto = out.File
	file_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto_goTypes = nil
	file_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto_depIdxs = nil
}
