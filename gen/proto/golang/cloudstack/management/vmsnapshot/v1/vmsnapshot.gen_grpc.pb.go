// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: cloudstack/management/vmsnapshot/v1/vmsnapshot.gen.proto

package vmsnapshotv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VmsnapshotService_CreateVMSnapshot_FullMethodName             = "/cloudstack.management.vmsnapshot.v1.VmsnapshotService/CreateVMSnapshot"
	VmsnapshotService_RevertToVMSnapshotCmdByAdmin_FullMethodName = "/cloudstack.management.vmsnapshot.v1.VmsnapshotService/RevertToVMSnapshotCmdByAdmin"
	VmsnapshotService_DeleteVMSnapshot_FullMethodName             = "/cloudstack.management.vmsnapshot.v1.VmsnapshotService/DeleteVMSnapshot"
	VmsnapshotService_RevertToVMSnapshot_FullMethodName           = "/cloudstack.management.vmsnapshot.v1.VmsnapshotService/RevertToVMSnapshot"
	VmsnapshotService_ListVMSnapshot_FullMethodName               = "/cloudstack.management.vmsnapshot.v1.VmsnapshotService/ListVMSnapshot"
)

// VmsnapshotServiceClient is the client API for VmsnapshotService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// VmsnapshotService provides operations for managing Vmsnapshots
type VmsnapshotServiceClient interface {
	// CreateVMSnapshot Creates snapshot for a vm.
	CreateVMSnapshot(ctx context.Context, in *CreateVMSnapshotRequest, opts ...grpc.CallOption) (*CreateVMSnapshotResponse, error)
	// RevertToVMSnapshotCmdByAdmin Revert VM from a vmsnapshot.
	RevertToVMSnapshotCmdByAdmin(ctx context.Context, in *RevertToVMSnapshotCmdByAdminRequest, opts ...grpc.CallOption) (*RevertToVMSnapshotCmdByAdminResponse, error)
	// DeleteVMSnapshot Deletes a vmsnapshot.
	DeleteVMSnapshot(ctx context.Context, in *DeleteVMSnapshotRequest, opts ...grpc.CallOption) (*DeleteVMSnapshotResponse, error)
	// RevertToVMSnapshot Revert VM from a vmsnapshot.
	RevertToVMSnapshot(ctx context.Context, in *RevertToVMSnapshotRequest, opts ...grpc.CallOption) (*RevertToVMSnapshotResponse, error)
	// ListVMSnapshot List virtual machine snapshot by conditions
	ListVMSnapshot(ctx context.Context, in *ListVMSnapshotRequest, opts ...grpc.CallOption) (*ListVMSnapshotResponse, error)
}

type vmsnapshotServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVmsnapshotServiceClient(cc grpc.ClientConnInterface) VmsnapshotServiceClient {
	return &vmsnapshotServiceClient{cc}
}

func (c *vmsnapshotServiceClient) CreateVMSnapshot(ctx context.Context, in *CreateVMSnapshotRequest, opts ...grpc.CallOption) (*CreateVMSnapshotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateVMSnapshotResponse)
	err := c.cc.Invoke(ctx, VmsnapshotService_CreateVMSnapshot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vmsnapshotServiceClient) RevertToVMSnapshotCmdByAdmin(ctx context.Context, in *RevertToVMSnapshotCmdByAdminRequest, opts ...grpc.CallOption) (*RevertToVMSnapshotCmdByAdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevertToVMSnapshotCmdByAdminResponse)
	err := c.cc.Invoke(ctx, VmsnapshotService_RevertToVMSnapshotCmdByAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vmsnapshotServiceClient) DeleteVMSnapshot(ctx context.Context, in *DeleteVMSnapshotRequest, opts ...grpc.CallOption) (*DeleteVMSnapshotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteVMSnapshotResponse)
	err := c.cc.Invoke(ctx, VmsnapshotService_DeleteVMSnapshot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vmsnapshotServiceClient) RevertToVMSnapshot(ctx context.Context, in *RevertToVMSnapshotRequest, opts ...grpc.CallOption) (*RevertToVMSnapshotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevertToVMSnapshotResponse)
	err := c.cc.Invoke(ctx, VmsnapshotService_RevertToVMSnapshot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vmsnapshotServiceClient) ListVMSnapshot(ctx context.Context, in *ListVMSnapshotRequest, opts ...grpc.CallOption) (*ListVMSnapshotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVMSnapshotResponse)
	err := c.cc.Invoke(ctx, VmsnapshotService_ListVMSnapshot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VmsnapshotServiceServer is the server API for VmsnapshotService service.
// All implementations must embed UnimplementedVmsnapshotServiceServer
// for forward compatibility.
//
// VmsnapshotService provides operations for managing Vmsnapshots
type VmsnapshotServiceServer interface {
	// CreateVMSnapshot Creates snapshot for a vm.
	CreateVMSnapshot(context.Context, *CreateVMSnapshotRequest) (*CreateVMSnapshotResponse, error)
	// RevertToVMSnapshotCmdByAdmin Revert VM from a vmsnapshot.
	RevertToVMSnapshotCmdByAdmin(context.Context, *RevertToVMSnapshotCmdByAdminRequest) (*RevertToVMSnapshotCmdByAdminResponse, error)
	// DeleteVMSnapshot Deletes a vmsnapshot.
	DeleteVMSnapshot(context.Context, *DeleteVMSnapshotRequest) (*DeleteVMSnapshotResponse, error)
	// RevertToVMSnapshot Revert VM from a vmsnapshot.
	RevertToVMSnapshot(context.Context, *RevertToVMSnapshotRequest) (*RevertToVMSnapshotResponse, error)
	// ListVMSnapshot List virtual machine snapshot by conditions
	ListVMSnapshot(context.Context, *ListVMSnapshotRequest) (*ListVMSnapshotResponse, error)
	mustEmbedUnimplementedVmsnapshotServiceServer()
}

// UnimplementedVmsnapshotServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVmsnapshotServiceServer struct{}

func (UnimplementedVmsnapshotServiceServer) CreateVMSnapshot(context.Context, *CreateVMSnapshotRequest) (*CreateVMSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVMSnapshot not implemented")
}
func (UnimplementedVmsnapshotServiceServer) RevertToVMSnapshotCmdByAdmin(context.Context, *RevertToVMSnapshotCmdByAdminRequest) (*RevertToVMSnapshotCmdByAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevertToVMSnapshotCmdByAdmin not implemented")
}
func (UnimplementedVmsnapshotServiceServer) DeleteVMSnapshot(context.Context, *DeleteVMSnapshotRequest) (*DeleteVMSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVMSnapshot not implemented")
}
func (UnimplementedVmsnapshotServiceServer) RevertToVMSnapshot(context.Context, *RevertToVMSnapshotRequest) (*RevertToVMSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevertToVMSnapshot not implemented")
}
func (UnimplementedVmsnapshotServiceServer) ListVMSnapshot(context.Context, *ListVMSnapshotRequest) (*ListVMSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVMSnapshot not implemented")
}
func (UnimplementedVmsnapshotServiceServer) mustEmbedUnimplementedVmsnapshotServiceServer() {}
func (UnimplementedVmsnapshotServiceServer) testEmbeddedByValue()                           {}

// UnsafeVmsnapshotServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VmsnapshotServiceServer will
// result in compilation errors.
type UnsafeVmsnapshotServiceServer interface {
	mustEmbedUnimplementedVmsnapshotServiceServer()
}

func RegisterVmsnapshotServiceServer(s grpc.ServiceRegistrar, srv VmsnapshotServiceServer) {
	// If the following call pancis, it indicates UnimplementedVmsnapshotServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VmsnapshotService_ServiceDesc, srv)
}

func _VmsnapshotService_CreateVMSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVMSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmsnapshotServiceServer).CreateVMSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VmsnapshotService_CreateVMSnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmsnapshotServiceServer).CreateVMSnapshot(ctx, req.(*CreateVMSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VmsnapshotService_RevertToVMSnapshotCmdByAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevertToVMSnapshotCmdByAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmsnapshotServiceServer).RevertToVMSnapshotCmdByAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VmsnapshotService_RevertToVMSnapshotCmdByAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmsnapshotServiceServer).RevertToVMSnapshotCmdByAdmin(ctx, req.(*RevertToVMSnapshotCmdByAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VmsnapshotService_DeleteVMSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVMSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmsnapshotServiceServer).DeleteVMSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VmsnapshotService_DeleteVMSnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmsnapshotServiceServer).DeleteVMSnapshot(ctx, req.(*DeleteVMSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VmsnapshotService_RevertToVMSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevertToVMSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmsnapshotServiceServer).RevertToVMSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VmsnapshotService_RevertToVMSnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmsnapshotServiceServer).RevertToVMSnapshot(ctx, req.(*RevertToVMSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VmsnapshotService_ListVMSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVMSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmsnapshotServiceServer).ListVMSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VmsnapshotService_ListVMSnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmsnapshotServiceServer).ListVMSnapshot(ctx, req.(*ListVMSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VmsnapshotService_ServiceDesc is the grpc.ServiceDesc for VmsnapshotService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VmsnapshotService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloudstack.management.vmsnapshot.v1.VmsnapshotService",
	HandlerType: (*VmsnapshotServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVMSnapshot",
			Handler:    _VmsnapshotService_CreateVMSnapshot_Handler,
		},
		{
			MethodName: "RevertToVMSnapshotCmdByAdmin",
			Handler:    _VmsnapshotService_RevertToVMSnapshotCmdByAdmin_Handler,
		},
		{
			MethodName: "DeleteVMSnapshot",
			Handler:    _VmsnapshotService_DeleteVMSnapshot_Handler,
		},
		{
			MethodName: "RevertToVMSnapshot",
			Handler:    _VmsnapshotService_RevertToVMSnapshot_Handler,
		},
		{
			MethodName: "ListVMSnapshot",
			Handler:    _VmsnapshotService_ListVMSnapshot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloudstack/management/vmsnapshot/v1/vmsnapshot.gen.proto",
}
