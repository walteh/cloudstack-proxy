// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cloudstack/management/vmsnapshot/v1/vmsnapshot.gen.proto

package vmsnapshotv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/walteh/cloudstack-proxy/gen/proto/golang/cloudstack/management/vmsnapshot/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// VmsnapshotServiceName is the fully-qualified name of the VmsnapshotService service.
	VmsnapshotServiceName = "cloudstack.management.vmsnapshot.v1.VmsnapshotService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// VmsnapshotServiceCreateVMSnapshotProcedure is the fully-qualified name of the VmsnapshotService's
	// CreateVMSnapshot RPC.
	VmsnapshotServiceCreateVMSnapshotProcedure = "/cloudstack.management.vmsnapshot.v1.VmsnapshotService/CreateVMSnapshot"
	// VmsnapshotServiceDeleteVMSnapshotProcedure is the fully-qualified name of the VmsnapshotService's
	// DeleteVMSnapshot RPC.
	VmsnapshotServiceDeleteVMSnapshotProcedure = "/cloudstack.management.vmsnapshot.v1.VmsnapshotService/DeleteVMSnapshot"
	// VmsnapshotServiceListVMSnapshotProcedure is the fully-qualified name of the VmsnapshotService's
	// ListVMSnapshot RPC.
	VmsnapshotServiceListVMSnapshotProcedure = "/cloudstack.management.vmsnapshot.v1.VmsnapshotService/ListVMSnapshot"
	// VmsnapshotServiceRevertToVMSnapshotProcedure is the fully-qualified name of the
	// VmsnapshotService's RevertToVMSnapshot RPC.
	VmsnapshotServiceRevertToVMSnapshotProcedure = "/cloudstack.management.vmsnapshot.v1.VmsnapshotService/RevertToVMSnapshot"
	// VmsnapshotServiceRevertToVMSnapshotCmdByAdminProcedure is the fully-qualified name of the
	// VmsnapshotService's RevertToVMSnapshotCmdByAdmin RPC.
	VmsnapshotServiceRevertToVMSnapshotCmdByAdminProcedure = "/cloudstack.management.vmsnapshot.v1.VmsnapshotService/RevertToVMSnapshotCmdByAdmin"
)

// VmsnapshotServiceClient is a client for the cloudstack.management.vmsnapshot.v1.VmsnapshotService
// service.
type VmsnapshotServiceClient interface {
	// CreateVMSnapshot Creates snapshot for a vm.
	CreateVMSnapshot(context.Context, *connect.Request[v1.CreateVMSnapshotRequest]) (*connect.Response[v1.CreateVMSnapshotResponse], error)
	// DeleteVMSnapshot Deletes a vmsnapshot.
	DeleteVMSnapshot(context.Context, *connect.Request[v1.DeleteVMSnapshotRequest]) (*connect.Response[v1.DeleteVMSnapshotResponse], error)
	// ListVMSnapshot List virtual machine snapshot by conditions
	ListVMSnapshot(context.Context, *connect.Request[v1.ListVMSnapshotRequest]) (*connect.Response[v1.ListVMSnapshotResponse], error)
	// RevertToVMSnapshot Revert VM from a vmsnapshot.
	RevertToVMSnapshot(context.Context, *connect.Request[v1.RevertToVMSnapshotRequest]) (*connect.Response[v1.RevertToVMSnapshotResponse], error)
	// RevertToVMSnapshotCmdByAdmin Revert VM from a vmsnapshot.
	RevertToVMSnapshotCmdByAdmin(context.Context, *connect.Request[v1.RevertToVMSnapshotCmdByAdminRequest]) (*connect.Response[v1.RevertToVMSnapshotCmdByAdminResponse], error)
}

// NewVmsnapshotServiceClient constructs a client for the
// cloudstack.management.vmsnapshot.v1.VmsnapshotService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewVmsnapshotServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) VmsnapshotServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	vmsnapshotServiceMethods := v1.File_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto.Services().ByName("VmsnapshotService").Methods()
	return &vmsnapshotServiceClient{
		createVMSnapshot: connect.NewClient[v1.CreateVMSnapshotRequest, v1.CreateVMSnapshotResponse](
			httpClient,
			baseURL+VmsnapshotServiceCreateVMSnapshotProcedure,
			connect.WithSchema(vmsnapshotServiceMethods.ByName("CreateVMSnapshot")),
			connect.WithClientOptions(opts...),
		),
		deleteVMSnapshot: connect.NewClient[v1.DeleteVMSnapshotRequest, v1.DeleteVMSnapshotResponse](
			httpClient,
			baseURL+VmsnapshotServiceDeleteVMSnapshotProcedure,
			connect.WithSchema(vmsnapshotServiceMethods.ByName("DeleteVMSnapshot")),
			connect.WithClientOptions(opts...),
		),
		listVMSnapshot: connect.NewClient[v1.ListVMSnapshotRequest, v1.ListVMSnapshotResponse](
			httpClient,
			baseURL+VmsnapshotServiceListVMSnapshotProcedure,
			connect.WithSchema(vmsnapshotServiceMethods.ByName("ListVMSnapshot")),
			connect.WithClientOptions(opts...),
		),
		revertToVMSnapshot: connect.NewClient[v1.RevertToVMSnapshotRequest, v1.RevertToVMSnapshotResponse](
			httpClient,
			baseURL+VmsnapshotServiceRevertToVMSnapshotProcedure,
			connect.WithSchema(vmsnapshotServiceMethods.ByName("RevertToVMSnapshot")),
			connect.WithClientOptions(opts...),
		),
		revertToVMSnapshotCmdByAdmin: connect.NewClient[v1.RevertToVMSnapshotCmdByAdminRequest, v1.RevertToVMSnapshotCmdByAdminResponse](
			httpClient,
			baseURL+VmsnapshotServiceRevertToVMSnapshotCmdByAdminProcedure,
			connect.WithSchema(vmsnapshotServiceMethods.ByName("RevertToVMSnapshotCmdByAdmin")),
			connect.WithClientOptions(opts...),
		),
	}
}

// vmsnapshotServiceClient implements VmsnapshotServiceClient.
type vmsnapshotServiceClient struct {
	createVMSnapshot             *connect.Client[v1.CreateVMSnapshotRequest, v1.CreateVMSnapshotResponse]
	deleteVMSnapshot             *connect.Client[v1.DeleteVMSnapshotRequest, v1.DeleteVMSnapshotResponse]
	listVMSnapshot               *connect.Client[v1.ListVMSnapshotRequest, v1.ListVMSnapshotResponse]
	revertToVMSnapshot           *connect.Client[v1.RevertToVMSnapshotRequest, v1.RevertToVMSnapshotResponse]
	revertToVMSnapshotCmdByAdmin *connect.Client[v1.RevertToVMSnapshotCmdByAdminRequest, v1.RevertToVMSnapshotCmdByAdminResponse]
}

// CreateVMSnapshot calls cloudstack.management.vmsnapshot.v1.VmsnapshotService.CreateVMSnapshot.
func (c *vmsnapshotServiceClient) CreateVMSnapshot(ctx context.Context, req *connect.Request[v1.CreateVMSnapshotRequest]) (*connect.Response[v1.CreateVMSnapshotResponse], error) {
	return c.createVMSnapshot.CallUnary(ctx, req)
}

// DeleteVMSnapshot calls cloudstack.management.vmsnapshot.v1.VmsnapshotService.DeleteVMSnapshot.
func (c *vmsnapshotServiceClient) DeleteVMSnapshot(ctx context.Context, req *connect.Request[v1.DeleteVMSnapshotRequest]) (*connect.Response[v1.DeleteVMSnapshotResponse], error) {
	return c.deleteVMSnapshot.CallUnary(ctx, req)
}

// ListVMSnapshot calls cloudstack.management.vmsnapshot.v1.VmsnapshotService.ListVMSnapshot.
func (c *vmsnapshotServiceClient) ListVMSnapshot(ctx context.Context, req *connect.Request[v1.ListVMSnapshotRequest]) (*connect.Response[v1.ListVMSnapshotResponse], error) {
	return c.listVMSnapshot.CallUnary(ctx, req)
}

// RevertToVMSnapshot calls
// cloudstack.management.vmsnapshot.v1.VmsnapshotService.RevertToVMSnapshot.
func (c *vmsnapshotServiceClient) RevertToVMSnapshot(ctx context.Context, req *connect.Request[v1.RevertToVMSnapshotRequest]) (*connect.Response[v1.RevertToVMSnapshotResponse], error) {
	return c.revertToVMSnapshot.CallUnary(ctx, req)
}

// RevertToVMSnapshotCmdByAdmin calls
// cloudstack.management.vmsnapshot.v1.VmsnapshotService.RevertToVMSnapshotCmdByAdmin.
func (c *vmsnapshotServiceClient) RevertToVMSnapshotCmdByAdmin(ctx context.Context, req *connect.Request[v1.RevertToVMSnapshotCmdByAdminRequest]) (*connect.Response[v1.RevertToVMSnapshotCmdByAdminResponse], error) {
	return c.revertToVMSnapshotCmdByAdmin.CallUnary(ctx, req)
}

// VmsnapshotServiceHandler is an implementation of the
// cloudstack.management.vmsnapshot.v1.VmsnapshotService service.
type VmsnapshotServiceHandler interface {
	// CreateVMSnapshot Creates snapshot for a vm.
	CreateVMSnapshot(context.Context, *connect.Request[v1.CreateVMSnapshotRequest]) (*connect.Response[v1.CreateVMSnapshotResponse], error)
	// DeleteVMSnapshot Deletes a vmsnapshot.
	DeleteVMSnapshot(context.Context, *connect.Request[v1.DeleteVMSnapshotRequest]) (*connect.Response[v1.DeleteVMSnapshotResponse], error)
	// ListVMSnapshot List virtual machine snapshot by conditions
	ListVMSnapshot(context.Context, *connect.Request[v1.ListVMSnapshotRequest]) (*connect.Response[v1.ListVMSnapshotResponse], error)
	// RevertToVMSnapshot Revert VM from a vmsnapshot.
	RevertToVMSnapshot(context.Context, *connect.Request[v1.RevertToVMSnapshotRequest]) (*connect.Response[v1.RevertToVMSnapshotResponse], error)
	// RevertToVMSnapshotCmdByAdmin Revert VM from a vmsnapshot.
	RevertToVMSnapshotCmdByAdmin(context.Context, *connect.Request[v1.RevertToVMSnapshotCmdByAdminRequest]) (*connect.Response[v1.RevertToVMSnapshotCmdByAdminResponse], error)
}

// NewVmsnapshotServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewVmsnapshotServiceHandler(svc VmsnapshotServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	vmsnapshotServiceMethods := v1.File_cloudstack_management_vmsnapshot_v1_vmsnapshot_gen_proto.Services().ByName("VmsnapshotService").Methods()
	vmsnapshotServiceCreateVMSnapshotHandler := connect.NewUnaryHandler(
		VmsnapshotServiceCreateVMSnapshotProcedure,
		svc.CreateVMSnapshot,
		connect.WithSchema(vmsnapshotServiceMethods.ByName("CreateVMSnapshot")),
		connect.WithHandlerOptions(opts...),
	)
	vmsnapshotServiceDeleteVMSnapshotHandler := connect.NewUnaryHandler(
		VmsnapshotServiceDeleteVMSnapshotProcedure,
		svc.DeleteVMSnapshot,
		connect.WithSchema(vmsnapshotServiceMethods.ByName("DeleteVMSnapshot")),
		connect.WithHandlerOptions(opts...),
	)
	vmsnapshotServiceListVMSnapshotHandler := connect.NewUnaryHandler(
		VmsnapshotServiceListVMSnapshotProcedure,
		svc.ListVMSnapshot,
		connect.WithSchema(vmsnapshotServiceMethods.ByName("ListVMSnapshot")),
		connect.WithHandlerOptions(opts...),
	)
	vmsnapshotServiceRevertToVMSnapshotHandler := connect.NewUnaryHandler(
		VmsnapshotServiceRevertToVMSnapshotProcedure,
		svc.RevertToVMSnapshot,
		connect.WithSchema(vmsnapshotServiceMethods.ByName("RevertToVMSnapshot")),
		connect.WithHandlerOptions(opts...),
	)
	vmsnapshotServiceRevertToVMSnapshotCmdByAdminHandler := connect.NewUnaryHandler(
		VmsnapshotServiceRevertToVMSnapshotCmdByAdminProcedure,
		svc.RevertToVMSnapshotCmdByAdmin,
		connect.WithSchema(vmsnapshotServiceMethods.ByName("RevertToVMSnapshotCmdByAdmin")),
		connect.WithHandlerOptions(opts...),
	)
	return "/cloudstack.management.vmsnapshot.v1.VmsnapshotService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case VmsnapshotServiceCreateVMSnapshotProcedure:
			vmsnapshotServiceCreateVMSnapshotHandler.ServeHTTP(w, r)
		case VmsnapshotServiceDeleteVMSnapshotProcedure:
			vmsnapshotServiceDeleteVMSnapshotHandler.ServeHTTP(w, r)
		case VmsnapshotServiceListVMSnapshotProcedure:
			vmsnapshotServiceListVMSnapshotHandler.ServeHTTP(w, r)
		case VmsnapshotServiceRevertToVMSnapshotProcedure:
			vmsnapshotServiceRevertToVMSnapshotHandler.ServeHTTP(w, r)
		case VmsnapshotServiceRevertToVMSnapshotCmdByAdminProcedure:
			vmsnapshotServiceRevertToVMSnapshotCmdByAdminHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedVmsnapshotServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedVmsnapshotServiceHandler struct{}

func (UnimplementedVmsnapshotServiceHandler) CreateVMSnapshot(context.Context, *connect.Request[v1.CreateVMSnapshotRequest]) (*connect.Response[v1.CreateVMSnapshotResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.vmsnapshot.v1.VmsnapshotService.CreateVMSnapshot is not implemented"))
}

func (UnimplementedVmsnapshotServiceHandler) DeleteVMSnapshot(context.Context, *connect.Request[v1.DeleteVMSnapshotRequest]) (*connect.Response[v1.DeleteVMSnapshotResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.vmsnapshot.v1.VmsnapshotService.DeleteVMSnapshot is not implemented"))
}

func (UnimplementedVmsnapshotServiceHandler) ListVMSnapshot(context.Context, *connect.Request[v1.ListVMSnapshotRequest]) (*connect.Response[v1.ListVMSnapshotResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.vmsnapshot.v1.VmsnapshotService.ListVMSnapshot is not implemented"))
}

func (UnimplementedVmsnapshotServiceHandler) RevertToVMSnapshot(context.Context, *connect.Request[v1.RevertToVMSnapshotRequest]) (*connect.Response[v1.RevertToVMSnapshotResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.vmsnapshot.v1.VmsnapshotService.RevertToVMSnapshot is not implemented"))
}

func (UnimplementedVmsnapshotServiceHandler) RevertToVMSnapshotCmdByAdmin(context.Context, *connect.Request[v1.RevertToVMSnapshotCmdByAdminRequest]) (*connect.Response[v1.RevertToVMSnapshotCmdByAdminResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.vmsnapshot.v1.VmsnapshotService.RevertToVMSnapshotCmdByAdmin is not implemented"))
}
