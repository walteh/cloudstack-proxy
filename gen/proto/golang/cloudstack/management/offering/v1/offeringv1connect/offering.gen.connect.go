// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cloudstack/management/offering/v1/offering.gen.proto

package offeringv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/walteh/cloudstack-proxy/gen/proto/golang/cloudstack/management/offering/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// OfferingServiceName is the fully-qualified name of the OfferingService service.
	OfferingServiceName = "cloudstack.management.offering.v1.OfferingService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// OfferingServiceCreateDiskOfferingProcedure is the fully-qualified name of the OfferingService's
	// CreateDiskOffering RPC.
	OfferingServiceCreateDiskOfferingProcedure = "/cloudstack.management.offering.v1.OfferingService/CreateDiskOffering"
	// OfferingServiceCreateServiceOfferingProcedure is the fully-qualified name of the
	// OfferingService's CreateServiceOffering RPC.
	OfferingServiceCreateServiceOfferingProcedure = "/cloudstack.management.offering.v1.OfferingService/CreateServiceOffering"
	// OfferingServiceDeleteDiskOfferingProcedure is the fully-qualified name of the OfferingService's
	// DeleteDiskOffering RPC.
	OfferingServiceDeleteDiskOfferingProcedure = "/cloudstack.management.offering.v1.OfferingService/DeleteDiskOffering"
	// OfferingServiceDeleteServiceOfferingProcedure is the fully-qualified name of the
	// OfferingService's DeleteServiceOffering RPC.
	OfferingServiceDeleteServiceOfferingProcedure = "/cloudstack.management.offering.v1.OfferingService/DeleteServiceOffering"
	// OfferingServiceIsAccountAllowedToCreateOfferingsWithTagsProcedure is the fully-qualified name of
	// the OfferingService's IsAccountAllowedToCreateOfferingsWithTags RPC.
	OfferingServiceIsAccountAllowedToCreateOfferingsWithTagsProcedure = "/cloudstack.management.offering.v1.OfferingService/IsAccountAllowedToCreateOfferingsWithTags"
	// OfferingServiceListDiskOfferingsProcedure is the fully-qualified name of the OfferingService's
	// ListDiskOfferings RPC.
	OfferingServiceListDiskOfferingsProcedure = "/cloudstack.management.offering.v1.OfferingService/ListDiskOfferings"
	// OfferingServiceListServiceOfferingsProcedure is the fully-qualified name of the OfferingService's
	// ListServiceOfferings RPC.
	OfferingServiceListServiceOfferingsProcedure = "/cloudstack.management.offering.v1.OfferingService/ListServiceOfferings"
	// OfferingServiceUpdateDiskOfferingProcedure is the fully-qualified name of the OfferingService's
	// UpdateDiskOffering RPC.
	OfferingServiceUpdateDiskOfferingProcedure = "/cloudstack.management.offering.v1.OfferingService/UpdateDiskOffering"
	// OfferingServiceUpdateServiceOfferingProcedure is the fully-qualified name of the
	// OfferingService's UpdateServiceOffering RPC.
	OfferingServiceUpdateServiceOfferingProcedure = "/cloudstack.management.offering.v1.OfferingService/UpdateServiceOffering"
)

// OfferingServiceClient is a client for the cloudstack.management.offering.v1.OfferingService
// service.
type OfferingServiceClient interface {
	// CreateDiskOffering Creates a disk offering.
	CreateDiskOffering(context.Context, *connect.Request[v1.CreateDiskOfferingRequest]) (*connect.Response[v1.CreateDiskOfferingResponse], error)
	// CreateServiceOffering Creates a service offering.
	CreateServiceOffering(context.Context, *connect.Request[v1.CreateServiceOfferingRequest]) (*connect.Response[v1.CreateServiceOfferingResponse], error)
	// DeleteDiskOffering Updates a disk offering.
	DeleteDiskOffering(context.Context, *connect.Request[v1.DeleteDiskOfferingRequest]) (*connect.Response[v1.DeleteDiskOfferingResponse], error)
	// DeleteServiceOffering Deletes a service offering.
	DeleteServiceOffering(context.Context, *connect.Request[v1.DeleteServiceOfferingRequest]) (*connect.Response[v1.DeleteServiceOfferingResponse], error)
	// IsAccountAllowedToCreateOfferingsWithTags Return true if the specified account is allowed to create offerings with tags.
	IsAccountAllowedToCreateOfferingsWithTags(context.Context, *connect.Request[v1.IsAccountAllowedToCreateOfferingsWithTagsRequest]) (*connect.Response[v1.IsAccountAllowedToCreateOfferingsWithTagsResponse], error)
	// ListDiskOfferings Lists all available disk offerings.
	ListDiskOfferings(context.Context, *connect.Request[v1.ListDiskOfferingsRequest]) (*connect.Response[v1.ListDiskOfferingsResponse], error)
	// ListServiceOfferings Lists all available service offerings.
	ListServiceOfferings(context.Context, *connect.Request[v1.ListServiceOfferingsRequest]) (*connect.Response[v1.ListServiceOfferingsResponse], error)
	// UpdateDiskOffering Updates a disk offering.
	UpdateDiskOffering(context.Context, *connect.Request[v1.UpdateDiskOfferingRequest]) (*connect.Response[v1.UpdateDiskOfferingResponse], error)
	// UpdateServiceOffering Updates a service offering.
	UpdateServiceOffering(context.Context, *connect.Request[v1.UpdateServiceOfferingRequest]) (*connect.Response[v1.UpdateServiceOfferingResponse], error)
}

// NewOfferingServiceClient constructs a client for the
// cloudstack.management.offering.v1.OfferingService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOfferingServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) OfferingServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	offeringServiceMethods := v1.File_cloudstack_management_offering_v1_offering_gen_proto.Services().ByName("OfferingService").Methods()
	return &offeringServiceClient{
		createDiskOffering: connect.NewClient[v1.CreateDiskOfferingRequest, v1.CreateDiskOfferingResponse](
			httpClient,
			baseURL+OfferingServiceCreateDiskOfferingProcedure,
			connect.WithSchema(offeringServiceMethods.ByName("CreateDiskOffering")),
			connect.WithClientOptions(opts...),
		),
		createServiceOffering: connect.NewClient[v1.CreateServiceOfferingRequest, v1.CreateServiceOfferingResponse](
			httpClient,
			baseURL+OfferingServiceCreateServiceOfferingProcedure,
			connect.WithSchema(offeringServiceMethods.ByName("CreateServiceOffering")),
			connect.WithClientOptions(opts...),
		),
		deleteDiskOffering: connect.NewClient[v1.DeleteDiskOfferingRequest, v1.DeleteDiskOfferingResponse](
			httpClient,
			baseURL+OfferingServiceDeleteDiskOfferingProcedure,
			connect.WithSchema(offeringServiceMethods.ByName("DeleteDiskOffering")),
			connect.WithClientOptions(opts...),
		),
		deleteServiceOffering: connect.NewClient[v1.DeleteServiceOfferingRequest, v1.DeleteServiceOfferingResponse](
			httpClient,
			baseURL+OfferingServiceDeleteServiceOfferingProcedure,
			connect.WithSchema(offeringServiceMethods.ByName("DeleteServiceOffering")),
			connect.WithClientOptions(opts...),
		),
		isAccountAllowedToCreateOfferingsWithTags: connect.NewClient[v1.IsAccountAllowedToCreateOfferingsWithTagsRequest, v1.IsAccountAllowedToCreateOfferingsWithTagsResponse](
			httpClient,
			baseURL+OfferingServiceIsAccountAllowedToCreateOfferingsWithTagsProcedure,
			connect.WithSchema(offeringServiceMethods.ByName("IsAccountAllowedToCreateOfferingsWithTags")),
			connect.WithClientOptions(opts...),
		),
		listDiskOfferings: connect.NewClient[v1.ListDiskOfferingsRequest, v1.ListDiskOfferingsResponse](
			httpClient,
			baseURL+OfferingServiceListDiskOfferingsProcedure,
			connect.WithSchema(offeringServiceMethods.ByName("ListDiskOfferings")),
			connect.WithClientOptions(opts...),
		),
		listServiceOfferings: connect.NewClient[v1.ListServiceOfferingsRequest, v1.ListServiceOfferingsResponse](
			httpClient,
			baseURL+OfferingServiceListServiceOfferingsProcedure,
			connect.WithSchema(offeringServiceMethods.ByName("ListServiceOfferings")),
			connect.WithClientOptions(opts...),
		),
		updateDiskOffering: connect.NewClient[v1.UpdateDiskOfferingRequest, v1.UpdateDiskOfferingResponse](
			httpClient,
			baseURL+OfferingServiceUpdateDiskOfferingProcedure,
			connect.WithSchema(offeringServiceMethods.ByName("UpdateDiskOffering")),
			connect.WithClientOptions(opts...),
		),
		updateServiceOffering: connect.NewClient[v1.UpdateServiceOfferingRequest, v1.UpdateServiceOfferingResponse](
			httpClient,
			baseURL+OfferingServiceUpdateServiceOfferingProcedure,
			connect.WithSchema(offeringServiceMethods.ByName("UpdateServiceOffering")),
			connect.WithClientOptions(opts...),
		),
	}
}

// offeringServiceClient implements OfferingServiceClient.
type offeringServiceClient struct {
	createDiskOffering                        *connect.Client[v1.CreateDiskOfferingRequest, v1.CreateDiskOfferingResponse]
	createServiceOffering                     *connect.Client[v1.CreateServiceOfferingRequest, v1.CreateServiceOfferingResponse]
	deleteDiskOffering                        *connect.Client[v1.DeleteDiskOfferingRequest, v1.DeleteDiskOfferingResponse]
	deleteServiceOffering                     *connect.Client[v1.DeleteServiceOfferingRequest, v1.DeleteServiceOfferingResponse]
	isAccountAllowedToCreateOfferingsWithTags *connect.Client[v1.IsAccountAllowedToCreateOfferingsWithTagsRequest, v1.IsAccountAllowedToCreateOfferingsWithTagsResponse]
	listDiskOfferings                         *connect.Client[v1.ListDiskOfferingsRequest, v1.ListDiskOfferingsResponse]
	listServiceOfferings                      *connect.Client[v1.ListServiceOfferingsRequest, v1.ListServiceOfferingsResponse]
	updateDiskOffering                        *connect.Client[v1.UpdateDiskOfferingRequest, v1.UpdateDiskOfferingResponse]
	updateServiceOffering                     *connect.Client[v1.UpdateServiceOfferingRequest, v1.UpdateServiceOfferingResponse]
}

// CreateDiskOffering calls cloudstack.management.offering.v1.OfferingService.CreateDiskOffering.
func (c *offeringServiceClient) CreateDiskOffering(ctx context.Context, req *connect.Request[v1.CreateDiskOfferingRequest]) (*connect.Response[v1.CreateDiskOfferingResponse], error) {
	return c.createDiskOffering.CallUnary(ctx, req)
}

// CreateServiceOffering calls
// cloudstack.management.offering.v1.OfferingService.CreateServiceOffering.
func (c *offeringServiceClient) CreateServiceOffering(ctx context.Context, req *connect.Request[v1.CreateServiceOfferingRequest]) (*connect.Response[v1.CreateServiceOfferingResponse], error) {
	return c.createServiceOffering.CallUnary(ctx, req)
}

// DeleteDiskOffering calls cloudstack.management.offering.v1.OfferingService.DeleteDiskOffering.
func (c *offeringServiceClient) DeleteDiskOffering(ctx context.Context, req *connect.Request[v1.DeleteDiskOfferingRequest]) (*connect.Response[v1.DeleteDiskOfferingResponse], error) {
	return c.deleteDiskOffering.CallUnary(ctx, req)
}

// DeleteServiceOffering calls
// cloudstack.management.offering.v1.OfferingService.DeleteServiceOffering.
func (c *offeringServiceClient) DeleteServiceOffering(ctx context.Context, req *connect.Request[v1.DeleteServiceOfferingRequest]) (*connect.Response[v1.DeleteServiceOfferingResponse], error) {
	return c.deleteServiceOffering.CallUnary(ctx, req)
}

// IsAccountAllowedToCreateOfferingsWithTags calls
// cloudstack.management.offering.v1.OfferingService.IsAccountAllowedToCreateOfferingsWithTags.
func (c *offeringServiceClient) IsAccountAllowedToCreateOfferingsWithTags(ctx context.Context, req *connect.Request[v1.IsAccountAllowedToCreateOfferingsWithTagsRequest]) (*connect.Response[v1.IsAccountAllowedToCreateOfferingsWithTagsResponse], error) {
	return c.isAccountAllowedToCreateOfferingsWithTags.CallUnary(ctx, req)
}

// ListDiskOfferings calls cloudstack.management.offering.v1.OfferingService.ListDiskOfferings.
func (c *offeringServiceClient) ListDiskOfferings(ctx context.Context, req *connect.Request[v1.ListDiskOfferingsRequest]) (*connect.Response[v1.ListDiskOfferingsResponse], error) {
	return c.listDiskOfferings.CallUnary(ctx, req)
}

// ListServiceOfferings calls
// cloudstack.management.offering.v1.OfferingService.ListServiceOfferings.
func (c *offeringServiceClient) ListServiceOfferings(ctx context.Context, req *connect.Request[v1.ListServiceOfferingsRequest]) (*connect.Response[v1.ListServiceOfferingsResponse], error) {
	return c.listServiceOfferings.CallUnary(ctx, req)
}

// UpdateDiskOffering calls cloudstack.management.offering.v1.OfferingService.UpdateDiskOffering.
func (c *offeringServiceClient) UpdateDiskOffering(ctx context.Context, req *connect.Request[v1.UpdateDiskOfferingRequest]) (*connect.Response[v1.UpdateDiskOfferingResponse], error) {
	return c.updateDiskOffering.CallUnary(ctx, req)
}

// UpdateServiceOffering calls
// cloudstack.management.offering.v1.OfferingService.UpdateServiceOffering.
func (c *offeringServiceClient) UpdateServiceOffering(ctx context.Context, req *connect.Request[v1.UpdateServiceOfferingRequest]) (*connect.Response[v1.UpdateServiceOfferingResponse], error) {
	return c.updateServiceOffering.CallUnary(ctx, req)
}

// OfferingServiceHandler is an implementation of the
// cloudstack.management.offering.v1.OfferingService service.
type OfferingServiceHandler interface {
	// CreateDiskOffering Creates a disk offering.
	CreateDiskOffering(context.Context, *connect.Request[v1.CreateDiskOfferingRequest]) (*connect.Response[v1.CreateDiskOfferingResponse], error)
	// CreateServiceOffering Creates a service offering.
	CreateServiceOffering(context.Context, *connect.Request[v1.CreateServiceOfferingRequest]) (*connect.Response[v1.CreateServiceOfferingResponse], error)
	// DeleteDiskOffering Updates a disk offering.
	DeleteDiskOffering(context.Context, *connect.Request[v1.DeleteDiskOfferingRequest]) (*connect.Response[v1.DeleteDiskOfferingResponse], error)
	// DeleteServiceOffering Deletes a service offering.
	DeleteServiceOffering(context.Context, *connect.Request[v1.DeleteServiceOfferingRequest]) (*connect.Response[v1.DeleteServiceOfferingResponse], error)
	// IsAccountAllowedToCreateOfferingsWithTags Return true if the specified account is allowed to create offerings with tags.
	IsAccountAllowedToCreateOfferingsWithTags(context.Context, *connect.Request[v1.IsAccountAllowedToCreateOfferingsWithTagsRequest]) (*connect.Response[v1.IsAccountAllowedToCreateOfferingsWithTagsResponse], error)
	// ListDiskOfferings Lists all available disk offerings.
	ListDiskOfferings(context.Context, *connect.Request[v1.ListDiskOfferingsRequest]) (*connect.Response[v1.ListDiskOfferingsResponse], error)
	// ListServiceOfferings Lists all available service offerings.
	ListServiceOfferings(context.Context, *connect.Request[v1.ListServiceOfferingsRequest]) (*connect.Response[v1.ListServiceOfferingsResponse], error)
	// UpdateDiskOffering Updates a disk offering.
	UpdateDiskOffering(context.Context, *connect.Request[v1.UpdateDiskOfferingRequest]) (*connect.Response[v1.UpdateDiskOfferingResponse], error)
	// UpdateServiceOffering Updates a service offering.
	UpdateServiceOffering(context.Context, *connect.Request[v1.UpdateServiceOfferingRequest]) (*connect.Response[v1.UpdateServiceOfferingResponse], error)
}

// NewOfferingServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOfferingServiceHandler(svc OfferingServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	offeringServiceMethods := v1.File_cloudstack_management_offering_v1_offering_gen_proto.Services().ByName("OfferingService").Methods()
	offeringServiceCreateDiskOfferingHandler := connect.NewUnaryHandler(
		OfferingServiceCreateDiskOfferingProcedure,
		svc.CreateDiskOffering,
		connect.WithSchema(offeringServiceMethods.ByName("CreateDiskOffering")),
		connect.WithHandlerOptions(opts...),
	)
	offeringServiceCreateServiceOfferingHandler := connect.NewUnaryHandler(
		OfferingServiceCreateServiceOfferingProcedure,
		svc.CreateServiceOffering,
		connect.WithSchema(offeringServiceMethods.ByName("CreateServiceOffering")),
		connect.WithHandlerOptions(opts...),
	)
	offeringServiceDeleteDiskOfferingHandler := connect.NewUnaryHandler(
		OfferingServiceDeleteDiskOfferingProcedure,
		svc.DeleteDiskOffering,
		connect.WithSchema(offeringServiceMethods.ByName("DeleteDiskOffering")),
		connect.WithHandlerOptions(opts...),
	)
	offeringServiceDeleteServiceOfferingHandler := connect.NewUnaryHandler(
		OfferingServiceDeleteServiceOfferingProcedure,
		svc.DeleteServiceOffering,
		connect.WithSchema(offeringServiceMethods.ByName("DeleteServiceOffering")),
		connect.WithHandlerOptions(opts...),
	)
	offeringServiceIsAccountAllowedToCreateOfferingsWithTagsHandler := connect.NewUnaryHandler(
		OfferingServiceIsAccountAllowedToCreateOfferingsWithTagsProcedure,
		svc.IsAccountAllowedToCreateOfferingsWithTags,
		connect.WithSchema(offeringServiceMethods.ByName("IsAccountAllowedToCreateOfferingsWithTags")),
		connect.WithHandlerOptions(opts...),
	)
	offeringServiceListDiskOfferingsHandler := connect.NewUnaryHandler(
		OfferingServiceListDiskOfferingsProcedure,
		svc.ListDiskOfferings,
		connect.WithSchema(offeringServiceMethods.ByName("ListDiskOfferings")),
		connect.WithHandlerOptions(opts...),
	)
	offeringServiceListServiceOfferingsHandler := connect.NewUnaryHandler(
		OfferingServiceListServiceOfferingsProcedure,
		svc.ListServiceOfferings,
		connect.WithSchema(offeringServiceMethods.ByName("ListServiceOfferings")),
		connect.WithHandlerOptions(opts...),
	)
	offeringServiceUpdateDiskOfferingHandler := connect.NewUnaryHandler(
		OfferingServiceUpdateDiskOfferingProcedure,
		svc.UpdateDiskOffering,
		connect.WithSchema(offeringServiceMethods.ByName("UpdateDiskOffering")),
		connect.WithHandlerOptions(opts...),
	)
	offeringServiceUpdateServiceOfferingHandler := connect.NewUnaryHandler(
		OfferingServiceUpdateServiceOfferingProcedure,
		svc.UpdateServiceOffering,
		connect.WithSchema(offeringServiceMethods.ByName("UpdateServiceOffering")),
		connect.WithHandlerOptions(opts...),
	)
	return "/cloudstack.management.offering.v1.OfferingService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case OfferingServiceCreateDiskOfferingProcedure:
			offeringServiceCreateDiskOfferingHandler.ServeHTTP(w, r)
		case OfferingServiceCreateServiceOfferingProcedure:
			offeringServiceCreateServiceOfferingHandler.ServeHTTP(w, r)
		case OfferingServiceDeleteDiskOfferingProcedure:
			offeringServiceDeleteDiskOfferingHandler.ServeHTTP(w, r)
		case OfferingServiceDeleteServiceOfferingProcedure:
			offeringServiceDeleteServiceOfferingHandler.ServeHTTP(w, r)
		case OfferingServiceIsAccountAllowedToCreateOfferingsWithTagsProcedure:
			offeringServiceIsAccountAllowedToCreateOfferingsWithTagsHandler.ServeHTTP(w, r)
		case OfferingServiceListDiskOfferingsProcedure:
			offeringServiceListDiskOfferingsHandler.ServeHTTP(w, r)
		case OfferingServiceListServiceOfferingsProcedure:
			offeringServiceListServiceOfferingsHandler.ServeHTTP(w, r)
		case OfferingServiceUpdateDiskOfferingProcedure:
			offeringServiceUpdateDiskOfferingHandler.ServeHTTP(w, r)
		case OfferingServiceUpdateServiceOfferingProcedure:
			offeringServiceUpdateServiceOfferingHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedOfferingServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedOfferingServiceHandler struct{}

func (UnimplementedOfferingServiceHandler) CreateDiskOffering(context.Context, *connect.Request[v1.CreateDiskOfferingRequest]) (*connect.Response[v1.CreateDiskOfferingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.offering.v1.OfferingService.CreateDiskOffering is not implemented"))
}

func (UnimplementedOfferingServiceHandler) CreateServiceOffering(context.Context, *connect.Request[v1.CreateServiceOfferingRequest]) (*connect.Response[v1.CreateServiceOfferingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.offering.v1.OfferingService.CreateServiceOffering is not implemented"))
}

func (UnimplementedOfferingServiceHandler) DeleteDiskOffering(context.Context, *connect.Request[v1.DeleteDiskOfferingRequest]) (*connect.Response[v1.DeleteDiskOfferingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.offering.v1.OfferingService.DeleteDiskOffering is not implemented"))
}

func (UnimplementedOfferingServiceHandler) DeleteServiceOffering(context.Context, *connect.Request[v1.DeleteServiceOfferingRequest]) (*connect.Response[v1.DeleteServiceOfferingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.offering.v1.OfferingService.DeleteServiceOffering is not implemented"))
}

func (UnimplementedOfferingServiceHandler) IsAccountAllowedToCreateOfferingsWithTags(context.Context, *connect.Request[v1.IsAccountAllowedToCreateOfferingsWithTagsRequest]) (*connect.Response[v1.IsAccountAllowedToCreateOfferingsWithTagsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.offering.v1.OfferingService.IsAccountAllowedToCreateOfferingsWithTags is not implemented"))
}

func (UnimplementedOfferingServiceHandler) ListDiskOfferings(context.Context, *connect.Request[v1.ListDiskOfferingsRequest]) (*connect.Response[v1.ListDiskOfferingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.offering.v1.OfferingService.ListDiskOfferings is not implemented"))
}

func (UnimplementedOfferingServiceHandler) ListServiceOfferings(context.Context, *connect.Request[v1.ListServiceOfferingsRequest]) (*connect.Response[v1.ListServiceOfferingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.offering.v1.OfferingService.ListServiceOfferings is not implemented"))
}

func (UnimplementedOfferingServiceHandler) UpdateDiskOffering(context.Context, *connect.Request[v1.UpdateDiskOfferingRequest]) (*connect.Response[v1.UpdateDiskOfferingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.offering.v1.OfferingService.UpdateDiskOffering is not implemented"))
}

func (UnimplementedOfferingServiceHandler) UpdateServiceOffering(context.Context, *connect.Request[v1.UpdateServiceOfferingRequest]) (*connect.Response[v1.UpdateServiceOfferingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.offering.v1.OfferingService.UpdateServiceOffering is not implemented"))
}
