// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: cloudstack/management/template/v1/template.gen.proto

package templatev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TemplateService_RegisterTemplateCmdByAdmin_FullMethodName = "/cloudstack.management.template.v1.TemplateService/RegisterTemplateCmdByAdmin"
	TemplateService_ListVnfTemplates_FullMethodName           = "/cloudstack.management.template.v1.TemplateService/ListVnfTemplates"
	TemplateService_UpdateTemplatePermissions_FullMethodName  = "/cloudstack.management.template.v1.TemplateService/UpdateTemplatePermissions"
	TemplateService_UpdateVnfTemplate_FullMethodName          = "/cloudstack.management.template.v1.TemplateService/UpdateVnfTemplate"
	TemplateService_ListTemplates_FullMethodName              = "/cloudstack.management.template.v1.TemplateService/ListTemplates"
	TemplateService_CreateTemplate_FullMethodName             = "/cloudstack.management.template.v1.TemplateService/CreateTemplate"
	TemplateService_ListTemplatePermissions_FullMethodName    = "/cloudstack.management.template.v1.TemplateService/ListTemplatePermissions"
	TemplateService_UpdateTemplateCmdByAdmin_FullMethodName   = "/cloudstack.management.template.v1.TemplateService/UpdateTemplateCmdByAdmin"
	TemplateService_DeleteTemplate_FullMethodName             = "/cloudstack.management.template.v1.TemplateService/DeleteTemplate"
	TemplateService_UpdateTemplate_FullMethodName             = "/cloudstack.management.template.v1.TemplateService/UpdateTemplate"
	TemplateService_PrepareTemplate_FullMethodName            = "/cloudstack.management.template.v1.TemplateService/PrepareTemplate"
	TemplateService_ExtractTemplate_FullMethodName            = "/cloudstack.management.template.v1.TemplateService/ExtractTemplate"
	TemplateService_CopyTemplate_FullMethodName               = "/cloudstack.management.template.v1.TemplateService/CopyTemplate"
	TemplateService_RegisterVnfTemplate_FullMethodName        = "/cloudstack.management.template.v1.TemplateService/RegisterVnfTemplate"
	TemplateService_GetUploadParamsForTemplate_FullMethodName = "/cloudstack.management.template.v1.TemplateService/GetUploadParamsForTemplate"
	TemplateService_DeleteVnfTemplate_FullMethodName          = "/cloudstack.management.template.v1.TemplateService/DeleteVnfTemplate"
	TemplateService_RegisterTemplate_FullMethodName           = "/cloudstack.management.template.v1.TemplateService/RegisterTemplate"
)

// TemplateServiceClient is the client API for TemplateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// TemplateService provides operations for managing Templates
type TemplateServiceClient interface {
	// RegisterTemplateCmdByAdmin Registers an existing template into the CloudStack cloud.
	RegisterTemplateCmdByAdmin(ctx context.Context, in *RegisterTemplateCmdByAdminRequest, opts ...grpc.CallOption) (*RegisterTemplateCmdByAdminResponse, error)
	// ListVnfTemplates List all public, private, and privileged VNF templates.
	ListVnfTemplates(ctx context.Context, in *ListVnfTemplatesRequest, opts ...grpc.CallOption) (*ListVnfTemplatesResponse, error)
	// UpdateTemplatePermissions Updates a template visibility permissions. A public template is visible to all accounts within the same domain. A private template is visible only to the owner of the template. A privileged template is a private template with account permissions added. Only accounts specified under the template permissions are visible to them.
	UpdateTemplatePermissions(ctx context.Context, in *UpdateTemplatePermissionsRequest, opts ...grpc.CallOption) (*UpdateTemplatePermissionsResponse, error)
	// UpdateVnfTemplate Updates a template to VNF template or attributes of a VNF template.
	UpdateVnfTemplate(ctx context.Context, in *UpdateVnfTemplateRequest, opts ...grpc.CallOption) (*UpdateVnfTemplateResponse, error)
	// ListTemplates List all public, private, and privileged templates.
	ListTemplates(ctx context.Context, in *ListTemplatesRequest, opts ...grpc.CallOption) (*ListTemplatesResponse, error)
	// CreateTemplate Creates a template of a virtual machine. The virtual machine must be in a STOPPED state. A template created from this command is automatically designated as a private template visible to the account that created it.
	CreateTemplate(ctx context.Context, in *CreateTemplateRequest, opts ...grpc.CallOption) (*CreateTemplateResponse, error)
	// ListTemplatePermissions List template visibility and all accounts that have permissions to view this template.
	ListTemplatePermissions(ctx context.Context, in *ListTemplatePermissionsRequest, opts ...grpc.CallOption) (*ListTemplatePermissionsResponse, error)
	// UpdateTemplateCmdByAdmin Updates attributes of a template.
	UpdateTemplateCmdByAdmin(ctx context.Context, in *UpdateTemplateCmdByAdminRequest, opts ...grpc.CallOption) (*UpdateTemplateCmdByAdminResponse, error)
	// DeleteTemplate Deletes a template from the system. All virtual machines using the deleted template will not be affected.
	DeleteTemplate(ctx context.Context, in *DeleteTemplateRequest, opts ...grpc.CallOption) (*DeleteTemplateResponse, error)
	// UpdateTemplate Updates attributes of a template.
	UpdateTemplate(ctx context.Context, in *UpdateTemplateRequest, opts ...grpc.CallOption) (*UpdateTemplateResponse, error)
	// PrepareTemplate load template into primary storage
	PrepareTemplate(ctx context.Context, in *PrepareTemplateRequest, opts ...grpc.CallOption) (*PrepareTemplateResponse, error)
	// ExtractTemplate Extracts a template
	ExtractTemplate(ctx context.Context, in *ExtractTemplateRequest, opts ...grpc.CallOption) (*ExtractTemplateResponse, error)
	// CopyTemplate Copies a template from one zone to another.
	CopyTemplate(ctx context.Context, in *CopyTemplateRequest, opts ...grpc.CallOption) (*CopyTemplateResponse, error)
	// RegisterVnfTemplate Registers an existing VNF template into the CloudStack cloud.
	RegisterVnfTemplate(ctx context.Context, in *RegisterVnfTemplateRequest, opts ...grpc.CallOption) (*RegisterVnfTemplateResponse, error)
	// GetUploadParamsForTemplate upload an existing template into the CloudStack cloud.
	GetUploadParamsForTemplate(ctx context.Context, in *GetUploadParamsForTemplateRequest, opts ...grpc.CallOption) (*GetUploadParamsForTemplateResponse, error)
	// DeleteVnfTemplate Deletes a VNF template from the system. All virtual machines using the deleted template will not be affected.
	DeleteVnfTemplate(ctx context.Context, in *DeleteVnfTemplateRequest, opts ...grpc.CallOption) (*DeleteVnfTemplateResponse, error)
	// RegisterTemplate Registers an existing template into the CloudStack cloud.
	RegisterTemplate(ctx context.Context, in *RegisterTemplateRequest, opts ...grpc.CallOption) (*RegisterTemplateResponse, error)
}

type templateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTemplateServiceClient(cc grpc.ClientConnInterface) TemplateServiceClient {
	return &templateServiceClient{cc}
}

func (c *templateServiceClient) RegisterTemplateCmdByAdmin(ctx context.Context, in *RegisterTemplateCmdByAdminRequest, opts ...grpc.CallOption) (*RegisterTemplateCmdByAdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterTemplateCmdByAdminResponse)
	err := c.cc.Invoke(ctx, TemplateService_RegisterTemplateCmdByAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateServiceClient) ListVnfTemplates(ctx context.Context, in *ListVnfTemplatesRequest, opts ...grpc.CallOption) (*ListVnfTemplatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVnfTemplatesResponse)
	err := c.cc.Invoke(ctx, TemplateService_ListVnfTemplates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateServiceClient) UpdateTemplatePermissions(ctx context.Context, in *UpdateTemplatePermissionsRequest, opts ...grpc.CallOption) (*UpdateTemplatePermissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTemplatePermissionsResponse)
	err := c.cc.Invoke(ctx, TemplateService_UpdateTemplatePermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateServiceClient) UpdateVnfTemplate(ctx context.Context, in *UpdateVnfTemplateRequest, opts ...grpc.CallOption) (*UpdateVnfTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateVnfTemplateResponse)
	err := c.cc.Invoke(ctx, TemplateService_UpdateVnfTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateServiceClient) ListTemplates(ctx context.Context, in *ListTemplatesRequest, opts ...grpc.CallOption) (*ListTemplatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTemplatesResponse)
	err := c.cc.Invoke(ctx, TemplateService_ListTemplates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateServiceClient) CreateTemplate(ctx context.Context, in *CreateTemplateRequest, opts ...grpc.CallOption) (*CreateTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTemplateResponse)
	err := c.cc.Invoke(ctx, TemplateService_CreateTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateServiceClient) ListTemplatePermissions(ctx context.Context, in *ListTemplatePermissionsRequest, opts ...grpc.CallOption) (*ListTemplatePermissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTemplatePermissionsResponse)
	err := c.cc.Invoke(ctx, TemplateService_ListTemplatePermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateServiceClient) UpdateTemplateCmdByAdmin(ctx context.Context, in *UpdateTemplateCmdByAdminRequest, opts ...grpc.CallOption) (*UpdateTemplateCmdByAdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTemplateCmdByAdminResponse)
	err := c.cc.Invoke(ctx, TemplateService_UpdateTemplateCmdByAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateServiceClient) DeleteTemplate(ctx context.Context, in *DeleteTemplateRequest, opts ...grpc.CallOption) (*DeleteTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTemplateResponse)
	err := c.cc.Invoke(ctx, TemplateService_DeleteTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateServiceClient) UpdateTemplate(ctx context.Context, in *UpdateTemplateRequest, opts ...grpc.CallOption) (*UpdateTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTemplateResponse)
	err := c.cc.Invoke(ctx, TemplateService_UpdateTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateServiceClient) PrepareTemplate(ctx context.Context, in *PrepareTemplateRequest, opts ...grpc.CallOption) (*PrepareTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PrepareTemplateResponse)
	err := c.cc.Invoke(ctx, TemplateService_PrepareTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateServiceClient) ExtractTemplate(ctx context.Context, in *ExtractTemplateRequest, opts ...grpc.CallOption) (*ExtractTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExtractTemplateResponse)
	err := c.cc.Invoke(ctx, TemplateService_ExtractTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateServiceClient) CopyTemplate(ctx context.Context, in *CopyTemplateRequest, opts ...grpc.CallOption) (*CopyTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CopyTemplateResponse)
	err := c.cc.Invoke(ctx, TemplateService_CopyTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateServiceClient) RegisterVnfTemplate(ctx context.Context, in *RegisterVnfTemplateRequest, opts ...grpc.CallOption) (*RegisterVnfTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterVnfTemplateResponse)
	err := c.cc.Invoke(ctx, TemplateService_RegisterVnfTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateServiceClient) GetUploadParamsForTemplate(ctx context.Context, in *GetUploadParamsForTemplateRequest, opts ...grpc.CallOption) (*GetUploadParamsForTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUploadParamsForTemplateResponse)
	err := c.cc.Invoke(ctx, TemplateService_GetUploadParamsForTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateServiceClient) DeleteVnfTemplate(ctx context.Context, in *DeleteVnfTemplateRequest, opts ...grpc.CallOption) (*DeleteVnfTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteVnfTemplateResponse)
	err := c.cc.Invoke(ctx, TemplateService_DeleteVnfTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateServiceClient) RegisterTemplate(ctx context.Context, in *RegisterTemplateRequest, opts ...grpc.CallOption) (*RegisterTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterTemplateResponse)
	err := c.cc.Invoke(ctx, TemplateService_RegisterTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TemplateServiceServer is the server API for TemplateService service.
// All implementations must embed UnimplementedTemplateServiceServer
// for forward compatibility.
//
// TemplateService provides operations for managing Templates
type TemplateServiceServer interface {
	// RegisterTemplateCmdByAdmin Registers an existing template into the CloudStack cloud.
	RegisterTemplateCmdByAdmin(context.Context, *RegisterTemplateCmdByAdminRequest) (*RegisterTemplateCmdByAdminResponse, error)
	// ListVnfTemplates List all public, private, and privileged VNF templates.
	ListVnfTemplates(context.Context, *ListVnfTemplatesRequest) (*ListVnfTemplatesResponse, error)
	// UpdateTemplatePermissions Updates a template visibility permissions. A public template is visible to all accounts within the same domain. A private template is visible only to the owner of the template. A privileged template is a private template with account permissions added. Only accounts specified under the template permissions are visible to them.
	UpdateTemplatePermissions(context.Context, *UpdateTemplatePermissionsRequest) (*UpdateTemplatePermissionsResponse, error)
	// UpdateVnfTemplate Updates a template to VNF template or attributes of a VNF template.
	UpdateVnfTemplate(context.Context, *UpdateVnfTemplateRequest) (*UpdateVnfTemplateResponse, error)
	// ListTemplates List all public, private, and privileged templates.
	ListTemplates(context.Context, *ListTemplatesRequest) (*ListTemplatesResponse, error)
	// CreateTemplate Creates a template of a virtual machine. The virtual machine must be in a STOPPED state. A template created from this command is automatically designated as a private template visible to the account that created it.
	CreateTemplate(context.Context, *CreateTemplateRequest) (*CreateTemplateResponse, error)
	// ListTemplatePermissions List template visibility and all accounts that have permissions to view this template.
	ListTemplatePermissions(context.Context, *ListTemplatePermissionsRequest) (*ListTemplatePermissionsResponse, error)
	// UpdateTemplateCmdByAdmin Updates attributes of a template.
	UpdateTemplateCmdByAdmin(context.Context, *UpdateTemplateCmdByAdminRequest) (*UpdateTemplateCmdByAdminResponse, error)
	// DeleteTemplate Deletes a template from the system. All virtual machines using the deleted template will not be affected.
	DeleteTemplate(context.Context, *DeleteTemplateRequest) (*DeleteTemplateResponse, error)
	// UpdateTemplate Updates attributes of a template.
	UpdateTemplate(context.Context, *UpdateTemplateRequest) (*UpdateTemplateResponse, error)
	// PrepareTemplate load template into primary storage
	PrepareTemplate(context.Context, *PrepareTemplateRequest) (*PrepareTemplateResponse, error)
	// ExtractTemplate Extracts a template
	ExtractTemplate(context.Context, *ExtractTemplateRequest) (*ExtractTemplateResponse, error)
	// CopyTemplate Copies a template from one zone to another.
	CopyTemplate(context.Context, *CopyTemplateRequest) (*CopyTemplateResponse, error)
	// RegisterVnfTemplate Registers an existing VNF template into the CloudStack cloud.
	RegisterVnfTemplate(context.Context, *RegisterVnfTemplateRequest) (*RegisterVnfTemplateResponse, error)
	// GetUploadParamsForTemplate upload an existing template into the CloudStack cloud.
	GetUploadParamsForTemplate(context.Context, *GetUploadParamsForTemplateRequest) (*GetUploadParamsForTemplateResponse, error)
	// DeleteVnfTemplate Deletes a VNF template from the system. All virtual machines using the deleted template will not be affected.
	DeleteVnfTemplate(context.Context, *DeleteVnfTemplateRequest) (*DeleteVnfTemplateResponse, error)
	// RegisterTemplate Registers an existing template into the CloudStack cloud.
	RegisterTemplate(context.Context, *RegisterTemplateRequest) (*RegisterTemplateResponse, error)
	mustEmbedUnimplementedTemplateServiceServer()
}

// UnimplementedTemplateServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTemplateServiceServer struct{}

func (UnimplementedTemplateServiceServer) RegisterTemplateCmdByAdmin(context.Context, *RegisterTemplateCmdByAdminRequest) (*RegisterTemplateCmdByAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterTemplateCmdByAdmin not implemented")
}
func (UnimplementedTemplateServiceServer) ListVnfTemplates(context.Context, *ListVnfTemplatesRequest) (*ListVnfTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVnfTemplates not implemented")
}
func (UnimplementedTemplateServiceServer) UpdateTemplatePermissions(context.Context, *UpdateTemplatePermissionsRequest) (*UpdateTemplatePermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTemplatePermissions not implemented")
}
func (UnimplementedTemplateServiceServer) UpdateVnfTemplate(context.Context, *UpdateVnfTemplateRequest) (*UpdateVnfTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVnfTemplate not implemented")
}
func (UnimplementedTemplateServiceServer) ListTemplates(context.Context, *ListTemplatesRequest) (*ListTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplates not implemented")
}
func (UnimplementedTemplateServiceServer) CreateTemplate(context.Context, *CreateTemplateRequest) (*CreateTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTemplate not implemented")
}
func (UnimplementedTemplateServiceServer) ListTemplatePermissions(context.Context, *ListTemplatePermissionsRequest) (*ListTemplatePermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplatePermissions not implemented")
}
func (UnimplementedTemplateServiceServer) UpdateTemplateCmdByAdmin(context.Context, *UpdateTemplateCmdByAdminRequest) (*UpdateTemplateCmdByAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTemplateCmdByAdmin not implemented")
}
func (UnimplementedTemplateServiceServer) DeleteTemplate(context.Context, *DeleteTemplateRequest) (*DeleteTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTemplate not implemented")
}
func (UnimplementedTemplateServiceServer) UpdateTemplate(context.Context, *UpdateTemplateRequest) (*UpdateTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTemplate not implemented")
}
func (UnimplementedTemplateServiceServer) PrepareTemplate(context.Context, *PrepareTemplateRequest) (*PrepareTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareTemplate not implemented")
}
func (UnimplementedTemplateServiceServer) ExtractTemplate(context.Context, *ExtractTemplateRequest) (*ExtractTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtractTemplate not implemented")
}
func (UnimplementedTemplateServiceServer) CopyTemplate(context.Context, *CopyTemplateRequest) (*CopyTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyTemplate not implemented")
}
func (UnimplementedTemplateServiceServer) RegisterVnfTemplate(context.Context, *RegisterVnfTemplateRequest) (*RegisterVnfTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterVnfTemplate not implemented")
}
func (UnimplementedTemplateServiceServer) GetUploadParamsForTemplate(context.Context, *GetUploadParamsForTemplateRequest) (*GetUploadParamsForTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUploadParamsForTemplate not implemented")
}
func (UnimplementedTemplateServiceServer) DeleteVnfTemplate(context.Context, *DeleteVnfTemplateRequest) (*DeleteVnfTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVnfTemplate not implemented")
}
func (UnimplementedTemplateServiceServer) RegisterTemplate(context.Context, *RegisterTemplateRequest) (*RegisterTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterTemplate not implemented")
}
func (UnimplementedTemplateServiceServer) mustEmbedUnimplementedTemplateServiceServer() {}
func (UnimplementedTemplateServiceServer) testEmbeddedByValue()                         {}

// UnsafeTemplateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TemplateServiceServer will
// result in compilation errors.
type UnsafeTemplateServiceServer interface {
	mustEmbedUnimplementedTemplateServiceServer()
}

func RegisterTemplateServiceServer(s grpc.ServiceRegistrar, srv TemplateServiceServer) {
	// If the following call pancis, it indicates UnimplementedTemplateServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TemplateService_ServiceDesc, srv)
}

func _TemplateService_RegisterTemplateCmdByAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterTemplateCmdByAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServiceServer).RegisterTemplateCmdByAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplateService_RegisterTemplateCmdByAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServiceServer).RegisterTemplateCmdByAdmin(ctx, req.(*RegisterTemplateCmdByAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateService_ListVnfTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVnfTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServiceServer).ListVnfTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplateService_ListVnfTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServiceServer).ListVnfTemplates(ctx, req.(*ListVnfTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateService_UpdateTemplatePermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTemplatePermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServiceServer).UpdateTemplatePermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplateService_UpdateTemplatePermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServiceServer).UpdateTemplatePermissions(ctx, req.(*UpdateTemplatePermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateService_UpdateVnfTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVnfTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServiceServer).UpdateVnfTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplateService_UpdateVnfTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServiceServer).UpdateVnfTemplate(ctx, req.(*UpdateVnfTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateService_ListTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServiceServer).ListTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplateService_ListTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServiceServer).ListTemplates(ctx, req.(*ListTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateService_CreateTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServiceServer).CreateTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplateService_CreateTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServiceServer).CreateTemplate(ctx, req.(*CreateTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateService_ListTemplatePermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplatePermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServiceServer).ListTemplatePermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplateService_ListTemplatePermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServiceServer).ListTemplatePermissions(ctx, req.(*ListTemplatePermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateService_UpdateTemplateCmdByAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTemplateCmdByAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServiceServer).UpdateTemplateCmdByAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplateService_UpdateTemplateCmdByAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServiceServer).UpdateTemplateCmdByAdmin(ctx, req.(*UpdateTemplateCmdByAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateService_DeleteTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServiceServer).DeleteTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplateService_DeleteTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServiceServer).DeleteTemplate(ctx, req.(*DeleteTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateService_UpdateTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServiceServer).UpdateTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplateService_UpdateTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServiceServer).UpdateTemplate(ctx, req.(*UpdateTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateService_PrepareTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServiceServer).PrepareTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplateService_PrepareTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServiceServer).PrepareTemplate(ctx, req.(*PrepareTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateService_ExtractTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtractTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServiceServer).ExtractTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplateService_ExtractTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServiceServer).ExtractTemplate(ctx, req.(*ExtractTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateService_CopyTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServiceServer).CopyTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplateService_CopyTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServiceServer).CopyTemplate(ctx, req.(*CopyTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateService_RegisterVnfTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterVnfTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServiceServer).RegisterVnfTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplateService_RegisterVnfTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServiceServer).RegisterVnfTemplate(ctx, req.(*RegisterVnfTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateService_GetUploadParamsForTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUploadParamsForTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServiceServer).GetUploadParamsForTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplateService_GetUploadParamsForTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServiceServer).GetUploadParamsForTemplate(ctx, req.(*GetUploadParamsForTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateService_DeleteVnfTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVnfTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServiceServer).DeleteVnfTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplateService_DeleteVnfTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServiceServer).DeleteVnfTemplate(ctx, req.(*DeleteVnfTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateService_RegisterTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateServiceServer).RegisterTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplateService_RegisterTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateServiceServer).RegisterTemplate(ctx, req.(*RegisterTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TemplateService_ServiceDesc is the grpc.ServiceDesc for TemplateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TemplateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloudstack.management.template.v1.TemplateService",
	HandlerType: (*TemplateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterTemplateCmdByAdmin",
			Handler:    _TemplateService_RegisterTemplateCmdByAdmin_Handler,
		},
		{
			MethodName: "ListVnfTemplates",
			Handler:    _TemplateService_ListVnfTemplates_Handler,
		},
		{
			MethodName: "UpdateTemplatePermissions",
			Handler:    _TemplateService_UpdateTemplatePermissions_Handler,
		},
		{
			MethodName: "UpdateVnfTemplate",
			Handler:    _TemplateService_UpdateVnfTemplate_Handler,
		},
		{
			MethodName: "ListTemplates",
			Handler:    _TemplateService_ListTemplates_Handler,
		},
		{
			MethodName: "CreateTemplate",
			Handler:    _TemplateService_CreateTemplate_Handler,
		},
		{
			MethodName: "ListTemplatePermissions",
			Handler:    _TemplateService_ListTemplatePermissions_Handler,
		},
		{
			MethodName: "UpdateTemplateCmdByAdmin",
			Handler:    _TemplateService_UpdateTemplateCmdByAdmin_Handler,
		},
		{
			MethodName: "DeleteTemplate",
			Handler:    _TemplateService_DeleteTemplate_Handler,
		},
		{
			MethodName: "UpdateTemplate",
			Handler:    _TemplateService_UpdateTemplate_Handler,
		},
		{
			MethodName: "PrepareTemplate",
			Handler:    _TemplateService_PrepareTemplate_Handler,
		},
		{
			MethodName: "ExtractTemplate",
			Handler:    _TemplateService_ExtractTemplate_Handler,
		},
		{
			MethodName: "CopyTemplate",
			Handler:    _TemplateService_CopyTemplate_Handler,
		},
		{
			MethodName: "RegisterVnfTemplate",
			Handler:    _TemplateService_RegisterVnfTemplate_Handler,
		},
		{
			MethodName: "GetUploadParamsForTemplate",
			Handler:    _TemplateService_GetUploadParamsForTemplate_Handler,
		},
		{
			MethodName: "DeleteVnfTemplate",
			Handler:    _TemplateService_DeleteVnfTemplate_Handler,
		},
		{
			MethodName: "RegisterTemplate",
			Handler:    _TemplateService_RegisterTemplate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloudstack/management/template/v1/template.gen.proto",
}
