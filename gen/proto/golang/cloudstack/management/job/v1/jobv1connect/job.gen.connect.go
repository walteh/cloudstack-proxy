// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cloudstack/management/job/v1/job.gen.proto

package jobv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/walteh/cloudstack-proxy/gen/proto/golang/cloudstack/management/job/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// JobServiceName is the fully-qualified name of the JobService service.
	JobServiceName = "cloudstack.management.job.v1.JobService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// JobServiceListAsyncJobsProcedure is the fully-qualified name of the JobService's ListAsyncJobs
	// RPC.
	JobServiceListAsyncJobsProcedure = "/cloudstack.management.job.v1.JobService/ListAsyncJobs"
	// JobServiceQueryAsyncJobResultProcedure is the fully-qualified name of the JobService's
	// QueryAsyncJobResult RPC.
	JobServiceQueryAsyncJobResultProcedure = "/cloudstack.management.job.v1.JobService/QueryAsyncJobResult"
)

// JobServiceClient is a client for the cloudstack.management.job.v1.JobService service.
type JobServiceClient interface {
	// ListAsyncJobs Lists all pending asynchronous jobs for the account.
	ListAsyncJobs(context.Context, *connect.Request[v1.ListAsyncJobsRequest]) (*connect.Response[v1.ListAsyncJobsResponse], error)
	// QueryAsyncJobResult Retrieves the current status of asynchronous job.
	QueryAsyncJobResult(context.Context, *connect.Request[v1.QueryAsyncJobResultRequest]) (*connect.Response[v1.QueryAsyncJobResultResponse], error)
}

// NewJobServiceClient constructs a client for the cloudstack.management.job.v1.JobService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewJobServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) JobServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	jobServiceMethods := v1.File_cloudstack_management_job_v1_job_gen_proto.Services().ByName("JobService").Methods()
	return &jobServiceClient{
		listAsyncJobs: connect.NewClient[v1.ListAsyncJobsRequest, v1.ListAsyncJobsResponse](
			httpClient,
			baseURL+JobServiceListAsyncJobsProcedure,
			connect.WithSchema(jobServiceMethods.ByName("ListAsyncJobs")),
			connect.WithClientOptions(opts...),
		),
		queryAsyncJobResult: connect.NewClient[v1.QueryAsyncJobResultRequest, v1.QueryAsyncJobResultResponse](
			httpClient,
			baseURL+JobServiceQueryAsyncJobResultProcedure,
			connect.WithSchema(jobServiceMethods.ByName("QueryAsyncJobResult")),
			connect.WithClientOptions(opts...),
		),
	}
}

// jobServiceClient implements JobServiceClient.
type jobServiceClient struct {
	listAsyncJobs       *connect.Client[v1.ListAsyncJobsRequest, v1.ListAsyncJobsResponse]
	queryAsyncJobResult *connect.Client[v1.QueryAsyncJobResultRequest, v1.QueryAsyncJobResultResponse]
}

// ListAsyncJobs calls cloudstack.management.job.v1.JobService.ListAsyncJobs.
func (c *jobServiceClient) ListAsyncJobs(ctx context.Context, req *connect.Request[v1.ListAsyncJobsRequest]) (*connect.Response[v1.ListAsyncJobsResponse], error) {
	return c.listAsyncJobs.CallUnary(ctx, req)
}

// QueryAsyncJobResult calls cloudstack.management.job.v1.JobService.QueryAsyncJobResult.
func (c *jobServiceClient) QueryAsyncJobResult(ctx context.Context, req *connect.Request[v1.QueryAsyncJobResultRequest]) (*connect.Response[v1.QueryAsyncJobResultResponse], error) {
	return c.queryAsyncJobResult.CallUnary(ctx, req)
}

// JobServiceHandler is an implementation of the cloudstack.management.job.v1.JobService service.
type JobServiceHandler interface {
	// ListAsyncJobs Lists all pending asynchronous jobs for the account.
	ListAsyncJobs(context.Context, *connect.Request[v1.ListAsyncJobsRequest]) (*connect.Response[v1.ListAsyncJobsResponse], error)
	// QueryAsyncJobResult Retrieves the current status of asynchronous job.
	QueryAsyncJobResult(context.Context, *connect.Request[v1.QueryAsyncJobResultRequest]) (*connect.Response[v1.QueryAsyncJobResultResponse], error)
}

// NewJobServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewJobServiceHandler(svc JobServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	jobServiceMethods := v1.File_cloudstack_management_job_v1_job_gen_proto.Services().ByName("JobService").Methods()
	jobServiceListAsyncJobsHandler := connect.NewUnaryHandler(
		JobServiceListAsyncJobsProcedure,
		svc.ListAsyncJobs,
		connect.WithSchema(jobServiceMethods.ByName("ListAsyncJobs")),
		connect.WithHandlerOptions(opts...),
	)
	jobServiceQueryAsyncJobResultHandler := connect.NewUnaryHandler(
		JobServiceQueryAsyncJobResultProcedure,
		svc.QueryAsyncJobResult,
		connect.WithSchema(jobServiceMethods.ByName("QueryAsyncJobResult")),
		connect.WithHandlerOptions(opts...),
	)
	return "/cloudstack.management.job.v1.JobService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case JobServiceListAsyncJobsProcedure:
			jobServiceListAsyncJobsHandler.ServeHTTP(w, r)
		case JobServiceQueryAsyncJobResultProcedure:
			jobServiceQueryAsyncJobResultHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedJobServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedJobServiceHandler struct{}

func (UnimplementedJobServiceHandler) ListAsyncJobs(context.Context, *connect.Request[v1.ListAsyncJobsRequest]) (*connect.Response[v1.ListAsyncJobsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.job.v1.JobService.ListAsyncJobs is not implemented"))
}

func (UnimplementedJobServiceHandler) QueryAsyncJobResult(context.Context, *connect.Request[v1.QueryAsyncJobResultRequest]) (*connect.Response[v1.QueryAsyncJobResultResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.job.v1.JobService.QueryAsyncJobResult is not implemented"))
}
