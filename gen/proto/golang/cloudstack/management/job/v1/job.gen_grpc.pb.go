// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: cloudstack/management/job/v1/job.gen.proto

package jobv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	JobService_ListAsyncJobs_FullMethodName       = "/cloudstack.management.job.v1.JobService/ListAsyncJobs"
	JobService_QueryAsyncJobResult_FullMethodName = "/cloudstack.management.job.v1.JobService/QueryAsyncJobResult"
)

// JobServiceClient is the client API for JobService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// JobService provides operations for managing Jobs
type JobServiceClient interface {
	// ListAsyncJobs Lists all pending asynchronous jobs for the account.
	ListAsyncJobs(ctx context.Context, in *ListAsyncJobsRequest, opts ...grpc.CallOption) (*ListAsyncJobsResponse, error)
	// QueryAsyncJobResult Retrieves the current status of asynchronous job.
	QueryAsyncJobResult(ctx context.Context, in *QueryAsyncJobResultRequest, opts ...grpc.CallOption) (*QueryAsyncJobResultResponse, error)
}

type jobServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJobServiceClient(cc grpc.ClientConnInterface) JobServiceClient {
	return &jobServiceClient{cc}
}

func (c *jobServiceClient) ListAsyncJobs(ctx context.Context, in *ListAsyncJobsRequest, opts ...grpc.CallOption) (*ListAsyncJobsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAsyncJobsResponse)
	err := c.cc.Invoke(ctx, JobService_ListAsyncJobs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) QueryAsyncJobResult(ctx context.Context, in *QueryAsyncJobResultRequest, opts ...grpc.CallOption) (*QueryAsyncJobResultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryAsyncJobResultResponse)
	err := c.cc.Invoke(ctx, JobService_QueryAsyncJobResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobServiceServer is the server API for JobService service.
// All implementations must embed UnimplementedJobServiceServer
// for forward compatibility.
//
// JobService provides operations for managing Jobs
type JobServiceServer interface {
	// ListAsyncJobs Lists all pending asynchronous jobs for the account.
	ListAsyncJobs(context.Context, *ListAsyncJobsRequest) (*ListAsyncJobsResponse, error)
	// QueryAsyncJobResult Retrieves the current status of asynchronous job.
	QueryAsyncJobResult(context.Context, *QueryAsyncJobResultRequest) (*QueryAsyncJobResultResponse, error)
	mustEmbedUnimplementedJobServiceServer()
}

// UnimplementedJobServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedJobServiceServer struct{}

func (UnimplementedJobServiceServer) ListAsyncJobs(context.Context, *ListAsyncJobsRequest) (*ListAsyncJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAsyncJobs not implemented")
}
func (UnimplementedJobServiceServer) QueryAsyncJobResult(context.Context, *QueryAsyncJobResultRequest) (*QueryAsyncJobResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAsyncJobResult not implemented")
}
func (UnimplementedJobServiceServer) mustEmbedUnimplementedJobServiceServer() {}
func (UnimplementedJobServiceServer) testEmbeddedByValue()                    {}

// UnsafeJobServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobServiceServer will
// result in compilation errors.
type UnsafeJobServiceServer interface {
	mustEmbedUnimplementedJobServiceServer()
}

func RegisterJobServiceServer(s grpc.ServiceRegistrar, srv JobServiceServer) {
	// If the following call pancis, it indicates UnimplementedJobServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&JobService_ServiceDesc, srv)
}

func _JobService_ListAsyncJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAsyncJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).ListAsyncJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobService_ListAsyncJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).ListAsyncJobs(ctx, req.(*ListAsyncJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_QueryAsyncJobResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAsyncJobResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).QueryAsyncJobResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobService_QueryAsyncJobResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).QueryAsyncJobResult(ctx, req.(*QueryAsyncJobResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JobService_ServiceDesc is the grpc.ServiceDesc for JobService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloudstack.management.job.v1.JobService",
	HandlerType: (*JobServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAsyncJobs",
			Handler:    _JobService_ListAsyncJobs_Handler,
		},
		{
			MethodName: "QueryAsyncJobResult",
			Handler:    _JobService_QueryAsyncJobResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloudstack/management/job/v1/job.gen.proto",
}
