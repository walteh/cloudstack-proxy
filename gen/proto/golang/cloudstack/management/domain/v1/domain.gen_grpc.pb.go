// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: cloudstack/management/domain/v1/domain.gen.proto

package domainv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DomainService_CreateDomain_FullMethodName          = "/cloudstack.management.domain.v1.DomainService/CreateDomain"
	DomainService_DeleteDomain_FullMethodName          = "/cloudstack.management.domain.v1.DomainService/DeleteDomain"
	DomainService_ListDomainChildren_FullMethodName    = "/cloudstack.management.domain.v1.DomainService/ListDomainChildren"
	DomainService_ListDomains_FullMethodName           = "/cloudstack.management.domain.v1.DomainService/ListDomains"
	DomainService_ListDomainsCmdByAdmin_FullMethodName = "/cloudstack.management.domain.v1.DomainService/ListDomainsCmdByAdmin"
	DomainService_MoveDomain_FullMethodName            = "/cloudstack.management.domain.v1.DomainService/MoveDomain"
	DomainService_UpdateDomain_FullMethodName          = "/cloudstack.management.domain.v1.DomainService/UpdateDomain"
)

// DomainServiceClient is the client API for DomainService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// DomainService provides operations for managing Domains
type DomainServiceClient interface {
	// CreateDomain Creates a domain
	CreateDomain(ctx context.Context, in *CreateDomainRequest, opts ...grpc.CallOption) (*CreateDomainResponse, error)
	// DeleteDomain Deletes a specified domain
	DeleteDomain(ctx context.Context, in *DeleteDomainRequest, opts ...grpc.CallOption) (*DeleteDomainResponse, error)
	// ListDomainChildren Lists all children domains belonging to a specified domain
	ListDomainChildren(ctx context.Context, in *ListDomainChildrenRequest, opts ...grpc.CallOption) (*ListDomainChildrenResponse, error)
	// ListDomains Lists domains and provides detailed information for listed domains
	ListDomains(ctx context.Context, in *ListDomainsRequest, opts ...grpc.CallOption) (*ListDomainsResponse, error)
	// ListDomainsCmdByAdmin Lists domains and provides detailed information for listed domains
	ListDomainsCmdByAdmin(ctx context.Context, in *ListDomainsCmdByAdminRequest, opts ...grpc.CallOption) (*ListDomainsCmdByAdminResponse, error)
	// MoveDomain Moves a domain and its children to a new parent domain.
	MoveDomain(ctx context.Context, in *MoveDomainRequest, opts ...grpc.CallOption) (*MoveDomainResponse, error)
	// UpdateDomain Updates a domain with a new name
	UpdateDomain(ctx context.Context, in *UpdateDomainRequest, opts ...grpc.CallOption) (*UpdateDomainResponse, error)
}

type domainServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDomainServiceClient(cc grpc.ClientConnInterface) DomainServiceClient {
	return &domainServiceClient{cc}
}

func (c *domainServiceClient) CreateDomain(ctx context.Context, in *CreateDomainRequest, opts ...grpc.CallOption) (*CreateDomainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDomainResponse)
	err := c.cc.Invoke(ctx, DomainService_CreateDomain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainServiceClient) DeleteDomain(ctx context.Context, in *DeleteDomainRequest, opts ...grpc.CallOption) (*DeleteDomainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDomainResponse)
	err := c.cc.Invoke(ctx, DomainService_DeleteDomain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainServiceClient) ListDomainChildren(ctx context.Context, in *ListDomainChildrenRequest, opts ...grpc.CallOption) (*ListDomainChildrenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDomainChildrenResponse)
	err := c.cc.Invoke(ctx, DomainService_ListDomainChildren_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainServiceClient) ListDomains(ctx context.Context, in *ListDomainsRequest, opts ...grpc.CallOption) (*ListDomainsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDomainsResponse)
	err := c.cc.Invoke(ctx, DomainService_ListDomains_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainServiceClient) ListDomainsCmdByAdmin(ctx context.Context, in *ListDomainsCmdByAdminRequest, opts ...grpc.CallOption) (*ListDomainsCmdByAdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDomainsCmdByAdminResponse)
	err := c.cc.Invoke(ctx, DomainService_ListDomainsCmdByAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainServiceClient) MoveDomain(ctx context.Context, in *MoveDomainRequest, opts ...grpc.CallOption) (*MoveDomainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MoveDomainResponse)
	err := c.cc.Invoke(ctx, DomainService_MoveDomain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainServiceClient) UpdateDomain(ctx context.Context, in *UpdateDomainRequest, opts ...grpc.CallOption) (*UpdateDomainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDomainResponse)
	err := c.cc.Invoke(ctx, DomainService_UpdateDomain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DomainServiceServer is the server API for DomainService service.
// All implementations must embed UnimplementedDomainServiceServer
// for forward compatibility.
//
// DomainService provides operations for managing Domains
type DomainServiceServer interface {
	// CreateDomain Creates a domain
	CreateDomain(context.Context, *CreateDomainRequest) (*CreateDomainResponse, error)
	// DeleteDomain Deletes a specified domain
	DeleteDomain(context.Context, *DeleteDomainRequest) (*DeleteDomainResponse, error)
	// ListDomainChildren Lists all children domains belonging to a specified domain
	ListDomainChildren(context.Context, *ListDomainChildrenRequest) (*ListDomainChildrenResponse, error)
	// ListDomains Lists domains and provides detailed information for listed domains
	ListDomains(context.Context, *ListDomainsRequest) (*ListDomainsResponse, error)
	// ListDomainsCmdByAdmin Lists domains and provides detailed information for listed domains
	ListDomainsCmdByAdmin(context.Context, *ListDomainsCmdByAdminRequest) (*ListDomainsCmdByAdminResponse, error)
	// MoveDomain Moves a domain and its children to a new parent domain.
	MoveDomain(context.Context, *MoveDomainRequest) (*MoveDomainResponse, error)
	// UpdateDomain Updates a domain with a new name
	UpdateDomain(context.Context, *UpdateDomainRequest) (*UpdateDomainResponse, error)
	mustEmbedUnimplementedDomainServiceServer()
}

// UnimplementedDomainServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDomainServiceServer struct{}

func (UnimplementedDomainServiceServer) CreateDomain(context.Context, *CreateDomainRequest) (*CreateDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDomain not implemented")
}
func (UnimplementedDomainServiceServer) DeleteDomain(context.Context, *DeleteDomainRequest) (*DeleteDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDomain not implemented")
}
func (UnimplementedDomainServiceServer) ListDomainChildren(context.Context, *ListDomainChildrenRequest) (*ListDomainChildrenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDomainChildren not implemented")
}
func (UnimplementedDomainServiceServer) ListDomains(context.Context, *ListDomainsRequest) (*ListDomainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDomains not implemented")
}
func (UnimplementedDomainServiceServer) ListDomainsCmdByAdmin(context.Context, *ListDomainsCmdByAdminRequest) (*ListDomainsCmdByAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDomainsCmdByAdmin not implemented")
}
func (UnimplementedDomainServiceServer) MoveDomain(context.Context, *MoveDomainRequest) (*MoveDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveDomain not implemented")
}
func (UnimplementedDomainServiceServer) UpdateDomain(context.Context, *UpdateDomainRequest) (*UpdateDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDomain not implemented")
}
func (UnimplementedDomainServiceServer) mustEmbedUnimplementedDomainServiceServer() {}
func (UnimplementedDomainServiceServer) testEmbeddedByValue()                       {}

// UnsafeDomainServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DomainServiceServer will
// result in compilation errors.
type UnsafeDomainServiceServer interface {
	mustEmbedUnimplementedDomainServiceServer()
}

func RegisterDomainServiceServer(s grpc.ServiceRegistrar, srv DomainServiceServer) {
	// If the following call pancis, it indicates UnimplementedDomainServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DomainService_ServiceDesc, srv)
}

func _DomainService_CreateDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainServiceServer).CreateDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DomainService_CreateDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainServiceServer).CreateDomain(ctx, req.(*CreateDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DomainService_DeleteDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainServiceServer).DeleteDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DomainService_DeleteDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainServiceServer).DeleteDomain(ctx, req.(*DeleteDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DomainService_ListDomainChildren_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDomainChildrenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainServiceServer).ListDomainChildren(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DomainService_ListDomainChildren_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainServiceServer).ListDomainChildren(ctx, req.(*ListDomainChildrenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DomainService_ListDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDomainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainServiceServer).ListDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DomainService_ListDomains_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainServiceServer).ListDomains(ctx, req.(*ListDomainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DomainService_ListDomainsCmdByAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDomainsCmdByAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainServiceServer).ListDomainsCmdByAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DomainService_ListDomainsCmdByAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainServiceServer).ListDomainsCmdByAdmin(ctx, req.(*ListDomainsCmdByAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DomainService_MoveDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainServiceServer).MoveDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DomainService_MoveDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainServiceServer).MoveDomain(ctx, req.(*MoveDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DomainService_UpdateDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainServiceServer).UpdateDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DomainService_UpdateDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainServiceServer).UpdateDomain(ctx, req.(*UpdateDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DomainService_ServiceDesc is the grpc.ServiceDesc for DomainService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DomainService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloudstack.management.domain.v1.DomainService",
	HandlerType: (*DomainServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDomain",
			Handler:    _DomainService_CreateDomain_Handler,
		},
		{
			MethodName: "DeleteDomain",
			Handler:    _DomainService_DeleteDomain_Handler,
		},
		{
			MethodName: "ListDomainChildren",
			Handler:    _DomainService_ListDomainChildren_Handler,
		},
		{
			MethodName: "ListDomains",
			Handler:    _DomainService_ListDomains_Handler,
		},
		{
			MethodName: "ListDomainsCmdByAdmin",
			Handler:    _DomainService_ListDomainsCmdByAdmin_Handler,
		},
		{
			MethodName: "MoveDomain",
			Handler:    _DomainService_MoveDomain_Handler,
		},
		{
			MethodName: "UpdateDomain",
			Handler:    _DomainService_UpdateDomain_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloudstack/management/domain/v1/domain.gen.proto",
}
