// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cloudstack/management/domain/v1/domain.gen.proto

package domainv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/walteh/cloudstack-proxy/gen/proto/golang/cloudstack/management/domain/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DomainServiceName is the fully-qualified name of the DomainService service.
	DomainServiceName = "cloudstack.management.domain.v1.DomainService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DomainServiceListDomainsCmdByAdminProcedure is the fully-qualified name of the DomainService's
	// ListDomainsCmdByAdmin RPC.
	DomainServiceListDomainsCmdByAdminProcedure = "/cloudstack.management.domain.v1.DomainService/ListDomainsCmdByAdmin"
	// DomainServiceDeleteDomainProcedure is the fully-qualified name of the DomainService's
	// DeleteDomain RPC.
	DomainServiceDeleteDomainProcedure = "/cloudstack.management.domain.v1.DomainService/DeleteDomain"
	// DomainServiceMoveDomainProcedure is the fully-qualified name of the DomainService's MoveDomain
	// RPC.
	DomainServiceMoveDomainProcedure = "/cloudstack.management.domain.v1.DomainService/MoveDomain"
	// DomainServiceCreateDomainProcedure is the fully-qualified name of the DomainService's
	// CreateDomain RPC.
	DomainServiceCreateDomainProcedure = "/cloudstack.management.domain.v1.DomainService/CreateDomain"
	// DomainServiceListDomainsProcedure is the fully-qualified name of the DomainService's ListDomains
	// RPC.
	DomainServiceListDomainsProcedure = "/cloudstack.management.domain.v1.DomainService/ListDomains"
	// DomainServiceListDomainChildrenProcedure is the fully-qualified name of the DomainService's
	// ListDomainChildren RPC.
	DomainServiceListDomainChildrenProcedure = "/cloudstack.management.domain.v1.DomainService/ListDomainChildren"
	// DomainServiceUpdateDomainProcedure is the fully-qualified name of the DomainService's
	// UpdateDomain RPC.
	DomainServiceUpdateDomainProcedure = "/cloudstack.management.domain.v1.DomainService/UpdateDomain"
)

// DomainServiceClient is a client for the cloudstack.management.domain.v1.DomainService service.
type DomainServiceClient interface {
	// ListDomainsCmdByAdmin Lists domains and provides detailed information for listed domains
	ListDomainsCmdByAdmin(context.Context, *connect.Request[v1.ListDomainsCmdByAdminRequest]) (*connect.Response[v1.ListDomainsCmdByAdminResponse], error)
	// DeleteDomain Deletes a specified domain
	DeleteDomain(context.Context, *connect.Request[v1.DeleteDomainRequest]) (*connect.Response[v1.DeleteDomainResponse], error)
	// MoveDomain Moves a domain and its children to a new parent domain.
	MoveDomain(context.Context, *connect.Request[v1.MoveDomainRequest]) (*connect.Response[v1.MoveDomainResponse], error)
	// CreateDomain Creates a domain
	CreateDomain(context.Context, *connect.Request[v1.CreateDomainRequest]) (*connect.Response[v1.CreateDomainResponse], error)
	// ListDomains Lists domains and provides detailed information for listed domains
	ListDomains(context.Context, *connect.Request[v1.ListDomainsRequest]) (*connect.Response[v1.ListDomainsResponse], error)
	// ListDomainChildren Lists all children domains belonging to a specified domain
	ListDomainChildren(context.Context, *connect.Request[v1.ListDomainChildrenRequest]) (*connect.Response[v1.ListDomainChildrenResponse], error)
	// UpdateDomain Updates a domain with a new name
	UpdateDomain(context.Context, *connect.Request[v1.UpdateDomainRequest]) (*connect.Response[v1.UpdateDomainResponse], error)
}

// NewDomainServiceClient constructs a client for the cloudstack.management.domain.v1.DomainService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDomainServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DomainServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	domainServiceMethods := v1.File_cloudstack_management_domain_v1_domain_gen_proto.Services().ByName("DomainService").Methods()
	return &domainServiceClient{
		listDomainsCmdByAdmin: connect.NewClient[v1.ListDomainsCmdByAdminRequest, v1.ListDomainsCmdByAdminResponse](
			httpClient,
			baseURL+DomainServiceListDomainsCmdByAdminProcedure,
			connect.WithSchema(domainServiceMethods.ByName("ListDomainsCmdByAdmin")),
			connect.WithClientOptions(opts...),
		),
		deleteDomain: connect.NewClient[v1.DeleteDomainRequest, v1.DeleteDomainResponse](
			httpClient,
			baseURL+DomainServiceDeleteDomainProcedure,
			connect.WithSchema(domainServiceMethods.ByName("DeleteDomain")),
			connect.WithClientOptions(opts...),
		),
		moveDomain: connect.NewClient[v1.MoveDomainRequest, v1.MoveDomainResponse](
			httpClient,
			baseURL+DomainServiceMoveDomainProcedure,
			connect.WithSchema(domainServiceMethods.ByName("MoveDomain")),
			connect.WithClientOptions(opts...),
		),
		createDomain: connect.NewClient[v1.CreateDomainRequest, v1.CreateDomainResponse](
			httpClient,
			baseURL+DomainServiceCreateDomainProcedure,
			connect.WithSchema(domainServiceMethods.ByName("CreateDomain")),
			connect.WithClientOptions(opts...),
		),
		listDomains: connect.NewClient[v1.ListDomainsRequest, v1.ListDomainsResponse](
			httpClient,
			baseURL+DomainServiceListDomainsProcedure,
			connect.WithSchema(domainServiceMethods.ByName("ListDomains")),
			connect.WithClientOptions(opts...),
		),
		listDomainChildren: connect.NewClient[v1.ListDomainChildrenRequest, v1.ListDomainChildrenResponse](
			httpClient,
			baseURL+DomainServiceListDomainChildrenProcedure,
			connect.WithSchema(domainServiceMethods.ByName("ListDomainChildren")),
			connect.WithClientOptions(opts...),
		),
		updateDomain: connect.NewClient[v1.UpdateDomainRequest, v1.UpdateDomainResponse](
			httpClient,
			baseURL+DomainServiceUpdateDomainProcedure,
			connect.WithSchema(domainServiceMethods.ByName("UpdateDomain")),
			connect.WithClientOptions(opts...),
		),
	}
}

// domainServiceClient implements DomainServiceClient.
type domainServiceClient struct {
	listDomainsCmdByAdmin *connect.Client[v1.ListDomainsCmdByAdminRequest, v1.ListDomainsCmdByAdminResponse]
	deleteDomain          *connect.Client[v1.DeleteDomainRequest, v1.DeleteDomainResponse]
	moveDomain            *connect.Client[v1.MoveDomainRequest, v1.MoveDomainResponse]
	createDomain          *connect.Client[v1.CreateDomainRequest, v1.CreateDomainResponse]
	listDomains           *connect.Client[v1.ListDomainsRequest, v1.ListDomainsResponse]
	listDomainChildren    *connect.Client[v1.ListDomainChildrenRequest, v1.ListDomainChildrenResponse]
	updateDomain          *connect.Client[v1.UpdateDomainRequest, v1.UpdateDomainResponse]
}

// ListDomainsCmdByAdmin calls cloudstack.management.domain.v1.DomainService.ListDomainsCmdByAdmin.
func (c *domainServiceClient) ListDomainsCmdByAdmin(ctx context.Context, req *connect.Request[v1.ListDomainsCmdByAdminRequest]) (*connect.Response[v1.ListDomainsCmdByAdminResponse], error) {
	return c.listDomainsCmdByAdmin.CallUnary(ctx, req)
}

// DeleteDomain calls cloudstack.management.domain.v1.DomainService.DeleteDomain.
func (c *domainServiceClient) DeleteDomain(ctx context.Context, req *connect.Request[v1.DeleteDomainRequest]) (*connect.Response[v1.DeleteDomainResponse], error) {
	return c.deleteDomain.CallUnary(ctx, req)
}

// MoveDomain calls cloudstack.management.domain.v1.DomainService.MoveDomain.
func (c *domainServiceClient) MoveDomain(ctx context.Context, req *connect.Request[v1.MoveDomainRequest]) (*connect.Response[v1.MoveDomainResponse], error) {
	return c.moveDomain.CallUnary(ctx, req)
}

// CreateDomain calls cloudstack.management.domain.v1.DomainService.CreateDomain.
func (c *domainServiceClient) CreateDomain(ctx context.Context, req *connect.Request[v1.CreateDomainRequest]) (*connect.Response[v1.CreateDomainResponse], error) {
	return c.createDomain.CallUnary(ctx, req)
}

// ListDomains calls cloudstack.management.domain.v1.DomainService.ListDomains.
func (c *domainServiceClient) ListDomains(ctx context.Context, req *connect.Request[v1.ListDomainsRequest]) (*connect.Response[v1.ListDomainsResponse], error) {
	return c.listDomains.CallUnary(ctx, req)
}

// ListDomainChildren calls cloudstack.management.domain.v1.DomainService.ListDomainChildren.
func (c *domainServiceClient) ListDomainChildren(ctx context.Context, req *connect.Request[v1.ListDomainChildrenRequest]) (*connect.Response[v1.ListDomainChildrenResponse], error) {
	return c.listDomainChildren.CallUnary(ctx, req)
}

// UpdateDomain calls cloudstack.management.domain.v1.DomainService.UpdateDomain.
func (c *domainServiceClient) UpdateDomain(ctx context.Context, req *connect.Request[v1.UpdateDomainRequest]) (*connect.Response[v1.UpdateDomainResponse], error) {
	return c.updateDomain.CallUnary(ctx, req)
}

// DomainServiceHandler is an implementation of the cloudstack.management.domain.v1.DomainService
// service.
type DomainServiceHandler interface {
	// ListDomainsCmdByAdmin Lists domains and provides detailed information for listed domains
	ListDomainsCmdByAdmin(context.Context, *connect.Request[v1.ListDomainsCmdByAdminRequest]) (*connect.Response[v1.ListDomainsCmdByAdminResponse], error)
	// DeleteDomain Deletes a specified domain
	DeleteDomain(context.Context, *connect.Request[v1.DeleteDomainRequest]) (*connect.Response[v1.DeleteDomainResponse], error)
	// MoveDomain Moves a domain and its children to a new parent domain.
	MoveDomain(context.Context, *connect.Request[v1.MoveDomainRequest]) (*connect.Response[v1.MoveDomainResponse], error)
	// CreateDomain Creates a domain
	CreateDomain(context.Context, *connect.Request[v1.CreateDomainRequest]) (*connect.Response[v1.CreateDomainResponse], error)
	// ListDomains Lists domains and provides detailed information for listed domains
	ListDomains(context.Context, *connect.Request[v1.ListDomainsRequest]) (*connect.Response[v1.ListDomainsResponse], error)
	// ListDomainChildren Lists all children domains belonging to a specified domain
	ListDomainChildren(context.Context, *connect.Request[v1.ListDomainChildrenRequest]) (*connect.Response[v1.ListDomainChildrenResponse], error)
	// UpdateDomain Updates a domain with a new name
	UpdateDomain(context.Context, *connect.Request[v1.UpdateDomainRequest]) (*connect.Response[v1.UpdateDomainResponse], error)
}

// NewDomainServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDomainServiceHandler(svc DomainServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	domainServiceMethods := v1.File_cloudstack_management_domain_v1_domain_gen_proto.Services().ByName("DomainService").Methods()
	domainServiceListDomainsCmdByAdminHandler := connect.NewUnaryHandler(
		DomainServiceListDomainsCmdByAdminProcedure,
		svc.ListDomainsCmdByAdmin,
		connect.WithSchema(domainServiceMethods.ByName("ListDomainsCmdByAdmin")),
		connect.WithHandlerOptions(opts...),
	)
	domainServiceDeleteDomainHandler := connect.NewUnaryHandler(
		DomainServiceDeleteDomainProcedure,
		svc.DeleteDomain,
		connect.WithSchema(domainServiceMethods.ByName("DeleteDomain")),
		connect.WithHandlerOptions(opts...),
	)
	domainServiceMoveDomainHandler := connect.NewUnaryHandler(
		DomainServiceMoveDomainProcedure,
		svc.MoveDomain,
		connect.WithSchema(domainServiceMethods.ByName("MoveDomain")),
		connect.WithHandlerOptions(opts...),
	)
	domainServiceCreateDomainHandler := connect.NewUnaryHandler(
		DomainServiceCreateDomainProcedure,
		svc.CreateDomain,
		connect.WithSchema(domainServiceMethods.ByName("CreateDomain")),
		connect.WithHandlerOptions(opts...),
	)
	domainServiceListDomainsHandler := connect.NewUnaryHandler(
		DomainServiceListDomainsProcedure,
		svc.ListDomains,
		connect.WithSchema(domainServiceMethods.ByName("ListDomains")),
		connect.WithHandlerOptions(opts...),
	)
	domainServiceListDomainChildrenHandler := connect.NewUnaryHandler(
		DomainServiceListDomainChildrenProcedure,
		svc.ListDomainChildren,
		connect.WithSchema(domainServiceMethods.ByName("ListDomainChildren")),
		connect.WithHandlerOptions(opts...),
	)
	domainServiceUpdateDomainHandler := connect.NewUnaryHandler(
		DomainServiceUpdateDomainProcedure,
		svc.UpdateDomain,
		connect.WithSchema(domainServiceMethods.ByName("UpdateDomain")),
		connect.WithHandlerOptions(opts...),
	)
	return "/cloudstack.management.domain.v1.DomainService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DomainServiceListDomainsCmdByAdminProcedure:
			domainServiceListDomainsCmdByAdminHandler.ServeHTTP(w, r)
		case DomainServiceDeleteDomainProcedure:
			domainServiceDeleteDomainHandler.ServeHTTP(w, r)
		case DomainServiceMoveDomainProcedure:
			domainServiceMoveDomainHandler.ServeHTTP(w, r)
		case DomainServiceCreateDomainProcedure:
			domainServiceCreateDomainHandler.ServeHTTP(w, r)
		case DomainServiceListDomainsProcedure:
			domainServiceListDomainsHandler.ServeHTTP(w, r)
		case DomainServiceListDomainChildrenProcedure:
			domainServiceListDomainChildrenHandler.ServeHTTP(w, r)
		case DomainServiceUpdateDomainProcedure:
			domainServiceUpdateDomainHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDomainServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDomainServiceHandler struct{}

func (UnimplementedDomainServiceHandler) ListDomainsCmdByAdmin(context.Context, *connect.Request[v1.ListDomainsCmdByAdminRequest]) (*connect.Response[v1.ListDomainsCmdByAdminResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.domain.v1.DomainService.ListDomainsCmdByAdmin is not implemented"))
}

func (UnimplementedDomainServiceHandler) DeleteDomain(context.Context, *connect.Request[v1.DeleteDomainRequest]) (*connect.Response[v1.DeleteDomainResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.domain.v1.DomainService.DeleteDomain is not implemented"))
}

func (UnimplementedDomainServiceHandler) MoveDomain(context.Context, *connect.Request[v1.MoveDomainRequest]) (*connect.Response[v1.MoveDomainResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.domain.v1.DomainService.MoveDomain is not implemented"))
}

func (UnimplementedDomainServiceHandler) CreateDomain(context.Context, *connect.Request[v1.CreateDomainRequest]) (*connect.Response[v1.CreateDomainResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.domain.v1.DomainService.CreateDomain is not implemented"))
}

func (UnimplementedDomainServiceHandler) ListDomains(context.Context, *connect.Request[v1.ListDomainsRequest]) (*connect.Response[v1.ListDomainsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.domain.v1.DomainService.ListDomains is not implemented"))
}

func (UnimplementedDomainServiceHandler) ListDomainChildren(context.Context, *connect.Request[v1.ListDomainChildrenRequest]) (*connect.Response[v1.ListDomainChildrenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.domain.v1.DomainService.ListDomainChildren is not implemented"))
}

func (UnimplementedDomainServiceHandler) UpdateDomain(context.Context, *connect.Request[v1.UpdateDomainRequest]) (*connect.Response[v1.UpdateDomainResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.domain.v1.DomainService.UpdateDomain is not implemented"))
}
