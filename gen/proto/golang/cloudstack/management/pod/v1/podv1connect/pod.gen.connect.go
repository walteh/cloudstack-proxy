// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cloudstack/management/pod/v1/pod.gen.proto

package podv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/walteh/cloudstack-proxy/gen/proto/golang/cloudstack/management/pod/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PodServiceName is the fully-qualified name of the PodService service.
	PodServiceName = "cloudstack.management.pod.v1.PodService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PodServiceCreatePodProcedure is the fully-qualified name of the PodService's CreatePod RPC.
	PodServiceCreatePodProcedure = "/cloudstack.management.pod.v1.PodService/CreatePod"
	// PodServiceDeletePodProcedure is the fully-qualified name of the PodService's DeletePod RPC.
	PodServiceDeletePodProcedure = "/cloudstack.management.pod.v1.PodService/DeletePod"
	// PodServiceListPodsByProcedure is the fully-qualified name of the PodService's ListPodsBy RPC.
	PodServiceListPodsByProcedure = "/cloudstack.management.pod.v1.PodService/ListPodsBy"
	// PodServiceUpdatePodProcedure is the fully-qualified name of the PodService's UpdatePod RPC.
	PodServiceUpdatePodProcedure = "/cloudstack.management.pod.v1.PodService/UpdatePod"
)

// PodServiceClient is a client for the cloudstack.management.pod.v1.PodService service.
type PodServiceClient interface {
	// CreatePod Creates a new Pod.
	CreatePod(context.Context, *connect.Request[v1.CreatePodRequest]) (*connect.Response[v1.CreatePodResponse], error)
	// DeletePod Deletes a Pod.
	DeletePod(context.Context, *connect.Request[v1.DeletePodRequest]) (*connect.Response[v1.DeletePodResponse], error)
	// ListPodsBy Lists all Pods.
	ListPodsBy(context.Context, *connect.Request[v1.ListPodsByRequest]) (*connect.Response[v1.ListPodsByResponse], error)
	// UpdatePod Updates a Pod.
	UpdatePod(context.Context, *connect.Request[v1.UpdatePodRequest]) (*connect.Response[v1.UpdatePodResponse], error)
}

// NewPodServiceClient constructs a client for the cloudstack.management.pod.v1.PodService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPodServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PodServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	podServiceMethods := v1.File_cloudstack_management_pod_v1_pod_gen_proto.Services().ByName("PodService").Methods()
	return &podServiceClient{
		createPod: connect.NewClient[v1.CreatePodRequest, v1.CreatePodResponse](
			httpClient,
			baseURL+PodServiceCreatePodProcedure,
			connect.WithSchema(podServiceMethods.ByName("CreatePod")),
			connect.WithClientOptions(opts...),
		),
		deletePod: connect.NewClient[v1.DeletePodRequest, v1.DeletePodResponse](
			httpClient,
			baseURL+PodServiceDeletePodProcedure,
			connect.WithSchema(podServiceMethods.ByName("DeletePod")),
			connect.WithClientOptions(opts...),
		),
		listPodsBy: connect.NewClient[v1.ListPodsByRequest, v1.ListPodsByResponse](
			httpClient,
			baseURL+PodServiceListPodsByProcedure,
			connect.WithSchema(podServiceMethods.ByName("ListPodsBy")),
			connect.WithClientOptions(opts...),
		),
		updatePod: connect.NewClient[v1.UpdatePodRequest, v1.UpdatePodResponse](
			httpClient,
			baseURL+PodServiceUpdatePodProcedure,
			connect.WithSchema(podServiceMethods.ByName("UpdatePod")),
			connect.WithClientOptions(opts...),
		),
	}
}

// podServiceClient implements PodServiceClient.
type podServiceClient struct {
	createPod  *connect.Client[v1.CreatePodRequest, v1.CreatePodResponse]
	deletePod  *connect.Client[v1.DeletePodRequest, v1.DeletePodResponse]
	listPodsBy *connect.Client[v1.ListPodsByRequest, v1.ListPodsByResponse]
	updatePod  *connect.Client[v1.UpdatePodRequest, v1.UpdatePodResponse]
}

// CreatePod calls cloudstack.management.pod.v1.PodService.CreatePod.
func (c *podServiceClient) CreatePod(ctx context.Context, req *connect.Request[v1.CreatePodRequest]) (*connect.Response[v1.CreatePodResponse], error) {
	return c.createPod.CallUnary(ctx, req)
}

// DeletePod calls cloudstack.management.pod.v1.PodService.DeletePod.
func (c *podServiceClient) DeletePod(ctx context.Context, req *connect.Request[v1.DeletePodRequest]) (*connect.Response[v1.DeletePodResponse], error) {
	return c.deletePod.CallUnary(ctx, req)
}

// ListPodsBy calls cloudstack.management.pod.v1.PodService.ListPodsBy.
func (c *podServiceClient) ListPodsBy(ctx context.Context, req *connect.Request[v1.ListPodsByRequest]) (*connect.Response[v1.ListPodsByResponse], error) {
	return c.listPodsBy.CallUnary(ctx, req)
}

// UpdatePod calls cloudstack.management.pod.v1.PodService.UpdatePod.
func (c *podServiceClient) UpdatePod(ctx context.Context, req *connect.Request[v1.UpdatePodRequest]) (*connect.Response[v1.UpdatePodResponse], error) {
	return c.updatePod.CallUnary(ctx, req)
}

// PodServiceHandler is an implementation of the cloudstack.management.pod.v1.PodService service.
type PodServiceHandler interface {
	// CreatePod Creates a new Pod.
	CreatePod(context.Context, *connect.Request[v1.CreatePodRequest]) (*connect.Response[v1.CreatePodResponse], error)
	// DeletePod Deletes a Pod.
	DeletePod(context.Context, *connect.Request[v1.DeletePodRequest]) (*connect.Response[v1.DeletePodResponse], error)
	// ListPodsBy Lists all Pods.
	ListPodsBy(context.Context, *connect.Request[v1.ListPodsByRequest]) (*connect.Response[v1.ListPodsByResponse], error)
	// UpdatePod Updates a Pod.
	UpdatePod(context.Context, *connect.Request[v1.UpdatePodRequest]) (*connect.Response[v1.UpdatePodResponse], error)
}

// NewPodServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPodServiceHandler(svc PodServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	podServiceMethods := v1.File_cloudstack_management_pod_v1_pod_gen_proto.Services().ByName("PodService").Methods()
	podServiceCreatePodHandler := connect.NewUnaryHandler(
		PodServiceCreatePodProcedure,
		svc.CreatePod,
		connect.WithSchema(podServiceMethods.ByName("CreatePod")),
		connect.WithHandlerOptions(opts...),
	)
	podServiceDeletePodHandler := connect.NewUnaryHandler(
		PodServiceDeletePodProcedure,
		svc.DeletePod,
		connect.WithSchema(podServiceMethods.ByName("DeletePod")),
		connect.WithHandlerOptions(opts...),
	)
	podServiceListPodsByHandler := connect.NewUnaryHandler(
		PodServiceListPodsByProcedure,
		svc.ListPodsBy,
		connect.WithSchema(podServiceMethods.ByName("ListPodsBy")),
		connect.WithHandlerOptions(opts...),
	)
	podServiceUpdatePodHandler := connect.NewUnaryHandler(
		PodServiceUpdatePodProcedure,
		svc.UpdatePod,
		connect.WithSchema(podServiceMethods.ByName("UpdatePod")),
		connect.WithHandlerOptions(opts...),
	)
	return "/cloudstack.management.pod.v1.PodService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PodServiceCreatePodProcedure:
			podServiceCreatePodHandler.ServeHTTP(w, r)
		case PodServiceDeletePodProcedure:
			podServiceDeletePodHandler.ServeHTTP(w, r)
		case PodServiceListPodsByProcedure:
			podServiceListPodsByHandler.ServeHTTP(w, r)
		case PodServiceUpdatePodProcedure:
			podServiceUpdatePodHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPodServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPodServiceHandler struct{}

func (UnimplementedPodServiceHandler) CreatePod(context.Context, *connect.Request[v1.CreatePodRequest]) (*connect.Response[v1.CreatePodResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.pod.v1.PodService.CreatePod is not implemented"))
}

func (UnimplementedPodServiceHandler) DeletePod(context.Context, *connect.Request[v1.DeletePodRequest]) (*connect.Response[v1.DeletePodResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.pod.v1.PodService.DeletePod is not implemented"))
}

func (UnimplementedPodServiceHandler) ListPodsBy(context.Context, *connect.Request[v1.ListPodsByRequest]) (*connect.Response[v1.ListPodsByResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.pod.v1.PodService.ListPodsBy is not implemented"))
}

func (UnimplementedPodServiceHandler) UpdatePod(context.Context, *connect.Request[v1.UpdatePodRequest]) (*connect.Response[v1.UpdatePodResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.pod.v1.PodService.UpdatePod is not implemented"))
}
