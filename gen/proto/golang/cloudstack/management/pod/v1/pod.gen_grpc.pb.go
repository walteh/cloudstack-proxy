// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: cloudstack/management/pod/v1/pod.gen.proto

package podv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PodService_UpdatePod_FullMethodName  = "/cloudstack.management.pod.v1.PodService/UpdatePod"
	PodService_ListPodsBy_FullMethodName = "/cloudstack.management.pod.v1.PodService/ListPodsBy"
	PodService_DeletePod_FullMethodName  = "/cloudstack.management.pod.v1.PodService/DeletePod"
	PodService_CreatePod_FullMethodName  = "/cloudstack.management.pod.v1.PodService/CreatePod"
)

// PodServiceClient is the client API for PodService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// PodService provides operations for managing Pods
type PodServiceClient interface {
	// UpdatePod Updates a Pod.
	UpdatePod(ctx context.Context, in *UpdatePodRequest, opts ...grpc.CallOption) (*UpdatePodResponse, error)
	// ListPodsBy Lists all Pods.
	ListPodsBy(ctx context.Context, in *ListPodsByRequest, opts ...grpc.CallOption) (*ListPodsByResponse, error)
	// DeletePod Deletes a Pod.
	DeletePod(ctx context.Context, in *DeletePodRequest, opts ...grpc.CallOption) (*DeletePodResponse, error)
	// CreatePod Creates a new Pod.
	CreatePod(ctx context.Context, in *CreatePodRequest, opts ...grpc.CallOption) (*CreatePodResponse, error)
}

type podServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPodServiceClient(cc grpc.ClientConnInterface) PodServiceClient {
	return &podServiceClient{cc}
}

func (c *podServiceClient) UpdatePod(ctx context.Context, in *UpdatePodRequest, opts ...grpc.CallOption) (*UpdatePodResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePodResponse)
	err := c.cc.Invoke(ctx, PodService_UpdatePod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podServiceClient) ListPodsBy(ctx context.Context, in *ListPodsByRequest, opts ...grpc.CallOption) (*ListPodsByResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPodsByResponse)
	err := c.cc.Invoke(ctx, PodService_ListPodsBy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podServiceClient) DeletePod(ctx context.Context, in *DeletePodRequest, opts ...grpc.CallOption) (*DeletePodResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePodResponse)
	err := c.cc.Invoke(ctx, PodService_DeletePod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *podServiceClient) CreatePod(ctx context.Context, in *CreatePodRequest, opts ...grpc.CallOption) (*CreatePodResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePodResponse)
	err := c.cc.Invoke(ctx, PodService_CreatePod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PodServiceServer is the server API for PodService service.
// All implementations must embed UnimplementedPodServiceServer
// for forward compatibility.
//
// PodService provides operations for managing Pods
type PodServiceServer interface {
	// UpdatePod Updates a Pod.
	UpdatePod(context.Context, *UpdatePodRequest) (*UpdatePodResponse, error)
	// ListPodsBy Lists all Pods.
	ListPodsBy(context.Context, *ListPodsByRequest) (*ListPodsByResponse, error)
	// DeletePod Deletes a Pod.
	DeletePod(context.Context, *DeletePodRequest) (*DeletePodResponse, error)
	// CreatePod Creates a new Pod.
	CreatePod(context.Context, *CreatePodRequest) (*CreatePodResponse, error)
	mustEmbedUnimplementedPodServiceServer()
}

// UnimplementedPodServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPodServiceServer struct{}

func (UnimplementedPodServiceServer) UpdatePod(context.Context, *UpdatePodRequest) (*UpdatePodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePod not implemented")
}
func (UnimplementedPodServiceServer) ListPodsBy(context.Context, *ListPodsByRequest) (*ListPodsByResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPodsBy not implemented")
}
func (UnimplementedPodServiceServer) DeletePod(context.Context, *DeletePodRequest) (*DeletePodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePod not implemented")
}
func (UnimplementedPodServiceServer) CreatePod(context.Context, *CreatePodRequest) (*CreatePodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePod not implemented")
}
func (UnimplementedPodServiceServer) mustEmbedUnimplementedPodServiceServer() {}
func (UnimplementedPodServiceServer) testEmbeddedByValue()                    {}

// UnsafePodServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PodServiceServer will
// result in compilation errors.
type UnsafePodServiceServer interface {
	mustEmbedUnimplementedPodServiceServer()
}

func RegisterPodServiceServer(s grpc.ServiceRegistrar, srv PodServiceServer) {
	// If the following call pancis, it indicates UnimplementedPodServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PodService_ServiceDesc, srv)
}

func _PodService_UpdatePod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodServiceServer).UpdatePod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PodService_UpdatePod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodServiceServer).UpdatePod(ctx, req.(*UpdatePodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PodService_ListPodsBy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPodsByRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodServiceServer).ListPodsBy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PodService_ListPodsBy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodServiceServer).ListPodsBy(ctx, req.(*ListPodsByRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PodService_DeletePod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodServiceServer).DeletePod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PodService_DeletePod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodServiceServer).DeletePod(ctx, req.(*DeletePodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PodService_CreatePod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodServiceServer).CreatePod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PodService_CreatePod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodServiceServer).CreatePod(ctx, req.(*CreatePodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PodService_ServiceDesc is the grpc.ServiceDesc for PodService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PodService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloudstack.management.pod.v1.PodService",
	HandlerType: (*PodServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdatePod",
			Handler:    _PodService_UpdatePod_Handler,
		},
		{
			MethodName: "ListPodsBy",
			Handler:    _PodService_ListPodsBy_Handler,
		},
		{
			MethodName: "DeletePod",
			Handler:    _PodService_DeletePod_Handler,
		},
		{
			MethodName: "CreatePod",
			Handler:    _PodService_CreatePod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloudstack/management/pod/v1/pod.gen.proto",
}
