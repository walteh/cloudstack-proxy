// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cloudstack/management/snapshot/v1/snapshot.gen.proto

package snapshotv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/walteh/cloudstack-proxy/gen/proto/golang/cloudstack/management/snapshot/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SnapshotServiceName is the fully-qualified name of the SnapshotService service.
	SnapshotServiceName = "cloudstack.management.snapshot.v1.SnapshotService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SnapshotServiceExtractSnapshotProcedure is the fully-qualified name of the SnapshotService's
	// ExtractSnapshot RPC.
	SnapshotServiceExtractSnapshotProcedure = "/cloudstack.management.snapshot.v1.SnapshotService/ExtractSnapshot"
	// SnapshotServiceCreateSnapshotFromVMSnapshotProcedure is the fully-qualified name of the
	// SnapshotService's CreateSnapshotFromVMSnapshot RPC.
	SnapshotServiceCreateSnapshotFromVMSnapshotProcedure = "/cloudstack.management.snapshot.v1.SnapshotService/CreateSnapshotFromVMSnapshot"
	// SnapshotServiceCreateSnapshotProcedure is the fully-qualified name of the SnapshotService's
	// CreateSnapshot RPC.
	SnapshotServiceCreateSnapshotProcedure = "/cloudstack.management.snapshot.v1.SnapshotService/CreateSnapshot"
	// SnapshotServiceCopySnapshotProcedure is the fully-qualified name of the SnapshotService's
	// CopySnapshot RPC.
	SnapshotServiceCopySnapshotProcedure = "/cloudstack.management.snapshot.v1.SnapshotService/CopySnapshot"
	// SnapshotServiceUpdateSnapshotPolicyProcedure is the fully-qualified name of the SnapshotService's
	// UpdateSnapshotPolicy RPC.
	SnapshotServiceUpdateSnapshotPolicyProcedure = "/cloudstack.management.snapshot.v1.SnapshotService/UpdateSnapshotPolicy"
	// SnapshotServiceRevertSnapshotProcedure is the fully-qualified name of the SnapshotService's
	// RevertSnapshot RPC.
	SnapshotServiceRevertSnapshotProcedure = "/cloudstack.management.snapshot.v1.SnapshotService/RevertSnapshot"
	// SnapshotServiceListSnapshotsProcedure is the fully-qualified name of the SnapshotService's
	// ListSnapshots RPC.
	SnapshotServiceListSnapshotsProcedure = "/cloudstack.management.snapshot.v1.SnapshotService/ListSnapshots"
	// SnapshotServiceArchiveSnapshotProcedure is the fully-qualified name of the SnapshotService's
	// ArchiveSnapshot RPC.
	SnapshotServiceArchiveSnapshotProcedure = "/cloudstack.management.snapshot.v1.SnapshotService/ArchiveSnapshot"
	// SnapshotServiceListSnapshotPoliciesProcedure is the fully-qualified name of the SnapshotService's
	// ListSnapshotPolicies RPC.
	SnapshotServiceListSnapshotPoliciesProcedure = "/cloudstack.management.snapshot.v1.SnapshotService/ListSnapshotPolicies"
	// SnapshotServiceDeleteSnapshotProcedure is the fully-qualified name of the SnapshotService's
	// DeleteSnapshot RPC.
	SnapshotServiceDeleteSnapshotProcedure = "/cloudstack.management.snapshot.v1.SnapshotService/DeleteSnapshot"
	// SnapshotServiceDeleteSnapshotPoliciesProcedure is the fully-qualified name of the
	// SnapshotService's DeleteSnapshotPolicies RPC.
	SnapshotServiceDeleteSnapshotPoliciesProcedure = "/cloudstack.management.snapshot.v1.SnapshotService/DeleteSnapshotPolicies"
	// SnapshotServiceCreateSnapshotPolicyProcedure is the fully-qualified name of the SnapshotService's
	// CreateSnapshotPolicy RPC.
	SnapshotServiceCreateSnapshotPolicyProcedure = "/cloudstack.management.snapshot.v1.SnapshotService/CreateSnapshotPolicy"
)

// SnapshotServiceClient is a client for the cloudstack.management.snapshot.v1.SnapshotService
// service.
type SnapshotServiceClient interface {
	// ExtractSnapshot Returns a download URL for extracting a snapshot. It must be in the Backed Up state.
	ExtractSnapshot(context.Context, *connect.Request[v1.ExtractSnapshotRequest]) (*connect.Response[v1.ExtractSnapshotResponse], error)
	// CreateSnapshotFromVMSnapshot Creates an instant snapshot of a volume from existing vm snapshot.
	CreateSnapshotFromVMSnapshot(context.Context, *connect.Request[v1.CreateSnapshotFromVMSnapshotRequest]) (*connect.Response[v1.CreateSnapshotFromVMSnapshotResponse], error)
	// CreateSnapshot Creates an instant snapshot of a volume.
	CreateSnapshot(context.Context, *connect.Request[v1.CreateSnapshotRequest]) (*connect.Response[v1.CreateSnapshotResponse], error)
	// CopySnapshot Copies a snapshot from one zone to another.
	CopySnapshot(context.Context, *connect.Request[v1.CopySnapshotRequest]) (*connect.Response[v1.CopySnapshotResponse], error)
	// UpdateSnapshotPolicy Updates the snapshot policy.
	UpdateSnapshotPolicy(context.Context, *connect.Request[v1.UpdateSnapshotPolicyRequest]) (*connect.Response[v1.UpdateSnapshotPolicyResponse], error)
	// RevertSnapshot This is supposed to revert a volume snapshot. This command is only supported with KVM so far
	RevertSnapshot(context.Context, *connect.Request[v1.RevertSnapshotRequest]) (*connect.Response[v1.RevertSnapshotResponse], error)
	// ListSnapshots Lists all available snapshots for the account.
	ListSnapshots(context.Context, *connect.Request[v1.ListSnapshotsRequest]) (*connect.Response[v1.ListSnapshotsResponse], error)
	// ArchiveSnapshot Archives (moves) a snapshot on primary storage to secondary storage
	ArchiveSnapshot(context.Context, *connect.Request[v1.ArchiveSnapshotRequest]) (*connect.Response[v1.ArchiveSnapshotResponse], error)
	// ListSnapshotPolicies Lists snapshot policies.
	ListSnapshotPolicies(context.Context, *connect.Request[v1.ListSnapshotPoliciesRequest]) (*connect.Response[v1.ListSnapshotPoliciesResponse], error)
	// DeleteSnapshot Deletes a snapshot of a disk volume.
	DeleteSnapshot(context.Context, *connect.Request[v1.DeleteSnapshotRequest]) (*connect.Response[v1.DeleteSnapshotResponse], error)
	// DeleteSnapshotPolicies Deletes snapshot policies for the account.
	DeleteSnapshotPolicies(context.Context, *connect.Request[v1.DeleteSnapshotPoliciesRequest]) (*connect.Response[v1.DeleteSnapshotPoliciesResponse], error)
	// CreateSnapshotPolicy Creates a snapshot policy for the account.
	CreateSnapshotPolicy(context.Context, *connect.Request[v1.CreateSnapshotPolicyRequest]) (*connect.Response[v1.CreateSnapshotPolicyResponse], error)
}

// NewSnapshotServiceClient constructs a client for the
// cloudstack.management.snapshot.v1.SnapshotService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSnapshotServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SnapshotServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	snapshotServiceMethods := v1.File_cloudstack_management_snapshot_v1_snapshot_gen_proto.Services().ByName("SnapshotService").Methods()
	return &snapshotServiceClient{
		extractSnapshot: connect.NewClient[v1.ExtractSnapshotRequest, v1.ExtractSnapshotResponse](
			httpClient,
			baseURL+SnapshotServiceExtractSnapshotProcedure,
			connect.WithSchema(snapshotServiceMethods.ByName("ExtractSnapshot")),
			connect.WithClientOptions(opts...),
		),
		createSnapshotFromVMSnapshot: connect.NewClient[v1.CreateSnapshotFromVMSnapshotRequest, v1.CreateSnapshotFromVMSnapshotResponse](
			httpClient,
			baseURL+SnapshotServiceCreateSnapshotFromVMSnapshotProcedure,
			connect.WithSchema(snapshotServiceMethods.ByName("CreateSnapshotFromVMSnapshot")),
			connect.WithClientOptions(opts...),
		),
		createSnapshot: connect.NewClient[v1.CreateSnapshotRequest, v1.CreateSnapshotResponse](
			httpClient,
			baseURL+SnapshotServiceCreateSnapshotProcedure,
			connect.WithSchema(snapshotServiceMethods.ByName("CreateSnapshot")),
			connect.WithClientOptions(opts...),
		),
		copySnapshot: connect.NewClient[v1.CopySnapshotRequest, v1.CopySnapshotResponse](
			httpClient,
			baseURL+SnapshotServiceCopySnapshotProcedure,
			connect.WithSchema(snapshotServiceMethods.ByName("CopySnapshot")),
			connect.WithClientOptions(opts...),
		),
		updateSnapshotPolicy: connect.NewClient[v1.UpdateSnapshotPolicyRequest, v1.UpdateSnapshotPolicyResponse](
			httpClient,
			baseURL+SnapshotServiceUpdateSnapshotPolicyProcedure,
			connect.WithSchema(snapshotServiceMethods.ByName("UpdateSnapshotPolicy")),
			connect.WithClientOptions(opts...),
		),
		revertSnapshot: connect.NewClient[v1.RevertSnapshotRequest, v1.RevertSnapshotResponse](
			httpClient,
			baseURL+SnapshotServiceRevertSnapshotProcedure,
			connect.WithSchema(snapshotServiceMethods.ByName("RevertSnapshot")),
			connect.WithClientOptions(opts...),
		),
		listSnapshots: connect.NewClient[v1.ListSnapshotsRequest, v1.ListSnapshotsResponse](
			httpClient,
			baseURL+SnapshotServiceListSnapshotsProcedure,
			connect.WithSchema(snapshotServiceMethods.ByName("ListSnapshots")),
			connect.WithClientOptions(opts...),
		),
		archiveSnapshot: connect.NewClient[v1.ArchiveSnapshotRequest, v1.ArchiveSnapshotResponse](
			httpClient,
			baseURL+SnapshotServiceArchiveSnapshotProcedure,
			connect.WithSchema(snapshotServiceMethods.ByName("ArchiveSnapshot")),
			connect.WithClientOptions(opts...),
		),
		listSnapshotPolicies: connect.NewClient[v1.ListSnapshotPoliciesRequest, v1.ListSnapshotPoliciesResponse](
			httpClient,
			baseURL+SnapshotServiceListSnapshotPoliciesProcedure,
			connect.WithSchema(snapshotServiceMethods.ByName("ListSnapshotPolicies")),
			connect.WithClientOptions(opts...),
		),
		deleteSnapshot: connect.NewClient[v1.DeleteSnapshotRequest, v1.DeleteSnapshotResponse](
			httpClient,
			baseURL+SnapshotServiceDeleteSnapshotProcedure,
			connect.WithSchema(snapshotServiceMethods.ByName("DeleteSnapshot")),
			connect.WithClientOptions(opts...),
		),
		deleteSnapshotPolicies: connect.NewClient[v1.DeleteSnapshotPoliciesRequest, v1.DeleteSnapshotPoliciesResponse](
			httpClient,
			baseURL+SnapshotServiceDeleteSnapshotPoliciesProcedure,
			connect.WithSchema(snapshotServiceMethods.ByName("DeleteSnapshotPolicies")),
			connect.WithClientOptions(opts...),
		),
		createSnapshotPolicy: connect.NewClient[v1.CreateSnapshotPolicyRequest, v1.CreateSnapshotPolicyResponse](
			httpClient,
			baseURL+SnapshotServiceCreateSnapshotPolicyProcedure,
			connect.WithSchema(snapshotServiceMethods.ByName("CreateSnapshotPolicy")),
			connect.WithClientOptions(opts...),
		),
	}
}

// snapshotServiceClient implements SnapshotServiceClient.
type snapshotServiceClient struct {
	extractSnapshot              *connect.Client[v1.ExtractSnapshotRequest, v1.ExtractSnapshotResponse]
	createSnapshotFromVMSnapshot *connect.Client[v1.CreateSnapshotFromVMSnapshotRequest, v1.CreateSnapshotFromVMSnapshotResponse]
	createSnapshot               *connect.Client[v1.CreateSnapshotRequest, v1.CreateSnapshotResponse]
	copySnapshot                 *connect.Client[v1.CopySnapshotRequest, v1.CopySnapshotResponse]
	updateSnapshotPolicy         *connect.Client[v1.UpdateSnapshotPolicyRequest, v1.UpdateSnapshotPolicyResponse]
	revertSnapshot               *connect.Client[v1.RevertSnapshotRequest, v1.RevertSnapshotResponse]
	listSnapshots                *connect.Client[v1.ListSnapshotsRequest, v1.ListSnapshotsResponse]
	archiveSnapshot              *connect.Client[v1.ArchiveSnapshotRequest, v1.ArchiveSnapshotResponse]
	listSnapshotPolicies         *connect.Client[v1.ListSnapshotPoliciesRequest, v1.ListSnapshotPoliciesResponse]
	deleteSnapshot               *connect.Client[v1.DeleteSnapshotRequest, v1.DeleteSnapshotResponse]
	deleteSnapshotPolicies       *connect.Client[v1.DeleteSnapshotPoliciesRequest, v1.DeleteSnapshotPoliciesResponse]
	createSnapshotPolicy         *connect.Client[v1.CreateSnapshotPolicyRequest, v1.CreateSnapshotPolicyResponse]
}

// ExtractSnapshot calls cloudstack.management.snapshot.v1.SnapshotService.ExtractSnapshot.
func (c *snapshotServiceClient) ExtractSnapshot(ctx context.Context, req *connect.Request[v1.ExtractSnapshotRequest]) (*connect.Response[v1.ExtractSnapshotResponse], error) {
	return c.extractSnapshot.CallUnary(ctx, req)
}

// CreateSnapshotFromVMSnapshot calls
// cloudstack.management.snapshot.v1.SnapshotService.CreateSnapshotFromVMSnapshot.
func (c *snapshotServiceClient) CreateSnapshotFromVMSnapshot(ctx context.Context, req *connect.Request[v1.CreateSnapshotFromVMSnapshotRequest]) (*connect.Response[v1.CreateSnapshotFromVMSnapshotResponse], error) {
	return c.createSnapshotFromVMSnapshot.CallUnary(ctx, req)
}

// CreateSnapshot calls cloudstack.management.snapshot.v1.SnapshotService.CreateSnapshot.
func (c *snapshotServiceClient) CreateSnapshot(ctx context.Context, req *connect.Request[v1.CreateSnapshotRequest]) (*connect.Response[v1.CreateSnapshotResponse], error) {
	return c.createSnapshot.CallUnary(ctx, req)
}

// CopySnapshot calls cloudstack.management.snapshot.v1.SnapshotService.CopySnapshot.
func (c *snapshotServiceClient) CopySnapshot(ctx context.Context, req *connect.Request[v1.CopySnapshotRequest]) (*connect.Response[v1.CopySnapshotResponse], error) {
	return c.copySnapshot.CallUnary(ctx, req)
}

// UpdateSnapshotPolicy calls
// cloudstack.management.snapshot.v1.SnapshotService.UpdateSnapshotPolicy.
func (c *snapshotServiceClient) UpdateSnapshotPolicy(ctx context.Context, req *connect.Request[v1.UpdateSnapshotPolicyRequest]) (*connect.Response[v1.UpdateSnapshotPolicyResponse], error) {
	return c.updateSnapshotPolicy.CallUnary(ctx, req)
}

// RevertSnapshot calls cloudstack.management.snapshot.v1.SnapshotService.RevertSnapshot.
func (c *snapshotServiceClient) RevertSnapshot(ctx context.Context, req *connect.Request[v1.RevertSnapshotRequest]) (*connect.Response[v1.RevertSnapshotResponse], error) {
	return c.revertSnapshot.CallUnary(ctx, req)
}

// ListSnapshots calls cloudstack.management.snapshot.v1.SnapshotService.ListSnapshots.
func (c *snapshotServiceClient) ListSnapshots(ctx context.Context, req *connect.Request[v1.ListSnapshotsRequest]) (*connect.Response[v1.ListSnapshotsResponse], error) {
	return c.listSnapshots.CallUnary(ctx, req)
}

// ArchiveSnapshot calls cloudstack.management.snapshot.v1.SnapshotService.ArchiveSnapshot.
func (c *snapshotServiceClient) ArchiveSnapshot(ctx context.Context, req *connect.Request[v1.ArchiveSnapshotRequest]) (*connect.Response[v1.ArchiveSnapshotResponse], error) {
	return c.archiveSnapshot.CallUnary(ctx, req)
}

// ListSnapshotPolicies calls
// cloudstack.management.snapshot.v1.SnapshotService.ListSnapshotPolicies.
func (c *snapshotServiceClient) ListSnapshotPolicies(ctx context.Context, req *connect.Request[v1.ListSnapshotPoliciesRequest]) (*connect.Response[v1.ListSnapshotPoliciesResponse], error) {
	return c.listSnapshotPolicies.CallUnary(ctx, req)
}

// DeleteSnapshot calls cloudstack.management.snapshot.v1.SnapshotService.DeleteSnapshot.
func (c *snapshotServiceClient) DeleteSnapshot(ctx context.Context, req *connect.Request[v1.DeleteSnapshotRequest]) (*connect.Response[v1.DeleteSnapshotResponse], error) {
	return c.deleteSnapshot.CallUnary(ctx, req)
}

// DeleteSnapshotPolicies calls
// cloudstack.management.snapshot.v1.SnapshotService.DeleteSnapshotPolicies.
func (c *snapshotServiceClient) DeleteSnapshotPolicies(ctx context.Context, req *connect.Request[v1.DeleteSnapshotPoliciesRequest]) (*connect.Response[v1.DeleteSnapshotPoliciesResponse], error) {
	return c.deleteSnapshotPolicies.CallUnary(ctx, req)
}

// CreateSnapshotPolicy calls
// cloudstack.management.snapshot.v1.SnapshotService.CreateSnapshotPolicy.
func (c *snapshotServiceClient) CreateSnapshotPolicy(ctx context.Context, req *connect.Request[v1.CreateSnapshotPolicyRequest]) (*connect.Response[v1.CreateSnapshotPolicyResponse], error) {
	return c.createSnapshotPolicy.CallUnary(ctx, req)
}

// SnapshotServiceHandler is an implementation of the
// cloudstack.management.snapshot.v1.SnapshotService service.
type SnapshotServiceHandler interface {
	// ExtractSnapshot Returns a download URL for extracting a snapshot. It must be in the Backed Up state.
	ExtractSnapshot(context.Context, *connect.Request[v1.ExtractSnapshotRequest]) (*connect.Response[v1.ExtractSnapshotResponse], error)
	// CreateSnapshotFromVMSnapshot Creates an instant snapshot of a volume from existing vm snapshot.
	CreateSnapshotFromVMSnapshot(context.Context, *connect.Request[v1.CreateSnapshotFromVMSnapshotRequest]) (*connect.Response[v1.CreateSnapshotFromVMSnapshotResponse], error)
	// CreateSnapshot Creates an instant snapshot of a volume.
	CreateSnapshot(context.Context, *connect.Request[v1.CreateSnapshotRequest]) (*connect.Response[v1.CreateSnapshotResponse], error)
	// CopySnapshot Copies a snapshot from one zone to another.
	CopySnapshot(context.Context, *connect.Request[v1.CopySnapshotRequest]) (*connect.Response[v1.CopySnapshotResponse], error)
	// UpdateSnapshotPolicy Updates the snapshot policy.
	UpdateSnapshotPolicy(context.Context, *connect.Request[v1.UpdateSnapshotPolicyRequest]) (*connect.Response[v1.UpdateSnapshotPolicyResponse], error)
	// RevertSnapshot This is supposed to revert a volume snapshot. This command is only supported with KVM so far
	RevertSnapshot(context.Context, *connect.Request[v1.RevertSnapshotRequest]) (*connect.Response[v1.RevertSnapshotResponse], error)
	// ListSnapshots Lists all available snapshots for the account.
	ListSnapshots(context.Context, *connect.Request[v1.ListSnapshotsRequest]) (*connect.Response[v1.ListSnapshotsResponse], error)
	// ArchiveSnapshot Archives (moves) a snapshot on primary storage to secondary storage
	ArchiveSnapshot(context.Context, *connect.Request[v1.ArchiveSnapshotRequest]) (*connect.Response[v1.ArchiveSnapshotResponse], error)
	// ListSnapshotPolicies Lists snapshot policies.
	ListSnapshotPolicies(context.Context, *connect.Request[v1.ListSnapshotPoliciesRequest]) (*connect.Response[v1.ListSnapshotPoliciesResponse], error)
	// DeleteSnapshot Deletes a snapshot of a disk volume.
	DeleteSnapshot(context.Context, *connect.Request[v1.DeleteSnapshotRequest]) (*connect.Response[v1.DeleteSnapshotResponse], error)
	// DeleteSnapshotPolicies Deletes snapshot policies for the account.
	DeleteSnapshotPolicies(context.Context, *connect.Request[v1.DeleteSnapshotPoliciesRequest]) (*connect.Response[v1.DeleteSnapshotPoliciesResponse], error)
	// CreateSnapshotPolicy Creates a snapshot policy for the account.
	CreateSnapshotPolicy(context.Context, *connect.Request[v1.CreateSnapshotPolicyRequest]) (*connect.Response[v1.CreateSnapshotPolicyResponse], error)
}

// NewSnapshotServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSnapshotServiceHandler(svc SnapshotServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	snapshotServiceMethods := v1.File_cloudstack_management_snapshot_v1_snapshot_gen_proto.Services().ByName("SnapshotService").Methods()
	snapshotServiceExtractSnapshotHandler := connect.NewUnaryHandler(
		SnapshotServiceExtractSnapshotProcedure,
		svc.ExtractSnapshot,
		connect.WithSchema(snapshotServiceMethods.ByName("ExtractSnapshot")),
		connect.WithHandlerOptions(opts...),
	)
	snapshotServiceCreateSnapshotFromVMSnapshotHandler := connect.NewUnaryHandler(
		SnapshotServiceCreateSnapshotFromVMSnapshotProcedure,
		svc.CreateSnapshotFromVMSnapshot,
		connect.WithSchema(snapshotServiceMethods.ByName("CreateSnapshotFromVMSnapshot")),
		connect.WithHandlerOptions(opts...),
	)
	snapshotServiceCreateSnapshotHandler := connect.NewUnaryHandler(
		SnapshotServiceCreateSnapshotProcedure,
		svc.CreateSnapshot,
		connect.WithSchema(snapshotServiceMethods.ByName("CreateSnapshot")),
		connect.WithHandlerOptions(opts...),
	)
	snapshotServiceCopySnapshotHandler := connect.NewUnaryHandler(
		SnapshotServiceCopySnapshotProcedure,
		svc.CopySnapshot,
		connect.WithSchema(snapshotServiceMethods.ByName("CopySnapshot")),
		connect.WithHandlerOptions(opts...),
	)
	snapshotServiceUpdateSnapshotPolicyHandler := connect.NewUnaryHandler(
		SnapshotServiceUpdateSnapshotPolicyProcedure,
		svc.UpdateSnapshotPolicy,
		connect.WithSchema(snapshotServiceMethods.ByName("UpdateSnapshotPolicy")),
		connect.WithHandlerOptions(opts...),
	)
	snapshotServiceRevertSnapshotHandler := connect.NewUnaryHandler(
		SnapshotServiceRevertSnapshotProcedure,
		svc.RevertSnapshot,
		connect.WithSchema(snapshotServiceMethods.ByName("RevertSnapshot")),
		connect.WithHandlerOptions(opts...),
	)
	snapshotServiceListSnapshotsHandler := connect.NewUnaryHandler(
		SnapshotServiceListSnapshotsProcedure,
		svc.ListSnapshots,
		connect.WithSchema(snapshotServiceMethods.ByName("ListSnapshots")),
		connect.WithHandlerOptions(opts...),
	)
	snapshotServiceArchiveSnapshotHandler := connect.NewUnaryHandler(
		SnapshotServiceArchiveSnapshotProcedure,
		svc.ArchiveSnapshot,
		connect.WithSchema(snapshotServiceMethods.ByName("ArchiveSnapshot")),
		connect.WithHandlerOptions(opts...),
	)
	snapshotServiceListSnapshotPoliciesHandler := connect.NewUnaryHandler(
		SnapshotServiceListSnapshotPoliciesProcedure,
		svc.ListSnapshotPolicies,
		connect.WithSchema(snapshotServiceMethods.ByName("ListSnapshotPolicies")),
		connect.WithHandlerOptions(opts...),
	)
	snapshotServiceDeleteSnapshotHandler := connect.NewUnaryHandler(
		SnapshotServiceDeleteSnapshotProcedure,
		svc.DeleteSnapshot,
		connect.WithSchema(snapshotServiceMethods.ByName("DeleteSnapshot")),
		connect.WithHandlerOptions(opts...),
	)
	snapshotServiceDeleteSnapshotPoliciesHandler := connect.NewUnaryHandler(
		SnapshotServiceDeleteSnapshotPoliciesProcedure,
		svc.DeleteSnapshotPolicies,
		connect.WithSchema(snapshotServiceMethods.ByName("DeleteSnapshotPolicies")),
		connect.WithHandlerOptions(opts...),
	)
	snapshotServiceCreateSnapshotPolicyHandler := connect.NewUnaryHandler(
		SnapshotServiceCreateSnapshotPolicyProcedure,
		svc.CreateSnapshotPolicy,
		connect.WithSchema(snapshotServiceMethods.ByName("CreateSnapshotPolicy")),
		connect.WithHandlerOptions(opts...),
	)
	return "/cloudstack.management.snapshot.v1.SnapshotService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SnapshotServiceExtractSnapshotProcedure:
			snapshotServiceExtractSnapshotHandler.ServeHTTP(w, r)
		case SnapshotServiceCreateSnapshotFromVMSnapshotProcedure:
			snapshotServiceCreateSnapshotFromVMSnapshotHandler.ServeHTTP(w, r)
		case SnapshotServiceCreateSnapshotProcedure:
			snapshotServiceCreateSnapshotHandler.ServeHTTP(w, r)
		case SnapshotServiceCopySnapshotProcedure:
			snapshotServiceCopySnapshotHandler.ServeHTTP(w, r)
		case SnapshotServiceUpdateSnapshotPolicyProcedure:
			snapshotServiceUpdateSnapshotPolicyHandler.ServeHTTP(w, r)
		case SnapshotServiceRevertSnapshotProcedure:
			snapshotServiceRevertSnapshotHandler.ServeHTTP(w, r)
		case SnapshotServiceListSnapshotsProcedure:
			snapshotServiceListSnapshotsHandler.ServeHTTP(w, r)
		case SnapshotServiceArchiveSnapshotProcedure:
			snapshotServiceArchiveSnapshotHandler.ServeHTTP(w, r)
		case SnapshotServiceListSnapshotPoliciesProcedure:
			snapshotServiceListSnapshotPoliciesHandler.ServeHTTP(w, r)
		case SnapshotServiceDeleteSnapshotProcedure:
			snapshotServiceDeleteSnapshotHandler.ServeHTTP(w, r)
		case SnapshotServiceDeleteSnapshotPoliciesProcedure:
			snapshotServiceDeleteSnapshotPoliciesHandler.ServeHTTP(w, r)
		case SnapshotServiceCreateSnapshotPolicyProcedure:
			snapshotServiceCreateSnapshotPolicyHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSnapshotServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSnapshotServiceHandler struct{}

func (UnimplementedSnapshotServiceHandler) ExtractSnapshot(context.Context, *connect.Request[v1.ExtractSnapshotRequest]) (*connect.Response[v1.ExtractSnapshotResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.snapshot.v1.SnapshotService.ExtractSnapshot is not implemented"))
}

func (UnimplementedSnapshotServiceHandler) CreateSnapshotFromVMSnapshot(context.Context, *connect.Request[v1.CreateSnapshotFromVMSnapshotRequest]) (*connect.Response[v1.CreateSnapshotFromVMSnapshotResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.snapshot.v1.SnapshotService.CreateSnapshotFromVMSnapshot is not implemented"))
}

func (UnimplementedSnapshotServiceHandler) CreateSnapshot(context.Context, *connect.Request[v1.CreateSnapshotRequest]) (*connect.Response[v1.CreateSnapshotResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.snapshot.v1.SnapshotService.CreateSnapshot is not implemented"))
}

func (UnimplementedSnapshotServiceHandler) CopySnapshot(context.Context, *connect.Request[v1.CopySnapshotRequest]) (*connect.Response[v1.CopySnapshotResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.snapshot.v1.SnapshotService.CopySnapshot is not implemented"))
}

func (UnimplementedSnapshotServiceHandler) UpdateSnapshotPolicy(context.Context, *connect.Request[v1.UpdateSnapshotPolicyRequest]) (*connect.Response[v1.UpdateSnapshotPolicyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.snapshot.v1.SnapshotService.UpdateSnapshotPolicy is not implemented"))
}

func (UnimplementedSnapshotServiceHandler) RevertSnapshot(context.Context, *connect.Request[v1.RevertSnapshotRequest]) (*connect.Response[v1.RevertSnapshotResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.snapshot.v1.SnapshotService.RevertSnapshot is not implemented"))
}

func (UnimplementedSnapshotServiceHandler) ListSnapshots(context.Context, *connect.Request[v1.ListSnapshotsRequest]) (*connect.Response[v1.ListSnapshotsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.snapshot.v1.SnapshotService.ListSnapshots is not implemented"))
}

func (UnimplementedSnapshotServiceHandler) ArchiveSnapshot(context.Context, *connect.Request[v1.ArchiveSnapshotRequest]) (*connect.Response[v1.ArchiveSnapshotResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.snapshot.v1.SnapshotService.ArchiveSnapshot is not implemented"))
}

func (UnimplementedSnapshotServiceHandler) ListSnapshotPolicies(context.Context, *connect.Request[v1.ListSnapshotPoliciesRequest]) (*connect.Response[v1.ListSnapshotPoliciesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.snapshot.v1.SnapshotService.ListSnapshotPolicies is not implemented"))
}

func (UnimplementedSnapshotServiceHandler) DeleteSnapshot(context.Context, *connect.Request[v1.DeleteSnapshotRequest]) (*connect.Response[v1.DeleteSnapshotResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.snapshot.v1.SnapshotService.DeleteSnapshot is not implemented"))
}

func (UnimplementedSnapshotServiceHandler) DeleteSnapshotPolicies(context.Context, *connect.Request[v1.DeleteSnapshotPoliciesRequest]) (*connect.Response[v1.DeleteSnapshotPoliciesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.snapshot.v1.SnapshotService.DeleteSnapshotPolicies is not implemented"))
}

func (UnimplementedSnapshotServiceHandler) CreateSnapshotPolicy(context.Context, *connect.Request[v1.CreateSnapshotPolicyRequest]) (*connect.Response[v1.CreateSnapshotPolicyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.snapshot.v1.SnapshotService.CreateSnapshotPolicy is not implemented"))
}
