// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: cloudstack/management/snapshot/v1/snapshot.gen.proto

package snapshotv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SnapshotService_ExtractSnapshot_FullMethodName              = "/cloudstack.management.snapshot.v1.SnapshotService/ExtractSnapshot"
	SnapshotService_DeleteSnapshotPolicies_FullMethodName       = "/cloudstack.management.snapshot.v1.SnapshotService/DeleteSnapshotPolicies"
	SnapshotService_CreateSnapshotPolicy_FullMethodName         = "/cloudstack.management.snapshot.v1.SnapshotService/CreateSnapshotPolicy"
	SnapshotService_ListSnapshotPolicies_FullMethodName         = "/cloudstack.management.snapshot.v1.SnapshotService/ListSnapshotPolicies"
	SnapshotService_CreateSnapshotFromVMSnapshot_FullMethodName = "/cloudstack.management.snapshot.v1.SnapshotService/CreateSnapshotFromVMSnapshot"
	SnapshotService_RevertSnapshot_FullMethodName               = "/cloudstack.management.snapshot.v1.SnapshotService/RevertSnapshot"
	SnapshotService_CreateSnapshot_FullMethodName               = "/cloudstack.management.snapshot.v1.SnapshotService/CreateSnapshot"
	SnapshotService_ListSnapshots_FullMethodName                = "/cloudstack.management.snapshot.v1.SnapshotService/ListSnapshots"
	SnapshotService_ArchiveSnapshot_FullMethodName              = "/cloudstack.management.snapshot.v1.SnapshotService/ArchiveSnapshot"
	SnapshotService_CopySnapshot_FullMethodName                 = "/cloudstack.management.snapshot.v1.SnapshotService/CopySnapshot"
	SnapshotService_UpdateSnapshotPolicy_FullMethodName         = "/cloudstack.management.snapshot.v1.SnapshotService/UpdateSnapshotPolicy"
	SnapshotService_DeleteSnapshot_FullMethodName               = "/cloudstack.management.snapshot.v1.SnapshotService/DeleteSnapshot"
)

// SnapshotServiceClient is the client API for SnapshotService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SnapshotService provides operations for managing Snapshots
type SnapshotServiceClient interface {
	// ExtractSnapshot Returns a download URL for extracting a snapshot. It must be in the Backed Up state.
	ExtractSnapshot(ctx context.Context, in *ExtractSnapshotRequest, opts ...grpc.CallOption) (*ExtractSnapshotResponse, error)
	// DeleteSnapshotPolicies Deletes snapshot policies for the account.
	DeleteSnapshotPolicies(ctx context.Context, in *DeleteSnapshotPoliciesRequest, opts ...grpc.CallOption) (*DeleteSnapshotPoliciesResponse, error)
	// CreateSnapshotPolicy Creates a snapshot policy for the account.
	CreateSnapshotPolicy(ctx context.Context, in *CreateSnapshotPolicyRequest, opts ...grpc.CallOption) (*CreateSnapshotPolicyResponse, error)
	// ListSnapshotPolicies Lists snapshot policies.
	ListSnapshotPolicies(ctx context.Context, in *ListSnapshotPoliciesRequest, opts ...grpc.CallOption) (*ListSnapshotPoliciesResponse, error)
	// CreateSnapshotFromVMSnapshot Creates an instant snapshot of a volume from existing vm snapshot.
	CreateSnapshotFromVMSnapshot(ctx context.Context, in *CreateSnapshotFromVMSnapshotRequest, opts ...grpc.CallOption) (*CreateSnapshotFromVMSnapshotResponse, error)
	// RevertSnapshot This is supposed to revert a volume snapshot. This command is only supported with KVM so far
	RevertSnapshot(ctx context.Context, in *RevertSnapshotRequest, opts ...grpc.CallOption) (*RevertSnapshotResponse, error)
	// CreateSnapshot Creates an instant snapshot of a volume.
	CreateSnapshot(ctx context.Context, in *CreateSnapshotRequest, opts ...grpc.CallOption) (*CreateSnapshotResponse, error)
	// ListSnapshots Lists all available snapshots for the account.
	ListSnapshots(ctx context.Context, in *ListSnapshotsRequest, opts ...grpc.CallOption) (*ListSnapshotsResponse, error)
	// ArchiveSnapshot Archives (moves) a snapshot on primary storage to secondary storage
	ArchiveSnapshot(ctx context.Context, in *ArchiveSnapshotRequest, opts ...grpc.CallOption) (*ArchiveSnapshotResponse, error)
	// CopySnapshot Copies a snapshot from one zone to another.
	CopySnapshot(ctx context.Context, in *CopySnapshotRequest, opts ...grpc.CallOption) (*CopySnapshotResponse, error)
	// UpdateSnapshotPolicy Updates the snapshot policy.
	UpdateSnapshotPolicy(ctx context.Context, in *UpdateSnapshotPolicyRequest, opts ...grpc.CallOption) (*UpdateSnapshotPolicyResponse, error)
	// DeleteSnapshot Deletes a snapshot of a disk volume.
	DeleteSnapshot(ctx context.Context, in *DeleteSnapshotRequest, opts ...grpc.CallOption) (*DeleteSnapshotResponse, error)
}

type snapshotServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSnapshotServiceClient(cc grpc.ClientConnInterface) SnapshotServiceClient {
	return &snapshotServiceClient{cc}
}

func (c *snapshotServiceClient) ExtractSnapshot(ctx context.Context, in *ExtractSnapshotRequest, opts ...grpc.CallOption) (*ExtractSnapshotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExtractSnapshotResponse)
	err := c.cc.Invoke(ctx, SnapshotService_ExtractSnapshot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapshotServiceClient) DeleteSnapshotPolicies(ctx context.Context, in *DeleteSnapshotPoliciesRequest, opts ...grpc.CallOption) (*DeleteSnapshotPoliciesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSnapshotPoliciesResponse)
	err := c.cc.Invoke(ctx, SnapshotService_DeleteSnapshotPolicies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapshotServiceClient) CreateSnapshotPolicy(ctx context.Context, in *CreateSnapshotPolicyRequest, opts ...grpc.CallOption) (*CreateSnapshotPolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSnapshotPolicyResponse)
	err := c.cc.Invoke(ctx, SnapshotService_CreateSnapshotPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapshotServiceClient) ListSnapshotPolicies(ctx context.Context, in *ListSnapshotPoliciesRequest, opts ...grpc.CallOption) (*ListSnapshotPoliciesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSnapshotPoliciesResponse)
	err := c.cc.Invoke(ctx, SnapshotService_ListSnapshotPolicies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapshotServiceClient) CreateSnapshotFromVMSnapshot(ctx context.Context, in *CreateSnapshotFromVMSnapshotRequest, opts ...grpc.CallOption) (*CreateSnapshotFromVMSnapshotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSnapshotFromVMSnapshotResponse)
	err := c.cc.Invoke(ctx, SnapshotService_CreateSnapshotFromVMSnapshot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapshotServiceClient) RevertSnapshot(ctx context.Context, in *RevertSnapshotRequest, opts ...grpc.CallOption) (*RevertSnapshotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevertSnapshotResponse)
	err := c.cc.Invoke(ctx, SnapshotService_RevertSnapshot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapshotServiceClient) CreateSnapshot(ctx context.Context, in *CreateSnapshotRequest, opts ...grpc.CallOption) (*CreateSnapshotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSnapshotResponse)
	err := c.cc.Invoke(ctx, SnapshotService_CreateSnapshot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapshotServiceClient) ListSnapshots(ctx context.Context, in *ListSnapshotsRequest, opts ...grpc.CallOption) (*ListSnapshotsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSnapshotsResponse)
	err := c.cc.Invoke(ctx, SnapshotService_ListSnapshots_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapshotServiceClient) ArchiveSnapshot(ctx context.Context, in *ArchiveSnapshotRequest, opts ...grpc.CallOption) (*ArchiveSnapshotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ArchiveSnapshotResponse)
	err := c.cc.Invoke(ctx, SnapshotService_ArchiveSnapshot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapshotServiceClient) CopySnapshot(ctx context.Context, in *CopySnapshotRequest, opts ...grpc.CallOption) (*CopySnapshotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CopySnapshotResponse)
	err := c.cc.Invoke(ctx, SnapshotService_CopySnapshot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapshotServiceClient) UpdateSnapshotPolicy(ctx context.Context, in *UpdateSnapshotPolicyRequest, opts ...grpc.CallOption) (*UpdateSnapshotPolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSnapshotPolicyResponse)
	err := c.cc.Invoke(ctx, SnapshotService_UpdateSnapshotPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapshotServiceClient) DeleteSnapshot(ctx context.Context, in *DeleteSnapshotRequest, opts ...grpc.CallOption) (*DeleteSnapshotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSnapshotResponse)
	err := c.cc.Invoke(ctx, SnapshotService_DeleteSnapshot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SnapshotServiceServer is the server API for SnapshotService service.
// All implementations must embed UnimplementedSnapshotServiceServer
// for forward compatibility.
//
// SnapshotService provides operations for managing Snapshots
type SnapshotServiceServer interface {
	// ExtractSnapshot Returns a download URL for extracting a snapshot. It must be in the Backed Up state.
	ExtractSnapshot(context.Context, *ExtractSnapshotRequest) (*ExtractSnapshotResponse, error)
	// DeleteSnapshotPolicies Deletes snapshot policies for the account.
	DeleteSnapshotPolicies(context.Context, *DeleteSnapshotPoliciesRequest) (*DeleteSnapshotPoliciesResponse, error)
	// CreateSnapshotPolicy Creates a snapshot policy for the account.
	CreateSnapshotPolicy(context.Context, *CreateSnapshotPolicyRequest) (*CreateSnapshotPolicyResponse, error)
	// ListSnapshotPolicies Lists snapshot policies.
	ListSnapshotPolicies(context.Context, *ListSnapshotPoliciesRequest) (*ListSnapshotPoliciesResponse, error)
	// CreateSnapshotFromVMSnapshot Creates an instant snapshot of a volume from existing vm snapshot.
	CreateSnapshotFromVMSnapshot(context.Context, *CreateSnapshotFromVMSnapshotRequest) (*CreateSnapshotFromVMSnapshotResponse, error)
	// RevertSnapshot This is supposed to revert a volume snapshot. This command is only supported with KVM so far
	RevertSnapshot(context.Context, *RevertSnapshotRequest) (*RevertSnapshotResponse, error)
	// CreateSnapshot Creates an instant snapshot of a volume.
	CreateSnapshot(context.Context, *CreateSnapshotRequest) (*CreateSnapshotResponse, error)
	// ListSnapshots Lists all available snapshots for the account.
	ListSnapshots(context.Context, *ListSnapshotsRequest) (*ListSnapshotsResponse, error)
	// ArchiveSnapshot Archives (moves) a snapshot on primary storage to secondary storage
	ArchiveSnapshot(context.Context, *ArchiveSnapshotRequest) (*ArchiveSnapshotResponse, error)
	// CopySnapshot Copies a snapshot from one zone to another.
	CopySnapshot(context.Context, *CopySnapshotRequest) (*CopySnapshotResponse, error)
	// UpdateSnapshotPolicy Updates the snapshot policy.
	UpdateSnapshotPolicy(context.Context, *UpdateSnapshotPolicyRequest) (*UpdateSnapshotPolicyResponse, error)
	// DeleteSnapshot Deletes a snapshot of a disk volume.
	DeleteSnapshot(context.Context, *DeleteSnapshotRequest) (*DeleteSnapshotResponse, error)
	mustEmbedUnimplementedSnapshotServiceServer()
}

// UnimplementedSnapshotServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSnapshotServiceServer struct{}

func (UnimplementedSnapshotServiceServer) ExtractSnapshot(context.Context, *ExtractSnapshotRequest) (*ExtractSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtractSnapshot not implemented")
}
func (UnimplementedSnapshotServiceServer) DeleteSnapshotPolicies(context.Context, *DeleteSnapshotPoliciesRequest) (*DeleteSnapshotPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSnapshotPolicies not implemented")
}
func (UnimplementedSnapshotServiceServer) CreateSnapshotPolicy(context.Context, *CreateSnapshotPolicyRequest) (*CreateSnapshotPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSnapshotPolicy not implemented")
}
func (UnimplementedSnapshotServiceServer) ListSnapshotPolicies(context.Context, *ListSnapshotPoliciesRequest) (*ListSnapshotPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSnapshotPolicies not implemented")
}
func (UnimplementedSnapshotServiceServer) CreateSnapshotFromVMSnapshot(context.Context, *CreateSnapshotFromVMSnapshotRequest) (*CreateSnapshotFromVMSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSnapshotFromVMSnapshot not implemented")
}
func (UnimplementedSnapshotServiceServer) RevertSnapshot(context.Context, *RevertSnapshotRequest) (*RevertSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevertSnapshot not implemented")
}
func (UnimplementedSnapshotServiceServer) CreateSnapshot(context.Context, *CreateSnapshotRequest) (*CreateSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSnapshot not implemented")
}
func (UnimplementedSnapshotServiceServer) ListSnapshots(context.Context, *ListSnapshotsRequest) (*ListSnapshotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSnapshots not implemented")
}
func (UnimplementedSnapshotServiceServer) ArchiveSnapshot(context.Context, *ArchiveSnapshotRequest) (*ArchiveSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveSnapshot not implemented")
}
func (UnimplementedSnapshotServiceServer) CopySnapshot(context.Context, *CopySnapshotRequest) (*CopySnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopySnapshot not implemented")
}
func (UnimplementedSnapshotServiceServer) UpdateSnapshotPolicy(context.Context, *UpdateSnapshotPolicyRequest) (*UpdateSnapshotPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSnapshotPolicy not implemented")
}
func (UnimplementedSnapshotServiceServer) DeleteSnapshot(context.Context, *DeleteSnapshotRequest) (*DeleteSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSnapshot not implemented")
}
func (UnimplementedSnapshotServiceServer) mustEmbedUnimplementedSnapshotServiceServer() {}
func (UnimplementedSnapshotServiceServer) testEmbeddedByValue()                         {}

// UnsafeSnapshotServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SnapshotServiceServer will
// result in compilation errors.
type UnsafeSnapshotServiceServer interface {
	mustEmbedUnimplementedSnapshotServiceServer()
}

func RegisterSnapshotServiceServer(s grpc.ServiceRegistrar, srv SnapshotServiceServer) {
	// If the following call pancis, it indicates UnimplementedSnapshotServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SnapshotService_ServiceDesc, srv)
}

func _SnapshotService_ExtractSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtractSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapshotServiceServer).ExtractSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnapshotService_ExtractSnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapshotServiceServer).ExtractSnapshot(ctx, req.(*ExtractSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnapshotService_DeleteSnapshotPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSnapshotPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapshotServiceServer).DeleteSnapshotPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnapshotService_DeleteSnapshotPolicies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapshotServiceServer).DeleteSnapshotPolicies(ctx, req.(*DeleteSnapshotPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnapshotService_CreateSnapshotPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSnapshotPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapshotServiceServer).CreateSnapshotPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnapshotService_CreateSnapshotPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapshotServiceServer).CreateSnapshotPolicy(ctx, req.(*CreateSnapshotPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnapshotService_ListSnapshotPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSnapshotPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapshotServiceServer).ListSnapshotPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnapshotService_ListSnapshotPolicies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapshotServiceServer).ListSnapshotPolicies(ctx, req.(*ListSnapshotPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnapshotService_CreateSnapshotFromVMSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSnapshotFromVMSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapshotServiceServer).CreateSnapshotFromVMSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnapshotService_CreateSnapshotFromVMSnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapshotServiceServer).CreateSnapshotFromVMSnapshot(ctx, req.(*CreateSnapshotFromVMSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnapshotService_RevertSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevertSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapshotServiceServer).RevertSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnapshotService_RevertSnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapshotServiceServer).RevertSnapshot(ctx, req.(*RevertSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnapshotService_CreateSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapshotServiceServer).CreateSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnapshotService_CreateSnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapshotServiceServer).CreateSnapshot(ctx, req.(*CreateSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnapshotService_ListSnapshots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSnapshotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapshotServiceServer).ListSnapshots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnapshotService_ListSnapshots_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapshotServiceServer).ListSnapshots(ctx, req.(*ListSnapshotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnapshotService_ArchiveSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapshotServiceServer).ArchiveSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnapshotService_ArchiveSnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapshotServiceServer).ArchiveSnapshot(ctx, req.(*ArchiveSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnapshotService_CopySnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopySnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapshotServiceServer).CopySnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnapshotService_CopySnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapshotServiceServer).CopySnapshot(ctx, req.(*CopySnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnapshotService_UpdateSnapshotPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSnapshotPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapshotServiceServer).UpdateSnapshotPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnapshotService_UpdateSnapshotPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapshotServiceServer).UpdateSnapshotPolicy(ctx, req.(*UpdateSnapshotPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnapshotService_DeleteSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapshotServiceServer).DeleteSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnapshotService_DeleteSnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapshotServiceServer).DeleteSnapshot(ctx, req.(*DeleteSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SnapshotService_ServiceDesc is the grpc.ServiceDesc for SnapshotService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SnapshotService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloudstack.management.snapshot.v1.SnapshotService",
	HandlerType: (*SnapshotServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExtractSnapshot",
			Handler:    _SnapshotService_ExtractSnapshot_Handler,
		},
		{
			MethodName: "DeleteSnapshotPolicies",
			Handler:    _SnapshotService_DeleteSnapshotPolicies_Handler,
		},
		{
			MethodName: "CreateSnapshotPolicy",
			Handler:    _SnapshotService_CreateSnapshotPolicy_Handler,
		},
		{
			MethodName: "ListSnapshotPolicies",
			Handler:    _SnapshotService_ListSnapshotPolicies_Handler,
		},
		{
			MethodName: "CreateSnapshotFromVMSnapshot",
			Handler:    _SnapshotService_CreateSnapshotFromVMSnapshot_Handler,
		},
		{
			MethodName: "RevertSnapshot",
			Handler:    _SnapshotService_RevertSnapshot_Handler,
		},
		{
			MethodName: "CreateSnapshot",
			Handler:    _SnapshotService_CreateSnapshot_Handler,
		},
		{
			MethodName: "ListSnapshots",
			Handler:    _SnapshotService_ListSnapshots_Handler,
		},
		{
			MethodName: "ArchiveSnapshot",
			Handler:    _SnapshotService_ArchiveSnapshot_Handler,
		},
		{
			MethodName: "CopySnapshot",
			Handler:    _SnapshotService_CopySnapshot_Handler,
		},
		{
			MethodName: "UpdateSnapshotPolicy",
			Handler:    _SnapshotService_UpdateSnapshotPolicy_Handler,
		},
		{
			MethodName: "DeleteSnapshot",
			Handler:    _SnapshotService_DeleteSnapshot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloudstack/management/snapshot/v1/snapshot.gen.proto",
}
