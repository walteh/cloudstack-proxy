// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cloudstack/management/vlan/v1/vlan.gen.proto

package vlanv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/walteh/cloudstack-proxy/gen/proto/golang/cloudstack/management/vlan/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// VlanServiceName is the fully-qualified name of the VlanService service.
	VlanServiceName = "cloudstack.management.vlan.v1.VlanService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// VlanServiceCreateVlanIpRangeProcedure is the fully-qualified name of the VlanService's
	// CreateVlanIpRange RPC.
	VlanServiceCreateVlanIpRangeProcedure = "/cloudstack.management.vlan.v1.VlanService/CreateVlanIpRange"
	// VlanServiceDedicatePublicIpRangeProcedure is the fully-qualified name of the VlanService's
	// DedicatePublicIpRange RPC.
	VlanServiceDedicatePublicIpRangeProcedure = "/cloudstack.management.vlan.v1.VlanService/DedicatePublicIpRange"
	// VlanServiceDeleteVlanIpRangeProcedure is the fully-qualified name of the VlanService's
	// DeleteVlanIpRange RPC.
	VlanServiceDeleteVlanIpRangeProcedure = "/cloudstack.management.vlan.v1.VlanService/DeleteVlanIpRange"
	// VlanServiceListVlanIpRangesProcedure is the fully-qualified name of the VlanService's
	// ListVlanIpRanges RPC.
	VlanServiceListVlanIpRangesProcedure = "/cloudstack.management.vlan.v1.VlanService/ListVlanIpRanges"
	// VlanServiceReleasePublicIpRangeProcedure is the fully-qualified name of the VlanService's
	// ReleasePublicIpRange RPC.
	VlanServiceReleasePublicIpRangeProcedure = "/cloudstack.management.vlan.v1.VlanService/ReleasePublicIpRange"
	// VlanServiceUpdateVlanIpRangeProcedure is the fully-qualified name of the VlanService's
	// UpdateVlanIpRange RPC.
	VlanServiceUpdateVlanIpRangeProcedure = "/cloudstack.management.vlan.v1.VlanService/UpdateVlanIpRange"
)

// VlanServiceClient is a client for the cloudstack.management.vlan.v1.VlanService service.
type VlanServiceClient interface {
	// CreateVlanIpRange Creates a VLAN IP range.
	CreateVlanIpRange(context.Context, *connect.Request[v1.CreateVlanIpRangeRequest]) (*connect.Response[v1.CreateVlanIpRangeResponse], error)
	// DedicatePublicIpRange Dedicates a Public IP range to an account
	DedicatePublicIpRange(context.Context, *connect.Request[v1.DedicatePublicIpRangeRequest]) (*connect.Response[v1.DedicatePublicIpRangeResponse], error)
	// DeleteVlanIpRange Deletes a VLAN IP range.
	DeleteVlanIpRange(context.Context, *connect.Request[v1.DeleteVlanIpRangeRequest]) (*connect.Response[v1.DeleteVlanIpRangeResponse], error)
	// ListVlanIpRanges Lists all VLAN IP ranges.
	ListVlanIpRanges(context.Context, *connect.Request[v1.ListVlanIpRangesRequest]) (*connect.Response[v1.ListVlanIpRangesResponse], error)
	// ReleasePublicIpRange Releases a Public IP range back to the system pool
	ReleasePublicIpRange(context.Context, *connect.Request[v1.ReleasePublicIpRangeRequest]) (*connect.Response[v1.ReleasePublicIpRangeResponse], error)
	// UpdateVlanIpRange Updates a VLAN IP range.
	UpdateVlanIpRange(context.Context, *connect.Request[v1.UpdateVlanIpRangeRequest]) (*connect.Response[v1.UpdateVlanIpRangeResponse], error)
}

// NewVlanServiceClient constructs a client for the cloudstack.management.vlan.v1.VlanService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewVlanServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) VlanServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	vlanServiceMethods := v1.File_cloudstack_management_vlan_v1_vlan_gen_proto.Services().ByName("VlanService").Methods()
	return &vlanServiceClient{
		createVlanIpRange: connect.NewClient[v1.CreateVlanIpRangeRequest, v1.CreateVlanIpRangeResponse](
			httpClient,
			baseURL+VlanServiceCreateVlanIpRangeProcedure,
			connect.WithSchema(vlanServiceMethods.ByName("CreateVlanIpRange")),
			connect.WithClientOptions(opts...),
		),
		dedicatePublicIpRange: connect.NewClient[v1.DedicatePublicIpRangeRequest, v1.DedicatePublicIpRangeResponse](
			httpClient,
			baseURL+VlanServiceDedicatePublicIpRangeProcedure,
			connect.WithSchema(vlanServiceMethods.ByName("DedicatePublicIpRange")),
			connect.WithClientOptions(opts...),
		),
		deleteVlanIpRange: connect.NewClient[v1.DeleteVlanIpRangeRequest, v1.DeleteVlanIpRangeResponse](
			httpClient,
			baseURL+VlanServiceDeleteVlanIpRangeProcedure,
			connect.WithSchema(vlanServiceMethods.ByName("DeleteVlanIpRange")),
			connect.WithClientOptions(opts...),
		),
		listVlanIpRanges: connect.NewClient[v1.ListVlanIpRangesRequest, v1.ListVlanIpRangesResponse](
			httpClient,
			baseURL+VlanServiceListVlanIpRangesProcedure,
			connect.WithSchema(vlanServiceMethods.ByName("ListVlanIpRanges")),
			connect.WithClientOptions(opts...),
		),
		releasePublicIpRange: connect.NewClient[v1.ReleasePublicIpRangeRequest, v1.ReleasePublicIpRangeResponse](
			httpClient,
			baseURL+VlanServiceReleasePublicIpRangeProcedure,
			connect.WithSchema(vlanServiceMethods.ByName("ReleasePublicIpRange")),
			connect.WithClientOptions(opts...),
		),
		updateVlanIpRange: connect.NewClient[v1.UpdateVlanIpRangeRequest, v1.UpdateVlanIpRangeResponse](
			httpClient,
			baseURL+VlanServiceUpdateVlanIpRangeProcedure,
			connect.WithSchema(vlanServiceMethods.ByName("UpdateVlanIpRange")),
			connect.WithClientOptions(opts...),
		),
	}
}

// vlanServiceClient implements VlanServiceClient.
type vlanServiceClient struct {
	createVlanIpRange     *connect.Client[v1.CreateVlanIpRangeRequest, v1.CreateVlanIpRangeResponse]
	dedicatePublicIpRange *connect.Client[v1.DedicatePublicIpRangeRequest, v1.DedicatePublicIpRangeResponse]
	deleteVlanIpRange     *connect.Client[v1.DeleteVlanIpRangeRequest, v1.DeleteVlanIpRangeResponse]
	listVlanIpRanges      *connect.Client[v1.ListVlanIpRangesRequest, v1.ListVlanIpRangesResponse]
	releasePublicIpRange  *connect.Client[v1.ReleasePublicIpRangeRequest, v1.ReleasePublicIpRangeResponse]
	updateVlanIpRange     *connect.Client[v1.UpdateVlanIpRangeRequest, v1.UpdateVlanIpRangeResponse]
}

// CreateVlanIpRange calls cloudstack.management.vlan.v1.VlanService.CreateVlanIpRange.
func (c *vlanServiceClient) CreateVlanIpRange(ctx context.Context, req *connect.Request[v1.CreateVlanIpRangeRequest]) (*connect.Response[v1.CreateVlanIpRangeResponse], error) {
	return c.createVlanIpRange.CallUnary(ctx, req)
}

// DedicatePublicIpRange calls cloudstack.management.vlan.v1.VlanService.DedicatePublicIpRange.
func (c *vlanServiceClient) DedicatePublicIpRange(ctx context.Context, req *connect.Request[v1.DedicatePublicIpRangeRequest]) (*connect.Response[v1.DedicatePublicIpRangeResponse], error) {
	return c.dedicatePublicIpRange.CallUnary(ctx, req)
}

// DeleteVlanIpRange calls cloudstack.management.vlan.v1.VlanService.DeleteVlanIpRange.
func (c *vlanServiceClient) DeleteVlanIpRange(ctx context.Context, req *connect.Request[v1.DeleteVlanIpRangeRequest]) (*connect.Response[v1.DeleteVlanIpRangeResponse], error) {
	return c.deleteVlanIpRange.CallUnary(ctx, req)
}

// ListVlanIpRanges calls cloudstack.management.vlan.v1.VlanService.ListVlanIpRanges.
func (c *vlanServiceClient) ListVlanIpRanges(ctx context.Context, req *connect.Request[v1.ListVlanIpRangesRequest]) (*connect.Response[v1.ListVlanIpRangesResponse], error) {
	return c.listVlanIpRanges.CallUnary(ctx, req)
}

// ReleasePublicIpRange calls cloudstack.management.vlan.v1.VlanService.ReleasePublicIpRange.
func (c *vlanServiceClient) ReleasePublicIpRange(ctx context.Context, req *connect.Request[v1.ReleasePublicIpRangeRequest]) (*connect.Response[v1.ReleasePublicIpRangeResponse], error) {
	return c.releasePublicIpRange.CallUnary(ctx, req)
}

// UpdateVlanIpRange calls cloudstack.management.vlan.v1.VlanService.UpdateVlanIpRange.
func (c *vlanServiceClient) UpdateVlanIpRange(ctx context.Context, req *connect.Request[v1.UpdateVlanIpRangeRequest]) (*connect.Response[v1.UpdateVlanIpRangeResponse], error) {
	return c.updateVlanIpRange.CallUnary(ctx, req)
}

// VlanServiceHandler is an implementation of the cloudstack.management.vlan.v1.VlanService service.
type VlanServiceHandler interface {
	// CreateVlanIpRange Creates a VLAN IP range.
	CreateVlanIpRange(context.Context, *connect.Request[v1.CreateVlanIpRangeRequest]) (*connect.Response[v1.CreateVlanIpRangeResponse], error)
	// DedicatePublicIpRange Dedicates a Public IP range to an account
	DedicatePublicIpRange(context.Context, *connect.Request[v1.DedicatePublicIpRangeRequest]) (*connect.Response[v1.DedicatePublicIpRangeResponse], error)
	// DeleteVlanIpRange Deletes a VLAN IP range.
	DeleteVlanIpRange(context.Context, *connect.Request[v1.DeleteVlanIpRangeRequest]) (*connect.Response[v1.DeleteVlanIpRangeResponse], error)
	// ListVlanIpRanges Lists all VLAN IP ranges.
	ListVlanIpRanges(context.Context, *connect.Request[v1.ListVlanIpRangesRequest]) (*connect.Response[v1.ListVlanIpRangesResponse], error)
	// ReleasePublicIpRange Releases a Public IP range back to the system pool
	ReleasePublicIpRange(context.Context, *connect.Request[v1.ReleasePublicIpRangeRequest]) (*connect.Response[v1.ReleasePublicIpRangeResponse], error)
	// UpdateVlanIpRange Updates a VLAN IP range.
	UpdateVlanIpRange(context.Context, *connect.Request[v1.UpdateVlanIpRangeRequest]) (*connect.Response[v1.UpdateVlanIpRangeResponse], error)
}

// NewVlanServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewVlanServiceHandler(svc VlanServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	vlanServiceMethods := v1.File_cloudstack_management_vlan_v1_vlan_gen_proto.Services().ByName("VlanService").Methods()
	vlanServiceCreateVlanIpRangeHandler := connect.NewUnaryHandler(
		VlanServiceCreateVlanIpRangeProcedure,
		svc.CreateVlanIpRange,
		connect.WithSchema(vlanServiceMethods.ByName("CreateVlanIpRange")),
		connect.WithHandlerOptions(opts...),
	)
	vlanServiceDedicatePublicIpRangeHandler := connect.NewUnaryHandler(
		VlanServiceDedicatePublicIpRangeProcedure,
		svc.DedicatePublicIpRange,
		connect.WithSchema(vlanServiceMethods.ByName("DedicatePublicIpRange")),
		connect.WithHandlerOptions(opts...),
	)
	vlanServiceDeleteVlanIpRangeHandler := connect.NewUnaryHandler(
		VlanServiceDeleteVlanIpRangeProcedure,
		svc.DeleteVlanIpRange,
		connect.WithSchema(vlanServiceMethods.ByName("DeleteVlanIpRange")),
		connect.WithHandlerOptions(opts...),
	)
	vlanServiceListVlanIpRangesHandler := connect.NewUnaryHandler(
		VlanServiceListVlanIpRangesProcedure,
		svc.ListVlanIpRanges,
		connect.WithSchema(vlanServiceMethods.ByName("ListVlanIpRanges")),
		connect.WithHandlerOptions(opts...),
	)
	vlanServiceReleasePublicIpRangeHandler := connect.NewUnaryHandler(
		VlanServiceReleasePublicIpRangeProcedure,
		svc.ReleasePublicIpRange,
		connect.WithSchema(vlanServiceMethods.ByName("ReleasePublicIpRange")),
		connect.WithHandlerOptions(opts...),
	)
	vlanServiceUpdateVlanIpRangeHandler := connect.NewUnaryHandler(
		VlanServiceUpdateVlanIpRangeProcedure,
		svc.UpdateVlanIpRange,
		connect.WithSchema(vlanServiceMethods.ByName("UpdateVlanIpRange")),
		connect.WithHandlerOptions(opts...),
	)
	return "/cloudstack.management.vlan.v1.VlanService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case VlanServiceCreateVlanIpRangeProcedure:
			vlanServiceCreateVlanIpRangeHandler.ServeHTTP(w, r)
		case VlanServiceDedicatePublicIpRangeProcedure:
			vlanServiceDedicatePublicIpRangeHandler.ServeHTTP(w, r)
		case VlanServiceDeleteVlanIpRangeProcedure:
			vlanServiceDeleteVlanIpRangeHandler.ServeHTTP(w, r)
		case VlanServiceListVlanIpRangesProcedure:
			vlanServiceListVlanIpRangesHandler.ServeHTTP(w, r)
		case VlanServiceReleasePublicIpRangeProcedure:
			vlanServiceReleasePublicIpRangeHandler.ServeHTTP(w, r)
		case VlanServiceUpdateVlanIpRangeProcedure:
			vlanServiceUpdateVlanIpRangeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedVlanServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedVlanServiceHandler struct{}

func (UnimplementedVlanServiceHandler) CreateVlanIpRange(context.Context, *connect.Request[v1.CreateVlanIpRangeRequest]) (*connect.Response[v1.CreateVlanIpRangeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.vlan.v1.VlanService.CreateVlanIpRange is not implemented"))
}

func (UnimplementedVlanServiceHandler) DedicatePublicIpRange(context.Context, *connect.Request[v1.DedicatePublicIpRangeRequest]) (*connect.Response[v1.DedicatePublicIpRangeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.vlan.v1.VlanService.DedicatePublicIpRange is not implemented"))
}

func (UnimplementedVlanServiceHandler) DeleteVlanIpRange(context.Context, *connect.Request[v1.DeleteVlanIpRangeRequest]) (*connect.Response[v1.DeleteVlanIpRangeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.vlan.v1.VlanService.DeleteVlanIpRange is not implemented"))
}

func (UnimplementedVlanServiceHandler) ListVlanIpRanges(context.Context, *connect.Request[v1.ListVlanIpRangesRequest]) (*connect.Response[v1.ListVlanIpRangesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.vlan.v1.VlanService.ListVlanIpRanges is not implemented"))
}

func (UnimplementedVlanServiceHandler) ReleasePublicIpRange(context.Context, *connect.Request[v1.ReleasePublicIpRangeRequest]) (*connect.Response[v1.ReleasePublicIpRangeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.vlan.v1.VlanService.ReleasePublicIpRange is not implemented"))
}

func (UnimplementedVlanServiceHandler) UpdateVlanIpRange(context.Context, *connect.Request[v1.UpdateVlanIpRangeRequest]) (*connect.Response[v1.UpdateVlanIpRangeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.vlan.v1.VlanService.UpdateVlanIpRange is not implemented"))
}
