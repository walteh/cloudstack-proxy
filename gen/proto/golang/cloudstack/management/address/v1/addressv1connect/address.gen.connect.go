// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cloudstack/management/address/v1/address.gen.proto

package addressv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/walteh/cloudstack-proxy/gen/proto/golang/cloudstack/management/address/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AddressServiceName is the fully-qualified name of the AddressService service.
	AddressServiceName = "cloudstack.management.address.v1.AddressService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AddressServiceAcquirePodIpCmdByAdminProcedure is the fully-qualified name of the AddressService's
	// AcquirePodIpCmdByAdmin RPC.
	AddressServiceAcquirePodIpCmdByAdminProcedure = "/cloudstack.management.address.v1.AddressService/AcquirePodIpCmdByAdmin"
	// AddressServiceAssociateIPAddrProcedure is the fully-qualified name of the AddressService's
	// AssociateIPAddr RPC.
	AddressServiceAssociateIPAddrProcedure = "/cloudstack.management.address.v1.AddressService/AssociateIPAddr"
	// AddressServiceAssociateIPAddrCmdByAdminProcedure is the fully-qualified name of the
	// AddressService's AssociateIPAddrCmdByAdmin RPC.
	AddressServiceAssociateIPAddrCmdByAdminProcedure = "/cloudstack.management.address.v1.AddressService/AssociateIPAddrCmdByAdmin"
	// AddressServiceDisassociateIPAddrProcedure is the fully-qualified name of the AddressService's
	// DisassociateIPAddr RPC.
	AddressServiceDisassociateIPAddrProcedure = "/cloudstack.management.address.v1.AddressService/DisassociateIPAddr"
	// AddressServiceListPublicIpAddressesProcedure is the fully-qualified name of the AddressService's
	// ListPublicIpAddresses RPC.
	AddressServiceListPublicIpAddressesProcedure = "/cloudstack.management.address.v1.AddressService/ListPublicIpAddresses"
	// AddressServiceListPublicIpAddressesCmdByAdminProcedure is the fully-qualified name of the
	// AddressService's ListPublicIpAddressesCmdByAdmin RPC.
	AddressServiceListPublicIpAddressesCmdByAdminProcedure = "/cloudstack.management.address.v1.AddressService/ListPublicIpAddressesCmdByAdmin"
	// AddressServiceListQuarantinedIpsProcedure is the fully-qualified name of the AddressService's
	// ListQuarantinedIps RPC.
	AddressServiceListQuarantinedIpsProcedure = "/cloudstack.management.address.v1.AddressService/ListQuarantinedIps"
	// AddressServiceReleaseIPAddrProcedure is the fully-qualified name of the AddressService's
	// ReleaseIPAddr RPC.
	AddressServiceReleaseIPAddrProcedure = "/cloudstack.management.address.v1.AddressService/ReleaseIPAddr"
	// AddressServiceReleasePodIpCmdByAdminProcedure is the fully-qualified name of the AddressService's
	// ReleasePodIpCmdByAdmin RPC.
	AddressServiceReleasePodIpCmdByAdminProcedure = "/cloudstack.management.address.v1.AddressService/ReleasePodIpCmdByAdmin"
	// AddressServiceRemoveQuarantinedIpProcedure is the fully-qualified name of the AddressService's
	// RemoveQuarantinedIp RPC.
	AddressServiceRemoveQuarantinedIpProcedure = "/cloudstack.management.address.v1.AddressService/RemoveQuarantinedIp"
	// AddressServiceReserveIPAddrProcedure is the fully-qualified name of the AddressService's
	// ReserveIPAddr RPC.
	AddressServiceReserveIPAddrProcedure = "/cloudstack.management.address.v1.AddressService/ReserveIPAddr"
	// AddressServiceUpdateIPAddrProcedure is the fully-qualified name of the AddressService's
	// UpdateIPAddr RPC.
	AddressServiceUpdateIPAddrProcedure = "/cloudstack.management.address.v1.AddressService/UpdateIPAddr"
	// AddressServiceUpdateQuarantinedIpProcedure is the fully-qualified name of the AddressService's
	// UpdateQuarantinedIp RPC.
	AddressServiceUpdateQuarantinedIpProcedure = "/cloudstack.management.address.v1.AddressService/UpdateQuarantinedIp"
)

// AddressServiceClient is a client for the cloudstack.management.address.v1.AddressService service.
type AddressServiceClient interface {
	// AcquirePodIpCmdByAdmin Allocates IP addresses in respective Pod of a Zone
	AcquirePodIpCmdByAdmin(context.Context, *connect.Request[v1.AcquirePodIpCmdByAdminRequest]) (*connect.Response[v1.AcquirePodIpCmdByAdminResponse], error)
	// AssociateIPAddr Acquires and associates a public IP to an account. Either of the parameters are required, i.e. either zoneId, or networkId, or vpcId
	AssociateIPAddr(context.Context, *connect.Request[v1.AssociateIPAddrRequest]) (*connect.Response[v1.AssociateIPAddrResponse], error)
	// AssociateIPAddrCmdByAdmin Acquires and associates a public IP to an account.
	AssociateIPAddrCmdByAdmin(context.Context, *connect.Request[v1.AssociateIPAddrCmdByAdminRequest]) (*connect.Response[v1.AssociateIPAddrCmdByAdminResponse], error)
	// DisassociateIPAddr Disassociates an IP address from the account.
	DisassociateIPAddr(context.Context, *connect.Request[v1.DisassociateIPAddrRequest]) (*connect.Response[v1.DisassociateIPAddrResponse], error)
	// ListPublicIpAddresses Lists all public IP addresses
	ListPublicIpAddresses(context.Context, *connect.Request[v1.ListPublicIpAddressesRequest]) (*connect.Response[v1.ListPublicIpAddressesResponse], error)
	// ListPublicIpAddressesCmdByAdmin Lists all public ip addresses
	ListPublicIpAddressesCmdByAdmin(context.Context, *connect.Request[v1.ListPublicIpAddressesCmdByAdminRequest]) (*connect.Response[v1.ListPublicIpAddressesCmdByAdminResponse], error)
	// ListQuarantinedIps List public IP addresses in quarantine.
	ListQuarantinedIps(context.Context, *connect.Request[v1.ListQuarantinedIpsRequest]) (*connect.Response[v1.ListQuarantinedIpsResponse], error)
	// ReleaseIPAddr Releases an IP address from the account.
	ReleaseIPAddr(context.Context, *connect.Request[v1.ReleaseIPAddrRequest]) (*connect.Response[v1.ReleaseIPAddrResponse], error)
	// ReleasePodIpCmdByAdmin Releases a Pod IP back to the Pod
	ReleasePodIpCmdByAdmin(context.Context, *connect.Request[v1.ReleasePodIpCmdByAdminRequest]) (*connect.Response[v1.ReleasePodIpCmdByAdminResponse], error)
	// RemoveQuarantinedIp Removes a public IP address from quarantine. Only IPs in active quarantine can be removed.
	RemoveQuarantinedIp(context.Context, *connect.Request[v1.RemoveQuarantinedIpRequest]) (*connect.Response[v1.RemoveQuarantinedIpResponse], error)
	// ReserveIPAddr Reserve a public IP to an account.
	ReserveIPAddr(context.Context, *connect.Request[v1.ReserveIPAddrRequest]) (*connect.Response[v1.ReserveIPAddrResponse], error)
	// UpdateIPAddr Updates an IP address
	UpdateIPAddr(context.Context, *connect.Request[v1.UpdateIPAddrRequest]) (*connect.Response[v1.UpdateIPAddrResponse], error)
	// UpdateQuarantinedIp Updates the quarantine end date for the given public IP address.
	UpdateQuarantinedIp(context.Context, *connect.Request[v1.UpdateQuarantinedIpRequest]) (*connect.Response[v1.UpdateQuarantinedIpResponse], error)
}

// NewAddressServiceClient constructs a client for the
// cloudstack.management.address.v1.AddressService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAddressServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AddressServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	addressServiceMethods := v1.File_cloudstack_management_address_v1_address_gen_proto.Services().ByName("AddressService").Methods()
	return &addressServiceClient{
		acquirePodIpCmdByAdmin: connect.NewClient[v1.AcquirePodIpCmdByAdminRequest, v1.AcquirePodIpCmdByAdminResponse](
			httpClient,
			baseURL+AddressServiceAcquirePodIpCmdByAdminProcedure,
			connect.WithSchema(addressServiceMethods.ByName("AcquirePodIpCmdByAdmin")),
			connect.WithClientOptions(opts...),
		),
		associateIPAddr: connect.NewClient[v1.AssociateIPAddrRequest, v1.AssociateIPAddrResponse](
			httpClient,
			baseURL+AddressServiceAssociateIPAddrProcedure,
			connect.WithSchema(addressServiceMethods.ByName("AssociateIPAddr")),
			connect.WithClientOptions(opts...),
		),
		associateIPAddrCmdByAdmin: connect.NewClient[v1.AssociateIPAddrCmdByAdminRequest, v1.AssociateIPAddrCmdByAdminResponse](
			httpClient,
			baseURL+AddressServiceAssociateIPAddrCmdByAdminProcedure,
			connect.WithSchema(addressServiceMethods.ByName("AssociateIPAddrCmdByAdmin")),
			connect.WithClientOptions(opts...),
		),
		disassociateIPAddr: connect.NewClient[v1.DisassociateIPAddrRequest, v1.DisassociateIPAddrResponse](
			httpClient,
			baseURL+AddressServiceDisassociateIPAddrProcedure,
			connect.WithSchema(addressServiceMethods.ByName("DisassociateIPAddr")),
			connect.WithClientOptions(opts...),
		),
		listPublicIpAddresses: connect.NewClient[v1.ListPublicIpAddressesRequest, v1.ListPublicIpAddressesResponse](
			httpClient,
			baseURL+AddressServiceListPublicIpAddressesProcedure,
			connect.WithSchema(addressServiceMethods.ByName("ListPublicIpAddresses")),
			connect.WithClientOptions(opts...),
		),
		listPublicIpAddressesCmdByAdmin: connect.NewClient[v1.ListPublicIpAddressesCmdByAdminRequest, v1.ListPublicIpAddressesCmdByAdminResponse](
			httpClient,
			baseURL+AddressServiceListPublicIpAddressesCmdByAdminProcedure,
			connect.WithSchema(addressServiceMethods.ByName("ListPublicIpAddressesCmdByAdmin")),
			connect.WithClientOptions(opts...),
		),
		listQuarantinedIps: connect.NewClient[v1.ListQuarantinedIpsRequest, v1.ListQuarantinedIpsResponse](
			httpClient,
			baseURL+AddressServiceListQuarantinedIpsProcedure,
			connect.WithSchema(addressServiceMethods.ByName("ListQuarantinedIps")),
			connect.WithClientOptions(opts...),
		),
		releaseIPAddr: connect.NewClient[v1.ReleaseIPAddrRequest, v1.ReleaseIPAddrResponse](
			httpClient,
			baseURL+AddressServiceReleaseIPAddrProcedure,
			connect.WithSchema(addressServiceMethods.ByName("ReleaseIPAddr")),
			connect.WithClientOptions(opts...),
		),
		releasePodIpCmdByAdmin: connect.NewClient[v1.ReleasePodIpCmdByAdminRequest, v1.ReleasePodIpCmdByAdminResponse](
			httpClient,
			baseURL+AddressServiceReleasePodIpCmdByAdminProcedure,
			connect.WithSchema(addressServiceMethods.ByName("ReleasePodIpCmdByAdmin")),
			connect.WithClientOptions(opts...),
		),
		removeQuarantinedIp: connect.NewClient[v1.RemoveQuarantinedIpRequest, v1.RemoveQuarantinedIpResponse](
			httpClient,
			baseURL+AddressServiceRemoveQuarantinedIpProcedure,
			connect.WithSchema(addressServiceMethods.ByName("RemoveQuarantinedIp")),
			connect.WithClientOptions(opts...),
		),
		reserveIPAddr: connect.NewClient[v1.ReserveIPAddrRequest, v1.ReserveIPAddrResponse](
			httpClient,
			baseURL+AddressServiceReserveIPAddrProcedure,
			connect.WithSchema(addressServiceMethods.ByName("ReserveIPAddr")),
			connect.WithClientOptions(opts...),
		),
		updateIPAddr: connect.NewClient[v1.UpdateIPAddrRequest, v1.UpdateIPAddrResponse](
			httpClient,
			baseURL+AddressServiceUpdateIPAddrProcedure,
			connect.WithSchema(addressServiceMethods.ByName("UpdateIPAddr")),
			connect.WithClientOptions(opts...),
		),
		updateQuarantinedIp: connect.NewClient[v1.UpdateQuarantinedIpRequest, v1.UpdateQuarantinedIpResponse](
			httpClient,
			baseURL+AddressServiceUpdateQuarantinedIpProcedure,
			connect.WithSchema(addressServiceMethods.ByName("UpdateQuarantinedIp")),
			connect.WithClientOptions(opts...),
		),
	}
}

// addressServiceClient implements AddressServiceClient.
type addressServiceClient struct {
	acquirePodIpCmdByAdmin          *connect.Client[v1.AcquirePodIpCmdByAdminRequest, v1.AcquirePodIpCmdByAdminResponse]
	associateIPAddr                 *connect.Client[v1.AssociateIPAddrRequest, v1.AssociateIPAddrResponse]
	associateIPAddrCmdByAdmin       *connect.Client[v1.AssociateIPAddrCmdByAdminRequest, v1.AssociateIPAddrCmdByAdminResponse]
	disassociateIPAddr              *connect.Client[v1.DisassociateIPAddrRequest, v1.DisassociateIPAddrResponse]
	listPublicIpAddresses           *connect.Client[v1.ListPublicIpAddressesRequest, v1.ListPublicIpAddressesResponse]
	listPublicIpAddressesCmdByAdmin *connect.Client[v1.ListPublicIpAddressesCmdByAdminRequest, v1.ListPublicIpAddressesCmdByAdminResponse]
	listQuarantinedIps              *connect.Client[v1.ListQuarantinedIpsRequest, v1.ListQuarantinedIpsResponse]
	releaseIPAddr                   *connect.Client[v1.ReleaseIPAddrRequest, v1.ReleaseIPAddrResponse]
	releasePodIpCmdByAdmin          *connect.Client[v1.ReleasePodIpCmdByAdminRequest, v1.ReleasePodIpCmdByAdminResponse]
	removeQuarantinedIp             *connect.Client[v1.RemoveQuarantinedIpRequest, v1.RemoveQuarantinedIpResponse]
	reserveIPAddr                   *connect.Client[v1.ReserveIPAddrRequest, v1.ReserveIPAddrResponse]
	updateIPAddr                    *connect.Client[v1.UpdateIPAddrRequest, v1.UpdateIPAddrResponse]
	updateQuarantinedIp             *connect.Client[v1.UpdateQuarantinedIpRequest, v1.UpdateQuarantinedIpResponse]
}

// AcquirePodIpCmdByAdmin calls
// cloudstack.management.address.v1.AddressService.AcquirePodIpCmdByAdmin.
func (c *addressServiceClient) AcquirePodIpCmdByAdmin(ctx context.Context, req *connect.Request[v1.AcquirePodIpCmdByAdminRequest]) (*connect.Response[v1.AcquirePodIpCmdByAdminResponse], error) {
	return c.acquirePodIpCmdByAdmin.CallUnary(ctx, req)
}

// AssociateIPAddr calls cloudstack.management.address.v1.AddressService.AssociateIPAddr.
func (c *addressServiceClient) AssociateIPAddr(ctx context.Context, req *connect.Request[v1.AssociateIPAddrRequest]) (*connect.Response[v1.AssociateIPAddrResponse], error) {
	return c.associateIPAddr.CallUnary(ctx, req)
}

// AssociateIPAddrCmdByAdmin calls
// cloudstack.management.address.v1.AddressService.AssociateIPAddrCmdByAdmin.
func (c *addressServiceClient) AssociateIPAddrCmdByAdmin(ctx context.Context, req *connect.Request[v1.AssociateIPAddrCmdByAdminRequest]) (*connect.Response[v1.AssociateIPAddrCmdByAdminResponse], error) {
	return c.associateIPAddrCmdByAdmin.CallUnary(ctx, req)
}

// DisassociateIPAddr calls cloudstack.management.address.v1.AddressService.DisassociateIPAddr.
func (c *addressServiceClient) DisassociateIPAddr(ctx context.Context, req *connect.Request[v1.DisassociateIPAddrRequest]) (*connect.Response[v1.DisassociateIPAddrResponse], error) {
	return c.disassociateIPAddr.CallUnary(ctx, req)
}

// ListPublicIpAddresses calls
// cloudstack.management.address.v1.AddressService.ListPublicIpAddresses.
func (c *addressServiceClient) ListPublicIpAddresses(ctx context.Context, req *connect.Request[v1.ListPublicIpAddressesRequest]) (*connect.Response[v1.ListPublicIpAddressesResponse], error) {
	return c.listPublicIpAddresses.CallUnary(ctx, req)
}

// ListPublicIpAddressesCmdByAdmin calls
// cloudstack.management.address.v1.AddressService.ListPublicIpAddressesCmdByAdmin.
func (c *addressServiceClient) ListPublicIpAddressesCmdByAdmin(ctx context.Context, req *connect.Request[v1.ListPublicIpAddressesCmdByAdminRequest]) (*connect.Response[v1.ListPublicIpAddressesCmdByAdminResponse], error) {
	return c.listPublicIpAddressesCmdByAdmin.CallUnary(ctx, req)
}

// ListQuarantinedIps calls cloudstack.management.address.v1.AddressService.ListQuarantinedIps.
func (c *addressServiceClient) ListQuarantinedIps(ctx context.Context, req *connect.Request[v1.ListQuarantinedIpsRequest]) (*connect.Response[v1.ListQuarantinedIpsResponse], error) {
	return c.listQuarantinedIps.CallUnary(ctx, req)
}

// ReleaseIPAddr calls cloudstack.management.address.v1.AddressService.ReleaseIPAddr.
func (c *addressServiceClient) ReleaseIPAddr(ctx context.Context, req *connect.Request[v1.ReleaseIPAddrRequest]) (*connect.Response[v1.ReleaseIPAddrResponse], error) {
	return c.releaseIPAddr.CallUnary(ctx, req)
}

// ReleasePodIpCmdByAdmin calls
// cloudstack.management.address.v1.AddressService.ReleasePodIpCmdByAdmin.
func (c *addressServiceClient) ReleasePodIpCmdByAdmin(ctx context.Context, req *connect.Request[v1.ReleasePodIpCmdByAdminRequest]) (*connect.Response[v1.ReleasePodIpCmdByAdminResponse], error) {
	return c.releasePodIpCmdByAdmin.CallUnary(ctx, req)
}

// RemoveQuarantinedIp calls cloudstack.management.address.v1.AddressService.RemoveQuarantinedIp.
func (c *addressServiceClient) RemoveQuarantinedIp(ctx context.Context, req *connect.Request[v1.RemoveQuarantinedIpRequest]) (*connect.Response[v1.RemoveQuarantinedIpResponse], error) {
	return c.removeQuarantinedIp.CallUnary(ctx, req)
}

// ReserveIPAddr calls cloudstack.management.address.v1.AddressService.ReserveIPAddr.
func (c *addressServiceClient) ReserveIPAddr(ctx context.Context, req *connect.Request[v1.ReserveIPAddrRequest]) (*connect.Response[v1.ReserveIPAddrResponse], error) {
	return c.reserveIPAddr.CallUnary(ctx, req)
}

// UpdateIPAddr calls cloudstack.management.address.v1.AddressService.UpdateIPAddr.
func (c *addressServiceClient) UpdateIPAddr(ctx context.Context, req *connect.Request[v1.UpdateIPAddrRequest]) (*connect.Response[v1.UpdateIPAddrResponse], error) {
	return c.updateIPAddr.CallUnary(ctx, req)
}

// UpdateQuarantinedIp calls cloudstack.management.address.v1.AddressService.UpdateQuarantinedIp.
func (c *addressServiceClient) UpdateQuarantinedIp(ctx context.Context, req *connect.Request[v1.UpdateQuarantinedIpRequest]) (*connect.Response[v1.UpdateQuarantinedIpResponse], error) {
	return c.updateQuarantinedIp.CallUnary(ctx, req)
}

// AddressServiceHandler is an implementation of the cloudstack.management.address.v1.AddressService
// service.
type AddressServiceHandler interface {
	// AcquirePodIpCmdByAdmin Allocates IP addresses in respective Pod of a Zone
	AcquirePodIpCmdByAdmin(context.Context, *connect.Request[v1.AcquirePodIpCmdByAdminRequest]) (*connect.Response[v1.AcquirePodIpCmdByAdminResponse], error)
	// AssociateIPAddr Acquires and associates a public IP to an account. Either of the parameters are required, i.e. either zoneId, or networkId, or vpcId
	AssociateIPAddr(context.Context, *connect.Request[v1.AssociateIPAddrRequest]) (*connect.Response[v1.AssociateIPAddrResponse], error)
	// AssociateIPAddrCmdByAdmin Acquires and associates a public IP to an account.
	AssociateIPAddrCmdByAdmin(context.Context, *connect.Request[v1.AssociateIPAddrCmdByAdminRequest]) (*connect.Response[v1.AssociateIPAddrCmdByAdminResponse], error)
	// DisassociateIPAddr Disassociates an IP address from the account.
	DisassociateIPAddr(context.Context, *connect.Request[v1.DisassociateIPAddrRequest]) (*connect.Response[v1.DisassociateIPAddrResponse], error)
	// ListPublicIpAddresses Lists all public IP addresses
	ListPublicIpAddresses(context.Context, *connect.Request[v1.ListPublicIpAddressesRequest]) (*connect.Response[v1.ListPublicIpAddressesResponse], error)
	// ListPublicIpAddressesCmdByAdmin Lists all public ip addresses
	ListPublicIpAddressesCmdByAdmin(context.Context, *connect.Request[v1.ListPublicIpAddressesCmdByAdminRequest]) (*connect.Response[v1.ListPublicIpAddressesCmdByAdminResponse], error)
	// ListQuarantinedIps List public IP addresses in quarantine.
	ListQuarantinedIps(context.Context, *connect.Request[v1.ListQuarantinedIpsRequest]) (*connect.Response[v1.ListQuarantinedIpsResponse], error)
	// ReleaseIPAddr Releases an IP address from the account.
	ReleaseIPAddr(context.Context, *connect.Request[v1.ReleaseIPAddrRequest]) (*connect.Response[v1.ReleaseIPAddrResponse], error)
	// ReleasePodIpCmdByAdmin Releases a Pod IP back to the Pod
	ReleasePodIpCmdByAdmin(context.Context, *connect.Request[v1.ReleasePodIpCmdByAdminRequest]) (*connect.Response[v1.ReleasePodIpCmdByAdminResponse], error)
	// RemoveQuarantinedIp Removes a public IP address from quarantine. Only IPs in active quarantine can be removed.
	RemoveQuarantinedIp(context.Context, *connect.Request[v1.RemoveQuarantinedIpRequest]) (*connect.Response[v1.RemoveQuarantinedIpResponse], error)
	// ReserveIPAddr Reserve a public IP to an account.
	ReserveIPAddr(context.Context, *connect.Request[v1.ReserveIPAddrRequest]) (*connect.Response[v1.ReserveIPAddrResponse], error)
	// UpdateIPAddr Updates an IP address
	UpdateIPAddr(context.Context, *connect.Request[v1.UpdateIPAddrRequest]) (*connect.Response[v1.UpdateIPAddrResponse], error)
	// UpdateQuarantinedIp Updates the quarantine end date for the given public IP address.
	UpdateQuarantinedIp(context.Context, *connect.Request[v1.UpdateQuarantinedIpRequest]) (*connect.Response[v1.UpdateQuarantinedIpResponse], error)
}

// NewAddressServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAddressServiceHandler(svc AddressServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	addressServiceMethods := v1.File_cloudstack_management_address_v1_address_gen_proto.Services().ByName("AddressService").Methods()
	addressServiceAcquirePodIpCmdByAdminHandler := connect.NewUnaryHandler(
		AddressServiceAcquirePodIpCmdByAdminProcedure,
		svc.AcquirePodIpCmdByAdmin,
		connect.WithSchema(addressServiceMethods.ByName("AcquirePodIpCmdByAdmin")),
		connect.WithHandlerOptions(opts...),
	)
	addressServiceAssociateIPAddrHandler := connect.NewUnaryHandler(
		AddressServiceAssociateIPAddrProcedure,
		svc.AssociateIPAddr,
		connect.WithSchema(addressServiceMethods.ByName("AssociateIPAddr")),
		connect.WithHandlerOptions(opts...),
	)
	addressServiceAssociateIPAddrCmdByAdminHandler := connect.NewUnaryHandler(
		AddressServiceAssociateIPAddrCmdByAdminProcedure,
		svc.AssociateIPAddrCmdByAdmin,
		connect.WithSchema(addressServiceMethods.ByName("AssociateIPAddrCmdByAdmin")),
		connect.WithHandlerOptions(opts...),
	)
	addressServiceDisassociateIPAddrHandler := connect.NewUnaryHandler(
		AddressServiceDisassociateIPAddrProcedure,
		svc.DisassociateIPAddr,
		connect.WithSchema(addressServiceMethods.ByName("DisassociateIPAddr")),
		connect.WithHandlerOptions(opts...),
	)
	addressServiceListPublicIpAddressesHandler := connect.NewUnaryHandler(
		AddressServiceListPublicIpAddressesProcedure,
		svc.ListPublicIpAddresses,
		connect.WithSchema(addressServiceMethods.ByName("ListPublicIpAddresses")),
		connect.WithHandlerOptions(opts...),
	)
	addressServiceListPublicIpAddressesCmdByAdminHandler := connect.NewUnaryHandler(
		AddressServiceListPublicIpAddressesCmdByAdminProcedure,
		svc.ListPublicIpAddressesCmdByAdmin,
		connect.WithSchema(addressServiceMethods.ByName("ListPublicIpAddressesCmdByAdmin")),
		connect.WithHandlerOptions(opts...),
	)
	addressServiceListQuarantinedIpsHandler := connect.NewUnaryHandler(
		AddressServiceListQuarantinedIpsProcedure,
		svc.ListQuarantinedIps,
		connect.WithSchema(addressServiceMethods.ByName("ListQuarantinedIps")),
		connect.WithHandlerOptions(opts...),
	)
	addressServiceReleaseIPAddrHandler := connect.NewUnaryHandler(
		AddressServiceReleaseIPAddrProcedure,
		svc.ReleaseIPAddr,
		connect.WithSchema(addressServiceMethods.ByName("ReleaseIPAddr")),
		connect.WithHandlerOptions(opts...),
	)
	addressServiceReleasePodIpCmdByAdminHandler := connect.NewUnaryHandler(
		AddressServiceReleasePodIpCmdByAdminProcedure,
		svc.ReleasePodIpCmdByAdmin,
		connect.WithSchema(addressServiceMethods.ByName("ReleasePodIpCmdByAdmin")),
		connect.WithHandlerOptions(opts...),
	)
	addressServiceRemoveQuarantinedIpHandler := connect.NewUnaryHandler(
		AddressServiceRemoveQuarantinedIpProcedure,
		svc.RemoveQuarantinedIp,
		connect.WithSchema(addressServiceMethods.ByName("RemoveQuarantinedIp")),
		connect.WithHandlerOptions(opts...),
	)
	addressServiceReserveIPAddrHandler := connect.NewUnaryHandler(
		AddressServiceReserveIPAddrProcedure,
		svc.ReserveIPAddr,
		connect.WithSchema(addressServiceMethods.ByName("ReserveIPAddr")),
		connect.WithHandlerOptions(opts...),
	)
	addressServiceUpdateIPAddrHandler := connect.NewUnaryHandler(
		AddressServiceUpdateIPAddrProcedure,
		svc.UpdateIPAddr,
		connect.WithSchema(addressServiceMethods.ByName("UpdateIPAddr")),
		connect.WithHandlerOptions(opts...),
	)
	addressServiceUpdateQuarantinedIpHandler := connect.NewUnaryHandler(
		AddressServiceUpdateQuarantinedIpProcedure,
		svc.UpdateQuarantinedIp,
		connect.WithSchema(addressServiceMethods.ByName("UpdateQuarantinedIp")),
		connect.WithHandlerOptions(opts...),
	)
	return "/cloudstack.management.address.v1.AddressService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AddressServiceAcquirePodIpCmdByAdminProcedure:
			addressServiceAcquirePodIpCmdByAdminHandler.ServeHTTP(w, r)
		case AddressServiceAssociateIPAddrProcedure:
			addressServiceAssociateIPAddrHandler.ServeHTTP(w, r)
		case AddressServiceAssociateIPAddrCmdByAdminProcedure:
			addressServiceAssociateIPAddrCmdByAdminHandler.ServeHTTP(w, r)
		case AddressServiceDisassociateIPAddrProcedure:
			addressServiceDisassociateIPAddrHandler.ServeHTTP(w, r)
		case AddressServiceListPublicIpAddressesProcedure:
			addressServiceListPublicIpAddressesHandler.ServeHTTP(w, r)
		case AddressServiceListPublicIpAddressesCmdByAdminProcedure:
			addressServiceListPublicIpAddressesCmdByAdminHandler.ServeHTTP(w, r)
		case AddressServiceListQuarantinedIpsProcedure:
			addressServiceListQuarantinedIpsHandler.ServeHTTP(w, r)
		case AddressServiceReleaseIPAddrProcedure:
			addressServiceReleaseIPAddrHandler.ServeHTTP(w, r)
		case AddressServiceReleasePodIpCmdByAdminProcedure:
			addressServiceReleasePodIpCmdByAdminHandler.ServeHTTP(w, r)
		case AddressServiceRemoveQuarantinedIpProcedure:
			addressServiceRemoveQuarantinedIpHandler.ServeHTTP(w, r)
		case AddressServiceReserveIPAddrProcedure:
			addressServiceReserveIPAddrHandler.ServeHTTP(w, r)
		case AddressServiceUpdateIPAddrProcedure:
			addressServiceUpdateIPAddrHandler.ServeHTTP(w, r)
		case AddressServiceUpdateQuarantinedIpProcedure:
			addressServiceUpdateQuarantinedIpHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAddressServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAddressServiceHandler struct{}

func (UnimplementedAddressServiceHandler) AcquirePodIpCmdByAdmin(context.Context, *connect.Request[v1.AcquirePodIpCmdByAdminRequest]) (*connect.Response[v1.AcquirePodIpCmdByAdminResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.address.v1.AddressService.AcquirePodIpCmdByAdmin is not implemented"))
}

func (UnimplementedAddressServiceHandler) AssociateIPAddr(context.Context, *connect.Request[v1.AssociateIPAddrRequest]) (*connect.Response[v1.AssociateIPAddrResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.address.v1.AddressService.AssociateIPAddr is not implemented"))
}

func (UnimplementedAddressServiceHandler) AssociateIPAddrCmdByAdmin(context.Context, *connect.Request[v1.AssociateIPAddrCmdByAdminRequest]) (*connect.Response[v1.AssociateIPAddrCmdByAdminResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.address.v1.AddressService.AssociateIPAddrCmdByAdmin is not implemented"))
}

func (UnimplementedAddressServiceHandler) DisassociateIPAddr(context.Context, *connect.Request[v1.DisassociateIPAddrRequest]) (*connect.Response[v1.DisassociateIPAddrResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.address.v1.AddressService.DisassociateIPAddr is not implemented"))
}

func (UnimplementedAddressServiceHandler) ListPublicIpAddresses(context.Context, *connect.Request[v1.ListPublicIpAddressesRequest]) (*connect.Response[v1.ListPublicIpAddressesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.address.v1.AddressService.ListPublicIpAddresses is not implemented"))
}

func (UnimplementedAddressServiceHandler) ListPublicIpAddressesCmdByAdmin(context.Context, *connect.Request[v1.ListPublicIpAddressesCmdByAdminRequest]) (*connect.Response[v1.ListPublicIpAddressesCmdByAdminResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.address.v1.AddressService.ListPublicIpAddressesCmdByAdmin is not implemented"))
}

func (UnimplementedAddressServiceHandler) ListQuarantinedIps(context.Context, *connect.Request[v1.ListQuarantinedIpsRequest]) (*connect.Response[v1.ListQuarantinedIpsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.address.v1.AddressService.ListQuarantinedIps is not implemented"))
}

func (UnimplementedAddressServiceHandler) ReleaseIPAddr(context.Context, *connect.Request[v1.ReleaseIPAddrRequest]) (*connect.Response[v1.ReleaseIPAddrResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.address.v1.AddressService.ReleaseIPAddr is not implemented"))
}

func (UnimplementedAddressServiceHandler) ReleasePodIpCmdByAdmin(context.Context, *connect.Request[v1.ReleasePodIpCmdByAdminRequest]) (*connect.Response[v1.ReleasePodIpCmdByAdminResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.address.v1.AddressService.ReleasePodIpCmdByAdmin is not implemented"))
}

func (UnimplementedAddressServiceHandler) RemoveQuarantinedIp(context.Context, *connect.Request[v1.RemoveQuarantinedIpRequest]) (*connect.Response[v1.RemoveQuarantinedIpResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.address.v1.AddressService.RemoveQuarantinedIp is not implemented"))
}

func (UnimplementedAddressServiceHandler) ReserveIPAddr(context.Context, *connect.Request[v1.ReserveIPAddrRequest]) (*connect.Response[v1.ReserveIPAddrResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.address.v1.AddressService.ReserveIPAddr is not implemented"))
}

func (UnimplementedAddressServiceHandler) UpdateIPAddr(context.Context, *connect.Request[v1.UpdateIPAddrRequest]) (*connect.Response[v1.UpdateIPAddrResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.address.v1.AddressService.UpdateIPAddr is not implemented"))
}

func (UnimplementedAddressServiceHandler) UpdateQuarantinedIp(context.Context, *connect.Request[v1.UpdateQuarantinedIpRequest]) (*connect.Response[v1.UpdateQuarantinedIpResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.address.v1.AddressService.UpdateQuarantinedIp is not implemented"))
}
