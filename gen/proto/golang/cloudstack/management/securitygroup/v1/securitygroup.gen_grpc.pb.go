// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: cloudstack/management/securitygroup/v1/securitygroup.gen.proto

package securitygroupv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SecuritygroupService_RevokeSecurityGroupIngress_FullMethodName    = "/cloudstack.management.securitygroup.v1.SecuritygroupService/RevokeSecurityGroupIngress"
	SecuritygroupService_RevokeSecurityGroupEgress_FullMethodName     = "/cloudstack.management.securitygroup.v1.SecuritygroupService/RevokeSecurityGroupEgress"
	SecuritygroupService_ListSecurityGroups_FullMethodName            = "/cloudstack.management.securitygroup.v1.SecuritygroupService/ListSecurityGroups"
	SecuritygroupService_CreateSecurityGroup_FullMethodName           = "/cloudstack.management.securitygroup.v1.SecuritygroupService/CreateSecurityGroup"
	SecuritygroupService_AuthorizeSecurityGroupIngress_FullMethodName = "/cloudstack.management.securitygroup.v1.SecuritygroupService/AuthorizeSecurityGroupIngress"
	SecuritygroupService_UpdateSecurityGroup_FullMethodName           = "/cloudstack.management.securitygroup.v1.SecuritygroupService/UpdateSecurityGroup"
	SecuritygroupService_AuthorizeSecurityGroupEgress_FullMethodName  = "/cloudstack.management.securitygroup.v1.SecuritygroupService/AuthorizeSecurityGroupEgress"
	SecuritygroupService_DeleteSecurityGroup_FullMethodName           = "/cloudstack.management.securitygroup.v1.SecuritygroupService/DeleteSecurityGroup"
)

// SecuritygroupServiceClient is the client API for SecuritygroupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SecuritygroupService provides operations for managing Securitygroups
type SecuritygroupServiceClient interface {
	// RevokeSecurityGroupIngress Deletes a particular ingress rule from this security group
	RevokeSecurityGroupIngress(ctx context.Context, in *RevokeSecurityGroupIngressRequest, opts ...grpc.CallOption) (*RevokeSecurityGroupIngressResponse, error)
	// RevokeSecurityGroupEgress Deletes a particular egress rule from this security group
	RevokeSecurityGroupEgress(ctx context.Context, in *RevokeSecurityGroupEgressRequest, opts ...grpc.CallOption) (*RevokeSecurityGroupEgressResponse, error)
	// ListSecurityGroups Lists security groups
	ListSecurityGroups(ctx context.Context, in *ListSecurityGroupsRequest, opts ...grpc.CallOption) (*ListSecurityGroupsResponse, error)
	// CreateSecurityGroup Creates a security group
	CreateSecurityGroup(ctx context.Context, in *CreateSecurityGroupRequest, opts ...grpc.CallOption) (*CreateSecurityGroupResponse, error)
	// AuthorizeSecurityGroupIngress Authorizes a particular ingress rule for this security group
	AuthorizeSecurityGroupIngress(ctx context.Context, in *AuthorizeSecurityGroupIngressRequest, opts ...grpc.CallOption) (*AuthorizeSecurityGroupIngressResponse, error)
	// UpdateSecurityGroup Updates a security group
	UpdateSecurityGroup(ctx context.Context, in *UpdateSecurityGroupRequest, opts ...grpc.CallOption) (*UpdateSecurityGroupResponse, error)
	// AuthorizeSecurityGroupEgress Authorizes a particular egress rule for this security group
	AuthorizeSecurityGroupEgress(ctx context.Context, in *AuthorizeSecurityGroupEgressRequest, opts ...grpc.CallOption) (*AuthorizeSecurityGroupEgressResponse, error)
	// DeleteSecurityGroup Deletes security group
	DeleteSecurityGroup(ctx context.Context, in *DeleteSecurityGroupRequest, opts ...grpc.CallOption) (*DeleteSecurityGroupResponse, error)
}

type securitygroupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSecuritygroupServiceClient(cc grpc.ClientConnInterface) SecuritygroupServiceClient {
	return &securitygroupServiceClient{cc}
}

func (c *securitygroupServiceClient) RevokeSecurityGroupIngress(ctx context.Context, in *RevokeSecurityGroupIngressRequest, opts ...grpc.CallOption) (*RevokeSecurityGroupIngressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevokeSecurityGroupIngressResponse)
	err := c.cc.Invoke(ctx, SecuritygroupService_RevokeSecurityGroupIngress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securitygroupServiceClient) RevokeSecurityGroupEgress(ctx context.Context, in *RevokeSecurityGroupEgressRequest, opts ...grpc.CallOption) (*RevokeSecurityGroupEgressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevokeSecurityGroupEgressResponse)
	err := c.cc.Invoke(ctx, SecuritygroupService_RevokeSecurityGroupEgress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securitygroupServiceClient) ListSecurityGroups(ctx context.Context, in *ListSecurityGroupsRequest, opts ...grpc.CallOption) (*ListSecurityGroupsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSecurityGroupsResponse)
	err := c.cc.Invoke(ctx, SecuritygroupService_ListSecurityGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securitygroupServiceClient) CreateSecurityGroup(ctx context.Context, in *CreateSecurityGroupRequest, opts ...grpc.CallOption) (*CreateSecurityGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSecurityGroupResponse)
	err := c.cc.Invoke(ctx, SecuritygroupService_CreateSecurityGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securitygroupServiceClient) AuthorizeSecurityGroupIngress(ctx context.Context, in *AuthorizeSecurityGroupIngressRequest, opts ...grpc.CallOption) (*AuthorizeSecurityGroupIngressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthorizeSecurityGroupIngressResponse)
	err := c.cc.Invoke(ctx, SecuritygroupService_AuthorizeSecurityGroupIngress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securitygroupServiceClient) UpdateSecurityGroup(ctx context.Context, in *UpdateSecurityGroupRequest, opts ...grpc.CallOption) (*UpdateSecurityGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSecurityGroupResponse)
	err := c.cc.Invoke(ctx, SecuritygroupService_UpdateSecurityGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securitygroupServiceClient) AuthorizeSecurityGroupEgress(ctx context.Context, in *AuthorizeSecurityGroupEgressRequest, opts ...grpc.CallOption) (*AuthorizeSecurityGroupEgressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthorizeSecurityGroupEgressResponse)
	err := c.cc.Invoke(ctx, SecuritygroupService_AuthorizeSecurityGroupEgress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securitygroupServiceClient) DeleteSecurityGroup(ctx context.Context, in *DeleteSecurityGroupRequest, opts ...grpc.CallOption) (*DeleteSecurityGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSecurityGroupResponse)
	err := c.cc.Invoke(ctx, SecuritygroupService_DeleteSecurityGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecuritygroupServiceServer is the server API for SecuritygroupService service.
// All implementations must embed UnimplementedSecuritygroupServiceServer
// for forward compatibility.
//
// SecuritygroupService provides operations for managing Securitygroups
type SecuritygroupServiceServer interface {
	// RevokeSecurityGroupIngress Deletes a particular ingress rule from this security group
	RevokeSecurityGroupIngress(context.Context, *RevokeSecurityGroupIngressRequest) (*RevokeSecurityGroupIngressResponse, error)
	// RevokeSecurityGroupEgress Deletes a particular egress rule from this security group
	RevokeSecurityGroupEgress(context.Context, *RevokeSecurityGroupEgressRequest) (*RevokeSecurityGroupEgressResponse, error)
	// ListSecurityGroups Lists security groups
	ListSecurityGroups(context.Context, *ListSecurityGroupsRequest) (*ListSecurityGroupsResponse, error)
	// CreateSecurityGroup Creates a security group
	CreateSecurityGroup(context.Context, *CreateSecurityGroupRequest) (*CreateSecurityGroupResponse, error)
	// AuthorizeSecurityGroupIngress Authorizes a particular ingress rule for this security group
	AuthorizeSecurityGroupIngress(context.Context, *AuthorizeSecurityGroupIngressRequest) (*AuthorizeSecurityGroupIngressResponse, error)
	// UpdateSecurityGroup Updates a security group
	UpdateSecurityGroup(context.Context, *UpdateSecurityGroupRequest) (*UpdateSecurityGroupResponse, error)
	// AuthorizeSecurityGroupEgress Authorizes a particular egress rule for this security group
	AuthorizeSecurityGroupEgress(context.Context, *AuthorizeSecurityGroupEgressRequest) (*AuthorizeSecurityGroupEgressResponse, error)
	// DeleteSecurityGroup Deletes security group
	DeleteSecurityGroup(context.Context, *DeleteSecurityGroupRequest) (*DeleteSecurityGroupResponse, error)
	mustEmbedUnimplementedSecuritygroupServiceServer()
}

// UnimplementedSecuritygroupServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSecuritygroupServiceServer struct{}

func (UnimplementedSecuritygroupServiceServer) RevokeSecurityGroupIngress(context.Context, *RevokeSecurityGroupIngressRequest) (*RevokeSecurityGroupIngressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeSecurityGroupIngress not implemented")
}
func (UnimplementedSecuritygroupServiceServer) RevokeSecurityGroupEgress(context.Context, *RevokeSecurityGroupEgressRequest) (*RevokeSecurityGroupEgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeSecurityGroupEgress not implemented")
}
func (UnimplementedSecuritygroupServiceServer) ListSecurityGroups(context.Context, *ListSecurityGroupsRequest) (*ListSecurityGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSecurityGroups not implemented")
}
func (UnimplementedSecuritygroupServiceServer) CreateSecurityGroup(context.Context, *CreateSecurityGroupRequest) (*CreateSecurityGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSecurityGroup not implemented")
}
func (UnimplementedSecuritygroupServiceServer) AuthorizeSecurityGroupIngress(context.Context, *AuthorizeSecurityGroupIngressRequest) (*AuthorizeSecurityGroupIngressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorizeSecurityGroupIngress not implemented")
}
func (UnimplementedSecuritygroupServiceServer) UpdateSecurityGroup(context.Context, *UpdateSecurityGroupRequest) (*UpdateSecurityGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSecurityGroup not implemented")
}
func (UnimplementedSecuritygroupServiceServer) AuthorizeSecurityGroupEgress(context.Context, *AuthorizeSecurityGroupEgressRequest) (*AuthorizeSecurityGroupEgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorizeSecurityGroupEgress not implemented")
}
func (UnimplementedSecuritygroupServiceServer) DeleteSecurityGroup(context.Context, *DeleteSecurityGroupRequest) (*DeleteSecurityGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSecurityGroup not implemented")
}
func (UnimplementedSecuritygroupServiceServer) mustEmbedUnimplementedSecuritygroupServiceServer() {}
func (UnimplementedSecuritygroupServiceServer) testEmbeddedByValue()                              {}

// UnsafeSecuritygroupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecuritygroupServiceServer will
// result in compilation errors.
type UnsafeSecuritygroupServiceServer interface {
	mustEmbedUnimplementedSecuritygroupServiceServer()
}

func RegisterSecuritygroupServiceServer(s grpc.ServiceRegistrar, srv SecuritygroupServiceServer) {
	// If the following call pancis, it indicates UnimplementedSecuritygroupServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SecuritygroupService_ServiceDesc, srv)
}

func _SecuritygroupService_RevokeSecurityGroupIngress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeSecurityGroupIngressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecuritygroupServiceServer).RevokeSecurityGroupIngress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecuritygroupService_RevokeSecurityGroupIngress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecuritygroupServiceServer).RevokeSecurityGroupIngress(ctx, req.(*RevokeSecurityGroupIngressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecuritygroupService_RevokeSecurityGroupEgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeSecurityGroupEgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecuritygroupServiceServer).RevokeSecurityGroupEgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecuritygroupService_RevokeSecurityGroupEgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecuritygroupServiceServer).RevokeSecurityGroupEgress(ctx, req.(*RevokeSecurityGroupEgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecuritygroupService_ListSecurityGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSecurityGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecuritygroupServiceServer).ListSecurityGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecuritygroupService_ListSecurityGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecuritygroupServiceServer).ListSecurityGroups(ctx, req.(*ListSecurityGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecuritygroupService_CreateSecurityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSecurityGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecuritygroupServiceServer).CreateSecurityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecuritygroupService_CreateSecurityGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecuritygroupServiceServer).CreateSecurityGroup(ctx, req.(*CreateSecurityGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecuritygroupService_AuthorizeSecurityGroupIngress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizeSecurityGroupIngressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecuritygroupServiceServer).AuthorizeSecurityGroupIngress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecuritygroupService_AuthorizeSecurityGroupIngress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecuritygroupServiceServer).AuthorizeSecurityGroupIngress(ctx, req.(*AuthorizeSecurityGroupIngressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecuritygroupService_UpdateSecurityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSecurityGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecuritygroupServiceServer).UpdateSecurityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecuritygroupService_UpdateSecurityGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecuritygroupServiceServer).UpdateSecurityGroup(ctx, req.(*UpdateSecurityGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecuritygroupService_AuthorizeSecurityGroupEgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizeSecurityGroupEgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecuritygroupServiceServer).AuthorizeSecurityGroupEgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecuritygroupService_AuthorizeSecurityGroupEgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecuritygroupServiceServer).AuthorizeSecurityGroupEgress(ctx, req.(*AuthorizeSecurityGroupEgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecuritygroupService_DeleteSecurityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSecurityGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecuritygroupServiceServer).DeleteSecurityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecuritygroupService_DeleteSecurityGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecuritygroupServiceServer).DeleteSecurityGroup(ctx, req.(*DeleteSecurityGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SecuritygroupService_ServiceDesc is the grpc.ServiceDesc for SecuritygroupService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecuritygroupService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloudstack.management.securitygroup.v1.SecuritygroupService",
	HandlerType: (*SecuritygroupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RevokeSecurityGroupIngress",
			Handler:    _SecuritygroupService_RevokeSecurityGroupIngress_Handler,
		},
		{
			MethodName: "RevokeSecurityGroupEgress",
			Handler:    _SecuritygroupService_RevokeSecurityGroupEgress_Handler,
		},
		{
			MethodName: "ListSecurityGroups",
			Handler:    _SecuritygroupService_ListSecurityGroups_Handler,
		},
		{
			MethodName: "CreateSecurityGroup",
			Handler:    _SecuritygroupService_CreateSecurityGroup_Handler,
		},
		{
			MethodName: "AuthorizeSecurityGroupIngress",
			Handler:    _SecuritygroupService_AuthorizeSecurityGroupIngress_Handler,
		},
		{
			MethodName: "UpdateSecurityGroup",
			Handler:    _SecuritygroupService_UpdateSecurityGroup_Handler,
		},
		{
			MethodName: "AuthorizeSecurityGroupEgress",
			Handler:    _SecuritygroupService_AuthorizeSecurityGroupEgress_Handler,
		},
		{
			MethodName: "DeleteSecurityGroup",
			Handler:    _SecuritygroupService_DeleteSecurityGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloudstack/management/securitygroup/v1/securitygroup.gen.proto",
}
