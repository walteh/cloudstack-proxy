// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cloudstack/management/direct/download/v1/download.gen.proto

package downloadv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/walteh/cloudstack-proxy/gen/proto/golang/cloudstack/management/direct/download/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DownloadServiceName is the fully-qualified name of the DownloadService service.
	DownloadServiceName = "cloudstack.management.direct.download.v1.DownloadService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DownloadServiceRevokeTemplateDirectDownloadCertificateProcedure is the fully-qualified name of
	// the DownloadService's RevokeTemplateDirectDownloadCertificate RPC.
	DownloadServiceRevokeTemplateDirectDownloadCertificateProcedure = "/cloudstack.management.direct.download.v1.DownloadService/RevokeTemplateDirectDownloadCertificate"
	// DownloadServiceProvisionTemplateDirectDownloadCertificateProcedure is the fully-qualified name of
	// the DownloadService's ProvisionTemplateDirectDownloadCertificate RPC.
	DownloadServiceProvisionTemplateDirectDownloadCertificateProcedure = "/cloudstack.management.direct.download.v1.DownloadService/ProvisionTemplateDirectDownloadCertificate"
	// DownloadServiceListTemplateDirectDownloadCertificatesProcedure is the fully-qualified name of the
	// DownloadService's ListTemplateDirectDownloadCertificates RPC.
	DownloadServiceListTemplateDirectDownloadCertificatesProcedure = "/cloudstack.management.direct.download.v1.DownloadService/ListTemplateDirectDownloadCertificates"
	// DownloadServiceUploadTemplateDirectDownloadCertificateProcedure is the fully-qualified name of
	// the DownloadService's UploadTemplateDirectDownloadCertificate RPC.
	DownloadServiceUploadTemplateDirectDownloadCertificateProcedure = "/cloudstack.management.direct.download.v1.DownloadService/UploadTemplateDirectDownloadCertificate"
)

// DownloadServiceClient is a client for the
// cloudstack.management.direct.download.v1.DownloadService service.
type DownloadServiceClient interface {
	// RevokeTemplateDirectDownloadCertificate Revoke a direct download certificate from hosts in a zone
	RevokeTemplateDirectDownloadCertificate(context.Context, *connect.Request[v1.RevokeTemplateDirectDownloadCertificateRequest]) (*connect.Response[v1.RevokeTemplateDirectDownloadCertificateResponse], error)
	// ProvisionTemplateDirectDownloadCertificate Provisions a host with a direct download certificate
	ProvisionTemplateDirectDownloadCertificate(context.Context, *connect.Request[v1.ProvisionTemplateDirectDownloadCertificateRequest]) (*connect.Response[v1.ProvisionTemplateDirectDownloadCertificateResponse], error)
	// ListTemplateDirectDownloadCertificates List the uploaded certificates for direct download templates
	ListTemplateDirectDownloadCertificates(context.Context, *connect.Request[v1.ListTemplateDirectDownloadCertificatesRequest]) (*connect.Response[v1.ListTemplateDirectDownloadCertificatesResponse], error)
	// UploadTemplateDirectDownloadCertificate Upload a certificate for HTTPS direct template download on KVM hosts
	UploadTemplateDirectDownloadCertificate(context.Context, *connect.Request[v1.UploadTemplateDirectDownloadCertificateRequest]) (*connect.Response[v1.UploadTemplateDirectDownloadCertificateResponse], error)
}

// NewDownloadServiceClient constructs a client for the
// cloudstack.management.direct.download.v1.DownloadService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDownloadServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DownloadServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	downloadServiceMethods := v1.File_cloudstack_management_direct_download_v1_download_gen_proto.Services().ByName("DownloadService").Methods()
	return &downloadServiceClient{
		revokeTemplateDirectDownloadCertificate: connect.NewClient[v1.RevokeTemplateDirectDownloadCertificateRequest, v1.RevokeTemplateDirectDownloadCertificateResponse](
			httpClient,
			baseURL+DownloadServiceRevokeTemplateDirectDownloadCertificateProcedure,
			connect.WithSchema(downloadServiceMethods.ByName("RevokeTemplateDirectDownloadCertificate")),
			connect.WithClientOptions(opts...),
		),
		provisionTemplateDirectDownloadCertificate: connect.NewClient[v1.ProvisionTemplateDirectDownloadCertificateRequest, v1.ProvisionTemplateDirectDownloadCertificateResponse](
			httpClient,
			baseURL+DownloadServiceProvisionTemplateDirectDownloadCertificateProcedure,
			connect.WithSchema(downloadServiceMethods.ByName("ProvisionTemplateDirectDownloadCertificate")),
			connect.WithClientOptions(opts...),
		),
		listTemplateDirectDownloadCertificates: connect.NewClient[v1.ListTemplateDirectDownloadCertificatesRequest, v1.ListTemplateDirectDownloadCertificatesResponse](
			httpClient,
			baseURL+DownloadServiceListTemplateDirectDownloadCertificatesProcedure,
			connect.WithSchema(downloadServiceMethods.ByName("ListTemplateDirectDownloadCertificates")),
			connect.WithClientOptions(opts...),
		),
		uploadTemplateDirectDownloadCertificate: connect.NewClient[v1.UploadTemplateDirectDownloadCertificateRequest, v1.UploadTemplateDirectDownloadCertificateResponse](
			httpClient,
			baseURL+DownloadServiceUploadTemplateDirectDownloadCertificateProcedure,
			connect.WithSchema(downloadServiceMethods.ByName("UploadTemplateDirectDownloadCertificate")),
			connect.WithClientOptions(opts...),
		),
	}
}

// downloadServiceClient implements DownloadServiceClient.
type downloadServiceClient struct {
	revokeTemplateDirectDownloadCertificate    *connect.Client[v1.RevokeTemplateDirectDownloadCertificateRequest, v1.RevokeTemplateDirectDownloadCertificateResponse]
	provisionTemplateDirectDownloadCertificate *connect.Client[v1.ProvisionTemplateDirectDownloadCertificateRequest, v1.ProvisionTemplateDirectDownloadCertificateResponse]
	listTemplateDirectDownloadCertificates     *connect.Client[v1.ListTemplateDirectDownloadCertificatesRequest, v1.ListTemplateDirectDownloadCertificatesResponse]
	uploadTemplateDirectDownloadCertificate    *connect.Client[v1.UploadTemplateDirectDownloadCertificateRequest, v1.UploadTemplateDirectDownloadCertificateResponse]
}

// RevokeTemplateDirectDownloadCertificate calls
// cloudstack.management.direct.download.v1.DownloadService.RevokeTemplateDirectDownloadCertificate.
func (c *downloadServiceClient) RevokeTemplateDirectDownloadCertificate(ctx context.Context, req *connect.Request[v1.RevokeTemplateDirectDownloadCertificateRequest]) (*connect.Response[v1.RevokeTemplateDirectDownloadCertificateResponse], error) {
	return c.revokeTemplateDirectDownloadCertificate.CallUnary(ctx, req)
}

// ProvisionTemplateDirectDownloadCertificate calls
// cloudstack.management.direct.download.v1.DownloadService.ProvisionTemplateDirectDownloadCertificate.
func (c *downloadServiceClient) ProvisionTemplateDirectDownloadCertificate(ctx context.Context, req *connect.Request[v1.ProvisionTemplateDirectDownloadCertificateRequest]) (*connect.Response[v1.ProvisionTemplateDirectDownloadCertificateResponse], error) {
	return c.provisionTemplateDirectDownloadCertificate.CallUnary(ctx, req)
}

// ListTemplateDirectDownloadCertificates calls
// cloudstack.management.direct.download.v1.DownloadService.ListTemplateDirectDownloadCertificates.
func (c *downloadServiceClient) ListTemplateDirectDownloadCertificates(ctx context.Context, req *connect.Request[v1.ListTemplateDirectDownloadCertificatesRequest]) (*connect.Response[v1.ListTemplateDirectDownloadCertificatesResponse], error) {
	return c.listTemplateDirectDownloadCertificates.CallUnary(ctx, req)
}

// UploadTemplateDirectDownloadCertificate calls
// cloudstack.management.direct.download.v1.DownloadService.UploadTemplateDirectDownloadCertificate.
func (c *downloadServiceClient) UploadTemplateDirectDownloadCertificate(ctx context.Context, req *connect.Request[v1.UploadTemplateDirectDownloadCertificateRequest]) (*connect.Response[v1.UploadTemplateDirectDownloadCertificateResponse], error) {
	return c.uploadTemplateDirectDownloadCertificate.CallUnary(ctx, req)
}

// DownloadServiceHandler is an implementation of the
// cloudstack.management.direct.download.v1.DownloadService service.
type DownloadServiceHandler interface {
	// RevokeTemplateDirectDownloadCertificate Revoke a direct download certificate from hosts in a zone
	RevokeTemplateDirectDownloadCertificate(context.Context, *connect.Request[v1.RevokeTemplateDirectDownloadCertificateRequest]) (*connect.Response[v1.RevokeTemplateDirectDownloadCertificateResponse], error)
	// ProvisionTemplateDirectDownloadCertificate Provisions a host with a direct download certificate
	ProvisionTemplateDirectDownloadCertificate(context.Context, *connect.Request[v1.ProvisionTemplateDirectDownloadCertificateRequest]) (*connect.Response[v1.ProvisionTemplateDirectDownloadCertificateResponse], error)
	// ListTemplateDirectDownloadCertificates List the uploaded certificates for direct download templates
	ListTemplateDirectDownloadCertificates(context.Context, *connect.Request[v1.ListTemplateDirectDownloadCertificatesRequest]) (*connect.Response[v1.ListTemplateDirectDownloadCertificatesResponse], error)
	// UploadTemplateDirectDownloadCertificate Upload a certificate for HTTPS direct template download on KVM hosts
	UploadTemplateDirectDownloadCertificate(context.Context, *connect.Request[v1.UploadTemplateDirectDownloadCertificateRequest]) (*connect.Response[v1.UploadTemplateDirectDownloadCertificateResponse], error)
}

// NewDownloadServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDownloadServiceHandler(svc DownloadServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	downloadServiceMethods := v1.File_cloudstack_management_direct_download_v1_download_gen_proto.Services().ByName("DownloadService").Methods()
	downloadServiceRevokeTemplateDirectDownloadCertificateHandler := connect.NewUnaryHandler(
		DownloadServiceRevokeTemplateDirectDownloadCertificateProcedure,
		svc.RevokeTemplateDirectDownloadCertificate,
		connect.WithSchema(downloadServiceMethods.ByName("RevokeTemplateDirectDownloadCertificate")),
		connect.WithHandlerOptions(opts...),
	)
	downloadServiceProvisionTemplateDirectDownloadCertificateHandler := connect.NewUnaryHandler(
		DownloadServiceProvisionTemplateDirectDownloadCertificateProcedure,
		svc.ProvisionTemplateDirectDownloadCertificate,
		connect.WithSchema(downloadServiceMethods.ByName("ProvisionTemplateDirectDownloadCertificate")),
		connect.WithHandlerOptions(opts...),
	)
	downloadServiceListTemplateDirectDownloadCertificatesHandler := connect.NewUnaryHandler(
		DownloadServiceListTemplateDirectDownloadCertificatesProcedure,
		svc.ListTemplateDirectDownloadCertificates,
		connect.WithSchema(downloadServiceMethods.ByName("ListTemplateDirectDownloadCertificates")),
		connect.WithHandlerOptions(opts...),
	)
	downloadServiceUploadTemplateDirectDownloadCertificateHandler := connect.NewUnaryHandler(
		DownloadServiceUploadTemplateDirectDownloadCertificateProcedure,
		svc.UploadTemplateDirectDownloadCertificate,
		connect.WithSchema(downloadServiceMethods.ByName("UploadTemplateDirectDownloadCertificate")),
		connect.WithHandlerOptions(opts...),
	)
	return "/cloudstack.management.direct.download.v1.DownloadService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DownloadServiceRevokeTemplateDirectDownloadCertificateProcedure:
			downloadServiceRevokeTemplateDirectDownloadCertificateHandler.ServeHTTP(w, r)
		case DownloadServiceProvisionTemplateDirectDownloadCertificateProcedure:
			downloadServiceProvisionTemplateDirectDownloadCertificateHandler.ServeHTTP(w, r)
		case DownloadServiceListTemplateDirectDownloadCertificatesProcedure:
			downloadServiceListTemplateDirectDownloadCertificatesHandler.ServeHTTP(w, r)
		case DownloadServiceUploadTemplateDirectDownloadCertificateProcedure:
			downloadServiceUploadTemplateDirectDownloadCertificateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDownloadServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDownloadServiceHandler struct{}

func (UnimplementedDownloadServiceHandler) RevokeTemplateDirectDownloadCertificate(context.Context, *connect.Request[v1.RevokeTemplateDirectDownloadCertificateRequest]) (*connect.Response[v1.RevokeTemplateDirectDownloadCertificateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.direct.download.v1.DownloadService.RevokeTemplateDirectDownloadCertificate is not implemented"))
}

func (UnimplementedDownloadServiceHandler) ProvisionTemplateDirectDownloadCertificate(context.Context, *connect.Request[v1.ProvisionTemplateDirectDownloadCertificateRequest]) (*connect.Response[v1.ProvisionTemplateDirectDownloadCertificateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.direct.download.v1.DownloadService.ProvisionTemplateDirectDownloadCertificate is not implemented"))
}

func (UnimplementedDownloadServiceHandler) ListTemplateDirectDownloadCertificates(context.Context, *connect.Request[v1.ListTemplateDirectDownloadCertificatesRequest]) (*connect.Response[v1.ListTemplateDirectDownloadCertificatesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.direct.download.v1.DownloadService.ListTemplateDirectDownloadCertificates is not implemented"))
}

func (UnimplementedDownloadServiceHandler) UploadTemplateDirectDownloadCertificate(context.Context, *connect.Request[v1.UploadTemplateDirectDownloadCertificateRequest]) (*connect.Response[v1.UploadTemplateDirectDownloadCertificateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.direct.download.v1.DownloadService.UploadTemplateDirectDownloadCertificate is not implemented"))
}
