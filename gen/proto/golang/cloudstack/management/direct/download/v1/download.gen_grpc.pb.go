// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: cloudstack/management/direct/download/v1/download.gen.proto

package downloadv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DownloadService_RevokeTemplateDirectDownloadCertificate_FullMethodName    = "/cloudstack.management.direct.download.v1.DownloadService/RevokeTemplateDirectDownloadCertificate"
	DownloadService_UploadTemplateDirectDownloadCertificate_FullMethodName    = "/cloudstack.management.direct.download.v1.DownloadService/UploadTemplateDirectDownloadCertificate"
	DownloadService_ListTemplateDirectDownloadCertificates_FullMethodName     = "/cloudstack.management.direct.download.v1.DownloadService/ListTemplateDirectDownloadCertificates"
	DownloadService_ProvisionTemplateDirectDownloadCertificate_FullMethodName = "/cloudstack.management.direct.download.v1.DownloadService/ProvisionTemplateDirectDownloadCertificate"
)

// DownloadServiceClient is the client API for DownloadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// DownloadService provides operations for managing Direct.Downloads
type DownloadServiceClient interface {
	// RevokeTemplateDirectDownloadCertificate Revoke a direct download certificate from hosts in a zone
	RevokeTemplateDirectDownloadCertificate(ctx context.Context, in *RevokeTemplateDirectDownloadCertificateRequest, opts ...grpc.CallOption) (*RevokeTemplateDirectDownloadCertificateResponse, error)
	// UploadTemplateDirectDownloadCertificate Upload a certificate for HTTPS direct template download on KVM hosts
	UploadTemplateDirectDownloadCertificate(ctx context.Context, in *UploadTemplateDirectDownloadCertificateRequest, opts ...grpc.CallOption) (*UploadTemplateDirectDownloadCertificateResponse, error)
	// ListTemplateDirectDownloadCertificates List the uploaded certificates for direct download templates
	ListTemplateDirectDownloadCertificates(ctx context.Context, in *ListTemplateDirectDownloadCertificatesRequest, opts ...grpc.CallOption) (*ListTemplateDirectDownloadCertificatesResponse, error)
	// ProvisionTemplateDirectDownloadCertificate Provisions a host with a direct download certificate
	ProvisionTemplateDirectDownloadCertificate(ctx context.Context, in *ProvisionTemplateDirectDownloadCertificateRequest, opts ...grpc.CallOption) (*ProvisionTemplateDirectDownloadCertificateResponse, error)
}

type downloadServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDownloadServiceClient(cc grpc.ClientConnInterface) DownloadServiceClient {
	return &downloadServiceClient{cc}
}

func (c *downloadServiceClient) RevokeTemplateDirectDownloadCertificate(ctx context.Context, in *RevokeTemplateDirectDownloadCertificateRequest, opts ...grpc.CallOption) (*RevokeTemplateDirectDownloadCertificateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevokeTemplateDirectDownloadCertificateResponse)
	err := c.cc.Invoke(ctx, DownloadService_RevokeTemplateDirectDownloadCertificate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *downloadServiceClient) UploadTemplateDirectDownloadCertificate(ctx context.Context, in *UploadTemplateDirectDownloadCertificateRequest, opts ...grpc.CallOption) (*UploadTemplateDirectDownloadCertificateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadTemplateDirectDownloadCertificateResponse)
	err := c.cc.Invoke(ctx, DownloadService_UploadTemplateDirectDownloadCertificate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *downloadServiceClient) ListTemplateDirectDownloadCertificates(ctx context.Context, in *ListTemplateDirectDownloadCertificatesRequest, opts ...grpc.CallOption) (*ListTemplateDirectDownloadCertificatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTemplateDirectDownloadCertificatesResponse)
	err := c.cc.Invoke(ctx, DownloadService_ListTemplateDirectDownloadCertificates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *downloadServiceClient) ProvisionTemplateDirectDownloadCertificate(ctx context.Context, in *ProvisionTemplateDirectDownloadCertificateRequest, opts ...grpc.CallOption) (*ProvisionTemplateDirectDownloadCertificateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProvisionTemplateDirectDownloadCertificateResponse)
	err := c.cc.Invoke(ctx, DownloadService_ProvisionTemplateDirectDownloadCertificate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DownloadServiceServer is the server API for DownloadService service.
// All implementations must embed UnimplementedDownloadServiceServer
// for forward compatibility.
//
// DownloadService provides operations for managing Direct.Downloads
type DownloadServiceServer interface {
	// RevokeTemplateDirectDownloadCertificate Revoke a direct download certificate from hosts in a zone
	RevokeTemplateDirectDownloadCertificate(context.Context, *RevokeTemplateDirectDownloadCertificateRequest) (*RevokeTemplateDirectDownloadCertificateResponse, error)
	// UploadTemplateDirectDownloadCertificate Upload a certificate for HTTPS direct template download on KVM hosts
	UploadTemplateDirectDownloadCertificate(context.Context, *UploadTemplateDirectDownloadCertificateRequest) (*UploadTemplateDirectDownloadCertificateResponse, error)
	// ListTemplateDirectDownloadCertificates List the uploaded certificates for direct download templates
	ListTemplateDirectDownloadCertificates(context.Context, *ListTemplateDirectDownloadCertificatesRequest) (*ListTemplateDirectDownloadCertificatesResponse, error)
	// ProvisionTemplateDirectDownloadCertificate Provisions a host with a direct download certificate
	ProvisionTemplateDirectDownloadCertificate(context.Context, *ProvisionTemplateDirectDownloadCertificateRequest) (*ProvisionTemplateDirectDownloadCertificateResponse, error)
	mustEmbedUnimplementedDownloadServiceServer()
}

// UnimplementedDownloadServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDownloadServiceServer struct{}

func (UnimplementedDownloadServiceServer) RevokeTemplateDirectDownloadCertificate(context.Context, *RevokeTemplateDirectDownloadCertificateRequest) (*RevokeTemplateDirectDownloadCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeTemplateDirectDownloadCertificate not implemented")
}
func (UnimplementedDownloadServiceServer) UploadTemplateDirectDownloadCertificate(context.Context, *UploadTemplateDirectDownloadCertificateRequest) (*UploadTemplateDirectDownloadCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadTemplateDirectDownloadCertificate not implemented")
}
func (UnimplementedDownloadServiceServer) ListTemplateDirectDownloadCertificates(context.Context, *ListTemplateDirectDownloadCertificatesRequest) (*ListTemplateDirectDownloadCertificatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplateDirectDownloadCertificates not implemented")
}
func (UnimplementedDownloadServiceServer) ProvisionTemplateDirectDownloadCertificate(context.Context, *ProvisionTemplateDirectDownloadCertificateRequest) (*ProvisionTemplateDirectDownloadCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProvisionTemplateDirectDownloadCertificate not implemented")
}
func (UnimplementedDownloadServiceServer) mustEmbedUnimplementedDownloadServiceServer() {}
func (UnimplementedDownloadServiceServer) testEmbeddedByValue()                         {}

// UnsafeDownloadServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DownloadServiceServer will
// result in compilation errors.
type UnsafeDownloadServiceServer interface {
	mustEmbedUnimplementedDownloadServiceServer()
}

func RegisterDownloadServiceServer(s grpc.ServiceRegistrar, srv DownloadServiceServer) {
	// If the following call pancis, it indicates UnimplementedDownloadServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DownloadService_ServiceDesc, srv)
}

func _DownloadService_RevokeTemplateDirectDownloadCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeTemplateDirectDownloadCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DownloadServiceServer).RevokeTemplateDirectDownloadCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DownloadService_RevokeTemplateDirectDownloadCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DownloadServiceServer).RevokeTemplateDirectDownloadCertificate(ctx, req.(*RevokeTemplateDirectDownloadCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DownloadService_UploadTemplateDirectDownloadCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadTemplateDirectDownloadCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DownloadServiceServer).UploadTemplateDirectDownloadCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DownloadService_UploadTemplateDirectDownloadCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DownloadServiceServer).UploadTemplateDirectDownloadCertificate(ctx, req.(*UploadTemplateDirectDownloadCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DownloadService_ListTemplateDirectDownloadCertificates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplateDirectDownloadCertificatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DownloadServiceServer).ListTemplateDirectDownloadCertificates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DownloadService_ListTemplateDirectDownloadCertificates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DownloadServiceServer).ListTemplateDirectDownloadCertificates(ctx, req.(*ListTemplateDirectDownloadCertificatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DownloadService_ProvisionTemplateDirectDownloadCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProvisionTemplateDirectDownloadCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DownloadServiceServer).ProvisionTemplateDirectDownloadCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DownloadService_ProvisionTemplateDirectDownloadCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DownloadServiceServer).ProvisionTemplateDirectDownloadCertificate(ctx, req.(*ProvisionTemplateDirectDownloadCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DownloadService_ServiceDesc is the grpc.ServiceDesc for DownloadService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DownloadService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloudstack.management.direct.download.v1.DownloadService",
	HandlerType: (*DownloadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RevokeTemplateDirectDownloadCertificate",
			Handler:    _DownloadService_RevokeTemplateDirectDownloadCertificate_Handler,
		},
		{
			MethodName: "UploadTemplateDirectDownloadCertificate",
			Handler:    _DownloadService_UploadTemplateDirectDownloadCertificate_Handler,
		},
		{
			MethodName: "ListTemplateDirectDownloadCertificates",
			Handler:    _DownloadService_ListTemplateDirectDownloadCertificates_Handler,
		},
		{
			MethodName: "ProvisionTemplateDirectDownloadCertificate",
			Handler:    _DownloadService_ProvisionTemplateDirectDownloadCertificate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloudstack/management/direct/download/v1/download.gen.proto",
}
