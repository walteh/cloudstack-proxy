// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cloudstack/management/nat/v1/nat.gen.proto

package natv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/walteh/cloudstack-proxy/gen/proto/golang/cloudstack/management/nat/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// NatServiceName is the fully-qualified name of the NatService service.
	NatServiceName = "cloudstack.management.nat.v1.NatService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// NatServiceCreateIpForwardingRuleProcedure is the fully-qualified name of the NatService's
	// CreateIpForwardingRule RPC.
	NatServiceCreateIpForwardingRuleProcedure = "/cloudstack.management.nat.v1.NatService/CreateIpForwardingRule"
	// NatServiceDeleteIpForwardingRuleProcedure is the fully-qualified name of the NatService's
	// DeleteIpForwardingRule RPC.
	NatServiceDeleteIpForwardingRuleProcedure = "/cloudstack.management.nat.v1.NatService/DeleteIpForwardingRule"
	// NatServiceDisableStaticNatProcedure is the fully-qualified name of the NatService's
	// DisableStaticNat RPC.
	NatServiceDisableStaticNatProcedure = "/cloudstack.management.nat.v1.NatService/DisableStaticNat"
	// NatServiceEnableStaticNatProcedure is the fully-qualified name of the NatService's
	// EnableStaticNat RPC.
	NatServiceEnableStaticNatProcedure = "/cloudstack.management.nat.v1.NatService/EnableStaticNat"
	// NatServiceListIpForwardingRulesProcedure is the fully-qualified name of the NatService's
	// ListIpForwardingRules RPC.
	NatServiceListIpForwardingRulesProcedure = "/cloudstack.management.nat.v1.NatService/ListIpForwardingRules"
)

// NatServiceClient is a client for the cloudstack.management.nat.v1.NatService service.
type NatServiceClient interface {
	// CreateIpForwardingRule Creates an IP forwarding rule
	CreateIpForwardingRule(context.Context, *connect.Request[v1.CreateIpForwardingRuleRequest]) (*connect.Response[v1.CreateIpForwardingRuleResponse], error)
	// DeleteIpForwardingRule Deletes an IP forwarding rule
	DeleteIpForwardingRule(context.Context, *connect.Request[v1.DeleteIpForwardingRuleRequest]) (*connect.Response[v1.DeleteIpForwardingRuleResponse], error)
	// DisableStaticNat Disables static rule for given IP address
	DisableStaticNat(context.Context, *connect.Request[v1.DisableStaticNatRequest]) (*connect.Response[v1.DisableStaticNatResponse], error)
	// EnableStaticNat Enables static NAT for given IP address
	EnableStaticNat(context.Context, *connect.Request[v1.EnableStaticNatRequest]) (*connect.Response[v1.EnableStaticNatResponse], error)
	// ListIpForwardingRules List the IP forwarding rules
	ListIpForwardingRules(context.Context, *connect.Request[v1.ListIpForwardingRulesRequest]) (*connect.Response[v1.ListIpForwardingRulesResponse], error)
}

// NewNatServiceClient constructs a client for the cloudstack.management.nat.v1.NatService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNatServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) NatServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	natServiceMethods := v1.File_cloudstack_management_nat_v1_nat_gen_proto.Services().ByName("NatService").Methods()
	return &natServiceClient{
		createIpForwardingRule: connect.NewClient[v1.CreateIpForwardingRuleRequest, v1.CreateIpForwardingRuleResponse](
			httpClient,
			baseURL+NatServiceCreateIpForwardingRuleProcedure,
			connect.WithSchema(natServiceMethods.ByName("CreateIpForwardingRule")),
			connect.WithClientOptions(opts...),
		),
		deleteIpForwardingRule: connect.NewClient[v1.DeleteIpForwardingRuleRequest, v1.DeleteIpForwardingRuleResponse](
			httpClient,
			baseURL+NatServiceDeleteIpForwardingRuleProcedure,
			connect.WithSchema(natServiceMethods.ByName("DeleteIpForwardingRule")),
			connect.WithClientOptions(opts...),
		),
		disableStaticNat: connect.NewClient[v1.DisableStaticNatRequest, v1.DisableStaticNatResponse](
			httpClient,
			baseURL+NatServiceDisableStaticNatProcedure,
			connect.WithSchema(natServiceMethods.ByName("DisableStaticNat")),
			connect.WithClientOptions(opts...),
		),
		enableStaticNat: connect.NewClient[v1.EnableStaticNatRequest, v1.EnableStaticNatResponse](
			httpClient,
			baseURL+NatServiceEnableStaticNatProcedure,
			connect.WithSchema(natServiceMethods.ByName("EnableStaticNat")),
			connect.WithClientOptions(opts...),
		),
		listIpForwardingRules: connect.NewClient[v1.ListIpForwardingRulesRequest, v1.ListIpForwardingRulesResponse](
			httpClient,
			baseURL+NatServiceListIpForwardingRulesProcedure,
			connect.WithSchema(natServiceMethods.ByName("ListIpForwardingRules")),
			connect.WithClientOptions(opts...),
		),
	}
}

// natServiceClient implements NatServiceClient.
type natServiceClient struct {
	createIpForwardingRule *connect.Client[v1.CreateIpForwardingRuleRequest, v1.CreateIpForwardingRuleResponse]
	deleteIpForwardingRule *connect.Client[v1.DeleteIpForwardingRuleRequest, v1.DeleteIpForwardingRuleResponse]
	disableStaticNat       *connect.Client[v1.DisableStaticNatRequest, v1.DisableStaticNatResponse]
	enableStaticNat        *connect.Client[v1.EnableStaticNatRequest, v1.EnableStaticNatResponse]
	listIpForwardingRules  *connect.Client[v1.ListIpForwardingRulesRequest, v1.ListIpForwardingRulesResponse]
}

// CreateIpForwardingRule calls cloudstack.management.nat.v1.NatService.CreateIpForwardingRule.
func (c *natServiceClient) CreateIpForwardingRule(ctx context.Context, req *connect.Request[v1.CreateIpForwardingRuleRequest]) (*connect.Response[v1.CreateIpForwardingRuleResponse], error) {
	return c.createIpForwardingRule.CallUnary(ctx, req)
}

// DeleteIpForwardingRule calls cloudstack.management.nat.v1.NatService.DeleteIpForwardingRule.
func (c *natServiceClient) DeleteIpForwardingRule(ctx context.Context, req *connect.Request[v1.DeleteIpForwardingRuleRequest]) (*connect.Response[v1.DeleteIpForwardingRuleResponse], error) {
	return c.deleteIpForwardingRule.CallUnary(ctx, req)
}

// DisableStaticNat calls cloudstack.management.nat.v1.NatService.DisableStaticNat.
func (c *natServiceClient) DisableStaticNat(ctx context.Context, req *connect.Request[v1.DisableStaticNatRequest]) (*connect.Response[v1.DisableStaticNatResponse], error) {
	return c.disableStaticNat.CallUnary(ctx, req)
}

// EnableStaticNat calls cloudstack.management.nat.v1.NatService.EnableStaticNat.
func (c *natServiceClient) EnableStaticNat(ctx context.Context, req *connect.Request[v1.EnableStaticNatRequest]) (*connect.Response[v1.EnableStaticNatResponse], error) {
	return c.enableStaticNat.CallUnary(ctx, req)
}

// ListIpForwardingRules calls cloudstack.management.nat.v1.NatService.ListIpForwardingRules.
func (c *natServiceClient) ListIpForwardingRules(ctx context.Context, req *connect.Request[v1.ListIpForwardingRulesRequest]) (*connect.Response[v1.ListIpForwardingRulesResponse], error) {
	return c.listIpForwardingRules.CallUnary(ctx, req)
}

// NatServiceHandler is an implementation of the cloudstack.management.nat.v1.NatService service.
type NatServiceHandler interface {
	// CreateIpForwardingRule Creates an IP forwarding rule
	CreateIpForwardingRule(context.Context, *connect.Request[v1.CreateIpForwardingRuleRequest]) (*connect.Response[v1.CreateIpForwardingRuleResponse], error)
	// DeleteIpForwardingRule Deletes an IP forwarding rule
	DeleteIpForwardingRule(context.Context, *connect.Request[v1.DeleteIpForwardingRuleRequest]) (*connect.Response[v1.DeleteIpForwardingRuleResponse], error)
	// DisableStaticNat Disables static rule for given IP address
	DisableStaticNat(context.Context, *connect.Request[v1.DisableStaticNatRequest]) (*connect.Response[v1.DisableStaticNatResponse], error)
	// EnableStaticNat Enables static NAT for given IP address
	EnableStaticNat(context.Context, *connect.Request[v1.EnableStaticNatRequest]) (*connect.Response[v1.EnableStaticNatResponse], error)
	// ListIpForwardingRules List the IP forwarding rules
	ListIpForwardingRules(context.Context, *connect.Request[v1.ListIpForwardingRulesRequest]) (*connect.Response[v1.ListIpForwardingRulesResponse], error)
}

// NewNatServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNatServiceHandler(svc NatServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	natServiceMethods := v1.File_cloudstack_management_nat_v1_nat_gen_proto.Services().ByName("NatService").Methods()
	natServiceCreateIpForwardingRuleHandler := connect.NewUnaryHandler(
		NatServiceCreateIpForwardingRuleProcedure,
		svc.CreateIpForwardingRule,
		connect.WithSchema(natServiceMethods.ByName("CreateIpForwardingRule")),
		connect.WithHandlerOptions(opts...),
	)
	natServiceDeleteIpForwardingRuleHandler := connect.NewUnaryHandler(
		NatServiceDeleteIpForwardingRuleProcedure,
		svc.DeleteIpForwardingRule,
		connect.WithSchema(natServiceMethods.ByName("DeleteIpForwardingRule")),
		connect.WithHandlerOptions(opts...),
	)
	natServiceDisableStaticNatHandler := connect.NewUnaryHandler(
		NatServiceDisableStaticNatProcedure,
		svc.DisableStaticNat,
		connect.WithSchema(natServiceMethods.ByName("DisableStaticNat")),
		connect.WithHandlerOptions(opts...),
	)
	natServiceEnableStaticNatHandler := connect.NewUnaryHandler(
		NatServiceEnableStaticNatProcedure,
		svc.EnableStaticNat,
		connect.WithSchema(natServiceMethods.ByName("EnableStaticNat")),
		connect.WithHandlerOptions(opts...),
	)
	natServiceListIpForwardingRulesHandler := connect.NewUnaryHandler(
		NatServiceListIpForwardingRulesProcedure,
		svc.ListIpForwardingRules,
		connect.WithSchema(natServiceMethods.ByName("ListIpForwardingRules")),
		connect.WithHandlerOptions(opts...),
	)
	return "/cloudstack.management.nat.v1.NatService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case NatServiceCreateIpForwardingRuleProcedure:
			natServiceCreateIpForwardingRuleHandler.ServeHTTP(w, r)
		case NatServiceDeleteIpForwardingRuleProcedure:
			natServiceDeleteIpForwardingRuleHandler.ServeHTTP(w, r)
		case NatServiceDisableStaticNatProcedure:
			natServiceDisableStaticNatHandler.ServeHTTP(w, r)
		case NatServiceEnableStaticNatProcedure:
			natServiceEnableStaticNatHandler.ServeHTTP(w, r)
		case NatServiceListIpForwardingRulesProcedure:
			natServiceListIpForwardingRulesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedNatServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNatServiceHandler struct{}

func (UnimplementedNatServiceHandler) CreateIpForwardingRule(context.Context, *connect.Request[v1.CreateIpForwardingRuleRequest]) (*connect.Response[v1.CreateIpForwardingRuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.nat.v1.NatService.CreateIpForwardingRule is not implemented"))
}

func (UnimplementedNatServiceHandler) DeleteIpForwardingRule(context.Context, *connect.Request[v1.DeleteIpForwardingRuleRequest]) (*connect.Response[v1.DeleteIpForwardingRuleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.nat.v1.NatService.DeleteIpForwardingRule is not implemented"))
}

func (UnimplementedNatServiceHandler) DisableStaticNat(context.Context, *connect.Request[v1.DisableStaticNatRequest]) (*connect.Response[v1.DisableStaticNatResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.nat.v1.NatService.DisableStaticNat is not implemented"))
}

func (UnimplementedNatServiceHandler) EnableStaticNat(context.Context, *connect.Request[v1.EnableStaticNatRequest]) (*connect.Response[v1.EnableStaticNatResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.nat.v1.NatService.EnableStaticNat is not implemented"))
}

func (UnimplementedNatServiceHandler) ListIpForwardingRules(context.Context, *connect.Request[v1.ListIpForwardingRulesRequest]) (*connect.Response[v1.ListIpForwardingRulesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.nat.v1.NatService.ListIpForwardingRules is not implemented"))
}
