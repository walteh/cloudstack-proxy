// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: cloudstack/management/nat/v1/nat.gen.proto

package natv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NatService_ListIpForwardingRules_FullMethodName  = "/cloudstack.management.nat.v1.NatService/ListIpForwardingRules"
	NatService_DeleteIpForwardingRule_FullMethodName = "/cloudstack.management.nat.v1.NatService/DeleteIpForwardingRule"
	NatService_DisableStaticNat_FullMethodName       = "/cloudstack.management.nat.v1.NatService/DisableStaticNat"
	NatService_CreateIpForwardingRule_FullMethodName = "/cloudstack.management.nat.v1.NatService/CreateIpForwardingRule"
	NatService_EnableStaticNat_FullMethodName        = "/cloudstack.management.nat.v1.NatService/EnableStaticNat"
)

// NatServiceClient is the client API for NatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// NatService provides operations for managing Nats
type NatServiceClient interface {
	// ListIpForwardingRules List the IP forwarding rules
	ListIpForwardingRules(ctx context.Context, in *ListIpForwardingRulesRequest, opts ...grpc.CallOption) (*ListIpForwardingRulesResponse, error)
	// DeleteIpForwardingRule Deletes an IP forwarding rule
	DeleteIpForwardingRule(ctx context.Context, in *DeleteIpForwardingRuleRequest, opts ...grpc.CallOption) (*DeleteIpForwardingRuleResponse, error)
	// DisableStaticNat Disables static rule for given IP address
	DisableStaticNat(ctx context.Context, in *DisableStaticNatRequest, opts ...grpc.CallOption) (*DisableStaticNatResponse, error)
	// CreateIpForwardingRule Creates an IP forwarding rule
	CreateIpForwardingRule(ctx context.Context, in *CreateIpForwardingRuleRequest, opts ...grpc.CallOption) (*CreateIpForwardingRuleResponse, error)
	// EnableStaticNat Enables static NAT for given IP address
	EnableStaticNat(ctx context.Context, in *EnableStaticNatRequest, opts ...grpc.CallOption) (*EnableStaticNatResponse, error)
}

type natServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNatServiceClient(cc grpc.ClientConnInterface) NatServiceClient {
	return &natServiceClient{cc}
}

func (c *natServiceClient) ListIpForwardingRules(ctx context.Context, in *ListIpForwardingRulesRequest, opts ...grpc.CallOption) (*ListIpForwardingRulesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListIpForwardingRulesResponse)
	err := c.cc.Invoke(ctx, NatService_ListIpForwardingRules_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *natServiceClient) DeleteIpForwardingRule(ctx context.Context, in *DeleteIpForwardingRuleRequest, opts ...grpc.CallOption) (*DeleteIpForwardingRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteIpForwardingRuleResponse)
	err := c.cc.Invoke(ctx, NatService_DeleteIpForwardingRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *natServiceClient) DisableStaticNat(ctx context.Context, in *DisableStaticNatRequest, opts ...grpc.CallOption) (*DisableStaticNatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisableStaticNatResponse)
	err := c.cc.Invoke(ctx, NatService_DisableStaticNat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *natServiceClient) CreateIpForwardingRule(ctx context.Context, in *CreateIpForwardingRuleRequest, opts ...grpc.CallOption) (*CreateIpForwardingRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateIpForwardingRuleResponse)
	err := c.cc.Invoke(ctx, NatService_CreateIpForwardingRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *natServiceClient) EnableStaticNat(ctx context.Context, in *EnableStaticNatRequest, opts ...grpc.CallOption) (*EnableStaticNatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnableStaticNatResponse)
	err := c.cc.Invoke(ctx, NatService_EnableStaticNat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NatServiceServer is the server API for NatService service.
// All implementations must embed UnimplementedNatServiceServer
// for forward compatibility.
//
// NatService provides operations for managing Nats
type NatServiceServer interface {
	// ListIpForwardingRules List the IP forwarding rules
	ListIpForwardingRules(context.Context, *ListIpForwardingRulesRequest) (*ListIpForwardingRulesResponse, error)
	// DeleteIpForwardingRule Deletes an IP forwarding rule
	DeleteIpForwardingRule(context.Context, *DeleteIpForwardingRuleRequest) (*DeleteIpForwardingRuleResponse, error)
	// DisableStaticNat Disables static rule for given IP address
	DisableStaticNat(context.Context, *DisableStaticNatRequest) (*DisableStaticNatResponse, error)
	// CreateIpForwardingRule Creates an IP forwarding rule
	CreateIpForwardingRule(context.Context, *CreateIpForwardingRuleRequest) (*CreateIpForwardingRuleResponse, error)
	// EnableStaticNat Enables static NAT for given IP address
	EnableStaticNat(context.Context, *EnableStaticNatRequest) (*EnableStaticNatResponse, error)
	mustEmbedUnimplementedNatServiceServer()
}

// UnimplementedNatServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNatServiceServer struct{}

func (UnimplementedNatServiceServer) ListIpForwardingRules(context.Context, *ListIpForwardingRulesRequest) (*ListIpForwardingRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIpForwardingRules not implemented")
}
func (UnimplementedNatServiceServer) DeleteIpForwardingRule(context.Context, *DeleteIpForwardingRuleRequest) (*DeleteIpForwardingRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIpForwardingRule not implemented")
}
func (UnimplementedNatServiceServer) DisableStaticNat(context.Context, *DisableStaticNatRequest) (*DisableStaticNatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableStaticNat not implemented")
}
func (UnimplementedNatServiceServer) CreateIpForwardingRule(context.Context, *CreateIpForwardingRuleRequest) (*CreateIpForwardingRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIpForwardingRule not implemented")
}
func (UnimplementedNatServiceServer) EnableStaticNat(context.Context, *EnableStaticNatRequest) (*EnableStaticNatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableStaticNat not implemented")
}
func (UnimplementedNatServiceServer) mustEmbedUnimplementedNatServiceServer() {}
func (UnimplementedNatServiceServer) testEmbeddedByValue()                    {}

// UnsafeNatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NatServiceServer will
// result in compilation errors.
type UnsafeNatServiceServer interface {
	mustEmbedUnimplementedNatServiceServer()
}

func RegisterNatServiceServer(s grpc.ServiceRegistrar, srv NatServiceServer) {
	// If the following call pancis, it indicates UnimplementedNatServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NatService_ServiceDesc, srv)
}

func _NatService_ListIpForwardingRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIpForwardingRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatServiceServer).ListIpForwardingRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NatService_ListIpForwardingRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatServiceServer).ListIpForwardingRules(ctx, req.(*ListIpForwardingRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NatService_DeleteIpForwardingRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIpForwardingRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatServiceServer).DeleteIpForwardingRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NatService_DeleteIpForwardingRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatServiceServer).DeleteIpForwardingRule(ctx, req.(*DeleteIpForwardingRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NatService_DisableStaticNat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableStaticNatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatServiceServer).DisableStaticNat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NatService_DisableStaticNat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatServiceServer).DisableStaticNat(ctx, req.(*DisableStaticNatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NatService_CreateIpForwardingRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIpForwardingRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatServiceServer).CreateIpForwardingRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NatService_CreateIpForwardingRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatServiceServer).CreateIpForwardingRule(ctx, req.(*CreateIpForwardingRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NatService_EnableStaticNat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableStaticNatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatServiceServer).EnableStaticNat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NatService_EnableStaticNat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatServiceServer).EnableStaticNat(ctx, req.(*EnableStaticNatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NatService_ServiceDesc is the grpc.ServiceDesc for NatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloudstack.management.nat.v1.NatService",
	HandlerType: (*NatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListIpForwardingRules",
			Handler:    _NatService_ListIpForwardingRules_Handler,
		},
		{
			MethodName: "DeleteIpForwardingRule",
			Handler:    _NatService_DeleteIpForwardingRule_Handler,
		},
		{
			MethodName: "DisableStaticNat",
			Handler:    _NatService_DisableStaticNat_Handler,
		},
		{
			MethodName: "CreateIpForwardingRule",
			Handler:    _NatService_CreateIpForwardingRule_Handler,
		},
		{
			MethodName: "EnableStaticNat",
			Handler:    _NatService_EnableStaticNat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloudstack/management/nat/v1/nat.gen.proto",
}
