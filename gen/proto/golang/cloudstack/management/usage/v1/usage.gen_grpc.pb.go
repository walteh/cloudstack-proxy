// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: cloudstack/management/usage/v1/usage.gen.proto

package usagev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UsageService_ListTrafficMonitors_FullMethodName         = "/cloudstack.management.usage.v1.UsageService/ListTrafficMonitors"
	UsageService_DeleteTrafficMonitor_FullMethodName        = "/cloudstack.management.usage.v1.UsageService/DeleteTrafficMonitor"
	UsageService_UpdateTrafficType_FullMethodName           = "/cloudstack.management.usage.v1.UsageService/UpdateTrafficType"
	UsageService_ListUsageRecords_FullMethodName            = "/cloudstack.management.usage.v1.UsageService/ListUsageRecords"
	UsageService_AddTrafficMonitor_FullMethodName           = "/cloudstack.management.usage.v1.UsageService/AddTrafficMonitor"
	UsageService_DeleteTrafficType_FullMethodName           = "/cloudstack.management.usage.v1.UsageService/DeleteTrafficType"
	UsageService_AddTrafficType_FullMethodName              = "/cloudstack.management.usage.v1.UsageService/AddTrafficType"
	UsageService_ListTrafficTypeImplementors_FullMethodName = "/cloudstack.management.usage.v1.UsageService/ListTrafficTypeImplementors"
	UsageService_RemoveRawUsageRecords_FullMethodName       = "/cloudstack.management.usage.v1.UsageService/RemoveRawUsageRecords"
	UsageService_ListTrafficTypes_FullMethodName            = "/cloudstack.management.usage.v1.UsageService/ListTrafficTypes"
	UsageService_GenerateUsageRecords_FullMethodName        = "/cloudstack.management.usage.v1.UsageService/GenerateUsageRecords"
	UsageService_ListUsageTypes_FullMethodName              = "/cloudstack.management.usage.v1.UsageService/ListUsageTypes"
)

// UsageServiceClient is the client API for UsageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// UsageService provides operations for managing Usages
type UsageServiceClient interface {
	// ListTrafficMonitors List traffic monitor Hosts.
	ListTrafficMonitors(ctx context.Context, in *ListTrafficMonitorsRequest, opts ...grpc.CallOption) (*ListTrafficMonitorsResponse, error)
	// DeleteTrafficMonitor Deletes an traffic monitor host.
	DeleteTrafficMonitor(ctx context.Context, in *DeleteTrafficMonitorRequest, opts ...grpc.CallOption) (*DeleteTrafficMonitorResponse, error)
	// UpdateTrafficType Updates traffic type of a physical network
	UpdateTrafficType(ctx context.Context, in *UpdateTrafficTypeRequest, opts ...grpc.CallOption) (*UpdateTrafficTypeResponse, error)
	// ListUsageRecords Lists usage records for accounts
	ListUsageRecords(ctx context.Context, in *ListUsageRecordsRequest, opts ...grpc.CallOption) (*ListUsageRecordsResponse, error)
	// AddTrafficMonitor Adds Traffic Monitor Host for Direct Network Usage
	AddTrafficMonitor(ctx context.Context, in *AddTrafficMonitorRequest, opts ...grpc.CallOption) (*AddTrafficMonitorResponse, error)
	// DeleteTrafficType Deletes traffic type of a physical network
	DeleteTrafficType(ctx context.Context, in *DeleteTrafficTypeRequest, opts ...grpc.CallOption) (*DeleteTrafficTypeResponse, error)
	// AddTrafficType Adds traffic type to a physical network
	AddTrafficType(ctx context.Context, in *AddTrafficTypeRequest, opts ...grpc.CallOption) (*AddTrafficTypeResponse, error)
	// ListTrafficTypeImplementors Lists implementors of implementor of a network traffic type or implementors of all network traffic types
	ListTrafficTypeImplementors(ctx context.Context, in *ListTrafficTypeImplementorsRequest, opts ...grpc.CallOption) (*ListTrafficTypeImplementorsResponse, error)
	// RemoveRawUsageRecords Safely removes raw records from cloud_usage table
	RemoveRawUsageRecords(ctx context.Context, in *RemoveRawUsageRecordsRequest, opts ...grpc.CallOption) (*RemoveRawUsageRecordsResponse, error)
	// ListTrafficTypes Lists traffic types of a given physical network.
	ListTrafficTypes(ctx context.Context, in *ListTrafficTypesRequest, opts ...grpc.CallOption) (*ListTrafficTypesResponse, error)
	// GenerateUsageRecords Generates usage records. This will generate records only if there any records to be generated, i.e if the scheduled usage job was not run or failed
	GenerateUsageRecords(ctx context.Context, in *GenerateUsageRecordsRequest, opts ...grpc.CallOption) (*GenerateUsageRecordsResponse, error)
	// ListUsageTypes List Usage Types
	ListUsageTypes(ctx context.Context, in *ListUsageTypesRequest, opts ...grpc.CallOption) (*ListUsageTypesResponse, error)
}

type usageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUsageServiceClient(cc grpc.ClientConnInterface) UsageServiceClient {
	return &usageServiceClient{cc}
}

func (c *usageServiceClient) ListTrafficMonitors(ctx context.Context, in *ListTrafficMonitorsRequest, opts ...grpc.CallOption) (*ListTrafficMonitorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTrafficMonitorsResponse)
	err := c.cc.Invoke(ctx, UsageService_ListTrafficMonitors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usageServiceClient) DeleteTrafficMonitor(ctx context.Context, in *DeleteTrafficMonitorRequest, opts ...grpc.CallOption) (*DeleteTrafficMonitorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTrafficMonitorResponse)
	err := c.cc.Invoke(ctx, UsageService_DeleteTrafficMonitor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usageServiceClient) UpdateTrafficType(ctx context.Context, in *UpdateTrafficTypeRequest, opts ...grpc.CallOption) (*UpdateTrafficTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTrafficTypeResponse)
	err := c.cc.Invoke(ctx, UsageService_UpdateTrafficType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usageServiceClient) ListUsageRecords(ctx context.Context, in *ListUsageRecordsRequest, opts ...grpc.CallOption) (*ListUsageRecordsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUsageRecordsResponse)
	err := c.cc.Invoke(ctx, UsageService_ListUsageRecords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usageServiceClient) AddTrafficMonitor(ctx context.Context, in *AddTrafficMonitorRequest, opts ...grpc.CallOption) (*AddTrafficMonitorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddTrafficMonitorResponse)
	err := c.cc.Invoke(ctx, UsageService_AddTrafficMonitor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usageServiceClient) DeleteTrafficType(ctx context.Context, in *DeleteTrafficTypeRequest, opts ...grpc.CallOption) (*DeleteTrafficTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTrafficTypeResponse)
	err := c.cc.Invoke(ctx, UsageService_DeleteTrafficType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usageServiceClient) AddTrafficType(ctx context.Context, in *AddTrafficTypeRequest, opts ...grpc.CallOption) (*AddTrafficTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddTrafficTypeResponse)
	err := c.cc.Invoke(ctx, UsageService_AddTrafficType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usageServiceClient) ListTrafficTypeImplementors(ctx context.Context, in *ListTrafficTypeImplementorsRequest, opts ...grpc.CallOption) (*ListTrafficTypeImplementorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTrafficTypeImplementorsResponse)
	err := c.cc.Invoke(ctx, UsageService_ListTrafficTypeImplementors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usageServiceClient) RemoveRawUsageRecords(ctx context.Context, in *RemoveRawUsageRecordsRequest, opts ...grpc.CallOption) (*RemoveRawUsageRecordsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveRawUsageRecordsResponse)
	err := c.cc.Invoke(ctx, UsageService_RemoveRawUsageRecords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usageServiceClient) ListTrafficTypes(ctx context.Context, in *ListTrafficTypesRequest, opts ...grpc.CallOption) (*ListTrafficTypesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTrafficTypesResponse)
	err := c.cc.Invoke(ctx, UsageService_ListTrafficTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usageServiceClient) GenerateUsageRecords(ctx context.Context, in *GenerateUsageRecordsRequest, opts ...grpc.CallOption) (*GenerateUsageRecordsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateUsageRecordsResponse)
	err := c.cc.Invoke(ctx, UsageService_GenerateUsageRecords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usageServiceClient) ListUsageTypes(ctx context.Context, in *ListUsageTypesRequest, opts ...grpc.CallOption) (*ListUsageTypesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUsageTypesResponse)
	err := c.cc.Invoke(ctx, UsageService_ListUsageTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsageServiceServer is the server API for UsageService service.
// All implementations must embed UnimplementedUsageServiceServer
// for forward compatibility.
//
// UsageService provides operations for managing Usages
type UsageServiceServer interface {
	// ListTrafficMonitors List traffic monitor Hosts.
	ListTrafficMonitors(context.Context, *ListTrafficMonitorsRequest) (*ListTrafficMonitorsResponse, error)
	// DeleteTrafficMonitor Deletes an traffic monitor host.
	DeleteTrafficMonitor(context.Context, *DeleteTrafficMonitorRequest) (*DeleteTrafficMonitorResponse, error)
	// UpdateTrafficType Updates traffic type of a physical network
	UpdateTrafficType(context.Context, *UpdateTrafficTypeRequest) (*UpdateTrafficTypeResponse, error)
	// ListUsageRecords Lists usage records for accounts
	ListUsageRecords(context.Context, *ListUsageRecordsRequest) (*ListUsageRecordsResponse, error)
	// AddTrafficMonitor Adds Traffic Monitor Host for Direct Network Usage
	AddTrafficMonitor(context.Context, *AddTrafficMonitorRequest) (*AddTrafficMonitorResponse, error)
	// DeleteTrafficType Deletes traffic type of a physical network
	DeleteTrafficType(context.Context, *DeleteTrafficTypeRequest) (*DeleteTrafficTypeResponse, error)
	// AddTrafficType Adds traffic type to a physical network
	AddTrafficType(context.Context, *AddTrafficTypeRequest) (*AddTrafficTypeResponse, error)
	// ListTrafficTypeImplementors Lists implementors of implementor of a network traffic type or implementors of all network traffic types
	ListTrafficTypeImplementors(context.Context, *ListTrafficTypeImplementorsRequest) (*ListTrafficTypeImplementorsResponse, error)
	// RemoveRawUsageRecords Safely removes raw records from cloud_usage table
	RemoveRawUsageRecords(context.Context, *RemoveRawUsageRecordsRequest) (*RemoveRawUsageRecordsResponse, error)
	// ListTrafficTypes Lists traffic types of a given physical network.
	ListTrafficTypes(context.Context, *ListTrafficTypesRequest) (*ListTrafficTypesResponse, error)
	// GenerateUsageRecords Generates usage records. This will generate records only if there any records to be generated, i.e if the scheduled usage job was not run or failed
	GenerateUsageRecords(context.Context, *GenerateUsageRecordsRequest) (*GenerateUsageRecordsResponse, error)
	// ListUsageTypes List Usage Types
	ListUsageTypes(context.Context, *ListUsageTypesRequest) (*ListUsageTypesResponse, error)
	mustEmbedUnimplementedUsageServiceServer()
}

// UnimplementedUsageServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUsageServiceServer struct{}

func (UnimplementedUsageServiceServer) ListTrafficMonitors(context.Context, *ListTrafficMonitorsRequest) (*ListTrafficMonitorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTrafficMonitors not implemented")
}
func (UnimplementedUsageServiceServer) DeleteTrafficMonitor(context.Context, *DeleteTrafficMonitorRequest) (*DeleteTrafficMonitorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTrafficMonitor not implemented")
}
func (UnimplementedUsageServiceServer) UpdateTrafficType(context.Context, *UpdateTrafficTypeRequest) (*UpdateTrafficTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTrafficType not implemented")
}
func (UnimplementedUsageServiceServer) ListUsageRecords(context.Context, *ListUsageRecordsRequest) (*ListUsageRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsageRecords not implemented")
}
func (UnimplementedUsageServiceServer) AddTrafficMonitor(context.Context, *AddTrafficMonitorRequest) (*AddTrafficMonitorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTrafficMonitor not implemented")
}
func (UnimplementedUsageServiceServer) DeleteTrafficType(context.Context, *DeleteTrafficTypeRequest) (*DeleteTrafficTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTrafficType not implemented")
}
func (UnimplementedUsageServiceServer) AddTrafficType(context.Context, *AddTrafficTypeRequest) (*AddTrafficTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTrafficType not implemented")
}
func (UnimplementedUsageServiceServer) ListTrafficTypeImplementors(context.Context, *ListTrafficTypeImplementorsRequest) (*ListTrafficTypeImplementorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTrafficTypeImplementors not implemented")
}
func (UnimplementedUsageServiceServer) RemoveRawUsageRecords(context.Context, *RemoveRawUsageRecordsRequest) (*RemoveRawUsageRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRawUsageRecords not implemented")
}
func (UnimplementedUsageServiceServer) ListTrafficTypes(context.Context, *ListTrafficTypesRequest) (*ListTrafficTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTrafficTypes not implemented")
}
func (UnimplementedUsageServiceServer) GenerateUsageRecords(context.Context, *GenerateUsageRecordsRequest) (*GenerateUsageRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateUsageRecords not implemented")
}
func (UnimplementedUsageServiceServer) ListUsageTypes(context.Context, *ListUsageTypesRequest) (*ListUsageTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsageTypes not implemented")
}
func (UnimplementedUsageServiceServer) mustEmbedUnimplementedUsageServiceServer() {}
func (UnimplementedUsageServiceServer) testEmbeddedByValue()                      {}

// UnsafeUsageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsageServiceServer will
// result in compilation errors.
type UnsafeUsageServiceServer interface {
	mustEmbedUnimplementedUsageServiceServer()
}

func RegisterUsageServiceServer(s grpc.ServiceRegistrar, srv UsageServiceServer) {
	// If the following call pancis, it indicates UnimplementedUsageServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UsageService_ServiceDesc, srv)
}

func _UsageService_ListTrafficMonitors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTrafficMonitorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsageServiceServer).ListTrafficMonitors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsageService_ListTrafficMonitors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsageServiceServer).ListTrafficMonitors(ctx, req.(*ListTrafficMonitorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsageService_DeleteTrafficMonitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTrafficMonitorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsageServiceServer).DeleteTrafficMonitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsageService_DeleteTrafficMonitor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsageServiceServer).DeleteTrafficMonitor(ctx, req.(*DeleteTrafficMonitorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsageService_UpdateTrafficType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTrafficTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsageServiceServer).UpdateTrafficType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsageService_UpdateTrafficType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsageServiceServer).UpdateTrafficType(ctx, req.(*UpdateTrafficTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsageService_ListUsageRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsageRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsageServiceServer).ListUsageRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsageService_ListUsageRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsageServiceServer).ListUsageRecords(ctx, req.(*ListUsageRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsageService_AddTrafficMonitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTrafficMonitorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsageServiceServer).AddTrafficMonitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsageService_AddTrafficMonitor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsageServiceServer).AddTrafficMonitor(ctx, req.(*AddTrafficMonitorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsageService_DeleteTrafficType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTrafficTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsageServiceServer).DeleteTrafficType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsageService_DeleteTrafficType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsageServiceServer).DeleteTrafficType(ctx, req.(*DeleteTrafficTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsageService_AddTrafficType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTrafficTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsageServiceServer).AddTrafficType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsageService_AddTrafficType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsageServiceServer).AddTrafficType(ctx, req.(*AddTrafficTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsageService_ListTrafficTypeImplementors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTrafficTypeImplementorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsageServiceServer).ListTrafficTypeImplementors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsageService_ListTrafficTypeImplementors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsageServiceServer).ListTrafficTypeImplementors(ctx, req.(*ListTrafficTypeImplementorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsageService_RemoveRawUsageRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRawUsageRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsageServiceServer).RemoveRawUsageRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsageService_RemoveRawUsageRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsageServiceServer).RemoveRawUsageRecords(ctx, req.(*RemoveRawUsageRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsageService_ListTrafficTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTrafficTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsageServiceServer).ListTrafficTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsageService_ListTrafficTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsageServiceServer).ListTrafficTypes(ctx, req.(*ListTrafficTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsageService_GenerateUsageRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateUsageRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsageServiceServer).GenerateUsageRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsageService_GenerateUsageRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsageServiceServer).GenerateUsageRecords(ctx, req.(*GenerateUsageRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsageService_ListUsageTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsageTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsageServiceServer).ListUsageTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsageService_ListUsageTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsageServiceServer).ListUsageTypes(ctx, req.(*ListUsageTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UsageService_ServiceDesc is the grpc.ServiceDesc for UsageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UsageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloudstack.management.usage.v1.UsageService",
	HandlerType: (*UsageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListTrafficMonitors",
			Handler:    _UsageService_ListTrafficMonitors_Handler,
		},
		{
			MethodName: "DeleteTrafficMonitor",
			Handler:    _UsageService_DeleteTrafficMonitor_Handler,
		},
		{
			MethodName: "UpdateTrafficType",
			Handler:    _UsageService_UpdateTrafficType_Handler,
		},
		{
			MethodName: "ListUsageRecords",
			Handler:    _UsageService_ListUsageRecords_Handler,
		},
		{
			MethodName: "AddTrafficMonitor",
			Handler:    _UsageService_AddTrafficMonitor_Handler,
		},
		{
			MethodName: "DeleteTrafficType",
			Handler:    _UsageService_DeleteTrafficType_Handler,
		},
		{
			MethodName: "AddTrafficType",
			Handler:    _UsageService_AddTrafficType_Handler,
		},
		{
			MethodName: "ListTrafficTypeImplementors",
			Handler:    _UsageService_ListTrafficTypeImplementors_Handler,
		},
		{
			MethodName: "RemoveRawUsageRecords",
			Handler:    _UsageService_RemoveRawUsageRecords_Handler,
		},
		{
			MethodName: "ListTrafficTypes",
			Handler:    _UsageService_ListTrafficTypes_Handler,
		},
		{
			MethodName: "GenerateUsageRecords",
			Handler:    _UsageService_GenerateUsageRecords_Handler,
		},
		{
			MethodName: "ListUsageTypes",
			Handler:    _UsageService_ListUsageTypes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloudstack/management/usage/v1/usage.gen.proto",
}
