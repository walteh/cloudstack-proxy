// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: cloudstack/management/consoleproxy/v1/consoleproxy.gen.proto

package consoleproxyv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ConsoleproxyService_CreateConsoleEndpoint_FullMethodName = "/cloudstack.management.consoleproxy.v1.ConsoleproxyService/CreateConsoleEndpoint"
)

// ConsoleproxyServiceClient is the client API for ConsoleproxyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ConsoleproxyService provides operations for managing Consoleproxys
type ConsoleproxyServiceClient interface {
	// CreateConsoleEndpoint Create a console endpoint to connect to a VM console
	CreateConsoleEndpoint(ctx context.Context, in *CreateConsoleEndpointRequest, opts ...grpc.CallOption) (*CreateConsoleEndpointResponse, error)
}

type consoleproxyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConsoleproxyServiceClient(cc grpc.ClientConnInterface) ConsoleproxyServiceClient {
	return &consoleproxyServiceClient{cc}
}

func (c *consoleproxyServiceClient) CreateConsoleEndpoint(ctx context.Context, in *CreateConsoleEndpointRequest, opts ...grpc.CallOption) (*CreateConsoleEndpointResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateConsoleEndpointResponse)
	err := c.cc.Invoke(ctx, ConsoleproxyService_CreateConsoleEndpoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsoleproxyServiceServer is the server API for ConsoleproxyService service.
// All implementations must embed UnimplementedConsoleproxyServiceServer
// for forward compatibility.
//
// ConsoleproxyService provides operations for managing Consoleproxys
type ConsoleproxyServiceServer interface {
	// CreateConsoleEndpoint Create a console endpoint to connect to a VM console
	CreateConsoleEndpoint(context.Context, *CreateConsoleEndpointRequest) (*CreateConsoleEndpointResponse, error)
	mustEmbedUnimplementedConsoleproxyServiceServer()
}

// UnimplementedConsoleproxyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConsoleproxyServiceServer struct{}

func (UnimplementedConsoleproxyServiceServer) CreateConsoleEndpoint(context.Context, *CreateConsoleEndpointRequest) (*CreateConsoleEndpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConsoleEndpoint not implemented")
}
func (UnimplementedConsoleproxyServiceServer) mustEmbedUnimplementedConsoleproxyServiceServer() {}
func (UnimplementedConsoleproxyServiceServer) testEmbeddedByValue()                             {}

// UnsafeConsoleproxyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsoleproxyServiceServer will
// result in compilation errors.
type UnsafeConsoleproxyServiceServer interface {
	mustEmbedUnimplementedConsoleproxyServiceServer()
}

func RegisterConsoleproxyServiceServer(s grpc.ServiceRegistrar, srv ConsoleproxyServiceServer) {
	// If the following call pancis, it indicates UnimplementedConsoleproxyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ConsoleproxyService_ServiceDesc, srv)
}

func _ConsoleproxyService_CreateConsoleEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConsoleEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleproxyServiceServer).CreateConsoleEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsoleproxyService_CreateConsoleEndpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleproxyServiceServer).CreateConsoleEndpoint(ctx, req.(*CreateConsoleEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConsoleproxyService_ServiceDesc is the grpc.ServiceDesc for ConsoleproxyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConsoleproxyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloudstack.management.consoleproxy.v1.ConsoleproxyService",
	HandlerType: (*ConsoleproxyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateConsoleEndpoint",
			Handler:    _ConsoleproxyService_CreateConsoleEndpoint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloudstack/management/consoleproxy/v1/consoleproxy.gen.proto",
}
