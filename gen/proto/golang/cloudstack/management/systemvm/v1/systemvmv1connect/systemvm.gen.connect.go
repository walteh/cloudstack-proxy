// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cloudstack/management/systemvm/v1/systemvm.gen.proto

package systemvmv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/walteh/cloudstack-proxy/gen/proto/golang/cloudstack/management/systemvm/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SystemvmServiceName is the fully-qualified name of the SystemvmService service.
	SystemvmServiceName = "cloudstack.management.systemvm.v1.SystemvmService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SystemvmServiceDestroySystemVmProcedure is the fully-qualified name of the SystemvmService's
	// DestroySystemVm RPC.
	SystemvmServiceDestroySystemVmProcedure = "/cloudstack.management.systemvm.v1.SystemvmService/DestroySystemVm"
	// SystemvmServiceListSystemVMsProcedure is the fully-qualified name of the SystemvmService's
	// ListSystemVMs RPC.
	SystemvmServiceListSystemVMsProcedure = "/cloudstack.management.systemvm.v1.SystemvmService/ListSystemVMs"
	// SystemvmServiceMigrateSystemVMProcedure is the fully-qualified name of the SystemvmService's
	// MigrateSystemVM RPC.
	SystemvmServiceMigrateSystemVMProcedure = "/cloudstack.management.systemvm.v1.SystemvmService/MigrateSystemVM"
	// SystemvmServicePatchSystemVMProcedure is the fully-qualified name of the SystemvmService's
	// PatchSystemVM RPC.
	SystemvmServicePatchSystemVMProcedure = "/cloudstack.management.systemvm.v1.SystemvmService/PatchSystemVM"
	// SystemvmServiceRebootSystemVmProcedure is the fully-qualified name of the SystemvmService's
	// RebootSystemVm RPC.
	SystemvmServiceRebootSystemVmProcedure = "/cloudstack.management.systemvm.v1.SystemvmService/RebootSystemVm"
	// SystemvmServiceScaleSystemVMProcedure is the fully-qualified name of the SystemvmService's
	// ScaleSystemVM RPC.
	SystemvmServiceScaleSystemVMProcedure = "/cloudstack.management.systemvm.v1.SystemvmService/ScaleSystemVM"
	// SystemvmServiceStartSystemVMProcedure is the fully-qualified name of the SystemvmService's
	// StartSystemVM RPC.
	SystemvmServiceStartSystemVMProcedure = "/cloudstack.management.systemvm.v1.SystemvmService/StartSystemVM"
	// SystemvmServiceStopSystemVmProcedure is the fully-qualified name of the SystemvmService's
	// StopSystemVm RPC.
	SystemvmServiceStopSystemVmProcedure = "/cloudstack.management.systemvm.v1.SystemvmService/StopSystemVm"
	// SystemvmServiceUpgradeSystemVMProcedure is the fully-qualified name of the SystemvmService's
	// UpgradeSystemVM RPC.
	SystemvmServiceUpgradeSystemVMProcedure = "/cloudstack.management.systemvm.v1.SystemvmService/UpgradeSystemVM"
)

// SystemvmServiceClient is a client for the cloudstack.management.systemvm.v1.SystemvmService
// service.
type SystemvmServiceClient interface {
	// DestroySystemVm Destroys a system virtual machine.
	DestroySystemVm(context.Context, *connect.Request[v1.DestroySystemVmRequest]) (*connect.Response[v1.DestroySystemVmResponse], error)
	// ListSystemVMs List system virtual machines.
	ListSystemVMs(context.Context, *connect.Request[v1.ListSystemVMsRequest]) (*connect.Response[v1.ListSystemVMsResponse], error)
	// MigrateSystemVM Attempts Migration of a system virtual machine to the host specified.
	MigrateSystemVM(context.Context, *connect.Request[v1.MigrateSystemVMRequest]) (*connect.Response[v1.MigrateSystemVMResponse], error)
	// PatchSystemVM Attempts to live patch systemVMs - CPVM, SSVM
	PatchSystemVM(context.Context, *connect.Request[v1.PatchSystemVMRequest]) (*connect.Response[v1.PatchSystemVMResponse], error)
	// RebootSystemVm Reboots a system VM.
	RebootSystemVm(context.Context, *connect.Request[v1.RebootSystemVmRequest]) (*connect.Response[v1.RebootSystemVmResponse], error)
	// ScaleSystemVM Scale the service offering for a system vm (console proxy or secondary storage). The system vm must be in a "Stopped" state for this command to take effect.
	ScaleSystemVM(context.Context, *connect.Request[v1.ScaleSystemVMRequest]) (*connect.Response[v1.ScaleSystemVMResponse], error)
	// StartSystemVM Starts a system virtual machine.
	StartSystemVM(context.Context, *connect.Request[v1.StartSystemVMRequest]) (*connect.Response[v1.StartSystemVMResponse], error)
	// StopSystemVm Stops a system VM.
	StopSystemVm(context.Context, *connect.Request[v1.StopSystemVmRequest]) (*connect.Response[v1.StopSystemVmResponse], error)
	// UpgradeSystemVM Changes the service offering for a system vm (console proxy or secondary storage). The system vm must be in a "Stopped" state for this command to take effect.
	UpgradeSystemVM(context.Context, *connect.Request[v1.UpgradeSystemVMRequest]) (*connect.Response[v1.UpgradeSystemVMResponse], error)
}

// NewSystemvmServiceClient constructs a client for the
// cloudstack.management.systemvm.v1.SystemvmService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSystemvmServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SystemvmServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	systemvmServiceMethods := v1.File_cloudstack_management_systemvm_v1_systemvm_gen_proto.Services().ByName("SystemvmService").Methods()
	return &systemvmServiceClient{
		destroySystemVm: connect.NewClient[v1.DestroySystemVmRequest, v1.DestroySystemVmResponse](
			httpClient,
			baseURL+SystemvmServiceDestroySystemVmProcedure,
			connect.WithSchema(systemvmServiceMethods.ByName("DestroySystemVm")),
			connect.WithClientOptions(opts...),
		),
		listSystemVMs: connect.NewClient[v1.ListSystemVMsRequest, v1.ListSystemVMsResponse](
			httpClient,
			baseURL+SystemvmServiceListSystemVMsProcedure,
			connect.WithSchema(systemvmServiceMethods.ByName("ListSystemVMs")),
			connect.WithClientOptions(opts...),
		),
		migrateSystemVM: connect.NewClient[v1.MigrateSystemVMRequest, v1.MigrateSystemVMResponse](
			httpClient,
			baseURL+SystemvmServiceMigrateSystemVMProcedure,
			connect.WithSchema(systemvmServiceMethods.ByName("MigrateSystemVM")),
			connect.WithClientOptions(opts...),
		),
		patchSystemVM: connect.NewClient[v1.PatchSystemVMRequest, v1.PatchSystemVMResponse](
			httpClient,
			baseURL+SystemvmServicePatchSystemVMProcedure,
			connect.WithSchema(systemvmServiceMethods.ByName("PatchSystemVM")),
			connect.WithClientOptions(opts...),
		),
		rebootSystemVm: connect.NewClient[v1.RebootSystemVmRequest, v1.RebootSystemVmResponse](
			httpClient,
			baseURL+SystemvmServiceRebootSystemVmProcedure,
			connect.WithSchema(systemvmServiceMethods.ByName("RebootSystemVm")),
			connect.WithClientOptions(opts...),
		),
		scaleSystemVM: connect.NewClient[v1.ScaleSystemVMRequest, v1.ScaleSystemVMResponse](
			httpClient,
			baseURL+SystemvmServiceScaleSystemVMProcedure,
			connect.WithSchema(systemvmServiceMethods.ByName("ScaleSystemVM")),
			connect.WithClientOptions(opts...),
		),
		startSystemVM: connect.NewClient[v1.StartSystemVMRequest, v1.StartSystemVMResponse](
			httpClient,
			baseURL+SystemvmServiceStartSystemVMProcedure,
			connect.WithSchema(systemvmServiceMethods.ByName("StartSystemVM")),
			connect.WithClientOptions(opts...),
		),
		stopSystemVm: connect.NewClient[v1.StopSystemVmRequest, v1.StopSystemVmResponse](
			httpClient,
			baseURL+SystemvmServiceStopSystemVmProcedure,
			connect.WithSchema(systemvmServiceMethods.ByName("StopSystemVm")),
			connect.WithClientOptions(opts...),
		),
		upgradeSystemVM: connect.NewClient[v1.UpgradeSystemVMRequest, v1.UpgradeSystemVMResponse](
			httpClient,
			baseURL+SystemvmServiceUpgradeSystemVMProcedure,
			connect.WithSchema(systemvmServiceMethods.ByName("UpgradeSystemVM")),
			connect.WithClientOptions(opts...),
		),
	}
}

// systemvmServiceClient implements SystemvmServiceClient.
type systemvmServiceClient struct {
	destroySystemVm *connect.Client[v1.DestroySystemVmRequest, v1.DestroySystemVmResponse]
	listSystemVMs   *connect.Client[v1.ListSystemVMsRequest, v1.ListSystemVMsResponse]
	migrateSystemVM *connect.Client[v1.MigrateSystemVMRequest, v1.MigrateSystemVMResponse]
	patchSystemVM   *connect.Client[v1.PatchSystemVMRequest, v1.PatchSystemVMResponse]
	rebootSystemVm  *connect.Client[v1.RebootSystemVmRequest, v1.RebootSystemVmResponse]
	scaleSystemVM   *connect.Client[v1.ScaleSystemVMRequest, v1.ScaleSystemVMResponse]
	startSystemVM   *connect.Client[v1.StartSystemVMRequest, v1.StartSystemVMResponse]
	stopSystemVm    *connect.Client[v1.StopSystemVmRequest, v1.StopSystemVmResponse]
	upgradeSystemVM *connect.Client[v1.UpgradeSystemVMRequest, v1.UpgradeSystemVMResponse]
}

// DestroySystemVm calls cloudstack.management.systemvm.v1.SystemvmService.DestroySystemVm.
func (c *systemvmServiceClient) DestroySystemVm(ctx context.Context, req *connect.Request[v1.DestroySystemVmRequest]) (*connect.Response[v1.DestroySystemVmResponse], error) {
	return c.destroySystemVm.CallUnary(ctx, req)
}

// ListSystemVMs calls cloudstack.management.systemvm.v1.SystemvmService.ListSystemVMs.
func (c *systemvmServiceClient) ListSystemVMs(ctx context.Context, req *connect.Request[v1.ListSystemVMsRequest]) (*connect.Response[v1.ListSystemVMsResponse], error) {
	return c.listSystemVMs.CallUnary(ctx, req)
}

// MigrateSystemVM calls cloudstack.management.systemvm.v1.SystemvmService.MigrateSystemVM.
func (c *systemvmServiceClient) MigrateSystemVM(ctx context.Context, req *connect.Request[v1.MigrateSystemVMRequest]) (*connect.Response[v1.MigrateSystemVMResponse], error) {
	return c.migrateSystemVM.CallUnary(ctx, req)
}

// PatchSystemVM calls cloudstack.management.systemvm.v1.SystemvmService.PatchSystemVM.
func (c *systemvmServiceClient) PatchSystemVM(ctx context.Context, req *connect.Request[v1.PatchSystemVMRequest]) (*connect.Response[v1.PatchSystemVMResponse], error) {
	return c.patchSystemVM.CallUnary(ctx, req)
}

// RebootSystemVm calls cloudstack.management.systemvm.v1.SystemvmService.RebootSystemVm.
func (c *systemvmServiceClient) RebootSystemVm(ctx context.Context, req *connect.Request[v1.RebootSystemVmRequest]) (*connect.Response[v1.RebootSystemVmResponse], error) {
	return c.rebootSystemVm.CallUnary(ctx, req)
}

// ScaleSystemVM calls cloudstack.management.systemvm.v1.SystemvmService.ScaleSystemVM.
func (c *systemvmServiceClient) ScaleSystemVM(ctx context.Context, req *connect.Request[v1.ScaleSystemVMRequest]) (*connect.Response[v1.ScaleSystemVMResponse], error) {
	return c.scaleSystemVM.CallUnary(ctx, req)
}

// StartSystemVM calls cloudstack.management.systemvm.v1.SystemvmService.StartSystemVM.
func (c *systemvmServiceClient) StartSystemVM(ctx context.Context, req *connect.Request[v1.StartSystemVMRequest]) (*connect.Response[v1.StartSystemVMResponse], error) {
	return c.startSystemVM.CallUnary(ctx, req)
}

// StopSystemVm calls cloudstack.management.systemvm.v1.SystemvmService.StopSystemVm.
func (c *systemvmServiceClient) StopSystemVm(ctx context.Context, req *connect.Request[v1.StopSystemVmRequest]) (*connect.Response[v1.StopSystemVmResponse], error) {
	return c.stopSystemVm.CallUnary(ctx, req)
}

// UpgradeSystemVM calls cloudstack.management.systemvm.v1.SystemvmService.UpgradeSystemVM.
func (c *systemvmServiceClient) UpgradeSystemVM(ctx context.Context, req *connect.Request[v1.UpgradeSystemVMRequest]) (*connect.Response[v1.UpgradeSystemVMResponse], error) {
	return c.upgradeSystemVM.CallUnary(ctx, req)
}

// SystemvmServiceHandler is an implementation of the
// cloudstack.management.systemvm.v1.SystemvmService service.
type SystemvmServiceHandler interface {
	// DestroySystemVm Destroys a system virtual machine.
	DestroySystemVm(context.Context, *connect.Request[v1.DestroySystemVmRequest]) (*connect.Response[v1.DestroySystemVmResponse], error)
	// ListSystemVMs List system virtual machines.
	ListSystemVMs(context.Context, *connect.Request[v1.ListSystemVMsRequest]) (*connect.Response[v1.ListSystemVMsResponse], error)
	// MigrateSystemVM Attempts Migration of a system virtual machine to the host specified.
	MigrateSystemVM(context.Context, *connect.Request[v1.MigrateSystemVMRequest]) (*connect.Response[v1.MigrateSystemVMResponse], error)
	// PatchSystemVM Attempts to live patch systemVMs - CPVM, SSVM
	PatchSystemVM(context.Context, *connect.Request[v1.PatchSystemVMRequest]) (*connect.Response[v1.PatchSystemVMResponse], error)
	// RebootSystemVm Reboots a system VM.
	RebootSystemVm(context.Context, *connect.Request[v1.RebootSystemVmRequest]) (*connect.Response[v1.RebootSystemVmResponse], error)
	// ScaleSystemVM Scale the service offering for a system vm (console proxy or secondary storage). The system vm must be in a "Stopped" state for this command to take effect.
	ScaleSystemVM(context.Context, *connect.Request[v1.ScaleSystemVMRequest]) (*connect.Response[v1.ScaleSystemVMResponse], error)
	// StartSystemVM Starts a system virtual machine.
	StartSystemVM(context.Context, *connect.Request[v1.StartSystemVMRequest]) (*connect.Response[v1.StartSystemVMResponse], error)
	// StopSystemVm Stops a system VM.
	StopSystemVm(context.Context, *connect.Request[v1.StopSystemVmRequest]) (*connect.Response[v1.StopSystemVmResponse], error)
	// UpgradeSystemVM Changes the service offering for a system vm (console proxy or secondary storage). The system vm must be in a "Stopped" state for this command to take effect.
	UpgradeSystemVM(context.Context, *connect.Request[v1.UpgradeSystemVMRequest]) (*connect.Response[v1.UpgradeSystemVMResponse], error)
}

// NewSystemvmServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSystemvmServiceHandler(svc SystemvmServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	systemvmServiceMethods := v1.File_cloudstack_management_systemvm_v1_systemvm_gen_proto.Services().ByName("SystemvmService").Methods()
	systemvmServiceDestroySystemVmHandler := connect.NewUnaryHandler(
		SystemvmServiceDestroySystemVmProcedure,
		svc.DestroySystemVm,
		connect.WithSchema(systemvmServiceMethods.ByName("DestroySystemVm")),
		connect.WithHandlerOptions(opts...),
	)
	systemvmServiceListSystemVMsHandler := connect.NewUnaryHandler(
		SystemvmServiceListSystemVMsProcedure,
		svc.ListSystemVMs,
		connect.WithSchema(systemvmServiceMethods.ByName("ListSystemVMs")),
		connect.WithHandlerOptions(opts...),
	)
	systemvmServiceMigrateSystemVMHandler := connect.NewUnaryHandler(
		SystemvmServiceMigrateSystemVMProcedure,
		svc.MigrateSystemVM,
		connect.WithSchema(systemvmServiceMethods.ByName("MigrateSystemVM")),
		connect.WithHandlerOptions(opts...),
	)
	systemvmServicePatchSystemVMHandler := connect.NewUnaryHandler(
		SystemvmServicePatchSystemVMProcedure,
		svc.PatchSystemVM,
		connect.WithSchema(systemvmServiceMethods.ByName("PatchSystemVM")),
		connect.WithHandlerOptions(opts...),
	)
	systemvmServiceRebootSystemVmHandler := connect.NewUnaryHandler(
		SystemvmServiceRebootSystemVmProcedure,
		svc.RebootSystemVm,
		connect.WithSchema(systemvmServiceMethods.ByName("RebootSystemVm")),
		connect.WithHandlerOptions(opts...),
	)
	systemvmServiceScaleSystemVMHandler := connect.NewUnaryHandler(
		SystemvmServiceScaleSystemVMProcedure,
		svc.ScaleSystemVM,
		connect.WithSchema(systemvmServiceMethods.ByName("ScaleSystemVM")),
		connect.WithHandlerOptions(opts...),
	)
	systemvmServiceStartSystemVMHandler := connect.NewUnaryHandler(
		SystemvmServiceStartSystemVMProcedure,
		svc.StartSystemVM,
		connect.WithSchema(systemvmServiceMethods.ByName("StartSystemVM")),
		connect.WithHandlerOptions(opts...),
	)
	systemvmServiceStopSystemVmHandler := connect.NewUnaryHandler(
		SystemvmServiceStopSystemVmProcedure,
		svc.StopSystemVm,
		connect.WithSchema(systemvmServiceMethods.ByName("StopSystemVm")),
		connect.WithHandlerOptions(opts...),
	)
	systemvmServiceUpgradeSystemVMHandler := connect.NewUnaryHandler(
		SystemvmServiceUpgradeSystemVMProcedure,
		svc.UpgradeSystemVM,
		connect.WithSchema(systemvmServiceMethods.ByName("UpgradeSystemVM")),
		connect.WithHandlerOptions(opts...),
	)
	return "/cloudstack.management.systemvm.v1.SystemvmService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SystemvmServiceDestroySystemVmProcedure:
			systemvmServiceDestroySystemVmHandler.ServeHTTP(w, r)
		case SystemvmServiceListSystemVMsProcedure:
			systemvmServiceListSystemVMsHandler.ServeHTTP(w, r)
		case SystemvmServiceMigrateSystemVMProcedure:
			systemvmServiceMigrateSystemVMHandler.ServeHTTP(w, r)
		case SystemvmServicePatchSystemVMProcedure:
			systemvmServicePatchSystemVMHandler.ServeHTTP(w, r)
		case SystemvmServiceRebootSystemVmProcedure:
			systemvmServiceRebootSystemVmHandler.ServeHTTP(w, r)
		case SystemvmServiceScaleSystemVMProcedure:
			systemvmServiceScaleSystemVMHandler.ServeHTTP(w, r)
		case SystemvmServiceStartSystemVMProcedure:
			systemvmServiceStartSystemVMHandler.ServeHTTP(w, r)
		case SystemvmServiceStopSystemVmProcedure:
			systemvmServiceStopSystemVmHandler.ServeHTTP(w, r)
		case SystemvmServiceUpgradeSystemVMProcedure:
			systemvmServiceUpgradeSystemVMHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSystemvmServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSystemvmServiceHandler struct{}

func (UnimplementedSystemvmServiceHandler) DestroySystemVm(context.Context, *connect.Request[v1.DestroySystemVmRequest]) (*connect.Response[v1.DestroySystemVmResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.systemvm.v1.SystemvmService.DestroySystemVm is not implemented"))
}

func (UnimplementedSystemvmServiceHandler) ListSystemVMs(context.Context, *connect.Request[v1.ListSystemVMsRequest]) (*connect.Response[v1.ListSystemVMsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.systemvm.v1.SystemvmService.ListSystemVMs is not implemented"))
}

func (UnimplementedSystemvmServiceHandler) MigrateSystemVM(context.Context, *connect.Request[v1.MigrateSystemVMRequest]) (*connect.Response[v1.MigrateSystemVMResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.systemvm.v1.SystemvmService.MigrateSystemVM is not implemented"))
}

func (UnimplementedSystemvmServiceHandler) PatchSystemVM(context.Context, *connect.Request[v1.PatchSystemVMRequest]) (*connect.Response[v1.PatchSystemVMResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.systemvm.v1.SystemvmService.PatchSystemVM is not implemented"))
}

func (UnimplementedSystemvmServiceHandler) RebootSystemVm(context.Context, *connect.Request[v1.RebootSystemVmRequest]) (*connect.Response[v1.RebootSystemVmResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.systemvm.v1.SystemvmService.RebootSystemVm is not implemented"))
}

func (UnimplementedSystemvmServiceHandler) ScaleSystemVM(context.Context, *connect.Request[v1.ScaleSystemVMRequest]) (*connect.Response[v1.ScaleSystemVMResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.systemvm.v1.SystemvmService.ScaleSystemVM is not implemented"))
}

func (UnimplementedSystemvmServiceHandler) StartSystemVM(context.Context, *connect.Request[v1.StartSystemVMRequest]) (*connect.Response[v1.StartSystemVMResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.systemvm.v1.SystemvmService.StartSystemVM is not implemented"))
}

func (UnimplementedSystemvmServiceHandler) StopSystemVm(context.Context, *connect.Request[v1.StopSystemVmRequest]) (*connect.Response[v1.StopSystemVmResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.systemvm.v1.SystemvmService.StopSystemVm is not implemented"))
}

func (UnimplementedSystemvmServiceHandler) UpgradeSystemVM(context.Context, *connect.Request[v1.UpgradeSystemVMRequest]) (*connect.Response[v1.UpgradeSystemVMResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.systemvm.v1.SystemvmService.UpgradeSystemVM is not implemented"))
}
