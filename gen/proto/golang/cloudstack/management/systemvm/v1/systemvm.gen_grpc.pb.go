// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: cloudstack/management/systemvm/v1/systemvm.gen.proto

package systemvmv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SystemvmService_DestroySystemVm_FullMethodName = "/cloudstack.management.systemvm.v1.SystemvmService/DestroySystemVm"
	SystemvmService_ListSystemVMs_FullMethodName   = "/cloudstack.management.systemvm.v1.SystemvmService/ListSystemVMs"
	SystemvmService_MigrateSystemVM_FullMethodName = "/cloudstack.management.systemvm.v1.SystemvmService/MigrateSystemVM"
	SystemvmService_PatchSystemVM_FullMethodName   = "/cloudstack.management.systemvm.v1.SystemvmService/PatchSystemVM"
	SystemvmService_RebootSystemVm_FullMethodName  = "/cloudstack.management.systemvm.v1.SystemvmService/RebootSystemVm"
	SystemvmService_ScaleSystemVM_FullMethodName   = "/cloudstack.management.systemvm.v1.SystemvmService/ScaleSystemVM"
	SystemvmService_StartSystemVM_FullMethodName   = "/cloudstack.management.systemvm.v1.SystemvmService/StartSystemVM"
	SystemvmService_StopSystemVm_FullMethodName    = "/cloudstack.management.systemvm.v1.SystemvmService/StopSystemVm"
	SystemvmService_UpgradeSystemVM_FullMethodName = "/cloudstack.management.systemvm.v1.SystemvmService/UpgradeSystemVM"
)

// SystemvmServiceClient is the client API for SystemvmService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SystemvmService provides operations for managing Systemvms
type SystemvmServiceClient interface {
	// DestroySystemVm Destroys a system virtual machine.
	DestroySystemVm(ctx context.Context, in *DestroySystemVmRequest, opts ...grpc.CallOption) (*DestroySystemVmResponse, error)
	// ListSystemVMs List system virtual machines.
	ListSystemVMs(ctx context.Context, in *ListSystemVMsRequest, opts ...grpc.CallOption) (*ListSystemVMsResponse, error)
	// MigrateSystemVM Attempts Migration of a system virtual machine to the host specified.
	MigrateSystemVM(ctx context.Context, in *MigrateSystemVMRequest, opts ...grpc.CallOption) (*MigrateSystemVMResponse, error)
	// PatchSystemVM Attempts to live patch systemVMs - CPVM, SSVM
	PatchSystemVM(ctx context.Context, in *PatchSystemVMRequest, opts ...grpc.CallOption) (*PatchSystemVMResponse, error)
	// RebootSystemVm Reboots a system VM.
	RebootSystemVm(ctx context.Context, in *RebootSystemVmRequest, opts ...grpc.CallOption) (*RebootSystemVmResponse, error)
	// ScaleSystemVM Scale the service offering for a system vm (console proxy or secondary storage). The system vm must be in a "Stopped" state for this command to take effect.
	ScaleSystemVM(ctx context.Context, in *ScaleSystemVMRequest, opts ...grpc.CallOption) (*ScaleSystemVMResponse, error)
	// StartSystemVM Starts a system virtual machine.
	StartSystemVM(ctx context.Context, in *StartSystemVMRequest, opts ...grpc.CallOption) (*StartSystemVMResponse, error)
	// StopSystemVm Stops a system VM.
	StopSystemVm(ctx context.Context, in *StopSystemVmRequest, opts ...grpc.CallOption) (*StopSystemVmResponse, error)
	// UpgradeSystemVM Changes the service offering for a system vm (console proxy or secondary storage). The system vm must be in a "Stopped" state for this command to take effect.
	UpgradeSystemVM(ctx context.Context, in *UpgradeSystemVMRequest, opts ...grpc.CallOption) (*UpgradeSystemVMResponse, error)
}

type systemvmServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemvmServiceClient(cc grpc.ClientConnInterface) SystemvmServiceClient {
	return &systemvmServiceClient{cc}
}

func (c *systemvmServiceClient) DestroySystemVm(ctx context.Context, in *DestroySystemVmRequest, opts ...grpc.CallOption) (*DestroySystemVmResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DestroySystemVmResponse)
	err := c.cc.Invoke(ctx, SystemvmService_DestroySystemVm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemvmServiceClient) ListSystemVMs(ctx context.Context, in *ListSystemVMsRequest, opts ...grpc.CallOption) (*ListSystemVMsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSystemVMsResponse)
	err := c.cc.Invoke(ctx, SystemvmService_ListSystemVMs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemvmServiceClient) MigrateSystemVM(ctx context.Context, in *MigrateSystemVMRequest, opts ...grpc.CallOption) (*MigrateSystemVMResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MigrateSystemVMResponse)
	err := c.cc.Invoke(ctx, SystemvmService_MigrateSystemVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemvmServiceClient) PatchSystemVM(ctx context.Context, in *PatchSystemVMRequest, opts ...grpc.CallOption) (*PatchSystemVMResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PatchSystemVMResponse)
	err := c.cc.Invoke(ctx, SystemvmService_PatchSystemVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemvmServiceClient) RebootSystemVm(ctx context.Context, in *RebootSystemVmRequest, opts ...grpc.CallOption) (*RebootSystemVmResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RebootSystemVmResponse)
	err := c.cc.Invoke(ctx, SystemvmService_RebootSystemVm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemvmServiceClient) ScaleSystemVM(ctx context.Context, in *ScaleSystemVMRequest, opts ...grpc.CallOption) (*ScaleSystemVMResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScaleSystemVMResponse)
	err := c.cc.Invoke(ctx, SystemvmService_ScaleSystemVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemvmServiceClient) StartSystemVM(ctx context.Context, in *StartSystemVMRequest, opts ...grpc.CallOption) (*StartSystemVMResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartSystemVMResponse)
	err := c.cc.Invoke(ctx, SystemvmService_StartSystemVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemvmServiceClient) StopSystemVm(ctx context.Context, in *StopSystemVmRequest, opts ...grpc.CallOption) (*StopSystemVmResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopSystemVmResponse)
	err := c.cc.Invoke(ctx, SystemvmService_StopSystemVm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemvmServiceClient) UpgradeSystemVM(ctx context.Context, in *UpgradeSystemVMRequest, opts ...grpc.CallOption) (*UpgradeSystemVMResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpgradeSystemVMResponse)
	err := c.cc.Invoke(ctx, SystemvmService_UpgradeSystemVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemvmServiceServer is the server API for SystemvmService service.
// All implementations must embed UnimplementedSystemvmServiceServer
// for forward compatibility.
//
// SystemvmService provides operations for managing Systemvms
type SystemvmServiceServer interface {
	// DestroySystemVm Destroys a system virtual machine.
	DestroySystemVm(context.Context, *DestroySystemVmRequest) (*DestroySystemVmResponse, error)
	// ListSystemVMs List system virtual machines.
	ListSystemVMs(context.Context, *ListSystemVMsRequest) (*ListSystemVMsResponse, error)
	// MigrateSystemVM Attempts Migration of a system virtual machine to the host specified.
	MigrateSystemVM(context.Context, *MigrateSystemVMRequest) (*MigrateSystemVMResponse, error)
	// PatchSystemVM Attempts to live patch systemVMs - CPVM, SSVM
	PatchSystemVM(context.Context, *PatchSystemVMRequest) (*PatchSystemVMResponse, error)
	// RebootSystemVm Reboots a system VM.
	RebootSystemVm(context.Context, *RebootSystemVmRequest) (*RebootSystemVmResponse, error)
	// ScaleSystemVM Scale the service offering for a system vm (console proxy or secondary storage). The system vm must be in a "Stopped" state for this command to take effect.
	ScaleSystemVM(context.Context, *ScaleSystemVMRequest) (*ScaleSystemVMResponse, error)
	// StartSystemVM Starts a system virtual machine.
	StartSystemVM(context.Context, *StartSystemVMRequest) (*StartSystemVMResponse, error)
	// StopSystemVm Stops a system VM.
	StopSystemVm(context.Context, *StopSystemVmRequest) (*StopSystemVmResponse, error)
	// UpgradeSystemVM Changes the service offering for a system vm (console proxy or secondary storage). The system vm must be in a "Stopped" state for this command to take effect.
	UpgradeSystemVM(context.Context, *UpgradeSystemVMRequest) (*UpgradeSystemVMResponse, error)
	mustEmbedUnimplementedSystemvmServiceServer()
}

// UnimplementedSystemvmServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSystemvmServiceServer struct{}

func (UnimplementedSystemvmServiceServer) DestroySystemVm(context.Context, *DestroySystemVmRequest) (*DestroySystemVmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroySystemVm not implemented")
}
func (UnimplementedSystemvmServiceServer) ListSystemVMs(context.Context, *ListSystemVMsRequest) (*ListSystemVMsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSystemVMs not implemented")
}
func (UnimplementedSystemvmServiceServer) MigrateSystemVM(context.Context, *MigrateSystemVMRequest) (*MigrateSystemVMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MigrateSystemVM not implemented")
}
func (UnimplementedSystemvmServiceServer) PatchSystemVM(context.Context, *PatchSystemVMRequest) (*PatchSystemVMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchSystemVM not implemented")
}
func (UnimplementedSystemvmServiceServer) RebootSystemVm(context.Context, *RebootSystemVmRequest) (*RebootSystemVmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RebootSystemVm not implemented")
}
func (UnimplementedSystemvmServiceServer) ScaleSystemVM(context.Context, *ScaleSystemVMRequest) (*ScaleSystemVMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScaleSystemVM not implemented")
}
func (UnimplementedSystemvmServiceServer) StartSystemVM(context.Context, *StartSystemVMRequest) (*StartSystemVMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSystemVM not implemented")
}
func (UnimplementedSystemvmServiceServer) StopSystemVm(context.Context, *StopSystemVmRequest) (*StopSystemVmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopSystemVm not implemented")
}
func (UnimplementedSystemvmServiceServer) UpgradeSystemVM(context.Context, *UpgradeSystemVMRequest) (*UpgradeSystemVMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeSystemVM not implemented")
}
func (UnimplementedSystemvmServiceServer) mustEmbedUnimplementedSystemvmServiceServer() {}
func (UnimplementedSystemvmServiceServer) testEmbeddedByValue()                         {}

// UnsafeSystemvmServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SystemvmServiceServer will
// result in compilation errors.
type UnsafeSystemvmServiceServer interface {
	mustEmbedUnimplementedSystemvmServiceServer()
}

func RegisterSystemvmServiceServer(s grpc.ServiceRegistrar, srv SystemvmServiceServer) {
	// If the following call pancis, it indicates UnimplementedSystemvmServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SystemvmService_ServiceDesc, srv)
}

func _SystemvmService_DestroySystemVm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroySystemVmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemvmServiceServer).DestroySystemVm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemvmService_DestroySystemVm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemvmServiceServer).DestroySystemVm(ctx, req.(*DestroySystemVmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemvmService_ListSystemVMs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSystemVMsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemvmServiceServer).ListSystemVMs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemvmService_ListSystemVMs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemvmServiceServer).ListSystemVMs(ctx, req.(*ListSystemVMsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemvmService_MigrateSystemVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MigrateSystemVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemvmServiceServer).MigrateSystemVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemvmService_MigrateSystemVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemvmServiceServer).MigrateSystemVM(ctx, req.(*MigrateSystemVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemvmService_PatchSystemVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchSystemVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemvmServiceServer).PatchSystemVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemvmService_PatchSystemVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemvmServiceServer).PatchSystemVM(ctx, req.(*PatchSystemVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemvmService_RebootSystemVm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RebootSystemVmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemvmServiceServer).RebootSystemVm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemvmService_RebootSystemVm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemvmServiceServer).RebootSystemVm(ctx, req.(*RebootSystemVmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemvmService_ScaleSystemVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScaleSystemVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemvmServiceServer).ScaleSystemVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemvmService_ScaleSystemVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemvmServiceServer).ScaleSystemVM(ctx, req.(*ScaleSystemVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemvmService_StartSystemVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartSystemVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemvmServiceServer).StartSystemVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemvmService_StartSystemVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemvmServiceServer).StartSystemVM(ctx, req.(*StartSystemVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemvmService_StopSystemVm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopSystemVmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemvmServiceServer).StopSystemVm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemvmService_StopSystemVm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemvmServiceServer).StopSystemVm(ctx, req.(*StopSystemVmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemvmService_UpgradeSystemVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeSystemVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemvmServiceServer).UpgradeSystemVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemvmService_UpgradeSystemVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemvmServiceServer).UpgradeSystemVM(ctx, req.(*UpgradeSystemVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SystemvmService_ServiceDesc is the grpc.ServiceDesc for SystemvmService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SystemvmService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloudstack.management.systemvm.v1.SystemvmService",
	HandlerType: (*SystemvmServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DestroySystemVm",
			Handler:    _SystemvmService_DestroySystemVm_Handler,
		},
		{
			MethodName: "ListSystemVMs",
			Handler:    _SystemvmService_ListSystemVMs_Handler,
		},
		{
			MethodName: "MigrateSystemVM",
			Handler:    _SystemvmService_MigrateSystemVM_Handler,
		},
		{
			MethodName: "PatchSystemVM",
			Handler:    _SystemvmService_PatchSystemVM_Handler,
		},
		{
			MethodName: "RebootSystemVm",
			Handler:    _SystemvmService_RebootSystemVm_Handler,
		},
		{
			MethodName: "ScaleSystemVM",
			Handler:    _SystemvmService_ScaleSystemVM_Handler,
		},
		{
			MethodName: "StartSystemVM",
			Handler:    _SystemvmService_StartSystemVM_Handler,
		},
		{
			MethodName: "StopSystemVm",
			Handler:    _SystemvmService_StopSystemVm_Handler,
		},
		{
			MethodName: "UpgradeSystemVM",
			Handler:    _SystemvmService_UpgradeSystemVM_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloudstack/management/systemvm/v1/systemvm.gen.proto",
}
