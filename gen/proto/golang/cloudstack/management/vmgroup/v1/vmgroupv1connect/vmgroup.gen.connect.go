// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cloudstack/management/vmgroup/v1/vmgroup.gen.proto

package vmgroupv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/walteh/cloudstack-proxy/gen/proto/golang/cloudstack/management/vmgroup/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// VmgroupServiceName is the fully-qualified name of the VmgroupService service.
	VmgroupServiceName = "cloudstack.management.vmgroup.v1.VmgroupService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// VmgroupServiceCreateVMGroupProcedure is the fully-qualified name of the VmgroupService's
	// CreateVMGroup RPC.
	VmgroupServiceCreateVMGroupProcedure = "/cloudstack.management.vmgroup.v1.VmgroupService/CreateVMGroup"
	// VmgroupServiceListVMGroupsProcedure is the fully-qualified name of the VmgroupService's
	// ListVMGroups RPC.
	VmgroupServiceListVMGroupsProcedure = "/cloudstack.management.vmgroup.v1.VmgroupService/ListVMGroups"
	// VmgroupServiceDeleteVMGroupProcedure is the fully-qualified name of the VmgroupService's
	// DeleteVMGroup RPC.
	VmgroupServiceDeleteVMGroupProcedure = "/cloudstack.management.vmgroup.v1.VmgroupService/DeleteVMGroup"
	// VmgroupServiceUpdateVMGroupProcedure is the fully-qualified name of the VmgroupService's
	// UpdateVMGroup RPC.
	VmgroupServiceUpdateVMGroupProcedure = "/cloudstack.management.vmgroup.v1.VmgroupService/UpdateVMGroup"
)

// VmgroupServiceClient is a client for the cloudstack.management.vmgroup.v1.VmgroupService service.
type VmgroupServiceClient interface {
	// CreateVMGroup Creates a vm group
	CreateVMGroup(context.Context, *connect.Request[v1.CreateVMGroupRequest]) (*connect.Response[v1.CreateVMGroupResponse], error)
	// ListVMGroups Lists vm groups
	ListVMGroups(context.Context, *connect.Request[v1.ListVMGroupsRequest]) (*connect.Response[v1.ListVMGroupsResponse], error)
	// DeleteVMGroup Deletes a vm group
	DeleteVMGroup(context.Context, *connect.Request[v1.DeleteVMGroupRequest]) (*connect.Response[v1.DeleteVMGroupResponse], error)
	// UpdateVMGroup Updates a vm group
	UpdateVMGroup(context.Context, *connect.Request[v1.UpdateVMGroupRequest]) (*connect.Response[v1.UpdateVMGroupResponse], error)
}

// NewVmgroupServiceClient constructs a client for the
// cloudstack.management.vmgroup.v1.VmgroupService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewVmgroupServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) VmgroupServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	vmgroupServiceMethods := v1.File_cloudstack_management_vmgroup_v1_vmgroup_gen_proto.Services().ByName("VmgroupService").Methods()
	return &vmgroupServiceClient{
		createVMGroup: connect.NewClient[v1.CreateVMGroupRequest, v1.CreateVMGroupResponse](
			httpClient,
			baseURL+VmgroupServiceCreateVMGroupProcedure,
			connect.WithSchema(vmgroupServiceMethods.ByName("CreateVMGroup")),
			connect.WithClientOptions(opts...),
		),
		listVMGroups: connect.NewClient[v1.ListVMGroupsRequest, v1.ListVMGroupsResponse](
			httpClient,
			baseURL+VmgroupServiceListVMGroupsProcedure,
			connect.WithSchema(vmgroupServiceMethods.ByName("ListVMGroups")),
			connect.WithClientOptions(opts...),
		),
		deleteVMGroup: connect.NewClient[v1.DeleteVMGroupRequest, v1.DeleteVMGroupResponse](
			httpClient,
			baseURL+VmgroupServiceDeleteVMGroupProcedure,
			connect.WithSchema(vmgroupServiceMethods.ByName("DeleteVMGroup")),
			connect.WithClientOptions(opts...),
		),
		updateVMGroup: connect.NewClient[v1.UpdateVMGroupRequest, v1.UpdateVMGroupResponse](
			httpClient,
			baseURL+VmgroupServiceUpdateVMGroupProcedure,
			connect.WithSchema(vmgroupServiceMethods.ByName("UpdateVMGroup")),
			connect.WithClientOptions(opts...),
		),
	}
}

// vmgroupServiceClient implements VmgroupServiceClient.
type vmgroupServiceClient struct {
	createVMGroup *connect.Client[v1.CreateVMGroupRequest, v1.CreateVMGroupResponse]
	listVMGroups  *connect.Client[v1.ListVMGroupsRequest, v1.ListVMGroupsResponse]
	deleteVMGroup *connect.Client[v1.DeleteVMGroupRequest, v1.DeleteVMGroupResponse]
	updateVMGroup *connect.Client[v1.UpdateVMGroupRequest, v1.UpdateVMGroupResponse]
}

// CreateVMGroup calls cloudstack.management.vmgroup.v1.VmgroupService.CreateVMGroup.
func (c *vmgroupServiceClient) CreateVMGroup(ctx context.Context, req *connect.Request[v1.CreateVMGroupRequest]) (*connect.Response[v1.CreateVMGroupResponse], error) {
	return c.createVMGroup.CallUnary(ctx, req)
}

// ListVMGroups calls cloudstack.management.vmgroup.v1.VmgroupService.ListVMGroups.
func (c *vmgroupServiceClient) ListVMGroups(ctx context.Context, req *connect.Request[v1.ListVMGroupsRequest]) (*connect.Response[v1.ListVMGroupsResponse], error) {
	return c.listVMGroups.CallUnary(ctx, req)
}

// DeleteVMGroup calls cloudstack.management.vmgroup.v1.VmgroupService.DeleteVMGroup.
func (c *vmgroupServiceClient) DeleteVMGroup(ctx context.Context, req *connect.Request[v1.DeleteVMGroupRequest]) (*connect.Response[v1.DeleteVMGroupResponse], error) {
	return c.deleteVMGroup.CallUnary(ctx, req)
}

// UpdateVMGroup calls cloudstack.management.vmgroup.v1.VmgroupService.UpdateVMGroup.
func (c *vmgroupServiceClient) UpdateVMGroup(ctx context.Context, req *connect.Request[v1.UpdateVMGroupRequest]) (*connect.Response[v1.UpdateVMGroupResponse], error) {
	return c.updateVMGroup.CallUnary(ctx, req)
}

// VmgroupServiceHandler is an implementation of the cloudstack.management.vmgroup.v1.VmgroupService
// service.
type VmgroupServiceHandler interface {
	// CreateVMGroup Creates a vm group
	CreateVMGroup(context.Context, *connect.Request[v1.CreateVMGroupRequest]) (*connect.Response[v1.CreateVMGroupResponse], error)
	// ListVMGroups Lists vm groups
	ListVMGroups(context.Context, *connect.Request[v1.ListVMGroupsRequest]) (*connect.Response[v1.ListVMGroupsResponse], error)
	// DeleteVMGroup Deletes a vm group
	DeleteVMGroup(context.Context, *connect.Request[v1.DeleteVMGroupRequest]) (*connect.Response[v1.DeleteVMGroupResponse], error)
	// UpdateVMGroup Updates a vm group
	UpdateVMGroup(context.Context, *connect.Request[v1.UpdateVMGroupRequest]) (*connect.Response[v1.UpdateVMGroupResponse], error)
}

// NewVmgroupServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewVmgroupServiceHandler(svc VmgroupServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	vmgroupServiceMethods := v1.File_cloudstack_management_vmgroup_v1_vmgroup_gen_proto.Services().ByName("VmgroupService").Methods()
	vmgroupServiceCreateVMGroupHandler := connect.NewUnaryHandler(
		VmgroupServiceCreateVMGroupProcedure,
		svc.CreateVMGroup,
		connect.WithSchema(vmgroupServiceMethods.ByName("CreateVMGroup")),
		connect.WithHandlerOptions(opts...),
	)
	vmgroupServiceListVMGroupsHandler := connect.NewUnaryHandler(
		VmgroupServiceListVMGroupsProcedure,
		svc.ListVMGroups,
		connect.WithSchema(vmgroupServiceMethods.ByName("ListVMGroups")),
		connect.WithHandlerOptions(opts...),
	)
	vmgroupServiceDeleteVMGroupHandler := connect.NewUnaryHandler(
		VmgroupServiceDeleteVMGroupProcedure,
		svc.DeleteVMGroup,
		connect.WithSchema(vmgroupServiceMethods.ByName("DeleteVMGroup")),
		connect.WithHandlerOptions(opts...),
	)
	vmgroupServiceUpdateVMGroupHandler := connect.NewUnaryHandler(
		VmgroupServiceUpdateVMGroupProcedure,
		svc.UpdateVMGroup,
		connect.WithSchema(vmgroupServiceMethods.ByName("UpdateVMGroup")),
		connect.WithHandlerOptions(opts...),
	)
	return "/cloudstack.management.vmgroup.v1.VmgroupService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case VmgroupServiceCreateVMGroupProcedure:
			vmgroupServiceCreateVMGroupHandler.ServeHTTP(w, r)
		case VmgroupServiceListVMGroupsProcedure:
			vmgroupServiceListVMGroupsHandler.ServeHTTP(w, r)
		case VmgroupServiceDeleteVMGroupProcedure:
			vmgroupServiceDeleteVMGroupHandler.ServeHTTP(w, r)
		case VmgroupServiceUpdateVMGroupProcedure:
			vmgroupServiceUpdateVMGroupHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedVmgroupServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedVmgroupServiceHandler struct{}

func (UnimplementedVmgroupServiceHandler) CreateVMGroup(context.Context, *connect.Request[v1.CreateVMGroupRequest]) (*connect.Response[v1.CreateVMGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.vmgroup.v1.VmgroupService.CreateVMGroup is not implemented"))
}

func (UnimplementedVmgroupServiceHandler) ListVMGroups(context.Context, *connect.Request[v1.ListVMGroupsRequest]) (*connect.Response[v1.ListVMGroupsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.vmgroup.v1.VmgroupService.ListVMGroups is not implemented"))
}

func (UnimplementedVmgroupServiceHandler) DeleteVMGroup(context.Context, *connect.Request[v1.DeleteVMGroupRequest]) (*connect.Response[v1.DeleteVMGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.vmgroup.v1.VmgroupService.DeleteVMGroup is not implemented"))
}

func (UnimplementedVmgroupServiceHandler) UpdateVMGroup(context.Context, *connect.Request[v1.UpdateVMGroupRequest]) (*connect.Response[v1.UpdateVMGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.vmgroup.v1.VmgroupService.UpdateVMGroup is not implemented"))
}
