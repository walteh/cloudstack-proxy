// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: cloudstack/management/vmgroup/v1/vmgroup.gen.proto

package vmgroupv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VmgroupService_CreateVMGroup_FullMethodName = "/cloudstack.management.vmgroup.v1.VmgroupService/CreateVMGroup"
	VmgroupService_DeleteVMGroup_FullMethodName = "/cloudstack.management.vmgroup.v1.VmgroupService/DeleteVMGroup"
	VmgroupService_ListVMGroups_FullMethodName  = "/cloudstack.management.vmgroup.v1.VmgroupService/ListVMGroups"
	VmgroupService_UpdateVMGroup_FullMethodName = "/cloudstack.management.vmgroup.v1.VmgroupService/UpdateVMGroup"
)

// VmgroupServiceClient is the client API for VmgroupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// VmgroupService provides operations for managing Vmgroups
type VmgroupServiceClient interface {
	// CreateVMGroup Creates a vm group
	CreateVMGroup(ctx context.Context, in *CreateVMGroupRequest, opts ...grpc.CallOption) (*CreateVMGroupResponse, error)
	// DeleteVMGroup Deletes a vm group
	DeleteVMGroup(ctx context.Context, in *DeleteVMGroupRequest, opts ...grpc.CallOption) (*DeleteVMGroupResponse, error)
	// ListVMGroups Lists vm groups
	ListVMGroups(ctx context.Context, in *ListVMGroupsRequest, opts ...grpc.CallOption) (*ListVMGroupsResponse, error)
	// UpdateVMGroup Updates a vm group
	UpdateVMGroup(ctx context.Context, in *UpdateVMGroupRequest, opts ...grpc.CallOption) (*UpdateVMGroupResponse, error)
}

type vmgroupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVmgroupServiceClient(cc grpc.ClientConnInterface) VmgroupServiceClient {
	return &vmgroupServiceClient{cc}
}

func (c *vmgroupServiceClient) CreateVMGroup(ctx context.Context, in *CreateVMGroupRequest, opts ...grpc.CallOption) (*CreateVMGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateVMGroupResponse)
	err := c.cc.Invoke(ctx, VmgroupService_CreateVMGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vmgroupServiceClient) DeleteVMGroup(ctx context.Context, in *DeleteVMGroupRequest, opts ...grpc.CallOption) (*DeleteVMGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteVMGroupResponse)
	err := c.cc.Invoke(ctx, VmgroupService_DeleteVMGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vmgroupServiceClient) ListVMGroups(ctx context.Context, in *ListVMGroupsRequest, opts ...grpc.CallOption) (*ListVMGroupsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVMGroupsResponse)
	err := c.cc.Invoke(ctx, VmgroupService_ListVMGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vmgroupServiceClient) UpdateVMGroup(ctx context.Context, in *UpdateVMGroupRequest, opts ...grpc.CallOption) (*UpdateVMGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateVMGroupResponse)
	err := c.cc.Invoke(ctx, VmgroupService_UpdateVMGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VmgroupServiceServer is the server API for VmgroupService service.
// All implementations must embed UnimplementedVmgroupServiceServer
// for forward compatibility.
//
// VmgroupService provides operations for managing Vmgroups
type VmgroupServiceServer interface {
	// CreateVMGroup Creates a vm group
	CreateVMGroup(context.Context, *CreateVMGroupRequest) (*CreateVMGroupResponse, error)
	// DeleteVMGroup Deletes a vm group
	DeleteVMGroup(context.Context, *DeleteVMGroupRequest) (*DeleteVMGroupResponse, error)
	// ListVMGroups Lists vm groups
	ListVMGroups(context.Context, *ListVMGroupsRequest) (*ListVMGroupsResponse, error)
	// UpdateVMGroup Updates a vm group
	UpdateVMGroup(context.Context, *UpdateVMGroupRequest) (*UpdateVMGroupResponse, error)
	mustEmbedUnimplementedVmgroupServiceServer()
}

// UnimplementedVmgroupServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVmgroupServiceServer struct{}

func (UnimplementedVmgroupServiceServer) CreateVMGroup(context.Context, *CreateVMGroupRequest) (*CreateVMGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVMGroup not implemented")
}
func (UnimplementedVmgroupServiceServer) DeleteVMGroup(context.Context, *DeleteVMGroupRequest) (*DeleteVMGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVMGroup not implemented")
}
func (UnimplementedVmgroupServiceServer) ListVMGroups(context.Context, *ListVMGroupsRequest) (*ListVMGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVMGroups not implemented")
}
func (UnimplementedVmgroupServiceServer) UpdateVMGroup(context.Context, *UpdateVMGroupRequest) (*UpdateVMGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVMGroup not implemented")
}
func (UnimplementedVmgroupServiceServer) mustEmbedUnimplementedVmgroupServiceServer() {}
func (UnimplementedVmgroupServiceServer) testEmbeddedByValue()                        {}

// UnsafeVmgroupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VmgroupServiceServer will
// result in compilation errors.
type UnsafeVmgroupServiceServer interface {
	mustEmbedUnimplementedVmgroupServiceServer()
}

func RegisterVmgroupServiceServer(s grpc.ServiceRegistrar, srv VmgroupServiceServer) {
	// If the following call pancis, it indicates UnimplementedVmgroupServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VmgroupService_ServiceDesc, srv)
}

func _VmgroupService_CreateVMGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVMGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmgroupServiceServer).CreateVMGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VmgroupService_CreateVMGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmgroupServiceServer).CreateVMGroup(ctx, req.(*CreateVMGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VmgroupService_DeleteVMGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVMGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmgroupServiceServer).DeleteVMGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VmgroupService_DeleteVMGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmgroupServiceServer).DeleteVMGroup(ctx, req.(*DeleteVMGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VmgroupService_ListVMGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVMGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmgroupServiceServer).ListVMGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VmgroupService_ListVMGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmgroupServiceServer).ListVMGroups(ctx, req.(*ListVMGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VmgroupService_UpdateVMGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVMGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VmgroupServiceServer).UpdateVMGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VmgroupService_UpdateVMGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VmgroupServiceServer).UpdateVMGroup(ctx, req.(*UpdateVMGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VmgroupService_ServiceDesc is the grpc.ServiceDesc for VmgroupService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VmgroupService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloudstack.management.vmgroup.v1.VmgroupService",
	HandlerType: (*VmgroupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVMGroup",
			Handler:    _VmgroupService_CreateVMGroup_Handler,
		},
		{
			MethodName: "DeleteVMGroup",
			Handler:    _VmgroupService_DeleteVMGroup_Handler,
		},
		{
			MethodName: "ListVMGroups",
			Handler:    _VmgroupService_ListVMGroups_Handler,
		},
		{
			MethodName: "UpdateVMGroup",
			Handler:    _VmgroupService_UpdateVMGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloudstack/management/vmgroup/v1/vmgroup.gen.proto",
}
