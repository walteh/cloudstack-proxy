// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cloudstack/management/ca/v1/ca.gen.proto

package cav1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/walteh/cloudstack-proxy/gen/proto/golang/cloudstack/management/ca/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CaServiceName is the fully-qualified name of the CaService service.
	CaServiceName = "cloudstack.management.ca.v1.CaService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CaServiceIssueCertificateProcedure is the fully-qualified name of the CaService's
	// IssueCertificate RPC.
	CaServiceIssueCertificateProcedure = "/cloudstack.management.ca.v1.CaService/IssueCertificate"
	// CaServiceListCAProvidersProcedure is the fully-qualified name of the CaService's ListCAProviders
	// RPC.
	CaServiceListCAProvidersProcedure = "/cloudstack.management.ca.v1.CaService/ListCAProviders"
	// CaServiceListCaCertificateProcedure is the fully-qualified name of the CaService's
	// ListCaCertificate RPC.
	CaServiceListCaCertificateProcedure = "/cloudstack.management.ca.v1.CaService/ListCaCertificate"
	// CaServiceProvisionCertificateProcedure is the fully-qualified name of the CaService's
	// ProvisionCertificate RPC.
	CaServiceProvisionCertificateProcedure = "/cloudstack.management.ca.v1.CaService/ProvisionCertificate"
	// CaServiceRevokeCertificateProcedure is the fully-qualified name of the CaService's
	// RevokeCertificate RPC.
	CaServiceRevokeCertificateProcedure = "/cloudstack.management.ca.v1.CaService/RevokeCertificate"
)

// CaServiceClient is a client for the cloudstack.management.ca.v1.CaService service.
type CaServiceClient interface {
	// IssueCertificate Issues a client certificate using configured or provided CA plugin
	IssueCertificate(context.Context, *connect.Request[v1.IssueCertificateRequest]) (*connect.Response[v1.IssueCertificateResponse], error)
	// ListCAProviders Lists available certificate authority providers in CloudStack
	ListCAProviders(context.Context, *connect.Request[v1.ListCAProvidersRequest]) (*connect.Response[v1.ListCAProvidersResponse], error)
	// ListCaCertificate Lists the CA public certificate(s) as support by the configured/provided CA plugin
	ListCaCertificate(context.Context, *connect.Request[v1.ListCaCertificateRequest]) (*connect.Response[v1.ListCaCertificateResponse], error)
	// ProvisionCertificate Issues and propagates client certificate on a connected host/agent using configured CA plugin
	ProvisionCertificate(context.Context, *connect.Request[v1.ProvisionCertificateRequest]) (*connect.Response[v1.ProvisionCertificateResponse], error)
	// RevokeCertificate Revokes certificate using configured CA plugin
	RevokeCertificate(context.Context, *connect.Request[v1.RevokeCertificateRequest]) (*connect.Response[v1.RevokeCertificateResponse], error)
}

// NewCaServiceClient constructs a client for the cloudstack.management.ca.v1.CaService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCaServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CaServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	caServiceMethods := v1.File_cloudstack_management_ca_v1_ca_gen_proto.Services().ByName("CaService").Methods()
	return &caServiceClient{
		issueCertificate: connect.NewClient[v1.IssueCertificateRequest, v1.IssueCertificateResponse](
			httpClient,
			baseURL+CaServiceIssueCertificateProcedure,
			connect.WithSchema(caServiceMethods.ByName("IssueCertificate")),
			connect.WithClientOptions(opts...),
		),
		listCAProviders: connect.NewClient[v1.ListCAProvidersRequest, v1.ListCAProvidersResponse](
			httpClient,
			baseURL+CaServiceListCAProvidersProcedure,
			connect.WithSchema(caServiceMethods.ByName("ListCAProviders")),
			connect.WithClientOptions(opts...),
		),
		listCaCertificate: connect.NewClient[v1.ListCaCertificateRequest, v1.ListCaCertificateResponse](
			httpClient,
			baseURL+CaServiceListCaCertificateProcedure,
			connect.WithSchema(caServiceMethods.ByName("ListCaCertificate")),
			connect.WithClientOptions(opts...),
		),
		provisionCertificate: connect.NewClient[v1.ProvisionCertificateRequest, v1.ProvisionCertificateResponse](
			httpClient,
			baseURL+CaServiceProvisionCertificateProcedure,
			connect.WithSchema(caServiceMethods.ByName("ProvisionCertificate")),
			connect.WithClientOptions(opts...),
		),
		revokeCertificate: connect.NewClient[v1.RevokeCertificateRequest, v1.RevokeCertificateResponse](
			httpClient,
			baseURL+CaServiceRevokeCertificateProcedure,
			connect.WithSchema(caServiceMethods.ByName("RevokeCertificate")),
			connect.WithClientOptions(opts...),
		),
	}
}

// caServiceClient implements CaServiceClient.
type caServiceClient struct {
	issueCertificate     *connect.Client[v1.IssueCertificateRequest, v1.IssueCertificateResponse]
	listCAProviders      *connect.Client[v1.ListCAProvidersRequest, v1.ListCAProvidersResponse]
	listCaCertificate    *connect.Client[v1.ListCaCertificateRequest, v1.ListCaCertificateResponse]
	provisionCertificate *connect.Client[v1.ProvisionCertificateRequest, v1.ProvisionCertificateResponse]
	revokeCertificate    *connect.Client[v1.RevokeCertificateRequest, v1.RevokeCertificateResponse]
}

// IssueCertificate calls cloudstack.management.ca.v1.CaService.IssueCertificate.
func (c *caServiceClient) IssueCertificate(ctx context.Context, req *connect.Request[v1.IssueCertificateRequest]) (*connect.Response[v1.IssueCertificateResponse], error) {
	return c.issueCertificate.CallUnary(ctx, req)
}

// ListCAProviders calls cloudstack.management.ca.v1.CaService.ListCAProviders.
func (c *caServiceClient) ListCAProviders(ctx context.Context, req *connect.Request[v1.ListCAProvidersRequest]) (*connect.Response[v1.ListCAProvidersResponse], error) {
	return c.listCAProviders.CallUnary(ctx, req)
}

// ListCaCertificate calls cloudstack.management.ca.v1.CaService.ListCaCertificate.
func (c *caServiceClient) ListCaCertificate(ctx context.Context, req *connect.Request[v1.ListCaCertificateRequest]) (*connect.Response[v1.ListCaCertificateResponse], error) {
	return c.listCaCertificate.CallUnary(ctx, req)
}

// ProvisionCertificate calls cloudstack.management.ca.v1.CaService.ProvisionCertificate.
func (c *caServiceClient) ProvisionCertificate(ctx context.Context, req *connect.Request[v1.ProvisionCertificateRequest]) (*connect.Response[v1.ProvisionCertificateResponse], error) {
	return c.provisionCertificate.CallUnary(ctx, req)
}

// RevokeCertificate calls cloudstack.management.ca.v1.CaService.RevokeCertificate.
func (c *caServiceClient) RevokeCertificate(ctx context.Context, req *connect.Request[v1.RevokeCertificateRequest]) (*connect.Response[v1.RevokeCertificateResponse], error) {
	return c.revokeCertificate.CallUnary(ctx, req)
}

// CaServiceHandler is an implementation of the cloudstack.management.ca.v1.CaService service.
type CaServiceHandler interface {
	// IssueCertificate Issues a client certificate using configured or provided CA plugin
	IssueCertificate(context.Context, *connect.Request[v1.IssueCertificateRequest]) (*connect.Response[v1.IssueCertificateResponse], error)
	// ListCAProviders Lists available certificate authority providers in CloudStack
	ListCAProviders(context.Context, *connect.Request[v1.ListCAProvidersRequest]) (*connect.Response[v1.ListCAProvidersResponse], error)
	// ListCaCertificate Lists the CA public certificate(s) as support by the configured/provided CA plugin
	ListCaCertificate(context.Context, *connect.Request[v1.ListCaCertificateRequest]) (*connect.Response[v1.ListCaCertificateResponse], error)
	// ProvisionCertificate Issues and propagates client certificate on a connected host/agent using configured CA plugin
	ProvisionCertificate(context.Context, *connect.Request[v1.ProvisionCertificateRequest]) (*connect.Response[v1.ProvisionCertificateResponse], error)
	// RevokeCertificate Revokes certificate using configured CA plugin
	RevokeCertificate(context.Context, *connect.Request[v1.RevokeCertificateRequest]) (*connect.Response[v1.RevokeCertificateResponse], error)
}

// NewCaServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCaServiceHandler(svc CaServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	caServiceMethods := v1.File_cloudstack_management_ca_v1_ca_gen_proto.Services().ByName("CaService").Methods()
	caServiceIssueCertificateHandler := connect.NewUnaryHandler(
		CaServiceIssueCertificateProcedure,
		svc.IssueCertificate,
		connect.WithSchema(caServiceMethods.ByName("IssueCertificate")),
		connect.WithHandlerOptions(opts...),
	)
	caServiceListCAProvidersHandler := connect.NewUnaryHandler(
		CaServiceListCAProvidersProcedure,
		svc.ListCAProviders,
		connect.WithSchema(caServiceMethods.ByName("ListCAProviders")),
		connect.WithHandlerOptions(opts...),
	)
	caServiceListCaCertificateHandler := connect.NewUnaryHandler(
		CaServiceListCaCertificateProcedure,
		svc.ListCaCertificate,
		connect.WithSchema(caServiceMethods.ByName("ListCaCertificate")),
		connect.WithHandlerOptions(opts...),
	)
	caServiceProvisionCertificateHandler := connect.NewUnaryHandler(
		CaServiceProvisionCertificateProcedure,
		svc.ProvisionCertificate,
		connect.WithSchema(caServiceMethods.ByName("ProvisionCertificate")),
		connect.WithHandlerOptions(opts...),
	)
	caServiceRevokeCertificateHandler := connect.NewUnaryHandler(
		CaServiceRevokeCertificateProcedure,
		svc.RevokeCertificate,
		connect.WithSchema(caServiceMethods.ByName("RevokeCertificate")),
		connect.WithHandlerOptions(opts...),
	)
	return "/cloudstack.management.ca.v1.CaService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CaServiceIssueCertificateProcedure:
			caServiceIssueCertificateHandler.ServeHTTP(w, r)
		case CaServiceListCAProvidersProcedure:
			caServiceListCAProvidersHandler.ServeHTTP(w, r)
		case CaServiceListCaCertificateProcedure:
			caServiceListCaCertificateHandler.ServeHTTP(w, r)
		case CaServiceProvisionCertificateProcedure:
			caServiceProvisionCertificateHandler.ServeHTTP(w, r)
		case CaServiceRevokeCertificateProcedure:
			caServiceRevokeCertificateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCaServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCaServiceHandler struct{}

func (UnimplementedCaServiceHandler) IssueCertificate(context.Context, *connect.Request[v1.IssueCertificateRequest]) (*connect.Response[v1.IssueCertificateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.ca.v1.CaService.IssueCertificate is not implemented"))
}

func (UnimplementedCaServiceHandler) ListCAProviders(context.Context, *connect.Request[v1.ListCAProvidersRequest]) (*connect.Response[v1.ListCAProvidersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.ca.v1.CaService.ListCAProviders is not implemented"))
}

func (UnimplementedCaServiceHandler) ListCaCertificate(context.Context, *connect.Request[v1.ListCaCertificateRequest]) (*connect.Response[v1.ListCaCertificateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.ca.v1.CaService.ListCaCertificate is not implemented"))
}

func (UnimplementedCaServiceHandler) ProvisionCertificate(context.Context, *connect.Request[v1.ProvisionCertificateRequest]) (*connect.Response[v1.ProvisionCertificateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.ca.v1.CaService.ProvisionCertificate is not implemented"))
}

func (UnimplementedCaServiceHandler) RevokeCertificate(context.Context, *connect.Request[v1.RevokeCertificateRequest]) (*connect.Response[v1.RevokeCertificateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.ca.v1.CaService.RevokeCertificate is not implemented"))
}
