// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: cloudstack/management/ca/v1/ca.gen.proto

package cav1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CaService_ListCaCertificate_FullMethodName    = "/cloudstack.management.ca.v1.CaService/ListCaCertificate"
	CaService_ListCAProviders_FullMethodName      = "/cloudstack.management.ca.v1.CaService/ListCAProviders"
	CaService_ProvisionCertificate_FullMethodName = "/cloudstack.management.ca.v1.CaService/ProvisionCertificate"
	CaService_RevokeCertificate_FullMethodName    = "/cloudstack.management.ca.v1.CaService/RevokeCertificate"
	CaService_IssueCertificate_FullMethodName     = "/cloudstack.management.ca.v1.CaService/IssueCertificate"
)

// CaServiceClient is the client API for CaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// CaService provides operations for managing Cas
type CaServiceClient interface {
	// ListCaCertificate Lists the CA public certificate(s) as support by the configured/provided CA plugin
	ListCaCertificate(ctx context.Context, in *ListCaCertificateRequest, opts ...grpc.CallOption) (*ListCaCertificateResponse, error)
	// ListCAProviders Lists available certificate authority providers in CloudStack
	ListCAProviders(ctx context.Context, in *ListCAProvidersRequest, opts ...grpc.CallOption) (*ListCAProvidersResponse, error)
	// ProvisionCertificate Issues and propagates client certificate on a connected host/agent using configured CA plugin
	ProvisionCertificate(ctx context.Context, in *ProvisionCertificateRequest, opts ...grpc.CallOption) (*ProvisionCertificateResponse, error)
	// RevokeCertificate Revokes certificate using configured CA plugin
	RevokeCertificate(ctx context.Context, in *RevokeCertificateRequest, opts ...grpc.CallOption) (*RevokeCertificateResponse, error)
	// IssueCertificate Issues a client certificate using configured or provided CA plugin
	IssueCertificate(ctx context.Context, in *IssueCertificateRequest, opts ...grpc.CallOption) (*IssueCertificateResponse, error)
}

type caServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCaServiceClient(cc grpc.ClientConnInterface) CaServiceClient {
	return &caServiceClient{cc}
}

func (c *caServiceClient) ListCaCertificate(ctx context.Context, in *ListCaCertificateRequest, opts ...grpc.CallOption) (*ListCaCertificateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCaCertificateResponse)
	err := c.cc.Invoke(ctx, CaService_ListCaCertificate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *caServiceClient) ListCAProviders(ctx context.Context, in *ListCAProvidersRequest, opts ...grpc.CallOption) (*ListCAProvidersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCAProvidersResponse)
	err := c.cc.Invoke(ctx, CaService_ListCAProviders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *caServiceClient) ProvisionCertificate(ctx context.Context, in *ProvisionCertificateRequest, opts ...grpc.CallOption) (*ProvisionCertificateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProvisionCertificateResponse)
	err := c.cc.Invoke(ctx, CaService_ProvisionCertificate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *caServiceClient) RevokeCertificate(ctx context.Context, in *RevokeCertificateRequest, opts ...grpc.CallOption) (*RevokeCertificateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevokeCertificateResponse)
	err := c.cc.Invoke(ctx, CaService_RevokeCertificate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *caServiceClient) IssueCertificate(ctx context.Context, in *IssueCertificateRequest, opts ...grpc.CallOption) (*IssueCertificateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IssueCertificateResponse)
	err := c.cc.Invoke(ctx, CaService_IssueCertificate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CaServiceServer is the server API for CaService service.
// All implementations must embed UnimplementedCaServiceServer
// for forward compatibility.
//
// CaService provides operations for managing Cas
type CaServiceServer interface {
	// ListCaCertificate Lists the CA public certificate(s) as support by the configured/provided CA plugin
	ListCaCertificate(context.Context, *ListCaCertificateRequest) (*ListCaCertificateResponse, error)
	// ListCAProviders Lists available certificate authority providers in CloudStack
	ListCAProviders(context.Context, *ListCAProvidersRequest) (*ListCAProvidersResponse, error)
	// ProvisionCertificate Issues and propagates client certificate on a connected host/agent using configured CA plugin
	ProvisionCertificate(context.Context, *ProvisionCertificateRequest) (*ProvisionCertificateResponse, error)
	// RevokeCertificate Revokes certificate using configured CA plugin
	RevokeCertificate(context.Context, *RevokeCertificateRequest) (*RevokeCertificateResponse, error)
	// IssueCertificate Issues a client certificate using configured or provided CA plugin
	IssueCertificate(context.Context, *IssueCertificateRequest) (*IssueCertificateResponse, error)
	mustEmbedUnimplementedCaServiceServer()
}

// UnimplementedCaServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCaServiceServer struct{}

func (UnimplementedCaServiceServer) ListCaCertificate(context.Context, *ListCaCertificateRequest) (*ListCaCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCaCertificate not implemented")
}
func (UnimplementedCaServiceServer) ListCAProviders(context.Context, *ListCAProvidersRequest) (*ListCAProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCAProviders not implemented")
}
func (UnimplementedCaServiceServer) ProvisionCertificate(context.Context, *ProvisionCertificateRequest) (*ProvisionCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProvisionCertificate not implemented")
}
func (UnimplementedCaServiceServer) RevokeCertificate(context.Context, *RevokeCertificateRequest) (*RevokeCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeCertificate not implemented")
}
func (UnimplementedCaServiceServer) IssueCertificate(context.Context, *IssueCertificateRequest) (*IssueCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueCertificate not implemented")
}
func (UnimplementedCaServiceServer) mustEmbedUnimplementedCaServiceServer() {}
func (UnimplementedCaServiceServer) testEmbeddedByValue()                   {}

// UnsafeCaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CaServiceServer will
// result in compilation errors.
type UnsafeCaServiceServer interface {
	mustEmbedUnimplementedCaServiceServer()
}

func RegisterCaServiceServer(s grpc.ServiceRegistrar, srv CaServiceServer) {
	// If the following call pancis, it indicates UnimplementedCaServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CaService_ServiceDesc, srv)
}

func _CaService_ListCaCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCaCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaServiceServer).ListCaCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaService_ListCaCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaServiceServer).ListCaCertificate(ctx, req.(*ListCaCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaService_ListCAProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCAProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaServiceServer).ListCAProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaService_ListCAProviders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaServiceServer).ListCAProviders(ctx, req.(*ListCAProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaService_ProvisionCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProvisionCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaServiceServer).ProvisionCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaService_ProvisionCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaServiceServer).ProvisionCertificate(ctx, req.(*ProvisionCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaService_RevokeCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaServiceServer).RevokeCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaService_RevokeCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaServiceServer).RevokeCertificate(ctx, req.(*RevokeCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaService_IssueCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaServiceServer).IssueCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaService_IssueCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaServiceServer).IssueCertificate(ctx, req.(*IssueCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CaService_ServiceDesc is the grpc.ServiceDesc for CaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloudstack.management.ca.v1.CaService",
	HandlerType: (*CaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCaCertificate",
			Handler:    _CaService_ListCaCertificate_Handler,
		},
		{
			MethodName: "ListCAProviders",
			Handler:    _CaService_ListCAProviders_Handler,
		},
		{
			MethodName: "ProvisionCertificate",
			Handler:    _CaService_ProvisionCertificate_Handler,
		},
		{
			MethodName: "RevokeCertificate",
			Handler:    _CaService_RevokeCertificate_Handler,
		},
		{
			MethodName: "IssueCertificate",
			Handler:    _CaService_IssueCertificate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloudstack/management/ca/v1/ca.gen.proto",
}
