// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cloudstack/management/acl/project/v1/project.gen.proto

package projectv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/walteh/cloudstack-proxy/gen/proto/golang/cloudstack/management/acl/project/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ProjectServiceName is the fully-qualified name of the ProjectService service.
	ProjectServiceName = "cloudstack.management.acl.project.v1.ProjectService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ProjectServiceCreateProjectRoleProcedure is the fully-qualified name of the ProjectService's
	// CreateProjectRole RPC.
	ProjectServiceCreateProjectRoleProcedure = "/cloudstack.management.acl.project.v1.ProjectService/CreateProjectRole"
	// ProjectServiceCreateProjectRolePermissionProcedure is the fully-qualified name of the
	// ProjectService's CreateProjectRolePermission RPC.
	ProjectServiceCreateProjectRolePermissionProcedure = "/cloudstack.management.acl.project.v1.ProjectService/CreateProjectRolePermission"
	// ProjectServiceDeleteProjectRoleProcedure is the fully-qualified name of the ProjectService's
	// DeleteProjectRole RPC.
	ProjectServiceDeleteProjectRoleProcedure = "/cloudstack.management.acl.project.v1.ProjectService/DeleteProjectRole"
	// ProjectServiceDeleteProjectRolePermissionProcedure is the fully-qualified name of the
	// ProjectService's DeleteProjectRolePermission RPC.
	ProjectServiceDeleteProjectRolePermissionProcedure = "/cloudstack.management.acl.project.v1.ProjectService/DeleteProjectRolePermission"
	// ProjectServiceListProjectRolePermissionsProcedure is the fully-qualified name of the
	// ProjectService's ListProjectRolePermissions RPC.
	ProjectServiceListProjectRolePermissionsProcedure = "/cloudstack.management.acl.project.v1.ProjectService/ListProjectRolePermissions"
	// ProjectServiceListProjectRolesProcedure is the fully-qualified name of the ProjectService's
	// ListProjectRoles RPC.
	ProjectServiceListProjectRolesProcedure = "/cloudstack.management.acl.project.v1.ProjectService/ListProjectRoles"
	// ProjectServiceUpdateProjectRoleProcedure is the fully-qualified name of the ProjectService's
	// UpdateProjectRole RPC.
	ProjectServiceUpdateProjectRoleProcedure = "/cloudstack.management.acl.project.v1.ProjectService/UpdateProjectRole"
	// ProjectServiceUpdateProjectRolePermissionProcedure is the fully-qualified name of the
	// ProjectService's UpdateProjectRolePermission RPC.
	ProjectServiceUpdateProjectRolePermissionProcedure = "/cloudstack.management.acl.project.v1.ProjectService/UpdateProjectRolePermission"
)

// ProjectServiceClient is a client for the cloudstack.management.acl.project.v1.ProjectService
// service.
type ProjectServiceClient interface {
	// CreateProjectRole Creates a Project role
	CreateProjectRole(context.Context, *connect.Request[v1.CreateProjectRoleRequest]) (*connect.Response[v1.CreateProjectRoleResponse], error)
	// CreateProjectRolePermission Adds API permissions to a project role
	CreateProjectRolePermission(context.Context, *connect.Request[v1.CreateProjectRolePermissionRequest]) (*connect.Response[v1.CreateProjectRolePermissionResponse], error)
	// DeleteProjectRole Delete Project roles in CloudStack
	DeleteProjectRole(context.Context, *connect.Request[v1.DeleteProjectRoleRequest]) (*connect.Response[v1.DeleteProjectRoleResponse], error)
	// DeleteProjectRolePermission Deletes a project role permission in the project
	DeleteProjectRolePermission(context.Context, *connect.Request[v1.DeleteProjectRolePermissionRequest]) (*connect.Response[v1.DeleteProjectRolePermissionResponse], error)
	// ListProjectRolePermissions Lists a project's project role permissions
	ListProjectRolePermissions(context.Context, *connect.Request[v1.ListProjectRolePermissionsRequest]) (*connect.Response[v1.ListProjectRolePermissionsResponse], error)
	// ListProjectRoles Lists Project roles in CloudStack
	ListProjectRoles(context.Context, *connect.Request[v1.ListProjectRolesRequest]) (*connect.Response[v1.ListProjectRolesResponse], error)
	// UpdateProjectRole Creates a Project role
	UpdateProjectRole(context.Context, *connect.Request[v1.UpdateProjectRoleRequest]) (*connect.Response[v1.UpdateProjectRoleResponse], error)
	// UpdateProjectRolePermission Updates a project role permission and/or order
	UpdateProjectRolePermission(context.Context, *connect.Request[v1.UpdateProjectRolePermissionRequest]) (*connect.Response[v1.UpdateProjectRolePermissionResponse], error)
}

// NewProjectServiceClient constructs a client for the
// cloudstack.management.acl.project.v1.ProjectService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProjectServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ProjectServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	projectServiceMethods := v1.File_cloudstack_management_acl_project_v1_project_gen_proto.Services().ByName("ProjectService").Methods()
	return &projectServiceClient{
		createProjectRole: connect.NewClient[v1.CreateProjectRoleRequest, v1.CreateProjectRoleResponse](
			httpClient,
			baseURL+ProjectServiceCreateProjectRoleProcedure,
			connect.WithSchema(projectServiceMethods.ByName("CreateProjectRole")),
			connect.WithClientOptions(opts...),
		),
		createProjectRolePermission: connect.NewClient[v1.CreateProjectRolePermissionRequest, v1.CreateProjectRolePermissionResponse](
			httpClient,
			baseURL+ProjectServiceCreateProjectRolePermissionProcedure,
			connect.WithSchema(projectServiceMethods.ByName("CreateProjectRolePermission")),
			connect.WithClientOptions(opts...),
		),
		deleteProjectRole: connect.NewClient[v1.DeleteProjectRoleRequest, v1.DeleteProjectRoleResponse](
			httpClient,
			baseURL+ProjectServiceDeleteProjectRoleProcedure,
			connect.WithSchema(projectServiceMethods.ByName("DeleteProjectRole")),
			connect.WithClientOptions(opts...),
		),
		deleteProjectRolePermission: connect.NewClient[v1.DeleteProjectRolePermissionRequest, v1.DeleteProjectRolePermissionResponse](
			httpClient,
			baseURL+ProjectServiceDeleteProjectRolePermissionProcedure,
			connect.WithSchema(projectServiceMethods.ByName("DeleteProjectRolePermission")),
			connect.WithClientOptions(opts...),
		),
		listProjectRolePermissions: connect.NewClient[v1.ListProjectRolePermissionsRequest, v1.ListProjectRolePermissionsResponse](
			httpClient,
			baseURL+ProjectServiceListProjectRolePermissionsProcedure,
			connect.WithSchema(projectServiceMethods.ByName("ListProjectRolePermissions")),
			connect.WithClientOptions(opts...),
		),
		listProjectRoles: connect.NewClient[v1.ListProjectRolesRequest, v1.ListProjectRolesResponse](
			httpClient,
			baseURL+ProjectServiceListProjectRolesProcedure,
			connect.WithSchema(projectServiceMethods.ByName("ListProjectRoles")),
			connect.WithClientOptions(opts...),
		),
		updateProjectRole: connect.NewClient[v1.UpdateProjectRoleRequest, v1.UpdateProjectRoleResponse](
			httpClient,
			baseURL+ProjectServiceUpdateProjectRoleProcedure,
			connect.WithSchema(projectServiceMethods.ByName("UpdateProjectRole")),
			connect.WithClientOptions(opts...),
		),
		updateProjectRolePermission: connect.NewClient[v1.UpdateProjectRolePermissionRequest, v1.UpdateProjectRolePermissionResponse](
			httpClient,
			baseURL+ProjectServiceUpdateProjectRolePermissionProcedure,
			connect.WithSchema(projectServiceMethods.ByName("UpdateProjectRolePermission")),
			connect.WithClientOptions(opts...),
		),
	}
}

// projectServiceClient implements ProjectServiceClient.
type projectServiceClient struct {
	createProjectRole           *connect.Client[v1.CreateProjectRoleRequest, v1.CreateProjectRoleResponse]
	createProjectRolePermission *connect.Client[v1.CreateProjectRolePermissionRequest, v1.CreateProjectRolePermissionResponse]
	deleteProjectRole           *connect.Client[v1.DeleteProjectRoleRequest, v1.DeleteProjectRoleResponse]
	deleteProjectRolePermission *connect.Client[v1.DeleteProjectRolePermissionRequest, v1.DeleteProjectRolePermissionResponse]
	listProjectRolePermissions  *connect.Client[v1.ListProjectRolePermissionsRequest, v1.ListProjectRolePermissionsResponse]
	listProjectRoles            *connect.Client[v1.ListProjectRolesRequest, v1.ListProjectRolesResponse]
	updateProjectRole           *connect.Client[v1.UpdateProjectRoleRequest, v1.UpdateProjectRoleResponse]
	updateProjectRolePermission *connect.Client[v1.UpdateProjectRolePermissionRequest, v1.UpdateProjectRolePermissionResponse]
}

// CreateProjectRole calls cloudstack.management.acl.project.v1.ProjectService.CreateProjectRole.
func (c *projectServiceClient) CreateProjectRole(ctx context.Context, req *connect.Request[v1.CreateProjectRoleRequest]) (*connect.Response[v1.CreateProjectRoleResponse], error) {
	return c.createProjectRole.CallUnary(ctx, req)
}

// CreateProjectRolePermission calls
// cloudstack.management.acl.project.v1.ProjectService.CreateProjectRolePermission.
func (c *projectServiceClient) CreateProjectRolePermission(ctx context.Context, req *connect.Request[v1.CreateProjectRolePermissionRequest]) (*connect.Response[v1.CreateProjectRolePermissionResponse], error) {
	return c.createProjectRolePermission.CallUnary(ctx, req)
}

// DeleteProjectRole calls cloudstack.management.acl.project.v1.ProjectService.DeleteProjectRole.
func (c *projectServiceClient) DeleteProjectRole(ctx context.Context, req *connect.Request[v1.DeleteProjectRoleRequest]) (*connect.Response[v1.DeleteProjectRoleResponse], error) {
	return c.deleteProjectRole.CallUnary(ctx, req)
}

// DeleteProjectRolePermission calls
// cloudstack.management.acl.project.v1.ProjectService.DeleteProjectRolePermission.
func (c *projectServiceClient) DeleteProjectRolePermission(ctx context.Context, req *connect.Request[v1.DeleteProjectRolePermissionRequest]) (*connect.Response[v1.DeleteProjectRolePermissionResponse], error) {
	return c.deleteProjectRolePermission.CallUnary(ctx, req)
}

// ListProjectRolePermissions calls
// cloudstack.management.acl.project.v1.ProjectService.ListProjectRolePermissions.
func (c *projectServiceClient) ListProjectRolePermissions(ctx context.Context, req *connect.Request[v1.ListProjectRolePermissionsRequest]) (*connect.Response[v1.ListProjectRolePermissionsResponse], error) {
	return c.listProjectRolePermissions.CallUnary(ctx, req)
}

// ListProjectRoles calls cloudstack.management.acl.project.v1.ProjectService.ListProjectRoles.
func (c *projectServiceClient) ListProjectRoles(ctx context.Context, req *connect.Request[v1.ListProjectRolesRequest]) (*connect.Response[v1.ListProjectRolesResponse], error) {
	return c.listProjectRoles.CallUnary(ctx, req)
}

// UpdateProjectRole calls cloudstack.management.acl.project.v1.ProjectService.UpdateProjectRole.
func (c *projectServiceClient) UpdateProjectRole(ctx context.Context, req *connect.Request[v1.UpdateProjectRoleRequest]) (*connect.Response[v1.UpdateProjectRoleResponse], error) {
	return c.updateProjectRole.CallUnary(ctx, req)
}

// UpdateProjectRolePermission calls
// cloudstack.management.acl.project.v1.ProjectService.UpdateProjectRolePermission.
func (c *projectServiceClient) UpdateProjectRolePermission(ctx context.Context, req *connect.Request[v1.UpdateProjectRolePermissionRequest]) (*connect.Response[v1.UpdateProjectRolePermissionResponse], error) {
	return c.updateProjectRolePermission.CallUnary(ctx, req)
}

// ProjectServiceHandler is an implementation of the
// cloudstack.management.acl.project.v1.ProjectService service.
type ProjectServiceHandler interface {
	// CreateProjectRole Creates a Project role
	CreateProjectRole(context.Context, *connect.Request[v1.CreateProjectRoleRequest]) (*connect.Response[v1.CreateProjectRoleResponse], error)
	// CreateProjectRolePermission Adds API permissions to a project role
	CreateProjectRolePermission(context.Context, *connect.Request[v1.CreateProjectRolePermissionRequest]) (*connect.Response[v1.CreateProjectRolePermissionResponse], error)
	// DeleteProjectRole Delete Project roles in CloudStack
	DeleteProjectRole(context.Context, *connect.Request[v1.DeleteProjectRoleRequest]) (*connect.Response[v1.DeleteProjectRoleResponse], error)
	// DeleteProjectRolePermission Deletes a project role permission in the project
	DeleteProjectRolePermission(context.Context, *connect.Request[v1.DeleteProjectRolePermissionRequest]) (*connect.Response[v1.DeleteProjectRolePermissionResponse], error)
	// ListProjectRolePermissions Lists a project's project role permissions
	ListProjectRolePermissions(context.Context, *connect.Request[v1.ListProjectRolePermissionsRequest]) (*connect.Response[v1.ListProjectRolePermissionsResponse], error)
	// ListProjectRoles Lists Project roles in CloudStack
	ListProjectRoles(context.Context, *connect.Request[v1.ListProjectRolesRequest]) (*connect.Response[v1.ListProjectRolesResponse], error)
	// UpdateProjectRole Creates a Project role
	UpdateProjectRole(context.Context, *connect.Request[v1.UpdateProjectRoleRequest]) (*connect.Response[v1.UpdateProjectRoleResponse], error)
	// UpdateProjectRolePermission Updates a project role permission and/or order
	UpdateProjectRolePermission(context.Context, *connect.Request[v1.UpdateProjectRolePermissionRequest]) (*connect.Response[v1.UpdateProjectRolePermissionResponse], error)
}

// NewProjectServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProjectServiceHandler(svc ProjectServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	projectServiceMethods := v1.File_cloudstack_management_acl_project_v1_project_gen_proto.Services().ByName("ProjectService").Methods()
	projectServiceCreateProjectRoleHandler := connect.NewUnaryHandler(
		ProjectServiceCreateProjectRoleProcedure,
		svc.CreateProjectRole,
		connect.WithSchema(projectServiceMethods.ByName("CreateProjectRole")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceCreateProjectRolePermissionHandler := connect.NewUnaryHandler(
		ProjectServiceCreateProjectRolePermissionProcedure,
		svc.CreateProjectRolePermission,
		connect.WithSchema(projectServiceMethods.ByName("CreateProjectRolePermission")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceDeleteProjectRoleHandler := connect.NewUnaryHandler(
		ProjectServiceDeleteProjectRoleProcedure,
		svc.DeleteProjectRole,
		connect.WithSchema(projectServiceMethods.ByName("DeleteProjectRole")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceDeleteProjectRolePermissionHandler := connect.NewUnaryHandler(
		ProjectServiceDeleteProjectRolePermissionProcedure,
		svc.DeleteProjectRolePermission,
		connect.WithSchema(projectServiceMethods.ByName("DeleteProjectRolePermission")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceListProjectRolePermissionsHandler := connect.NewUnaryHandler(
		ProjectServiceListProjectRolePermissionsProcedure,
		svc.ListProjectRolePermissions,
		connect.WithSchema(projectServiceMethods.ByName("ListProjectRolePermissions")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceListProjectRolesHandler := connect.NewUnaryHandler(
		ProjectServiceListProjectRolesProcedure,
		svc.ListProjectRoles,
		connect.WithSchema(projectServiceMethods.ByName("ListProjectRoles")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceUpdateProjectRoleHandler := connect.NewUnaryHandler(
		ProjectServiceUpdateProjectRoleProcedure,
		svc.UpdateProjectRole,
		connect.WithSchema(projectServiceMethods.ByName("UpdateProjectRole")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceUpdateProjectRolePermissionHandler := connect.NewUnaryHandler(
		ProjectServiceUpdateProjectRolePermissionProcedure,
		svc.UpdateProjectRolePermission,
		connect.WithSchema(projectServiceMethods.ByName("UpdateProjectRolePermission")),
		connect.WithHandlerOptions(opts...),
	)
	return "/cloudstack.management.acl.project.v1.ProjectService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ProjectServiceCreateProjectRoleProcedure:
			projectServiceCreateProjectRoleHandler.ServeHTTP(w, r)
		case ProjectServiceCreateProjectRolePermissionProcedure:
			projectServiceCreateProjectRolePermissionHandler.ServeHTTP(w, r)
		case ProjectServiceDeleteProjectRoleProcedure:
			projectServiceDeleteProjectRoleHandler.ServeHTTP(w, r)
		case ProjectServiceDeleteProjectRolePermissionProcedure:
			projectServiceDeleteProjectRolePermissionHandler.ServeHTTP(w, r)
		case ProjectServiceListProjectRolePermissionsProcedure:
			projectServiceListProjectRolePermissionsHandler.ServeHTTP(w, r)
		case ProjectServiceListProjectRolesProcedure:
			projectServiceListProjectRolesHandler.ServeHTTP(w, r)
		case ProjectServiceUpdateProjectRoleProcedure:
			projectServiceUpdateProjectRoleHandler.ServeHTTP(w, r)
		case ProjectServiceUpdateProjectRolePermissionProcedure:
			projectServiceUpdateProjectRolePermissionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedProjectServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProjectServiceHandler struct{}

func (UnimplementedProjectServiceHandler) CreateProjectRole(context.Context, *connect.Request[v1.CreateProjectRoleRequest]) (*connect.Response[v1.CreateProjectRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.acl.project.v1.ProjectService.CreateProjectRole is not implemented"))
}

func (UnimplementedProjectServiceHandler) CreateProjectRolePermission(context.Context, *connect.Request[v1.CreateProjectRolePermissionRequest]) (*connect.Response[v1.CreateProjectRolePermissionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.acl.project.v1.ProjectService.CreateProjectRolePermission is not implemented"))
}

func (UnimplementedProjectServiceHandler) DeleteProjectRole(context.Context, *connect.Request[v1.DeleteProjectRoleRequest]) (*connect.Response[v1.DeleteProjectRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.acl.project.v1.ProjectService.DeleteProjectRole is not implemented"))
}

func (UnimplementedProjectServiceHandler) DeleteProjectRolePermission(context.Context, *connect.Request[v1.DeleteProjectRolePermissionRequest]) (*connect.Response[v1.DeleteProjectRolePermissionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.acl.project.v1.ProjectService.DeleteProjectRolePermission is not implemented"))
}

func (UnimplementedProjectServiceHandler) ListProjectRolePermissions(context.Context, *connect.Request[v1.ListProjectRolePermissionsRequest]) (*connect.Response[v1.ListProjectRolePermissionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.acl.project.v1.ProjectService.ListProjectRolePermissions is not implemented"))
}

func (UnimplementedProjectServiceHandler) ListProjectRoles(context.Context, *connect.Request[v1.ListProjectRolesRequest]) (*connect.Response[v1.ListProjectRolesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.acl.project.v1.ProjectService.ListProjectRoles is not implemented"))
}

func (UnimplementedProjectServiceHandler) UpdateProjectRole(context.Context, *connect.Request[v1.UpdateProjectRoleRequest]) (*connect.Response[v1.UpdateProjectRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.acl.project.v1.ProjectService.UpdateProjectRole is not implemented"))
}

func (UnimplementedProjectServiceHandler) UpdateProjectRolePermission(context.Context, *connect.Request[v1.UpdateProjectRolePermissionRequest]) (*connect.Response[v1.UpdateProjectRolePermissionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.acl.project.v1.ProjectService.UpdateProjectRolePermission is not implemented"))
}
