// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: cloudstack/management/acl/v1/acl.gen.proto

package aclv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AclService_CreateRole_FullMethodName           = "/cloudstack.management.acl.v1.AclService/CreateRole"
	AclService_CreateRolePermission_FullMethodName = "/cloudstack.management.acl.v1.AclService/CreateRolePermission"
	AclService_DeleteRole_FullMethodName           = "/cloudstack.management.acl.v1.AclService/DeleteRole"
	AclService_DeleteRolePermission_FullMethodName = "/cloudstack.management.acl.v1.AclService/DeleteRolePermission"
	AclService_DisableRole_FullMethodName          = "/cloudstack.management.acl.v1.AclService/DisableRole"
	AclService_EnableRole_FullMethodName           = "/cloudstack.management.acl.v1.AclService/EnableRole"
	AclService_ImportRole_FullMethodName           = "/cloudstack.management.acl.v1.AclService/ImportRole"
	AclService_ListRolePermissions_FullMethodName  = "/cloudstack.management.acl.v1.AclService/ListRolePermissions"
	AclService_ListRoles_FullMethodName            = "/cloudstack.management.acl.v1.AclService/ListRoles"
	AclService_UpdateRole_FullMethodName           = "/cloudstack.management.acl.v1.AclService/UpdateRole"
	AclService_UpdateRolePermission_FullMethodName = "/cloudstack.management.acl.v1.AclService/UpdateRolePermission"
)

// AclServiceClient is the client API for AclService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// AclService provides operations for managing Acls
type AclServiceClient interface {
	// CreateRole Creates a role
	CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*CreateRoleResponse, error)
	// CreateRolePermission Adds an API permission to a role
	CreateRolePermission(ctx context.Context, in *CreateRolePermissionRequest, opts ...grpc.CallOption) (*CreateRolePermissionResponse, error)
	// DeleteRole Deletes a role
	DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*DeleteRoleResponse, error)
	// DeleteRolePermission Deletes a role permission
	DeleteRolePermission(ctx context.Context, in *DeleteRolePermissionRequest, opts ...grpc.CallOption) (*DeleteRolePermissionResponse, error)
	// DisableRole Disables a role
	DisableRole(ctx context.Context, in *DisableRoleRequest, opts ...grpc.CallOption) (*DisableRoleResponse, error)
	// EnableRole Enables a role
	EnableRole(ctx context.Context, in *EnableRoleRequest, opts ...grpc.CallOption) (*EnableRoleResponse, error)
	// ImportRole Imports a role based on provided map of rule permissions
	ImportRole(ctx context.Context, in *ImportRoleRequest, opts ...grpc.CallOption) (*ImportRoleResponse, error)
	// ListRolePermissions Lists role permissions
	ListRolePermissions(ctx context.Context, in *ListRolePermissionsRequest, opts ...grpc.CallOption) (*ListRolePermissionsResponse, error)
	// ListRoles Lists dynamic roles in CloudStack
	ListRoles(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*ListRolesResponse, error)
	// UpdateRole Updates a role
	UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*UpdateRoleResponse, error)
	// UpdateRolePermission Updates a role permission order
	UpdateRolePermission(ctx context.Context, in *UpdateRolePermissionRequest, opts ...grpc.CallOption) (*UpdateRolePermissionResponse, error)
}

type aclServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAclServiceClient(cc grpc.ClientConnInterface) AclServiceClient {
	return &aclServiceClient{cc}
}

func (c *aclServiceClient) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*CreateRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRoleResponse)
	err := c.cc.Invoke(ctx, AclService_CreateRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclServiceClient) CreateRolePermission(ctx context.Context, in *CreateRolePermissionRequest, opts ...grpc.CallOption) (*CreateRolePermissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRolePermissionResponse)
	err := c.cc.Invoke(ctx, AclService_CreateRolePermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclServiceClient) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*DeleteRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRoleResponse)
	err := c.cc.Invoke(ctx, AclService_DeleteRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclServiceClient) DeleteRolePermission(ctx context.Context, in *DeleteRolePermissionRequest, opts ...grpc.CallOption) (*DeleteRolePermissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRolePermissionResponse)
	err := c.cc.Invoke(ctx, AclService_DeleteRolePermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclServiceClient) DisableRole(ctx context.Context, in *DisableRoleRequest, opts ...grpc.CallOption) (*DisableRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisableRoleResponse)
	err := c.cc.Invoke(ctx, AclService_DisableRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclServiceClient) EnableRole(ctx context.Context, in *EnableRoleRequest, opts ...grpc.CallOption) (*EnableRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnableRoleResponse)
	err := c.cc.Invoke(ctx, AclService_EnableRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclServiceClient) ImportRole(ctx context.Context, in *ImportRoleRequest, opts ...grpc.CallOption) (*ImportRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImportRoleResponse)
	err := c.cc.Invoke(ctx, AclService_ImportRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclServiceClient) ListRolePermissions(ctx context.Context, in *ListRolePermissionsRequest, opts ...grpc.CallOption) (*ListRolePermissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRolePermissionsResponse)
	err := c.cc.Invoke(ctx, AclService_ListRolePermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclServiceClient) ListRoles(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*ListRolesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRolesResponse)
	err := c.cc.Invoke(ctx, AclService_ListRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclServiceClient) UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*UpdateRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRoleResponse)
	err := c.cc.Invoke(ctx, AclService_UpdateRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclServiceClient) UpdateRolePermission(ctx context.Context, in *UpdateRolePermissionRequest, opts ...grpc.CallOption) (*UpdateRolePermissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRolePermissionResponse)
	err := c.cc.Invoke(ctx, AclService_UpdateRolePermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AclServiceServer is the server API for AclService service.
// All implementations must embed UnimplementedAclServiceServer
// for forward compatibility.
//
// AclService provides operations for managing Acls
type AclServiceServer interface {
	// CreateRole Creates a role
	CreateRole(context.Context, *CreateRoleRequest) (*CreateRoleResponse, error)
	// CreateRolePermission Adds an API permission to a role
	CreateRolePermission(context.Context, *CreateRolePermissionRequest) (*CreateRolePermissionResponse, error)
	// DeleteRole Deletes a role
	DeleteRole(context.Context, *DeleteRoleRequest) (*DeleteRoleResponse, error)
	// DeleteRolePermission Deletes a role permission
	DeleteRolePermission(context.Context, *DeleteRolePermissionRequest) (*DeleteRolePermissionResponse, error)
	// DisableRole Disables a role
	DisableRole(context.Context, *DisableRoleRequest) (*DisableRoleResponse, error)
	// EnableRole Enables a role
	EnableRole(context.Context, *EnableRoleRequest) (*EnableRoleResponse, error)
	// ImportRole Imports a role based on provided map of rule permissions
	ImportRole(context.Context, *ImportRoleRequest) (*ImportRoleResponse, error)
	// ListRolePermissions Lists role permissions
	ListRolePermissions(context.Context, *ListRolePermissionsRequest) (*ListRolePermissionsResponse, error)
	// ListRoles Lists dynamic roles in CloudStack
	ListRoles(context.Context, *ListRolesRequest) (*ListRolesResponse, error)
	// UpdateRole Updates a role
	UpdateRole(context.Context, *UpdateRoleRequest) (*UpdateRoleResponse, error)
	// UpdateRolePermission Updates a role permission order
	UpdateRolePermission(context.Context, *UpdateRolePermissionRequest) (*UpdateRolePermissionResponse, error)
	mustEmbedUnimplementedAclServiceServer()
}

// UnimplementedAclServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAclServiceServer struct{}

func (UnimplementedAclServiceServer) CreateRole(context.Context, *CreateRoleRequest) (*CreateRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedAclServiceServer) CreateRolePermission(context.Context, *CreateRolePermissionRequest) (*CreateRolePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRolePermission not implemented")
}
func (UnimplementedAclServiceServer) DeleteRole(context.Context, *DeleteRoleRequest) (*DeleteRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedAclServiceServer) DeleteRolePermission(context.Context, *DeleteRolePermissionRequest) (*DeleteRolePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRolePermission not implemented")
}
func (UnimplementedAclServiceServer) DisableRole(context.Context, *DisableRoleRequest) (*DisableRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableRole not implemented")
}
func (UnimplementedAclServiceServer) EnableRole(context.Context, *EnableRoleRequest) (*EnableRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableRole not implemented")
}
func (UnimplementedAclServiceServer) ImportRole(context.Context, *ImportRoleRequest) (*ImportRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportRole not implemented")
}
func (UnimplementedAclServiceServer) ListRolePermissions(context.Context, *ListRolePermissionsRequest) (*ListRolePermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRolePermissions not implemented")
}
func (UnimplementedAclServiceServer) ListRoles(context.Context, *ListRolesRequest) (*ListRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoles not implemented")
}
func (UnimplementedAclServiceServer) UpdateRole(context.Context, *UpdateRoleRequest) (*UpdateRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedAclServiceServer) UpdateRolePermission(context.Context, *UpdateRolePermissionRequest) (*UpdateRolePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRolePermission not implemented")
}
func (UnimplementedAclServiceServer) mustEmbedUnimplementedAclServiceServer() {}
func (UnimplementedAclServiceServer) testEmbeddedByValue()                    {}

// UnsafeAclServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AclServiceServer will
// result in compilation errors.
type UnsafeAclServiceServer interface {
	mustEmbedUnimplementedAclServiceServer()
}

func RegisterAclServiceServer(s grpc.ServiceRegistrar, srv AclServiceServer) {
	// If the following call pancis, it indicates UnimplementedAclServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AclService_ServiceDesc, srv)
}

func _AclService_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServiceServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AclService_CreateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServiceServer).CreateRole(ctx, req.(*CreateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AclService_CreateRolePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRolePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServiceServer).CreateRolePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AclService_CreateRolePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServiceServer).CreateRolePermission(ctx, req.(*CreateRolePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AclService_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServiceServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AclService_DeleteRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServiceServer).DeleteRole(ctx, req.(*DeleteRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AclService_DeleteRolePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRolePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServiceServer).DeleteRolePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AclService_DeleteRolePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServiceServer).DeleteRolePermission(ctx, req.(*DeleteRolePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AclService_DisableRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServiceServer).DisableRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AclService_DisableRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServiceServer).DisableRole(ctx, req.(*DisableRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AclService_EnableRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServiceServer).EnableRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AclService_EnableRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServiceServer).EnableRole(ctx, req.(*EnableRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AclService_ImportRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServiceServer).ImportRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AclService_ImportRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServiceServer).ImportRole(ctx, req.(*ImportRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AclService_ListRolePermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRolePermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServiceServer).ListRolePermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AclService_ListRolePermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServiceServer).ListRolePermissions(ctx, req.(*ListRolePermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AclService_ListRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServiceServer).ListRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AclService_ListRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServiceServer).ListRoles(ctx, req.(*ListRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AclService_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServiceServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AclService_UpdateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServiceServer).UpdateRole(ctx, req.(*UpdateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AclService_UpdateRolePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRolePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServiceServer).UpdateRolePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AclService_UpdateRolePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServiceServer).UpdateRolePermission(ctx, req.(*UpdateRolePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AclService_ServiceDesc is the grpc.ServiceDesc for AclService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AclService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloudstack.management.acl.v1.AclService",
	HandlerType: (*AclServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRole",
			Handler:    _AclService_CreateRole_Handler,
		},
		{
			MethodName: "CreateRolePermission",
			Handler:    _AclService_CreateRolePermission_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _AclService_DeleteRole_Handler,
		},
		{
			MethodName: "DeleteRolePermission",
			Handler:    _AclService_DeleteRolePermission_Handler,
		},
		{
			MethodName: "DisableRole",
			Handler:    _AclService_DisableRole_Handler,
		},
		{
			MethodName: "EnableRole",
			Handler:    _AclService_EnableRole_Handler,
		},
		{
			MethodName: "ImportRole",
			Handler:    _AclService_ImportRole_Handler,
		},
		{
			MethodName: "ListRolePermissions",
			Handler:    _AclService_ListRolePermissions_Handler,
		},
		{
			MethodName: "ListRoles",
			Handler:    _AclService_ListRoles_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _AclService_UpdateRole_Handler,
		},
		{
			MethodName: "UpdateRolePermission",
			Handler:    _AclService_UpdateRolePermission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloudstack/management/acl/v1/acl.gen.proto",
}
