// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cloudstack/management/acl/v1/acl.gen.proto

package aclv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/walteh/cloudstack-proxy/gen/proto/golang/cloudstack/management/acl/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AclServiceName is the fully-qualified name of the AclService service.
	AclServiceName = "cloudstack.management.acl.v1.AclService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AclServiceListRolePermissionsProcedure is the fully-qualified name of the AclService's
	// ListRolePermissions RPC.
	AclServiceListRolePermissionsProcedure = "/cloudstack.management.acl.v1.AclService/ListRolePermissions"
	// AclServiceEnableRoleProcedure is the fully-qualified name of the AclService's EnableRole RPC.
	AclServiceEnableRoleProcedure = "/cloudstack.management.acl.v1.AclService/EnableRole"
	// AclServiceDeleteRoleProcedure is the fully-qualified name of the AclService's DeleteRole RPC.
	AclServiceDeleteRoleProcedure = "/cloudstack.management.acl.v1.AclService/DeleteRole"
	// AclServiceUpdateRolePermissionProcedure is the fully-qualified name of the AclService's
	// UpdateRolePermission RPC.
	AclServiceUpdateRolePermissionProcedure = "/cloudstack.management.acl.v1.AclService/UpdateRolePermission"
	// AclServiceDeleteRolePermissionProcedure is the fully-qualified name of the AclService's
	// DeleteRolePermission RPC.
	AclServiceDeleteRolePermissionProcedure = "/cloudstack.management.acl.v1.AclService/DeleteRolePermission"
	// AclServiceImportRoleProcedure is the fully-qualified name of the AclService's ImportRole RPC.
	AclServiceImportRoleProcedure = "/cloudstack.management.acl.v1.AclService/ImportRole"
	// AclServiceUpdateRoleProcedure is the fully-qualified name of the AclService's UpdateRole RPC.
	AclServiceUpdateRoleProcedure = "/cloudstack.management.acl.v1.AclService/UpdateRole"
	// AclServiceCreateRolePermissionProcedure is the fully-qualified name of the AclService's
	// CreateRolePermission RPC.
	AclServiceCreateRolePermissionProcedure = "/cloudstack.management.acl.v1.AclService/CreateRolePermission"
	// AclServiceCreateRoleProcedure is the fully-qualified name of the AclService's CreateRole RPC.
	AclServiceCreateRoleProcedure = "/cloudstack.management.acl.v1.AclService/CreateRole"
	// AclServiceListRolesProcedure is the fully-qualified name of the AclService's ListRoles RPC.
	AclServiceListRolesProcedure = "/cloudstack.management.acl.v1.AclService/ListRoles"
	// AclServiceDisableRoleProcedure is the fully-qualified name of the AclService's DisableRole RPC.
	AclServiceDisableRoleProcedure = "/cloudstack.management.acl.v1.AclService/DisableRole"
)

// AclServiceClient is a client for the cloudstack.management.acl.v1.AclService service.
type AclServiceClient interface {
	// ListRolePermissions Lists role permissions
	ListRolePermissions(context.Context, *connect.Request[v1.ListRolePermissionsRequest]) (*connect.Response[v1.ListRolePermissionsResponse], error)
	// EnableRole Enables a role
	EnableRole(context.Context, *connect.Request[v1.EnableRoleRequest]) (*connect.Response[v1.EnableRoleResponse], error)
	// DeleteRole Deletes a role
	DeleteRole(context.Context, *connect.Request[v1.DeleteRoleRequest]) (*connect.Response[v1.DeleteRoleResponse], error)
	// UpdateRolePermission Updates a role permission order
	UpdateRolePermission(context.Context, *connect.Request[v1.UpdateRolePermissionRequest]) (*connect.Response[v1.UpdateRolePermissionResponse], error)
	// DeleteRolePermission Deletes a role permission
	DeleteRolePermission(context.Context, *connect.Request[v1.DeleteRolePermissionRequest]) (*connect.Response[v1.DeleteRolePermissionResponse], error)
	// ImportRole Imports a role based on provided map of rule permissions
	ImportRole(context.Context, *connect.Request[v1.ImportRoleRequest]) (*connect.Response[v1.ImportRoleResponse], error)
	// UpdateRole Updates a role
	UpdateRole(context.Context, *connect.Request[v1.UpdateRoleRequest]) (*connect.Response[v1.UpdateRoleResponse], error)
	// CreateRolePermission Adds an API permission to a role
	CreateRolePermission(context.Context, *connect.Request[v1.CreateRolePermissionRequest]) (*connect.Response[v1.CreateRolePermissionResponse], error)
	// CreateRole Creates a role
	CreateRole(context.Context, *connect.Request[v1.CreateRoleRequest]) (*connect.Response[v1.CreateRoleResponse], error)
	// ListRoles Lists dynamic roles in CloudStack
	ListRoles(context.Context, *connect.Request[v1.ListRolesRequest]) (*connect.Response[v1.ListRolesResponse], error)
	// DisableRole Disables a role
	DisableRole(context.Context, *connect.Request[v1.DisableRoleRequest]) (*connect.Response[v1.DisableRoleResponse], error)
}

// NewAclServiceClient constructs a client for the cloudstack.management.acl.v1.AclService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAclServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AclServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	aclServiceMethods := v1.File_cloudstack_management_acl_v1_acl_gen_proto.Services().ByName("AclService").Methods()
	return &aclServiceClient{
		listRolePermissions: connect.NewClient[v1.ListRolePermissionsRequest, v1.ListRolePermissionsResponse](
			httpClient,
			baseURL+AclServiceListRolePermissionsProcedure,
			connect.WithSchema(aclServiceMethods.ByName("ListRolePermissions")),
			connect.WithClientOptions(opts...),
		),
		enableRole: connect.NewClient[v1.EnableRoleRequest, v1.EnableRoleResponse](
			httpClient,
			baseURL+AclServiceEnableRoleProcedure,
			connect.WithSchema(aclServiceMethods.ByName("EnableRole")),
			connect.WithClientOptions(opts...),
		),
		deleteRole: connect.NewClient[v1.DeleteRoleRequest, v1.DeleteRoleResponse](
			httpClient,
			baseURL+AclServiceDeleteRoleProcedure,
			connect.WithSchema(aclServiceMethods.ByName("DeleteRole")),
			connect.WithClientOptions(opts...),
		),
		updateRolePermission: connect.NewClient[v1.UpdateRolePermissionRequest, v1.UpdateRolePermissionResponse](
			httpClient,
			baseURL+AclServiceUpdateRolePermissionProcedure,
			connect.WithSchema(aclServiceMethods.ByName("UpdateRolePermission")),
			connect.WithClientOptions(opts...),
		),
		deleteRolePermission: connect.NewClient[v1.DeleteRolePermissionRequest, v1.DeleteRolePermissionResponse](
			httpClient,
			baseURL+AclServiceDeleteRolePermissionProcedure,
			connect.WithSchema(aclServiceMethods.ByName("DeleteRolePermission")),
			connect.WithClientOptions(opts...),
		),
		importRole: connect.NewClient[v1.ImportRoleRequest, v1.ImportRoleResponse](
			httpClient,
			baseURL+AclServiceImportRoleProcedure,
			connect.WithSchema(aclServiceMethods.ByName("ImportRole")),
			connect.WithClientOptions(opts...),
		),
		updateRole: connect.NewClient[v1.UpdateRoleRequest, v1.UpdateRoleResponse](
			httpClient,
			baseURL+AclServiceUpdateRoleProcedure,
			connect.WithSchema(aclServiceMethods.ByName("UpdateRole")),
			connect.WithClientOptions(opts...),
		),
		createRolePermission: connect.NewClient[v1.CreateRolePermissionRequest, v1.CreateRolePermissionResponse](
			httpClient,
			baseURL+AclServiceCreateRolePermissionProcedure,
			connect.WithSchema(aclServiceMethods.ByName("CreateRolePermission")),
			connect.WithClientOptions(opts...),
		),
		createRole: connect.NewClient[v1.CreateRoleRequest, v1.CreateRoleResponse](
			httpClient,
			baseURL+AclServiceCreateRoleProcedure,
			connect.WithSchema(aclServiceMethods.ByName("CreateRole")),
			connect.WithClientOptions(opts...),
		),
		listRoles: connect.NewClient[v1.ListRolesRequest, v1.ListRolesResponse](
			httpClient,
			baseURL+AclServiceListRolesProcedure,
			connect.WithSchema(aclServiceMethods.ByName("ListRoles")),
			connect.WithClientOptions(opts...),
		),
		disableRole: connect.NewClient[v1.DisableRoleRequest, v1.DisableRoleResponse](
			httpClient,
			baseURL+AclServiceDisableRoleProcedure,
			connect.WithSchema(aclServiceMethods.ByName("DisableRole")),
			connect.WithClientOptions(opts...),
		),
	}
}

// aclServiceClient implements AclServiceClient.
type aclServiceClient struct {
	listRolePermissions  *connect.Client[v1.ListRolePermissionsRequest, v1.ListRolePermissionsResponse]
	enableRole           *connect.Client[v1.EnableRoleRequest, v1.EnableRoleResponse]
	deleteRole           *connect.Client[v1.DeleteRoleRequest, v1.DeleteRoleResponse]
	updateRolePermission *connect.Client[v1.UpdateRolePermissionRequest, v1.UpdateRolePermissionResponse]
	deleteRolePermission *connect.Client[v1.DeleteRolePermissionRequest, v1.DeleteRolePermissionResponse]
	importRole           *connect.Client[v1.ImportRoleRequest, v1.ImportRoleResponse]
	updateRole           *connect.Client[v1.UpdateRoleRequest, v1.UpdateRoleResponse]
	createRolePermission *connect.Client[v1.CreateRolePermissionRequest, v1.CreateRolePermissionResponse]
	createRole           *connect.Client[v1.CreateRoleRequest, v1.CreateRoleResponse]
	listRoles            *connect.Client[v1.ListRolesRequest, v1.ListRolesResponse]
	disableRole          *connect.Client[v1.DisableRoleRequest, v1.DisableRoleResponse]
}

// ListRolePermissions calls cloudstack.management.acl.v1.AclService.ListRolePermissions.
func (c *aclServiceClient) ListRolePermissions(ctx context.Context, req *connect.Request[v1.ListRolePermissionsRequest]) (*connect.Response[v1.ListRolePermissionsResponse], error) {
	return c.listRolePermissions.CallUnary(ctx, req)
}

// EnableRole calls cloudstack.management.acl.v1.AclService.EnableRole.
func (c *aclServiceClient) EnableRole(ctx context.Context, req *connect.Request[v1.EnableRoleRequest]) (*connect.Response[v1.EnableRoleResponse], error) {
	return c.enableRole.CallUnary(ctx, req)
}

// DeleteRole calls cloudstack.management.acl.v1.AclService.DeleteRole.
func (c *aclServiceClient) DeleteRole(ctx context.Context, req *connect.Request[v1.DeleteRoleRequest]) (*connect.Response[v1.DeleteRoleResponse], error) {
	return c.deleteRole.CallUnary(ctx, req)
}

// UpdateRolePermission calls cloudstack.management.acl.v1.AclService.UpdateRolePermission.
func (c *aclServiceClient) UpdateRolePermission(ctx context.Context, req *connect.Request[v1.UpdateRolePermissionRequest]) (*connect.Response[v1.UpdateRolePermissionResponse], error) {
	return c.updateRolePermission.CallUnary(ctx, req)
}

// DeleteRolePermission calls cloudstack.management.acl.v1.AclService.DeleteRolePermission.
func (c *aclServiceClient) DeleteRolePermission(ctx context.Context, req *connect.Request[v1.DeleteRolePermissionRequest]) (*connect.Response[v1.DeleteRolePermissionResponse], error) {
	return c.deleteRolePermission.CallUnary(ctx, req)
}

// ImportRole calls cloudstack.management.acl.v1.AclService.ImportRole.
func (c *aclServiceClient) ImportRole(ctx context.Context, req *connect.Request[v1.ImportRoleRequest]) (*connect.Response[v1.ImportRoleResponse], error) {
	return c.importRole.CallUnary(ctx, req)
}

// UpdateRole calls cloudstack.management.acl.v1.AclService.UpdateRole.
func (c *aclServiceClient) UpdateRole(ctx context.Context, req *connect.Request[v1.UpdateRoleRequest]) (*connect.Response[v1.UpdateRoleResponse], error) {
	return c.updateRole.CallUnary(ctx, req)
}

// CreateRolePermission calls cloudstack.management.acl.v1.AclService.CreateRolePermission.
func (c *aclServiceClient) CreateRolePermission(ctx context.Context, req *connect.Request[v1.CreateRolePermissionRequest]) (*connect.Response[v1.CreateRolePermissionResponse], error) {
	return c.createRolePermission.CallUnary(ctx, req)
}

// CreateRole calls cloudstack.management.acl.v1.AclService.CreateRole.
func (c *aclServiceClient) CreateRole(ctx context.Context, req *connect.Request[v1.CreateRoleRequest]) (*connect.Response[v1.CreateRoleResponse], error) {
	return c.createRole.CallUnary(ctx, req)
}

// ListRoles calls cloudstack.management.acl.v1.AclService.ListRoles.
func (c *aclServiceClient) ListRoles(ctx context.Context, req *connect.Request[v1.ListRolesRequest]) (*connect.Response[v1.ListRolesResponse], error) {
	return c.listRoles.CallUnary(ctx, req)
}

// DisableRole calls cloudstack.management.acl.v1.AclService.DisableRole.
func (c *aclServiceClient) DisableRole(ctx context.Context, req *connect.Request[v1.DisableRoleRequest]) (*connect.Response[v1.DisableRoleResponse], error) {
	return c.disableRole.CallUnary(ctx, req)
}

// AclServiceHandler is an implementation of the cloudstack.management.acl.v1.AclService service.
type AclServiceHandler interface {
	// ListRolePermissions Lists role permissions
	ListRolePermissions(context.Context, *connect.Request[v1.ListRolePermissionsRequest]) (*connect.Response[v1.ListRolePermissionsResponse], error)
	// EnableRole Enables a role
	EnableRole(context.Context, *connect.Request[v1.EnableRoleRequest]) (*connect.Response[v1.EnableRoleResponse], error)
	// DeleteRole Deletes a role
	DeleteRole(context.Context, *connect.Request[v1.DeleteRoleRequest]) (*connect.Response[v1.DeleteRoleResponse], error)
	// UpdateRolePermission Updates a role permission order
	UpdateRolePermission(context.Context, *connect.Request[v1.UpdateRolePermissionRequest]) (*connect.Response[v1.UpdateRolePermissionResponse], error)
	// DeleteRolePermission Deletes a role permission
	DeleteRolePermission(context.Context, *connect.Request[v1.DeleteRolePermissionRequest]) (*connect.Response[v1.DeleteRolePermissionResponse], error)
	// ImportRole Imports a role based on provided map of rule permissions
	ImportRole(context.Context, *connect.Request[v1.ImportRoleRequest]) (*connect.Response[v1.ImportRoleResponse], error)
	// UpdateRole Updates a role
	UpdateRole(context.Context, *connect.Request[v1.UpdateRoleRequest]) (*connect.Response[v1.UpdateRoleResponse], error)
	// CreateRolePermission Adds an API permission to a role
	CreateRolePermission(context.Context, *connect.Request[v1.CreateRolePermissionRequest]) (*connect.Response[v1.CreateRolePermissionResponse], error)
	// CreateRole Creates a role
	CreateRole(context.Context, *connect.Request[v1.CreateRoleRequest]) (*connect.Response[v1.CreateRoleResponse], error)
	// ListRoles Lists dynamic roles in CloudStack
	ListRoles(context.Context, *connect.Request[v1.ListRolesRequest]) (*connect.Response[v1.ListRolesResponse], error)
	// DisableRole Disables a role
	DisableRole(context.Context, *connect.Request[v1.DisableRoleRequest]) (*connect.Response[v1.DisableRoleResponse], error)
}

// NewAclServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAclServiceHandler(svc AclServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	aclServiceMethods := v1.File_cloudstack_management_acl_v1_acl_gen_proto.Services().ByName("AclService").Methods()
	aclServiceListRolePermissionsHandler := connect.NewUnaryHandler(
		AclServiceListRolePermissionsProcedure,
		svc.ListRolePermissions,
		connect.WithSchema(aclServiceMethods.ByName("ListRolePermissions")),
		connect.WithHandlerOptions(opts...),
	)
	aclServiceEnableRoleHandler := connect.NewUnaryHandler(
		AclServiceEnableRoleProcedure,
		svc.EnableRole,
		connect.WithSchema(aclServiceMethods.ByName("EnableRole")),
		connect.WithHandlerOptions(opts...),
	)
	aclServiceDeleteRoleHandler := connect.NewUnaryHandler(
		AclServiceDeleteRoleProcedure,
		svc.DeleteRole,
		connect.WithSchema(aclServiceMethods.ByName("DeleteRole")),
		connect.WithHandlerOptions(opts...),
	)
	aclServiceUpdateRolePermissionHandler := connect.NewUnaryHandler(
		AclServiceUpdateRolePermissionProcedure,
		svc.UpdateRolePermission,
		connect.WithSchema(aclServiceMethods.ByName("UpdateRolePermission")),
		connect.WithHandlerOptions(opts...),
	)
	aclServiceDeleteRolePermissionHandler := connect.NewUnaryHandler(
		AclServiceDeleteRolePermissionProcedure,
		svc.DeleteRolePermission,
		connect.WithSchema(aclServiceMethods.ByName("DeleteRolePermission")),
		connect.WithHandlerOptions(opts...),
	)
	aclServiceImportRoleHandler := connect.NewUnaryHandler(
		AclServiceImportRoleProcedure,
		svc.ImportRole,
		connect.WithSchema(aclServiceMethods.ByName("ImportRole")),
		connect.WithHandlerOptions(opts...),
	)
	aclServiceUpdateRoleHandler := connect.NewUnaryHandler(
		AclServiceUpdateRoleProcedure,
		svc.UpdateRole,
		connect.WithSchema(aclServiceMethods.ByName("UpdateRole")),
		connect.WithHandlerOptions(opts...),
	)
	aclServiceCreateRolePermissionHandler := connect.NewUnaryHandler(
		AclServiceCreateRolePermissionProcedure,
		svc.CreateRolePermission,
		connect.WithSchema(aclServiceMethods.ByName("CreateRolePermission")),
		connect.WithHandlerOptions(opts...),
	)
	aclServiceCreateRoleHandler := connect.NewUnaryHandler(
		AclServiceCreateRoleProcedure,
		svc.CreateRole,
		connect.WithSchema(aclServiceMethods.ByName("CreateRole")),
		connect.WithHandlerOptions(opts...),
	)
	aclServiceListRolesHandler := connect.NewUnaryHandler(
		AclServiceListRolesProcedure,
		svc.ListRoles,
		connect.WithSchema(aclServiceMethods.ByName("ListRoles")),
		connect.WithHandlerOptions(opts...),
	)
	aclServiceDisableRoleHandler := connect.NewUnaryHandler(
		AclServiceDisableRoleProcedure,
		svc.DisableRole,
		connect.WithSchema(aclServiceMethods.ByName("DisableRole")),
		connect.WithHandlerOptions(opts...),
	)
	return "/cloudstack.management.acl.v1.AclService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AclServiceListRolePermissionsProcedure:
			aclServiceListRolePermissionsHandler.ServeHTTP(w, r)
		case AclServiceEnableRoleProcedure:
			aclServiceEnableRoleHandler.ServeHTTP(w, r)
		case AclServiceDeleteRoleProcedure:
			aclServiceDeleteRoleHandler.ServeHTTP(w, r)
		case AclServiceUpdateRolePermissionProcedure:
			aclServiceUpdateRolePermissionHandler.ServeHTTP(w, r)
		case AclServiceDeleteRolePermissionProcedure:
			aclServiceDeleteRolePermissionHandler.ServeHTTP(w, r)
		case AclServiceImportRoleProcedure:
			aclServiceImportRoleHandler.ServeHTTP(w, r)
		case AclServiceUpdateRoleProcedure:
			aclServiceUpdateRoleHandler.ServeHTTP(w, r)
		case AclServiceCreateRolePermissionProcedure:
			aclServiceCreateRolePermissionHandler.ServeHTTP(w, r)
		case AclServiceCreateRoleProcedure:
			aclServiceCreateRoleHandler.ServeHTTP(w, r)
		case AclServiceListRolesProcedure:
			aclServiceListRolesHandler.ServeHTTP(w, r)
		case AclServiceDisableRoleProcedure:
			aclServiceDisableRoleHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAclServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAclServiceHandler struct{}

func (UnimplementedAclServiceHandler) ListRolePermissions(context.Context, *connect.Request[v1.ListRolePermissionsRequest]) (*connect.Response[v1.ListRolePermissionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.acl.v1.AclService.ListRolePermissions is not implemented"))
}

func (UnimplementedAclServiceHandler) EnableRole(context.Context, *connect.Request[v1.EnableRoleRequest]) (*connect.Response[v1.EnableRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.acl.v1.AclService.EnableRole is not implemented"))
}

func (UnimplementedAclServiceHandler) DeleteRole(context.Context, *connect.Request[v1.DeleteRoleRequest]) (*connect.Response[v1.DeleteRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.acl.v1.AclService.DeleteRole is not implemented"))
}

func (UnimplementedAclServiceHandler) UpdateRolePermission(context.Context, *connect.Request[v1.UpdateRolePermissionRequest]) (*connect.Response[v1.UpdateRolePermissionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.acl.v1.AclService.UpdateRolePermission is not implemented"))
}

func (UnimplementedAclServiceHandler) DeleteRolePermission(context.Context, *connect.Request[v1.DeleteRolePermissionRequest]) (*connect.Response[v1.DeleteRolePermissionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.acl.v1.AclService.DeleteRolePermission is not implemented"))
}

func (UnimplementedAclServiceHandler) ImportRole(context.Context, *connect.Request[v1.ImportRoleRequest]) (*connect.Response[v1.ImportRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.acl.v1.AclService.ImportRole is not implemented"))
}

func (UnimplementedAclServiceHandler) UpdateRole(context.Context, *connect.Request[v1.UpdateRoleRequest]) (*connect.Response[v1.UpdateRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.acl.v1.AclService.UpdateRole is not implemented"))
}

func (UnimplementedAclServiceHandler) CreateRolePermission(context.Context, *connect.Request[v1.CreateRolePermissionRequest]) (*connect.Response[v1.CreateRolePermissionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.acl.v1.AclService.CreateRolePermission is not implemented"))
}

func (UnimplementedAclServiceHandler) CreateRole(context.Context, *connect.Request[v1.CreateRoleRequest]) (*connect.Response[v1.CreateRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.acl.v1.AclService.CreateRole is not implemented"))
}

func (UnimplementedAclServiceHandler) ListRoles(context.Context, *connect.Request[v1.ListRolesRequest]) (*connect.Response[v1.ListRolesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.acl.v1.AclService.ListRoles is not implemented"))
}

func (UnimplementedAclServiceHandler) DisableRole(context.Context, *connect.Request[v1.DisableRoleRequest]) (*connect.Response[v1.DisableRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.acl.v1.AclService.DisableRole is not implemented"))
}
