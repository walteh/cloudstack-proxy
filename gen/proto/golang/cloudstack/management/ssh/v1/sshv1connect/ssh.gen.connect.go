// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cloudstack/management/ssh/v1/ssh.gen.proto

package sshv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/walteh/cloudstack-proxy/gen/proto/golang/cloudstack/management/ssh/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SshServiceName is the fully-qualified name of the SshService service.
	SshServiceName = "cloudstack.management.ssh.v1.SshService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SshServiceListSSHKeyPairsProcedure is the fully-qualified name of the SshService's
	// ListSSHKeyPairs RPC.
	SshServiceListSSHKeyPairsProcedure = "/cloudstack.management.ssh.v1.SshService/ListSSHKeyPairs"
	// SshServiceCreateSSHKeyPairProcedure is the fully-qualified name of the SshService's
	// CreateSSHKeyPair RPC.
	SshServiceCreateSSHKeyPairProcedure = "/cloudstack.management.ssh.v1.SshService/CreateSSHKeyPair"
	// SshServiceRegisterSSHKeyPairProcedure is the fully-qualified name of the SshService's
	// RegisterSSHKeyPair RPC.
	SshServiceRegisterSSHKeyPairProcedure = "/cloudstack.management.ssh.v1.SshService/RegisterSSHKeyPair"
	// SshServiceDeleteSSHKeyPairProcedure is the fully-qualified name of the SshService's
	// DeleteSSHKeyPair RPC.
	SshServiceDeleteSSHKeyPairProcedure = "/cloudstack.management.ssh.v1.SshService/DeleteSSHKeyPair"
)

// SshServiceClient is a client for the cloudstack.management.ssh.v1.SshService service.
type SshServiceClient interface {
	// ListSSHKeyPairs List registered keypairs
	ListSSHKeyPairs(context.Context, *connect.Request[v1.ListSSHKeyPairsRequest]) (*connect.Response[v1.ListSSHKeyPairsResponse], error)
	// CreateSSHKeyPair Create a new keypair and returns the private key
	CreateSSHKeyPair(context.Context, *connect.Request[v1.CreateSSHKeyPairRequest]) (*connect.Response[v1.CreateSSHKeyPairResponse], error)
	// RegisterSSHKeyPair Register a public key in a keypair under a certain name
	RegisterSSHKeyPair(context.Context, *connect.Request[v1.RegisterSSHKeyPairRequest]) (*connect.Response[v1.RegisterSSHKeyPairResponse], error)
	// DeleteSSHKeyPair Deletes a keypair by name
	DeleteSSHKeyPair(context.Context, *connect.Request[v1.DeleteSSHKeyPairRequest]) (*connect.Response[v1.DeleteSSHKeyPairResponse], error)
}

// NewSshServiceClient constructs a client for the cloudstack.management.ssh.v1.SshService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSshServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SshServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	sshServiceMethods := v1.File_cloudstack_management_ssh_v1_ssh_gen_proto.Services().ByName("SshService").Methods()
	return &sshServiceClient{
		listSSHKeyPairs: connect.NewClient[v1.ListSSHKeyPairsRequest, v1.ListSSHKeyPairsResponse](
			httpClient,
			baseURL+SshServiceListSSHKeyPairsProcedure,
			connect.WithSchema(sshServiceMethods.ByName("ListSSHKeyPairs")),
			connect.WithClientOptions(opts...),
		),
		createSSHKeyPair: connect.NewClient[v1.CreateSSHKeyPairRequest, v1.CreateSSHKeyPairResponse](
			httpClient,
			baseURL+SshServiceCreateSSHKeyPairProcedure,
			connect.WithSchema(sshServiceMethods.ByName("CreateSSHKeyPair")),
			connect.WithClientOptions(opts...),
		),
		registerSSHKeyPair: connect.NewClient[v1.RegisterSSHKeyPairRequest, v1.RegisterSSHKeyPairResponse](
			httpClient,
			baseURL+SshServiceRegisterSSHKeyPairProcedure,
			connect.WithSchema(sshServiceMethods.ByName("RegisterSSHKeyPair")),
			connect.WithClientOptions(opts...),
		),
		deleteSSHKeyPair: connect.NewClient[v1.DeleteSSHKeyPairRequest, v1.DeleteSSHKeyPairResponse](
			httpClient,
			baseURL+SshServiceDeleteSSHKeyPairProcedure,
			connect.WithSchema(sshServiceMethods.ByName("DeleteSSHKeyPair")),
			connect.WithClientOptions(opts...),
		),
	}
}

// sshServiceClient implements SshServiceClient.
type sshServiceClient struct {
	listSSHKeyPairs    *connect.Client[v1.ListSSHKeyPairsRequest, v1.ListSSHKeyPairsResponse]
	createSSHKeyPair   *connect.Client[v1.CreateSSHKeyPairRequest, v1.CreateSSHKeyPairResponse]
	registerSSHKeyPair *connect.Client[v1.RegisterSSHKeyPairRequest, v1.RegisterSSHKeyPairResponse]
	deleteSSHKeyPair   *connect.Client[v1.DeleteSSHKeyPairRequest, v1.DeleteSSHKeyPairResponse]
}

// ListSSHKeyPairs calls cloudstack.management.ssh.v1.SshService.ListSSHKeyPairs.
func (c *sshServiceClient) ListSSHKeyPairs(ctx context.Context, req *connect.Request[v1.ListSSHKeyPairsRequest]) (*connect.Response[v1.ListSSHKeyPairsResponse], error) {
	return c.listSSHKeyPairs.CallUnary(ctx, req)
}

// CreateSSHKeyPair calls cloudstack.management.ssh.v1.SshService.CreateSSHKeyPair.
func (c *sshServiceClient) CreateSSHKeyPair(ctx context.Context, req *connect.Request[v1.CreateSSHKeyPairRequest]) (*connect.Response[v1.CreateSSHKeyPairResponse], error) {
	return c.createSSHKeyPair.CallUnary(ctx, req)
}

// RegisterSSHKeyPair calls cloudstack.management.ssh.v1.SshService.RegisterSSHKeyPair.
func (c *sshServiceClient) RegisterSSHKeyPair(ctx context.Context, req *connect.Request[v1.RegisterSSHKeyPairRequest]) (*connect.Response[v1.RegisterSSHKeyPairResponse], error) {
	return c.registerSSHKeyPair.CallUnary(ctx, req)
}

// DeleteSSHKeyPair calls cloudstack.management.ssh.v1.SshService.DeleteSSHKeyPair.
func (c *sshServiceClient) DeleteSSHKeyPair(ctx context.Context, req *connect.Request[v1.DeleteSSHKeyPairRequest]) (*connect.Response[v1.DeleteSSHKeyPairResponse], error) {
	return c.deleteSSHKeyPair.CallUnary(ctx, req)
}

// SshServiceHandler is an implementation of the cloudstack.management.ssh.v1.SshService service.
type SshServiceHandler interface {
	// ListSSHKeyPairs List registered keypairs
	ListSSHKeyPairs(context.Context, *connect.Request[v1.ListSSHKeyPairsRequest]) (*connect.Response[v1.ListSSHKeyPairsResponse], error)
	// CreateSSHKeyPair Create a new keypair and returns the private key
	CreateSSHKeyPair(context.Context, *connect.Request[v1.CreateSSHKeyPairRequest]) (*connect.Response[v1.CreateSSHKeyPairResponse], error)
	// RegisterSSHKeyPair Register a public key in a keypair under a certain name
	RegisterSSHKeyPair(context.Context, *connect.Request[v1.RegisterSSHKeyPairRequest]) (*connect.Response[v1.RegisterSSHKeyPairResponse], error)
	// DeleteSSHKeyPair Deletes a keypair by name
	DeleteSSHKeyPair(context.Context, *connect.Request[v1.DeleteSSHKeyPairRequest]) (*connect.Response[v1.DeleteSSHKeyPairResponse], error)
}

// NewSshServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSshServiceHandler(svc SshServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	sshServiceMethods := v1.File_cloudstack_management_ssh_v1_ssh_gen_proto.Services().ByName("SshService").Methods()
	sshServiceListSSHKeyPairsHandler := connect.NewUnaryHandler(
		SshServiceListSSHKeyPairsProcedure,
		svc.ListSSHKeyPairs,
		connect.WithSchema(sshServiceMethods.ByName("ListSSHKeyPairs")),
		connect.WithHandlerOptions(opts...),
	)
	sshServiceCreateSSHKeyPairHandler := connect.NewUnaryHandler(
		SshServiceCreateSSHKeyPairProcedure,
		svc.CreateSSHKeyPair,
		connect.WithSchema(sshServiceMethods.ByName("CreateSSHKeyPair")),
		connect.WithHandlerOptions(opts...),
	)
	sshServiceRegisterSSHKeyPairHandler := connect.NewUnaryHandler(
		SshServiceRegisterSSHKeyPairProcedure,
		svc.RegisterSSHKeyPair,
		connect.WithSchema(sshServiceMethods.ByName("RegisterSSHKeyPair")),
		connect.WithHandlerOptions(opts...),
	)
	sshServiceDeleteSSHKeyPairHandler := connect.NewUnaryHandler(
		SshServiceDeleteSSHKeyPairProcedure,
		svc.DeleteSSHKeyPair,
		connect.WithSchema(sshServiceMethods.ByName("DeleteSSHKeyPair")),
		connect.WithHandlerOptions(opts...),
	)
	return "/cloudstack.management.ssh.v1.SshService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SshServiceListSSHKeyPairsProcedure:
			sshServiceListSSHKeyPairsHandler.ServeHTTP(w, r)
		case SshServiceCreateSSHKeyPairProcedure:
			sshServiceCreateSSHKeyPairHandler.ServeHTTP(w, r)
		case SshServiceRegisterSSHKeyPairProcedure:
			sshServiceRegisterSSHKeyPairHandler.ServeHTTP(w, r)
		case SshServiceDeleteSSHKeyPairProcedure:
			sshServiceDeleteSSHKeyPairHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSshServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSshServiceHandler struct{}

func (UnimplementedSshServiceHandler) ListSSHKeyPairs(context.Context, *connect.Request[v1.ListSSHKeyPairsRequest]) (*connect.Response[v1.ListSSHKeyPairsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.ssh.v1.SshService.ListSSHKeyPairs is not implemented"))
}

func (UnimplementedSshServiceHandler) CreateSSHKeyPair(context.Context, *connect.Request[v1.CreateSSHKeyPairRequest]) (*connect.Response[v1.CreateSSHKeyPairResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.ssh.v1.SshService.CreateSSHKeyPair is not implemented"))
}

func (UnimplementedSshServiceHandler) RegisterSSHKeyPair(context.Context, *connect.Request[v1.RegisterSSHKeyPairRequest]) (*connect.Response[v1.RegisterSSHKeyPairResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.ssh.v1.SshService.RegisterSSHKeyPair is not implemented"))
}

func (UnimplementedSshServiceHandler) DeleteSSHKeyPair(context.Context, *connect.Request[v1.DeleteSSHKeyPairRequest]) (*connect.Response[v1.DeleteSSHKeyPairResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloudstack.management.ssh.v1.SshService.DeleteSSHKeyPair is not implemented"))
}
