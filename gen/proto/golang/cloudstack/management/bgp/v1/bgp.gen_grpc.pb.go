// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: cloudstack/management/bgp/v1/bgp.gen.proto

package bgpv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BgpService_ListASNumbers_FullMethodName   = "/cloudstack.management.bgp.v1.BgpService/ListASNumbers"
	BgpService_CreateASNRange_FullMethodName  = "/cloudstack.management.bgp.v1.BgpService/CreateASNRange"
	BgpService_ListASNRanges_FullMethodName   = "/cloudstack.management.bgp.v1.BgpService/ListASNRanges"
	BgpService_ReleaseASNumber_FullMethodName = "/cloudstack.management.bgp.v1.BgpService/ReleaseASNumber"
	BgpService_DeleteASNRange_FullMethodName  = "/cloudstack.management.bgp.v1.BgpService/DeleteASNRange"
)

// BgpServiceClient is the client API for BgpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// BgpService provides operations for managing Bgps
type BgpServiceClient interface {
	// ListASNumbers List Autonomous Systems Numbers
	ListASNumbers(ctx context.Context, in *ListASNumbersRequest, opts ...grpc.CallOption) (*ListASNumbersResponse, error)
	// CreateASNRange Creates a range of Autonomous Systems for BGP Dynamic Routing
	CreateASNRange(ctx context.Context, in *CreateASNRangeRequest, opts ...grpc.CallOption) (*CreateASNRangeResponse, error)
	// ListASNRanges List Autonomous Systems Number Ranges
	ListASNRanges(ctx context.Context, in *ListASNRangesRequest, opts ...grpc.CallOption) (*ListASNRangesResponse, error)
	// ReleaseASNumber Releases an AS Number back to the pool
	ReleaseASNumber(ctx context.Context, in *ReleaseASNumberRequest, opts ...grpc.CallOption) (*ReleaseASNumberResponse, error)
	// DeleteASNRange deletes a range of Autonomous Systems for BGP Dynamic Routing
	DeleteASNRange(ctx context.Context, in *DeleteASNRangeRequest, opts ...grpc.CallOption) (*DeleteASNRangeResponse, error)
}

type bgpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBgpServiceClient(cc grpc.ClientConnInterface) BgpServiceClient {
	return &bgpServiceClient{cc}
}

func (c *bgpServiceClient) ListASNumbers(ctx context.Context, in *ListASNumbersRequest, opts ...grpc.CallOption) (*ListASNumbersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListASNumbersResponse)
	err := c.cc.Invoke(ctx, BgpService_ListASNumbers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bgpServiceClient) CreateASNRange(ctx context.Context, in *CreateASNRangeRequest, opts ...grpc.CallOption) (*CreateASNRangeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateASNRangeResponse)
	err := c.cc.Invoke(ctx, BgpService_CreateASNRange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bgpServiceClient) ListASNRanges(ctx context.Context, in *ListASNRangesRequest, opts ...grpc.CallOption) (*ListASNRangesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListASNRangesResponse)
	err := c.cc.Invoke(ctx, BgpService_ListASNRanges_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bgpServiceClient) ReleaseASNumber(ctx context.Context, in *ReleaseASNumberRequest, opts ...grpc.CallOption) (*ReleaseASNumberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReleaseASNumberResponse)
	err := c.cc.Invoke(ctx, BgpService_ReleaseASNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bgpServiceClient) DeleteASNRange(ctx context.Context, in *DeleteASNRangeRequest, opts ...grpc.CallOption) (*DeleteASNRangeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteASNRangeResponse)
	err := c.cc.Invoke(ctx, BgpService_DeleteASNRange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BgpServiceServer is the server API for BgpService service.
// All implementations must embed UnimplementedBgpServiceServer
// for forward compatibility.
//
// BgpService provides operations for managing Bgps
type BgpServiceServer interface {
	// ListASNumbers List Autonomous Systems Numbers
	ListASNumbers(context.Context, *ListASNumbersRequest) (*ListASNumbersResponse, error)
	// CreateASNRange Creates a range of Autonomous Systems for BGP Dynamic Routing
	CreateASNRange(context.Context, *CreateASNRangeRequest) (*CreateASNRangeResponse, error)
	// ListASNRanges List Autonomous Systems Number Ranges
	ListASNRanges(context.Context, *ListASNRangesRequest) (*ListASNRangesResponse, error)
	// ReleaseASNumber Releases an AS Number back to the pool
	ReleaseASNumber(context.Context, *ReleaseASNumberRequest) (*ReleaseASNumberResponse, error)
	// DeleteASNRange deletes a range of Autonomous Systems for BGP Dynamic Routing
	DeleteASNRange(context.Context, *DeleteASNRangeRequest) (*DeleteASNRangeResponse, error)
	mustEmbedUnimplementedBgpServiceServer()
}

// UnimplementedBgpServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBgpServiceServer struct{}

func (UnimplementedBgpServiceServer) ListASNumbers(context.Context, *ListASNumbersRequest) (*ListASNumbersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListASNumbers not implemented")
}
func (UnimplementedBgpServiceServer) CreateASNRange(context.Context, *CreateASNRangeRequest) (*CreateASNRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateASNRange not implemented")
}
func (UnimplementedBgpServiceServer) ListASNRanges(context.Context, *ListASNRangesRequest) (*ListASNRangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListASNRanges not implemented")
}
func (UnimplementedBgpServiceServer) ReleaseASNumber(context.Context, *ReleaseASNumberRequest) (*ReleaseASNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseASNumber not implemented")
}
func (UnimplementedBgpServiceServer) DeleteASNRange(context.Context, *DeleteASNRangeRequest) (*DeleteASNRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteASNRange not implemented")
}
func (UnimplementedBgpServiceServer) mustEmbedUnimplementedBgpServiceServer() {}
func (UnimplementedBgpServiceServer) testEmbeddedByValue()                    {}

// UnsafeBgpServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BgpServiceServer will
// result in compilation errors.
type UnsafeBgpServiceServer interface {
	mustEmbedUnimplementedBgpServiceServer()
}

func RegisterBgpServiceServer(s grpc.ServiceRegistrar, srv BgpServiceServer) {
	// If the following call pancis, it indicates UnimplementedBgpServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BgpService_ServiceDesc, srv)
}

func _BgpService_ListASNumbers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListASNumbersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BgpServiceServer).ListASNumbers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BgpService_ListASNumbers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BgpServiceServer).ListASNumbers(ctx, req.(*ListASNumbersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BgpService_CreateASNRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateASNRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BgpServiceServer).CreateASNRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BgpService_CreateASNRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BgpServiceServer).CreateASNRange(ctx, req.(*CreateASNRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BgpService_ListASNRanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListASNRangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BgpServiceServer).ListASNRanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BgpService_ListASNRanges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BgpServiceServer).ListASNRanges(ctx, req.(*ListASNRangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BgpService_ReleaseASNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseASNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BgpServiceServer).ReleaseASNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BgpService_ReleaseASNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BgpServiceServer).ReleaseASNumber(ctx, req.(*ReleaseASNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BgpService_DeleteASNRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteASNRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BgpServiceServer).DeleteASNRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BgpService_DeleteASNRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BgpServiceServer).DeleteASNRange(ctx, req.(*DeleteASNRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BgpService_ServiceDesc is the grpc.ServiceDesc for BgpService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BgpService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloudstack.management.bgp.v1.BgpService",
	HandlerType: (*BgpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListASNumbers",
			Handler:    _BgpService_ListASNumbers_Handler,
		},
		{
			MethodName: "CreateASNRange",
			Handler:    _BgpService_CreateASNRange_Handler,
		},
		{
			MethodName: "ListASNRanges",
			Handler:    _BgpService_ListASNRanges_Handler,
		},
		{
			MethodName: "ReleaseASNumber",
			Handler:    _BgpService_ReleaseASNumber_Handler,
		},
		{
			MethodName: "DeleteASNRange",
			Handler:    _BgpService_DeleteASNRange_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloudstack/management/bgp/v1/bgp.gen.proto",
}
