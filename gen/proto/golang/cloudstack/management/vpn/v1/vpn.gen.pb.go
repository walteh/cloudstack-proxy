// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: cloudstack/management/vpn/v1/vpn.gen.proto

package vpnv1

import (
	_ "github.com/walteh/cloudstack-proxy/gen/proto/golang/buf/validate"
	_ "github.com/walteh/cloudstack-proxy/gen/proto/golang/cloudstack/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AddVpnUserRequest represents the parameters for adds vpn users
type AddVpnUserRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// username for the vpn user
	UserName *string `protobuf:"bytes,1,opt,name=user_name,json=userName" json:"user_name,omitempty"`
	// password for the username
	Password *string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	// an optional account for the vpn user. Must be used with domainId.
	AccountName *string `protobuf:"bytes,3,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	// add vpn user to the specific project
	ProjectId *int64 `protobuf:"varint,4,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	// an optional domainId for the vpn user. If the account parameter is used, domainId must also be used.
	DomainId *int64 `protobuf:"varint,5,opt,name=domain_id,json=domainId" json:"domain_id,omitempty"`
	StartEventId *int64 `protobuf:"varint,6,opt,name=start_event_id,json=startEventId" json:"start_event_id,omitempty"`
	InjectedJobId *string `protobuf:"bytes,7,opt,name=injected_job_id,json=injectedJobId" json:"injected_job_id,omitempty"`
	ResponseType  *string `protobuf:"bytes,8,opt,name=response_type,json=responseType" json:"response_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddVpnUserRequest) Reset() {
	*x = AddVpnUserRequest{}
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddVpnUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddVpnUserRequest) ProtoMessage() {}

func (x *AddVpnUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddVpnUserRequest.ProtoReflect.Descriptor instead.
func (*AddVpnUserRequest) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_vpn_v1_vpn_gen_proto_rawDescGZIP(), []int{0}
}

func (x *AddVpnUserRequest) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *AddVpnUserRequest) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *AddVpnUserRequest) GetAccountName() string {
	if x != nil && x.AccountName != nil {
		return *x.AccountName
	}
	return ""
}

func (x *AddVpnUserRequest) GetProjectId() int64 {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return 0
}

func (x *AddVpnUserRequest) GetDomainId() int64 {
	if x != nil && x.DomainId != nil {
		return *x.DomainId
	}
	return 0
}

func (x *AddVpnUserRequest) GetStartEventId() int64 {
	if x != nil && x.StartEventId != nil {
		return *x.StartEventId
	}
	return 0
}

func (x *AddVpnUserRequest) GetInjectedJobId() string {
	if x != nil && x.InjectedJobId != nil {
		return *x.InjectedJobId
	}
	return ""
}

func (x *AddVpnUserRequest) GetResponseType() string {
	if x != nil && x.ResponseType != nil {
		return *x.ResponseType
	}
	return ""
}

// AddVpnUserResponse represents the response from adds vpn users
type AddVpnUserResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Result
	Result        *Result `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddVpnUserResponse) Reset() {
	*x = AddVpnUserResponse{}
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddVpnUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddVpnUserResponse) ProtoMessage() {}

func (x *AddVpnUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddVpnUserResponse.ProtoReflect.Descriptor instead.
func (*AddVpnUserResponse) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_vpn_v1_vpn_gen_proto_rawDescGZIP(), []int{1}
}

func (x *AddVpnUserResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

// CreateRemoteAccessVpnRequest represents the parameters for creates a l2tp/ipsec remote access vpn
type CreateRemoteAccessVpnRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// public ip address id of the vpn server
	PublicIpId *int64 `protobuf:"varint,1,opt,name=public_ip_id,json=publicIpId" json:"public_ip_id,omitempty"`
	// the range of ip addresses to allocate to vpn clients. The first ip in the range will be taken by the vpn server
	IpRange *string `protobuf:"bytes,2,opt,name=ip_range,json=ipRange" json:"ip_range,omitempty"`
	// an optional account for the VPN. Must be used with domainId.
	AccountName *string `protobuf:"bytes,3,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	// an optional domainId for the VPN. If the account parameter is used, domainId must also be used.
	DomainId *int64 `protobuf:"varint,4,opt,name=domain_id,json=domainId" json:"domain_id,omitempty"`
	// if true, firewall rule for source/end public port is automatically created; if false - firewall rule has to be created explicitly. Has value true by default
	OpenFirewall *bool `protobuf:"varint,5,opt,name=open_firewall,json=openFirewall" json:"open_firewall,omitempty"`
	// an optional field, whether to the display the vpn to the end user or not
	Display *bool `protobuf:"varint,6,opt,name=display" json:"display,omitempty"`
	StartEventId *int64 `protobuf:"varint,7,opt,name=start_event_id,json=startEventId" json:"start_event_id,omitempty"`
	InjectedJobId *string `protobuf:"bytes,8,opt,name=injected_job_id,json=injectedJobId" json:"injected_job_id,omitempty"`
	ResponseType  *string `protobuf:"bytes,9,opt,name=response_type,json=responseType" json:"response_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRemoteAccessVpnRequest) Reset() {
	*x = CreateRemoteAccessVpnRequest{}
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRemoteAccessVpnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRemoteAccessVpnRequest) ProtoMessage() {}

func (x *CreateRemoteAccessVpnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRemoteAccessVpnRequest.ProtoReflect.Descriptor instead.
func (*CreateRemoteAccessVpnRequest) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_vpn_v1_vpn_gen_proto_rawDescGZIP(), []int{2}
}

func (x *CreateRemoteAccessVpnRequest) GetPublicIpId() int64 {
	if x != nil && x.PublicIpId != nil {
		return *x.PublicIpId
	}
	return 0
}

func (x *CreateRemoteAccessVpnRequest) GetIpRange() string {
	if x != nil && x.IpRange != nil {
		return *x.IpRange
	}
	return ""
}

func (x *CreateRemoteAccessVpnRequest) GetAccountName() string {
	if x != nil && x.AccountName != nil {
		return *x.AccountName
	}
	return ""
}

func (x *CreateRemoteAccessVpnRequest) GetDomainId() int64 {
	if x != nil && x.DomainId != nil {
		return *x.DomainId
	}
	return 0
}

func (x *CreateRemoteAccessVpnRequest) GetOpenFirewall() bool {
	if x != nil && x.OpenFirewall != nil {
		return *x.OpenFirewall
	}
	return false
}

func (x *CreateRemoteAccessVpnRequest) GetDisplay() bool {
	if x != nil && x.Display != nil {
		return *x.Display
	}
	return false
}

func (x *CreateRemoteAccessVpnRequest) GetStartEventId() int64 {
	if x != nil && x.StartEventId != nil {
		return *x.StartEventId
	}
	return 0
}

func (x *CreateRemoteAccessVpnRequest) GetInjectedJobId() string {
	if x != nil && x.InjectedJobId != nil {
		return *x.InjectedJobId
	}
	return ""
}

func (x *CreateRemoteAccessVpnRequest) GetResponseType() string {
	if x != nil && x.ResponseType != nil {
		return *x.ResponseType
	}
	return ""
}

// CreateRemoteAccessVpnResponse represents the response from creates a l2tp/ipsec remote access vpn
type CreateRemoteAccessVpnResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Result
	Result        *Result `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRemoteAccessVpnResponse) Reset() {
	*x = CreateRemoteAccessVpnResponse{}
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRemoteAccessVpnResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRemoteAccessVpnResponse) ProtoMessage() {}

func (x *CreateRemoteAccessVpnResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRemoteAccessVpnResponse.ProtoReflect.Descriptor instead.
func (*CreateRemoteAccessVpnResponse) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_vpn_v1_vpn_gen_proto_rawDescGZIP(), []int{3}
}

func (x *CreateRemoteAccessVpnResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

// CreateVpnConnectionRequest represents the parameters for create site to site vpn connection
type CreateVpnConnectionRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// id of the vpn gateway
	VpnGatewayId *int64 `protobuf:"varint,1,opt,name=vpn_gateway_id,json=vpnGatewayId" json:"vpn_gateway_id,omitempty"`
	// id of the customer gateway
	CustomerGatewayId *int64 `protobuf:"varint,2,opt,name=customer_gateway_id,json=customerGatewayId" json:"customer_gateway_id,omitempty"`
	// connection is passive or not
	Passive *bool `protobuf:"varint,3,opt,name=passive" json:"passive,omitempty"`
	// an optional field, whether to the display the vpn to the end user or not
	Display *bool `protobuf:"varint,4,opt,name=display" json:"display,omitempty"`
	StartEventId *int64 `protobuf:"varint,5,opt,name=start_event_id,json=startEventId" json:"start_event_id,omitempty"`
	InjectedJobId *string `protobuf:"bytes,6,opt,name=injected_job_id,json=injectedJobId" json:"injected_job_id,omitempty"`
	ResponseType  *string `protobuf:"bytes,7,opt,name=response_type,json=responseType" json:"response_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateVpnConnectionRequest) Reset() {
	*x = CreateVpnConnectionRequest{}
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateVpnConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVpnConnectionRequest) ProtoMessage() {}

func (x *CreateVpnConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVpnConnectionRequest.ProtoReflect.Descriptor instead.
func (*CreateVpnConnectionRequest) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_vpn_v1_vpn_gen_proto_rawDescGZIP(), []int{4}
}

func (x *CreateVpnConnectionRequest) GetVpnGatewayId() int64 {
	if x != nil && x.VpnGatewayId != nil {
		return *x.VpnGatewayId
	}
	return 0
}

func (x *CreateVpnConnectionRequest) GetCustomerGatewayId() int64 {
	if x != nil && x.CustomerGatewayId != nil {
		return *x.CustomerGatewayId
	}
	return 0
}

func (x *CreateVpnConnectionRequest) GetPassive() bool {
	if x != nil && x.Passive != nil {
		return *x.Passive
	}
	return false
}

func (x *CreateVpnConnectionRequest) GetDisplay() bool {
	if x != nil && x.Display != nil {
		return *x.Display
	}
	return false
}

func (x *CreateVpnConnectionRequest) GetStartEventId() int64 {
	if x != nil && x.StartEventId != nil {
		return *x.StartEventId
	}
	return 0
}

func (x *CreateVpnConnectionRequest) GetInjectedJobId() string {
	if x != nil && x.InjectedJobId != nil {
		return *x.InjectedJobId
	}
	return ""
}

func (x *CreateVpnConnectionRequest) GetResponseType() string {
	if x != nil && x.ResponseType != nil {
		return *x.ResponseType
	}
	return ""
}

// CreateVpnConnectionResponse represents the response from create site to site vpn connection
type CreateVpnConnectionResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Result
	Result        *Result `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateVpnConnectionResponse) Reset() {
	*x = CreateVpnConnectionResponse{}
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateVpnConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVpnConnectionResponse) ProtoMessage() {}

func (x *CreateVpnConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVpnConnectionResponse.ProtoReflect.Descriptor instead.
func (*CreateVpnConnectionResponse) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_vpn_v1_vpn_gen_proto_rawDescGZIP(), []int{5}
}

func (x *CreateVpnConnectionResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

// CreateVpnCustomerGatewayRequest represents the parameters for creates site to site vpn customer gateway
type CreateVpnCustomerGatewayRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// name of this customer gateway
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// public ip address id of the customer gateway
	GatewayIp *string `protobuf:"bytes,2,opt,name=gateway_ip,json=gatewayIp" json:"gateway_ip,omitempty"`
	// guest cidr list of the customer gateway. Multiple entries must be separated by a single comma character (,).
	PeerCidrList *string `protobuf:"bytes,3,opt,name=peer_cidr_list,json=peerCidrList" json:"peer_cidr_list,omitempty"`
	// IPsec Preshared-Key of the customer gateway. Cannot contain newline or double quotes.
	IpsecPsk *string `protobuf:"bytes,4,opt,name=ipsec_psk,json=ipsecPsk" json:"ipsec_psk,omitempty"`
	// IKE policy of the customer gateway
	IkePolicy *string `protobuf:"bytes,5,opt,name=ike_policy,json=ikePolicy" json:"ike_policy,omitempty"`
	// ESP policy of the customer gateway
	EspPolicy *string `protobuf:"bytes,6,opt,name=esp_policy,json=espPolicy" json:"esp_policy,omitempty"`
	// Lifetime of phase 1 VPN connection to the customer gateway, in seconds
	IkeLifetime *int64 `protobuf:"varint,7,opt,name=ike_lifetime,json=ikeLifetime" json:"ike_lifetime,omitempty"`
	// Lifetime of phase 2 VPN connection to the customer gateway, in seconds
	EspLifetime *int64 `protobuf:"varint,8,opt,name=esp_lifetime,json=espLifetime" json:"esp_lifetime,omitempty"`
	// If DPD is enabled for VPN connection
	Dpd *bool `protobuf:"varint,9,opt,name=dpd" json:"dpd,omitempty"`
	// Force Encapsulation for NAT traversal
	Encap *bool `protobuf:"varint,10,opt,name=encap" json:"encap,omitempty"`
	// the account associated with the gateway. Must be used with the domainId parameter.
	AccountName *string `protobuf:"bytes,11,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	// the domain ID associated with the gateway. If used with the account parameter returns the gateway associated with the account for the specified domain.
	DomainId *int64 `protobuf:"varint,12,opt,name=domain_id,json=domainId" json:"domain_id,omitempty"`
	// create site-to-site VPN customer gateway for the project
	ProjectId *int64 `protobuf:"varint,13,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	// For IKEv2, whether to split multiple right subnet cidrs into multiple connection statements.
	SplitConnections *bool `protobuf:"varint,14,opt,name=split_connections,json=splitConnections" json:"split_connections,omitempty"`
	// Which IKE Version to use, one of ike (autoselect), ikev1, or ikev2. Connections marked with 'ike' will use 'ikev2' when initiating, but accept any protocol version when responding. Defaults to ike
	IkeVersion *string `protobuf:"bytes,15,opt,name=ike_version,json=ikeVersion" json:"ike_version,omitempty"`
	StartEventId *int64 `protobuf:"varint,16,opt,name=start_event_id,json=startEventId" json:"start_event_id,omitempty"`
	InjectedJobId *string `protobuf:"bytes,17,opt,name=injected_job_id,json=injectedJobId" json:"injected_job_id,omitempty"`
	ResponseType  *string `protobuf:"bytes,18,opt,name=response_type,json=responseType" json:"response_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateVpnCustomerGatewayRequest) Reset() {
	*x = CreateVpnCustomerGatewayRequest{}
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateVpnCustomerGatewayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVpnCustomerGatewayRequest) ProtoMessage() {}

func (x *CreateVpnCustomerGatewayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVpnCustomerGatewayRequest.ProtoReflect.Descriptor instead.
func (*CreateVpnCustomerGatewayRequest) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_vpn_v1_vpn_gen_proto_rawDescGZIP(), []int{6}
}

func (x *CreateVpnCustomerGatewayRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CreateVpnCustomerGatewayRequest) GetGatewayIp() string {
	if x != nil && x.GatewayIp != nil {
		return *x.GatewayIp
	}
	return ""
}

func (x *CreateVpnCustomerGatewayRequest) GetPeerCidrList() string {
	if x != nil && x.PeerCidrList != nil {
		return *x.PeerCidrList
	}
	return ""
}

func (x *CreateVpnCustomerGatewayRequest) GetIpsecPsk() string {
	if x != nil && x.IpsecPsk != nil {
		return *x.IpsecPsk
	}
	return ""
}

func (x *CreateVpnCustomerGatewayRequest) GetIkePolicy() string {
	if x != nil && x.IkePolicy != nil {
		return *x.IkePolicy
	}
	return ""
}

func (x *CreateVpnCustomerGatewayRequest) GetEspPolicy() string {
	if x != nil && x.EspPolicy != nil {
		return *x.EspPolicy
	}
	return ""
}

func (x *CreateVpnCustomerGatewayRequest) GetIkeLifetime() int64 {
	if x != nil && x.IkeLifetime != nil {
		return *x.IkeLifetime
	}
	return 0
}

func (x *CreateVpnCustomerGatewayRequest) GetEspLifetime() int64 {
	if x != nil && x.EspLifetime != nil {
		return *x.EspLifetime
	}
	return 0
}

func (x *CreateVpnCustomerGatewayRequest) GetDpd() bool {
	if x != nil && x.Dpd != nil {
		return *x.Dpd
	}
	return false
}

func (x *CreateVpnCustomerGatewayRequest) GetEncap() bool {
	if x != nil && x.Encap != nil {
		return *x.Encap
	}
	return false
}

func (x *CreateVpnCustomerGatewayRequest) GetAccountName() string {
	if x != nil && x.AccountName != nil {
		return *x.AccountName
	}
	return ""
}

func (x *CreateVpnCustomerGatewayRequest) GetDomainId() int64 {
	if x != nil && x.DomainId != nil {
		return *x.DomainId
	}
	return 0
}

func (x *CreateVpnCustomerGatewayRequest) GetProjectId() int64 {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return 0
}

func (x *CreateVpnCustomerGatewayRequest) GetSplitConnections() bool {
	if x != nil && x.SplitConnections != nil {
		return *x.SplitConnections
	}
	return false
}

func (x *CreateVpnCustomerGatewayRequest) GetIkeVersion() string {
	if x != nil && x.IkeVersion != nil {
		return *x.IkeVersion
	}
	return ""
}

func (x *CreateVpnCustomerGatewayRequest) GetStartEventId() int64 {
	if x != nil && x.StartEventId != nil {
		return *x.StartEventId
	}
	return 0
}

func (x *CreateVpnCustomerGatewayRequest) GetInjectedJobId() string {
	if x != nil && x.InjectedJobId != nil {
		return *x.InjectedJobId
	}
	return ""
}

func (x *CreateVpnCustomerGatewayRequest) GetResponseType() string {
	if x != nil && x.ResponseType != nil {
		return *x.ResponseType
	}
	return ""
}

// CreateVpnCustomerGatewayResponse represents the response from creates site to site vpn customer gateway
type CreateVpnCustomerGatewayResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Result
	Result        *Result `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateVpnCustomerGatewayResponse) Reset() {
	*x = CreateVpnCustomerGatewayResponse{}
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateVpnCustomerGatewayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVpnCustomerGatewayResponse) ProtoMessage() {}

func (x *CreateVpnCustomerGatewayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVpnCustomerGatewayResponse.ProtoReflect.Descriptor instead.
func (*CreateVpnCustomerGatewayResponse) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_vpn_v1_vpn_gen_proto_rawDescGZIP(), []int{7}
}

func (x *CreateVpnCustomerGatewayResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

// CreateVpnGatewayRequest represents the parameters for creates site to site vpn local gateway
type CreateVpnGatewayRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// public ip address id of the vpn gateway
	VpcId *int64 `protobuf:"varint,1,opt,name=vpc_id,json=vpcId" json:"vpc_id,omitempty"`
	// an optional field, whether to the display the vpn to the end user or not
	Display *bool `protobuf:"varint,2,opt,name=display" json:"display,omitempty"`
	StartEventId *int64 `protobuf:"varint,3,opt,name=start_event_id,json=startEventId" json:"start_event_id,omitempty"`
	InjectedJobId *string `protobuf:"bytes,4,opt,name=injected_job_id,json=injectedJobId" json:"injected_job_id,omitempty"`
	ResponseType  *string `protobuf:"bytes,5,opt,name=response_type,json=responseType" json:"response_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateVpnGatewayRequest) Reset() {
	*x = CreateVpnGatewayRequest{}
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateVpnGatewayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVpnGatewayRequest) ProtoMessage() {}

func (x *CreateVpnGatewayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVpnGatewayRequest.ProtoReflect.Descriptor instead.
func (*CreateVpnGatewayRequest) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_vpn_v1_vpn_gen_proto_rawDescGZIP(), []int{8}
}

func (x *CreateVpnGatewayRequest) GetVpcId() int64 {
	if x != nil && x.VpcId != nil {
		return *x.VpcId
	}
	return 0
}

func (x *CreateVpnGatewayRequest) GetDisplay() bool {
	if x != nil && x.Display != nil {
		return *x.Display
	}
	return false
}

func (x *CreateVpnGatewayRequest) GetStartEventId() int64 {
	if x != nil && x.StartEventId != nil {
		return *x.StartEventId
	}
	return 0
}

func (x *CreateVpnGatewayRequest) GetInjectedJobId() string {
	if x != nil && x.InjectedJobId != nil {
		return *x.InjectedJobId
	}
	return ""
}

func (x *CreateVpnGatewayRequest) GetResponseType() string {
	if x != nil && x.ResponseType != nil {
		return *x.ResponseType
	}
	return ""
}

// CreateVpnGatewayResponse represents the response from creates site to site vpn local gateway
type CreateVpnGatewayResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Result
	Result        *Result `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateVpnGatewayResponse) Reset() {
	*x = CreateVpnGatewayResponse{}
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateVpnGatewayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVpnGatewayResponse) ProtoMessage() {}

func (x *CreateVpnGatewayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVpnGatewayResponse.ProtoReflect.Descriptor instead.
func (*CreateVpnGatewayResponse) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_vpn_v1_vpn_gen_proto_rawDescGZIP(), []int{9}
}

func (x *CreateVpnGatewayResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

// DeleteRemoteAccessVpnRequest represents the parameters for destroys a l2tp/ipsec remote access vpn
type DeleteRemoteAccessVpnRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// public ip address id of the vpn server
	PublicIpId *int64 `protobuf:"varint,1,opt,name=public_ip_id,json=publicIpId" json:"public_ip_id,omitempty"`
	StartEventId *int64 `protobuf:"varint,2,opt,name=start_event_id,json=startEventId" json:"start_event_id,omitempty"`
	InjectedJobId *string `protobuf:"bytes,3,opt,name=injected_job_id,json=injectedJobId" json:"injected_job_id,omitempty"`
	ResponseType  *string `protobuf:"bytes,4,opt,name=response_type,json=responseType" json:"response_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteRemoteAccessVpnRequest) Reset() {
	*x = DeleteRemoteAccessVpnRequest{}
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRemoteAccessVpnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRemoteAccessVpnRequest) ProtoMessage() {}

func (x *DeleteRemoteAccessVpnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRemoteAccessVpnRequest.ProtoReflect.Descriptor instead.
func (*DeleteRemoteAccessVpnRequest) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_vpn_v1_vpn_gen_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteRemoteAccessVpnRequest) GetPublicIpId() int64 {
	if x != nil && x.PublicIpId != nil {
		return *x.PublicIpId
	}
	return 0
}

func (x *DeleteRemoteAccessVpnRequest) GetStartEventId() int64 {
	if x != nil && x.StartEventId != nil {
		return *x.StartEventId
	}
	return 0
}

func (x *DeleteRemoteAccessVpnRequest) GetInjectedJobId() string {
	if x != nil && x.InjectedJobId != nil {
		return *x.InjectedJobId
	}
	return ""
}

func (x *DeleteRemoteAccessVpnRequest) GetResponseType() string {
	if x != nil && x.ResponseType != nil {
		return *x.ResponseType
	}
	return ""
}

// DeleteRemoteAccessVpnResponse represents the response from destroys a l2tp/ipsec remote access vpn
type DeleteRemoteAccessVpnResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Result
	Result        *Result `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteRemoteAccessVpnResponse) Reset() {
	*x = DeleteRemoteAccessVpnResponse{}
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRemoteAccessVpnResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRemoteAccessVpnResponse) ProtoMessage() {}

func (x *DeleteRemoteAccessVpnResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRemoteAccessVpnResponse.ProtoReflect.Descriptor instead.
func (*DeleteRemoteAccessVpnResponse) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_vpn_v1_vpn_gen_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteRemoteAccessVpnResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

// DeleteVpnConnectionRequest represents the parameters for delete site to site vpn connection
type DeleteVpnConnectionRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// id of vpn connection
	Id *int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	StartEventId *int64 `protobuf:"varint,2,opt,name=start_event_id,json=startEventId" json:"start_event_id,omitempty"`
	InjectedJobId *string `protobuf:"bytes,3,opt,name=injected_job_id,json=injectedJobId" json:"injected_job_id,omitempty"`
	ResponseType  *string `protobuf:"bytes,4,opt,name=response_type,json=responseType" json:"response_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteVpnConnectionRequest) Reset() {
	*x = DeleteVpnConnectionRequest{}
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteVpnConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVpnConnectionRequest) ProtoMessage() {}

func (x *DeleteVpnConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVpnConnectionRequest.ProtoReflect.Descriptor instead.
func (*DeleteVpnConnectionRequest) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_vpn_v1_vpn_gen_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteVpnConnectionRequest) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *DeleteVpnConnectionRequest) GetStartEventId() int64 {
	if x != nil && x.StartEventId != nil {
		return *x.StartEventId
	}
	return 0
}

func (x *DeleteVpnConnectionRequest) GetInjectedJobId() string {
	if x != nil && x.InjectedJobId != nil {
		return *x.InjectedJobId
	}
	return ""
}

func (x *DeleteVpnConnectionRequest) GetResponseType() string {
	if x != nil && x.ResponseType != nil {
		return *x.ResponseType
	}
	return ""
}

// DeleteVpnConnectionResponse represents the response from delete site to site vpn connection
type DeleteVpnConnectionResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Result
	Result        *Result `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteVpnConnectionResponse) Reset() {
	*x = DeleteVpnConnectionResponse{}
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteVpnConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVpnConnectionResponse) ProtoMessage() {}

func (x *DeleteVpnConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVpnConnectionResponse.ProtoReflect.Descriptor instead.
func (*DeleteVpnConnectionResponse) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_vpn_v1_vpn_gen_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteVpnConnectionResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

// DeleteVpnCustomerGatewayRequest represents the parameters for delete site to site vpn customer gateway
type DeleteVpnCustomerGatewayRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// id of customer gateway
	Id *int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	StartEventId *int64 `protobuf:"varint,2,opt,name=start_event_id,json=startEventId" json:"start_event_id,omitempty"`
	InjectedJobId *string `protobuf:"bytes,3,opt,name=injected_job_id,json=injectedJobId" json:"injected_job_id,omitempty"`
	ResponseType  *string `protobuf:"bytes,4,opt,name=response_type,json=responseType" json:"response_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteVpnCustomerGatewayRequest) Reset() {
	*x = DeleteVpnCustomerGatewayRequest{}
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteVpnCustomerGatewayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVpnCustomerGatewayRequest) ProtoMessage() {}

func (x *DeleteVpnCustomerGatewayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVpnCustomerGatewayRequest.ProtoReflect.Descriptor instead.
func (*DeleteVpnCustomerGatewayRequest) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_vpn_v1_vpn_gen_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteVpnCustomerGatewayRequest) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *DeleteVpnCustomerGatewayRequest) GetStartEventId() int64 {
	if x != nil && x.StartEventId != nil {
		return *x.StartEventId
	}
	return 0
}

func (x *DeleteVpnCustomerGatewayRequest) GetInjectedJobId() string {
	if x != nil && x.InjectedJobId != nil {
		return *x.InjectedJobId
	}
	return ""
}

func (x *DeleteVpnCustomerGatewayRequest) GetResponseType() string {
	if x != nil && x.ResponseType != nil {
		return *x.ResponseType
	}
	return ""
}

// DeleteVpnCustomerGatewayResponse represents the response from delete site to site vpn customer gateway
type DeleteVpnCustomerGatewayResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Result
	Result        *Result `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteVpnCustomerGatewayResponse) Reset() {
	*x = DeleteVpnCustomerGatewayResponse{}
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteVpnCustomerGatewayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVpnCustomerGatewayResponse) ProtoMessage() {}

func (x *DeleteVpnCustomerGatewayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVpnCustomerGatewayResponse.ProtoReflect.Descriptor instead.
func (*DeleteVpnCustomerGatewayResponse) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_vpn_v1_vpn_gen_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteVpnCustomerGatewayResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

// DeleteVpnGatewayRequest represents the parameters for delete site to site vpn gateway
type DeleteVpnGatewayRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// id of customer gateway
	Id *int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	StartEventId *int64 `protobuf:"varint,2,opt,name=start_event_id,json=startEventId" json:"start_event_id,omitempty"`
	InjectedJobId *string `protobuf:"bytes,3,opt,name=injected_job_id,json=injectedJobId" json:"injected_job_id,omitempty"`
	ResponseType  *string `protobuf:"bytes,4,opt,name=response_type,json=responseType" json:"response_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteVpnGatewayRequest) Reset() {
	*x = DeleteVpnGatewayRequest{}
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteVpnGatewayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVpnGatewayRequest) ProtoMessage() {}

func (x *DeleteVpnGatewayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVpnGatewayRequest.ProtoReflect.Descriptor instead.
func (*DeleteVpnGatewayRequest) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_vpn_v1_vpn_gen_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteVpnGatewayRequest) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *DeleteVpnGatewayRequest) GetStartEventId() int64 {
	if x != nil && x.StartEventId != nil {
		return *x.StartEventId
	}
	return 0
}

func (x *DeleteVpnGatewayRequest) GetInjectedJobId() string {
	if x != nil && x.InjectedJobId != nil {
		return *x.InjectedJobId
	}
	return ""
}

func (x *DeleteVpnGatewayRequest) GetResponseType() string {
	if x != nil && x.ResponseType != nil {
		return *x.ResponseType
	}
	return ""
}

// DeleteVpnGatewayResponse represents the response from delete site to site vpn gateway
type DeleteVpnGatewayResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Result
	Result        *Result `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteVpnGatewayResponse) Reset() {
	*x = DeleteVpnGatewayResponse{}
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteVpnGatewayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVpnGatewayResponse) ProtoMessage() {}

func (x *DeleteVpnGatewayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVpnGatewayResponse.ProtoReflect.Descriptor instead.
func (*DeleteVpnGatewayResponse) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_vpn_v1_vpn_gen_proto_rawDescGZIP(), []int{17}
}

func (x *DeleteVpnGatewayResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

// ListRemoteAccessVpnsRequest represents the parameters for lists remote access vpns
type ListRemoteAccessVpnsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// public ip address id of the vpn server
	PublicIpId *int64 `protobuf:"varint,1,opt,name=public_ip_id,json=publicIpId" json:"public_ip_id,omitempty"`
	// Lists remote access vpn rule with the specified ID
	Id *int64 `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	// list remote access VPNs for certain network
	NetworkId *int64 `protobuf:"varint,3,opt,name=network_id,json=networkId" json:"network_id,omitempty"`
	// list resources by display flag; only ROOT admin is eligible to pass this parameter
	Display *bool `protobuf:"varint,4,opt,name=display" json:"display,omitempty"`
	// list objects by project; if projectid=-1 lists All VMs
	ProjectId *int64 `protobuf:"varint,5,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	// list resources by account. Must be used with the domainId parameter.
	AccountName *string `protobuf:"bytes,6,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	// If set to false, list only resources belonging to the command's caller; if set to true - list resources that the caller is authorized to see. Default value is false. Resources dedicated to a project are listed only if using the projectid parameter.
	ListAll *bool `protobuf:"varint,7,opt,name=list_all,json=listAll" json:"list_all,omitempty"`
	// list only resources belonging to the domain specified
	DomainId *int64 `protobuf:"varint,8,opt,name=domain_id,json=domainId" json:"domain_id,omitempty"`
	// defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.
	Recursive *bool `protobuf:"varint,9,opt,name=recursive" json:"recursive,omitempty"`
	// List by keyword
	Keyword *string `protobuf:"bytes,10,opt,name=keyword" json:"keyword,omitempty"`
	Page *int32 `protobuf:"varint,11,opt,name=page" json:"page,omitempty"`
	PageSize *int32 `protobuf:"varint,12,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	ResponseType  *string `protobuf:"bytes,13,opt,name=response_type,json=responseType" json:"response_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRemoteAccessVpnsRequest) Reset() {
	*x = ListRemoteAccessVpnsRequest{}
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRemoteAccessVpnsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRemoteAccessVpnsRequest) ProtoMessage() {}

func (x *ListRemoteAccessVpnsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRemoteAccessVpnsRequest.ProtoReflect.Descriptor instead.
func (*ListRemoteAccessVpnsRequest) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_vpn_v1_vpn_gen_proto_rawDescGZIP(), []int{18}
}

func (x *ListRemoteAccessVpnsRequest) GetPublicIpId() int64 {
	if x != nil && x.PublicIpId != nil {
		return *x.PublicIpId
	}
	return 0
}

func (x *ListRemoteAccessVpnsRequest) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ListRemoteAccessVpnsRequest) GetNetworkId() int64 {
	if x != nil && x.NetworkId != nil {
		return *x.NetworkId
	}
	return 0
}

func (x *ListRemoteAccessVpnsRequest) GetDisplay() bool {
	if x != nil && x.Display != nil {
		return *x.Display
	}
	return false
}

func (x *ListRemoteAccessVpnsRequest) GetProjectId() int64 {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return 0
}

func (x *ListRemoteAccessVpnsRequest) GetAccountName() string {
	if x != nil && x.AccountName != nil {
		return *x.AccountName
	}
	return ""
}

func (x *ListRemoteAccessVpnsRequest) GetListAll() bool {
	if x != nil && x.ListAll != nil {
		return *x.ListAll
	}
	return false
}

func (x *ListRemoteAccessVpnsRequest) GetDomainId() int64 {
	if x != nil && x.DomainId != nil {
		return *x.DomainId
	}
	return 0
}

func (x *ListRemoteAccessVpnsRequest) GetRecursive() bool {
	if x != nil && x.Recursive != nil {
		return *x.Recursive
	}
	return false
}

func (x *ListRemoteAccessVpnsRequest) GetKeyword() string {
	if x != nil && x.Keyword != nil {
		return *x.Keyword
	}
	return ""
}

func (x *ListRemoteAccessVpnsRequest) GetPage() int32 {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return 0
}

func (x *ListRemoteAccessVpnsRequest) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *ListRemoteAccessVpnsRequest) GetResponseType() string {
	if x != nil && x.ResponseType != nil {
		return *x.ResponseType
	}
	return ""
}

// ListRemoteAccessVpnsResponse represents the response from lists remote access vpns
type ListRemoteAccessVpnsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The list of RemoteAccessVpns
	Items []*RemoteAccessVpn `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	// The total count of RemoteAccessVpns
	TotalCount    *int32 `protobuf:"varint,2,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRemoteAccessVpnsResponse) Reset() {
	*x = ListRemoteAccessVpnsResponse{}
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRemoteAccessVpnsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRemoteAccessVpnsResponse) ProtoMessage() {}

func (x *ListRemoteAccessVpnsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRemoteAccessVpnsResponse.ProtoReflect.Descriptor instead.
func (*ListRemoteAccessVpnsResponse) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_vpn_v1_vpn_gen_proto_rawDescGZIP(), []int{19}
}

func (x *ListRemoteAccessVpnsResponse) GetItems() []*RemoteAccessVpn {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListRemoteAccessVpnsResponse) GetTotalCount() int32 {
	if x != nil && x.TotalCount != nil {
		return *x.TotalCount
	}
	return 0
}

// ListVpnConnectionsRequest represents the parameters for lists site to site vpn connection gateways
type ListVpnConnectionsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// id of the vpn connection
	Id *int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// id of vpc
	VpcId *int64 `protobuf:"varint,2,opt,name=vpc_id,json=vpcId" json:"vpc_id,omitempty"`
	// list resources by display flag; only ROOT admin is eligible to pass this parameter
	Display *bool `protobuf:"varint,3,opt,name=display" json:"display,omitempty"`
	// list objects by project; if projectid=-1 lists All VMs
	ProjectId *int64 `protobuf:"varint,4,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	// list resources by account. Must be used with the domainId parameter.
	AccountName *string `protobuf:"bytes,5,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	// If set to false, list only resources belonging to the command's caller; if set to true - list resources that the caller is authorized to see. Default value is false. Resources dedicated to a project are listed only if using the projectid parameter.
	ListAll *bool `protobuf:"varint,6,opt,name=list_all,json=listAll" json:"list_all,omitempty"`
	// list only resources belonging to the domain specified
	DomainId *int64 `protobuf:"varint,7,opt,name=domain_id,json=domainId" json:"domain_id,omitempty"`
	// defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.
	Recursive *bool `protobuf:"varint,8,opt,name=recursive" json:"recursive,omitempty"`
	// List by keyword
	Keyword *string `protobuf:"bytes,9,opt,name=keyword" json:"keyword,omitempty"`
	Page *int32 `protobuf:"varint,10,opt,name=page" json:"page,omitempty"`
	PageSize *int32 `protobuf:"varint,11,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	ResponseType  *string `protobuf:"bytes,12,opt,name=response_type,json=responseType" json:"response_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListVpnConnectionsRequest) Reset() {
	*x = ListVpnConnectionsRequest{}
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVpnConnectionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVpnConnectionsRequest) ProtoMessage() {}

func (x *ListVpnConnectionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVpnConnectionsRequest.ProtoReflect.Descriptor instead.
func (*ListVpnConnectionsRequest) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_vpn_v1_vpn_gen_proto_rawDescGZIP(), []int{20}
}

func (x *ListVpnConnectionsRequest) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ListVpnConnectionsRequest) GetVpcId() int64 {
	if x != nil && x.VpcId != nil {
		return *x.VpcId
	}
	return 0
}

func (x *ListVpnConnectionsRequest) GetDisplay() bool {
	if x != nil && x.Display != nil {
		return *x.Display
	}
	return false
}

func (x *ListVpnConnectionsRequest) GetProjectId() int64 {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return 0
}

func (x *ListVpnConnectionsRequest) GetAccountName() string {
	if x != nil && x.AccountName != nil {
		return *x.AccountName
	}
	return ""
}

func (x *ListVpnConnectionsRequest) GetListAll() bool {
	if x != nil && x.ListAll != nil {
		return *x.ListAll
	}
	return false
}

func (x *ListVpnConnectionsRequest) GetDomainId() int64 {
	if x != nil && x.DomainId != nil {
		return *x.DomainId
	}
	return 0
}

func (x *ListVpnConnectionsRequest) GetRecursive() bool {
	if x != nil && x.Recursive != nil {
		return *x.Recursive
	}
	return false
}

func (x *ListVpnConnectionsRequest) GetKeyword() string {
	if x != nil && x.Keyword != nil {
		return *x.Keyword
	}
	return ""
}

func (x *ListVpnConnectionsRequest) GetPage() int32 {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return 0
}

func (x *ListVpnConnectionsRequest) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *ListVpnConnectionsRequest) GetResponseType() string {
	if x != nil && x.ResponseType != nil {
		return *x.ResponseType
	}
	return ""
}

// ListVpnConnectionsResponse represents the response from lists site to site vpn connection gateways
type ListVpnConnectionsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The list of Site2SiteVpnConnections
	Items []*Site2SiteVpnConnection `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	// The total count of Site2SiteVpnConnections
	TotalCount    *int32 `protobuf:"varint,2,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListVpnConnectionsResponse) Reset() {
	*x = ListVpnConnectionsResponse{}
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVpnConnectionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVpnConnectionsResponse) ProtoMessage() {}

func (x *ListVpnConnectionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVpnConnectionsResponse.ProtoReflect.Descriptor instead.
func (*ListVpnConnectionsResponse) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_vpn_v1_vpn_gen_proto_rawDescGZIP(), []int{21}
}

func (x *ListVpnConnectionsResponse) GetItems() []*Site2SiteVpnConnection {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListVpnConnectionsResponse) GetTotalCount() int32 {
	if x != nil && x.TotalCount != nil {
		return *x.TotalCount
	}
	return 0
}

// ListVpnCustomerGatewaysRequest represents the parameters for lists site to site vpn customer gateways
type ListVpnCustomerGatewaysRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// id of the customer gateway
	Id *int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// list objects by project; if projectid=-1 lists All VMs
	ProjectId *int64 `protobuf:"varint,2,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	// list resources by account. Must be used with the domainId parameter.
	AccountName *string `protobuf:"bytes,3,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	// If set to false, list only resources belonging to the command's caller; if set to true - list resources that the caller is authorized to see. Default value is false. Resources dedicated to a project are listed only if using the projectid parameter.
	ListAll *bool `protobuf:"varint,4,opt,name=list_all,json=listAll" json:"list_all,omitempty"`
	// list only resources belonging to the domain specified
	DomainId *int64 `protobuf:"varint,5,opt,name=domain_id,json=domainId" json:"domain_id,omitempty"`
	// defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.
	Recursive *bool `protobuf:"varint,6,opt,name=recursive" json:"recursive,omitempty"`
	// List by keyword
	Keyword *string `protobuf:"bytes,7,opt,name=keyword" json:"keyword,omitempty"`
	Page *int32 `protobuf:"varint,8,opt,name=page" json:"page,omitempty"`
	PageSize *int32 `protobuf:"varint,9,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	ResponseType  *string `protobuf:"bytes,10,opt,name=response_type,json=responseType" json:"response_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListVpnCustomerGatewaysRequest) Reset() {
	*x = ListVpnCustomerGatewaysRequest{}
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVpnCustomerGatewaysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVpnCustomerGatewaysRequest) ProtoMessage() {}

func (x *ListVpnCustomerGatewaysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVpnCustomerGatewaysRequest.ProtoReflect.Descriptor instead.
func (*ListVpnCustomerGatewaysRequest) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_vpn_v1_vpn_gen_proto_rawDescGZIP(), []int{22}
}

func (x *ListVpnCustomerGatewaysRequest) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ListVpnCustomerGatewaysRequest) GetProjectId() int64 {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return 0
}

func (x *ListVpnCustomerGatewaysRequest) GetAccountName() string {
	if x != nil && x.AccountName != nil {
		return *x.AccountName
	}
	return ""
}

func (x *ListVpnCustomerGatewaysRequest) GetListAll() bool {
	if x != nil && x.ListAll != nil {
		return *x.ListAll
	}
	return false
}

func (x *ListVpnCustomerGatewaysRequest) GetDomainId() int64 {
	if x != nil && x.DomainId != nil {
		return *x.DomainId
	}
	return 0
}

func (x *ListVpnCustomerGatewaysRequest) GetRecursive() bool {
	if x != nil && x.Recursive != nil {
		return *x.Recursive
	}
	return false
}

func (x *ListVpnCustomerGatewaysRequest) GetKeyword() string {
	if x != nil && x.Keyword != nil {
		return *x.Keyword
	}
	return ""
}

func (x *ListVpnCustomerGatewaysRequest) GetPage() int32 {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return 0
}

func (x *ListVpnCustomerGatewaysRequest) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *ListVpnCustomerGatewaysRequest) GetResponseType() string {
	if x != nil && x.ResponseType != nil {
		return *x.ResponseType
	}
	return ""
}

// ListVpnCustomerGatewaysResponse represents the response from lists site to site vpn customer gateways
type ListVpnCustomerGatewaysResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The list of Site2SiteCustomerGateways
	Items []*Site2SiteCustomerGateway `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	// The total count of Site2SiteCustomerGateways
	TotalCount    *int32 `protobuf:"varint,2,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListVpnCustomerGatewaysResponse) Reset() {
	*x = ListVpnCustomerGatewaysResponse{}
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVpnCustomerGatewaysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVpnCustomerGatewaysResponse) ProtoMessage() {}

func (x *ListVpnCustomerGatewaysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVpnCustomerGatewaysResponse.ProtoReflect.Descriptor instead.
func (*ListVpnCustomerGatewaysResponse) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_vpn_v1_vpn_gen_proto_rawDescGZIP(), []int{23}
}

func (x *ListVpnCustomerGatewaysResponse) GetItems() []*Site2SiteCustomerGateway {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListVpnCustomerGatewaysResponse) GetTotalCount() int32 {
	if x != nil && x.TotalCount != nil {
		return *x.TotalCount
	}
	return 0
}

// ListVpnGatewaysRequest represents the parameters for lists site 2 site vpn gateways
type ListVpnGatewaysRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// id of the vpn gateway
	Id *int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// id of vpc
	VpcId *int64 `protobuf:"varint,2,opt,name=vpc_id,json=vpcId" json:"vpc_id,omitempty"`
	// list resources by display flag; only ROOT admin is eligible to pass this parameter
	Display *bool `protobuf:"varint,3,opt,name=display" json:"display,omitempty"`
	// list objects by project; if projectid=-1 lists All VMs
	ProjectId *int64 `protobuf:"varint,4,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	// list resources by account. Must be used with the domainId parameter.
	AccountName *string `protobuf:"bytes,5,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	// If set to false, list only resources belonging to the command's caller; if set to true - list resources that the caller is authorized to see. Default value is false. Resources dedicated to a project are listed only if using the projectid parameter.
	ListAll *bool `protobuf:"varint,6,opt,name=list_all,json=listAll" json:"list_all,omitempty"`
	// list only resources belonging to the domain specified
	DomainId *int64 `protobuf:"varint,7,opt,name=domain_id,json=domainId" json:"domain_id,omitempty"`
	// defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.
	Recursive *bool `protobuf:"varint,8,opt,name=recursive" json:"recursive,omitempty"`
	// List by keyword
	Keyword *string `protobuf:"bytes,9,opt,name=keyword" json:"keyword,omitempty"`
	Page *int32 `protobuf:"varint,10,opt,name=page" json:"page,omitempty"`
	PageSize *int32 `protobuf:"varint,11,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	ResponseType  *string `protobuf:"bytes,12,opt,name=response_type,json=responseType" json:"response_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListVpnGatewaysRequest) Reset() {
	*x = ListVpnGatewaysRequest{}
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVpnGatewaysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVpnGatewaysRequest) ProtoMessage() {}

func (x *ListVpnGatewaysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVpnGatewaysRequest.ProtoReflect.Descriptor instead.
func (*ListVpnGatewaysRequest) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_vpn_v1_vpn_gen_proto_rawDescGZIP(), []int{24}
}

func (x *ListVpnGatewaysRequest) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ListVpnGatewaysRequest) GetVpcId() int64 {
	if x != nil && x.VpcId != nil {
		return *x.VpcId
	}
	return 0
}

func (x *ListVpnGatewaysRequest) GetDisplay() bool {
	if x != nil && x.Display != nil {
		return *x.Display
	}
	return false
}

func (x *ListVpnGatewaysRequest) GetProjectId() int64 {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return 0
}

func (x *ListVpnGatewaysRequest) GetAccountName() string {
	if x != nil && x.AccountName != nil {
		return *x.AccountName
	}
	return ""
}

func (x *ListVpnGatewaysRequest) GetListAll() bool {
	if x != nil && x.ListAll != nil {
		return *x.ListAll
	}
	return false
}

func (x *ListVpnGatewaysRequest) GetDomainId() int64 {
	if x != nil && x.DomainId != nil {
		return *x.DomainId
	}
	return 0
}

func (x *ListVpnGatewaysRequest) GetRecursive() bool {
	if x != nil && x.Recursive != nil {
		return *x.Recursive
	}
	return false
}

func (x *ListVpnGatewaysRequest) GetKeyword() string {
	if x != nil && x.Keyword != nil {
		return *x.Keyword
	}
	return ""
}

func (x *ListVpnGatewaysRequest) GetPage() int32 {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return 0
}

func (x *ListVpnGatewaysRequest) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *ListVpnGatewaysRequest) GetResponseType() string {
	if x != nil && x.ResponseType != nil {
		return *x.ResponseType
	}
	return ""
}

// ListVpnGatewaysResponse represents the response from lists site 2 site vpn gateways
type ListVpnGatewaysResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The list of Site2SiteVpnGateways
	Items []*Site2SiteVpnGateway `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	// The total count of Site2SiteVpnGateways
	TotalCount    *int32 `protobuf:"varint,2,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListVpnGatewaysResponse) Reset() {
	*x = ListVpnGatewaysResponse{}
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVpnGatewaysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVpnGatewaysResponse) ProtoMessage() {}

func (x *ListVpnGatewaysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVpnGatewaysResponse.ProtoReflect.Descriptor instead.
func (*ListVpnGatewaysResponse) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_vpn_v1_vpn_gen_proto_rawDescGZIP(), []int{25}
}

func (x *ListVpnGatewaysResponse) GetItems() []*Site2SiteVpnGateway {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListVpnGatewaysResponse) GetTotalCount() int32 {
	if x != nil && x.TotalCount != nil {
		return *x.TotalCount
	}
	return 0
}

// ListVpnUsersRequest represents the parameters for lists vpn users
type ListVpnUsersRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The uuid of the Vpn user
	Id *int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// the username of the vpn user.
	UserName *string `protobuf:"bytes,2,opt,name=user_name,json=userName" json:"user_name,omitempty"`
	// list objects by project; if projectid=-1 lists All VMs
	ProjectId *int64 `protobuf:"varint,3,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	// list resources by account. Must be used with the domainId parameter.
	AccountName *string `protobuf:"bytes,4,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	// If set to false, list only resources belonging to the command's caller; if set to true - list resources that the caller is authorized to see. Default value is false. Resources dedicated to a project are listed only if using the projectid parameter.
	ListAll *bool `protobuf:"varint,5,opt,name=list_all,json=listAll" json:"list_all,omitempty"`
	// list only resources belonging to the domain specified
	DomainId *int64 `protobuf:"varint,6,opt,name=domain_id,json=domainId" json:"domain_id,omitempty"`
	// defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.
	Recursive *bool `protobuf:"varint,7,opt,name=recursive" json:"recursive,omitempty"`
	// List by keyword
	Keyword *string `protobuf:"bytes,8,opt,name=keyword" json:"keyword,omitempty"`
	Page *int32 `protobuf:"varint,9,opt,name=page" json:"page,omitempty"`
	PageSize *int32 `protobuf:"varint,10,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	ResponseType  *string `protobuf:"bytes,11,opt,name=response_type,json=responseType" json:"response_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListVpnUsersRequest) Reset() {
	*x = ListVpnUsersRequest{}
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVpnUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVpnUsersRequest) ProtoMessage() {}

func (x *ListVpnUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVpnUsersRequest.ProtoReflect.Descriptor instead.
func (*ListVpnUsersRequest) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_vpn_v1_vpn_gen_proto_rawDescGZIP(), []int{26}
}

func (x *ListVpnUsersRequest) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ListVpnUsersRequest) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *ListVpnUsersRequest) GetProjectId() int64 {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return 0
}

func (x *ListVpnUsersRequest) GetAccountName() string {
	if x != nil && x.AccountName != nil {
		return *x.AccountName
	}
	return ""
}

func (x *ListVpnUsersRequest) GetListAll() bool {
	if x != nil && x.ListAll != nil {
		return *x.ListAll
	}
	return false
}

func (x *ListVpnUsersRequest) GetDomainId() int64 {
	if x != nil && x.DomainId != nil {
		return *x.DomainId
	}
	return 0
}

func (x *ListVpnUsersRequest) GetRecursive() bool {
	if x != nil && x.Recursive != nil {
		return *x.Recursive
	}
	return false
}

func (x *ListVpnUsersRequest) GetKeyword() string {
	if x != nil && x.Keyword != nil {
		return *x.Keyword
	}
	return ""
}

func (x *ListVpnUsersRequest) GetPage() int32 {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return 0
}

func (x *ListVpnUsersRequest) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *ListVpnUsersRequest) GetResponseType() string {
	if x != nil && x.ResponseType != nil {
		return *x.ResponseType
	}
	return ""
}

// ListVpnUsersResponse represents the response from lists vpn users
type ListVpnUsersResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The list of VpnUserss
	Items []*VpnUsers `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	// The total count of VpnUserss
	TotalCount    *int32 `protobuf:"varint,2,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListVpnUsersResponse) Reset() {
	*x = ListVpnUsersResponse{}
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVpnUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVpnUsersResponse) ProtoMessage() {}

func (x *ListVpnUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVpnUsersResponse.ProtoReflect.Descriptor instead.
func (*ListVpnUsersResponse) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_vpn_v1_vpn_gen_proto_rawDescGZIP(), []int{27}
}

func (x *ListVpnUsersResponse) GetItems() []*VpnUsers {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListVpnUsersResponse) GetTotalCount() int32 {
	if x != nil && x.TotalCount != nil {
		return *x.TotalCount
	}
	return 0
}

// RemoveVpnUserRequest represents the parameters for removes vpn user
type RemoveVpnUserRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// username for the vpn user
	UserName *string `protobuf:"bytes,1,opt,name=user_name,json=userName" json:"user_name,omitempty"`
	// an optional account for the vpn user. Must be used with domainId.
	AccountName *string `protobuf:"bytes,2,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	// remove vpn user from the project
	ProjectId *int64 `protobuf:"varint,3,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	// an optional domainId for the vpn user. If the account parameter is used, domainId must also be used.
	DomainId *int64 `protobuf:"varint,4,opt,name=domain_id,json=domainId" json:"domain_id,omitempty"`
	StartEventId *int64 `protobuf:"varint,5,opt,name=start_event_id,json=startEventId" json:"start_event_id,omitempty"`
	InjectedJobId *string `protobuf:"bytes,6,opt,name=injected_job_id,json=injectedJobId" json:"injected_job_id,omitempty"`
	ResponseType  *string `protobuf:"bytes,7,opt,name=response_type,json=responseType" json:"response_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveVpnUserRequest) Reset() {
	*x = RemoveVpnUserRequest{}
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveVpnUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveVpnUserRequest) ProtoMessage() {}

func (x *RemoveVpnUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveVpnUserRequest.ProtoReflect.Descriptor instead.
func (*RemoveVpnUserRequest) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_vpn_v1_vpn_gen_proto_rawDescGZIP(), []int{28}
}

func (x *RemoveVpnUserRequest) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *RemoveVpnUserRequest) GetAccountName() string {
	if x != nil && x.AccountName != nil {
		return *x.AccountName
	}
	return ""
}

func (x *RemoveVpnUserRequest) GetProjectId() int64 {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return 0
}

func (x *RemoveVpnUserRequest) GetDomainId() int64 {
	if x != nil && x.DomainId != nil {
		return *x.DomainId
	}
	return 0
}

func (x *RemoveVpnUserRequest) GetStartEventId() int64 {
	if x != nil && x.StartEventId != nil {
		return *x.StartEventId
	}
	return 0
}

func (x *RemoveVpnUserRequest) GetInjectedJobId() string {
	if x != nil && x.InjectedJobId != nil {
		return *x.InjectedJobId
	}
	return ""
}

func (x *RemoveVpnUserRequest) GetResponseType() string {
	if x != nil && x.ResponseType != nil {
		return *x.ResponseType
	}
	return ""
}

// RemoveVpnUserResponse represents the response from removes vpn user
type RemoveVpnUserResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Result
	Result        *Result `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveVpnUserResponse) Reset() {
	*x = RemoveVpnUserResponse{}
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveVpnUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveVpnUserResponse) ProtoMessage() {}

func (x *RemoveVpnUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveVpnUserResponse.ProtoReflect.Descriptor instead.
func (*RemoveVpnUserResponse) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_vpn_v1_vpn_gen_proto_rawDescGZIP(), []int{29}
}

func (x *RemoveVpnUserResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

// ResetVpnConnectionRequest represents the parameters for reset site to site vpn connection
type ResetVpnConnectionRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// id of vpn connection
	Id *int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// an optional account for connection. Must be used with domainId.
	AccountName *string `protobuf:"bytes,2,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	// an optional domainId for connection. If the account parameter is used, domainId must also be used.
	DomainId *int64 `protobuf:"varint,3,opt,name=domain_id,json=domainId" json:"domain_id,omitempty"`
	StartEventId *int64 `protobuf:"varint,4,opt,name=start_event_id,json=startEventId" json:"start_event_id,omitempty"`
	InjectedJobId *string `protobuf:"bytes,5,opt,name=injected_job_id,json=injectedJobId" json:"injected_job_id,omitempty"`
	ResponseType  *string `protobuf:"bytes,6,opt,name=response_type,json=responseType" json:"response_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResetVpnConnectionRequest) Reset() {
	*x = ResetVpnConnectionRequest{}
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResetVpnConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetVpnConnectionRequest) ProtoMessage() {}

func (x *ResetVpnConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetVpnConnectionRequest.ProtoReflect.Descriptor instead.
func (*ResetVpnConnectionRequest) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_vpn_v1_vpn_gen_proto_rawDescGZIP(), []int{30}
}

func (x *ResetVpnConnectionRequest) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ResetVpnConnectionRequest) GetAccountName() string {
	if x != nil && x.AccountName != nil {
		return *x.AccountName
	}
	return ""
}

func (x *ResetVpnConnectionRequest) GetDomainId() int64 {
	if x != nil && x.DomainId != nil {
		return *x.DomainId
	}
	return 0
}

func (x *ResetVpnConnectionRequest) GetStartEventId() int64 {
	if x != nil && x.StartEventId != nil {
		return *x.StartEventId
	}
	return 0
}

func (x *ResetVpnConnectionRequest) GetInjectedJobId() string {
	if x != nil && x.InjectedJobId != nil {
		return *x.InjectedJobId
	}
	return ""
}

func (x *ResetVpnConnectionRequest) GetResponseType() string {
	if x != nil && x.ResponseType != nil {
		return *x.ResponseType
	}
	return ""
}

// ResetVpnConnectionResponse represents the response from reset site to site vpn connection
type ResetVpnConnectionResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Result
	Result        *Result `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResetVpnConnectionResponse) Reset() {
	*x = ResetVpnConnectionResponse{}
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResetVpnConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetVpnConnectionResponse) ProtoMessage() {}

func (x *ResetVpnConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetVpnConnectionResponse.ProtoReflect.Descriptor instead.
func (*ResetVpnConnectionResponse) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_vpn_v1_vpn_gen_proto_rawDescGZIP(), []int{31}
}

func (x *ResetVpnConnectionResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

// UpdateRemoteAccessVpnRequest represents the parameters for updates remote access vpn
type UpdateRemoteAccessVpnRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// id of the remote access vpn
	Id *int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// an optional field, whether to the display the vpn to the end user or not
	Display *bool `protobuf:"varint,2,opt,name=display" json:"display,omitempty"`
	// an optional field, in case you want to set a custom id to the resource. Allowed to Root Admins only
	CustomId *string `protobuf:"bytes,3,opt,name=custom_id,json=customId" json:"custom_id,omitempty"`
	StartEventId *int64 `protobuf:"varint,4,opt,name=start_event_id,json=startEventId" json:"start_event_id,omitempty"`
	InjectedJobId *string `protobuf:"bytes,5,opt,name=injected_job_id,json=injectedJobId" json:"injected_job_id,omitempty"`
	ResponseType  *string `protobuf:"bytes,6,opt,name=response_type,json=responseType" json:"response_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateRemoteAccessVpnRequest) Reset() {
	*x = UpdateRemoteAccessVpnRequest{}
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRemoteAccessVpnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRemoteAccessVpnRequest) ProtoMessage() {}

func (x *UpdateRemoteAccessVpnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRemoteAccessVpnRequest.ProtoReflect.Descriptor instead.
func (*UpdateRemoteAccessVpnRequest) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_vpn_v1_vpn_gen_proto_rawDescGZIP(), []int{32}
}

func (x *UpdateRemoteAccessVpnRequest) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *UpdateRemoteAccessVpnRequest) GetDisplay() bool {
	if x != nil && x.Display != nil {
		return *x.Display
	}
	return false
}

func (x *UpdateRemoteAccessVpnRequest) GetCustomId() string {
	if x != nil && x.CustomId != nil {
		return *x.CustomId
	}
	return ""
}

func (x *UpdateRemoteAccessVpnRequest) GetStartEventId() int64 {
	if x != nil && x.StartEventId != nil {
		return *x.StartEventId
	}
	return 0
}

func (x *UpdateRemoteAccessVpnRequest) GetInjectedJobId() string {
	if x != nil && x.InjectedJobId != nil {
		return *x.InjectedJobId
	}
	return ""
}

func (x *UpdateRemoteAccessVpnRequest) GetResponseType() string {
	if x != nil && x.ResponseType != nil {
		return *x.ResponseType
	}
	return ""
}

// UpdateRemoteAccessVpnResponse represents the response from updates remote access vpn
type UpdateRemoteAccessVpnResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Result
	Result        *Result `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateRemoteAccessVpnResponse) Reset() {
	*x = UpdateRemoteAccessVpnResponse{}
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRemoteAccessVpnResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRemoteAccessVpnResponse) ProtoMessage() {}

func (x *UpdateRemoteAccessVpnResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRemoteAccessVpnResponse.ProtoReflect.Descriptor instead.
func (*UpdateRemoteAccessVpnResponse) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_vpn_v1_vpn_gen_proto_rawDescGZIP(), []int{33}
}

func (x *UpdateRemoteAccessVpnResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

// UpdateVpnConnectionRequest represents the parameters for updates site to site vpn connection
type UpdateVpnConnectionRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// id of vpn connection
	Id *int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// an optional field, whether to the display the vpn to the end user or not
	Display *bool `protobuf:"varint,2,opt,name=display" json:"display,omitempty"`
	// an optional field, in case you want to set a custom id to the resource. Allowed to Root Admins only
	CustomId *string `protobuf:"bytes,3,opt,name=custom_id,json=customId" json:"custom_id,omitempty"`
	StartEventId *int64 `protobuf:"varint,4,opt,name=start_event_id,json=startEventId" json:"start_event_id,omitempty"`
	InjectedJobId *string `protobuf:"bytes,5,opt,name=injected_job_id,json=injectedJobId" json:"injected_job_id,omitempty"`
	ResponseType  *string `protobuf:"bytes,6,opt,name=response_type,json=responseType" json:"response_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateVpnConnectionRequest) Reset() {
	*x = UpdateVpnConnectionRequest{}
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateVpnConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVpnConnectionRequest) ProtoMessage() {}

func (x *UpdateVpnConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVpnConnectionRequest.ProtoReflect.Descriptor instead.
func (*UpdateVpnConnectionRequest) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_vpn_v1_vpn_gen_proto_rawDescGZIP(), []int{34}
}

func (x *UpdateVpnConnectionRequest) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *UpdateVpnConnectionRequest) GetDisplay() bool {
	if x != nil && x.Display != nil {
		return *x.Display
	}
	return false
}

func (x *UpdateVpnConnectionRequest) GetCustomId() string {
	if x != nil && x.CustomId != nil {
		return *x.CustomId
	}
	return ""
}

func (x *UpdateVpnConnectionRequest) GetStartEventId() int64 {
	if x != nil && x.StartEventId != nil {
		return *x.StartEventId
	}
	return 0
}

func (x *UpdateVpnConnectionRequest) GetInjectedJobId() string {
	if x != nil && x.InjectedJobId != nil {
		return *x.InjectedJobId
	}
	return ""
}

func (x *UpdateVpnConnectionRequest) GetResponseType() string {
	if x != nil && x.ResponseType != nil {
		return *x.ResponseType
	}
	return ""
}

// UpdateVpnConnectionResponse represents the response from updates site to site vpn connection
type UpdateVpnConnectionResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Result
	Result        *Result `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateVpnConnectionResponse) Reset() {
	*x = UpdateVpnConnectionResponse{}
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateVpnConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVpnConnectionResponse) ProtoMessage() {}

func (x *UpdateVpnConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVpnConnectionResponse.ProtoReflect.Descriptor instead.
func (*UpdateVpnConnectionResponse) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_vpn_v1_vpn_gen_proto_rawDescGZIP(), []int{35}
}

func (x *UpdateVpnConnectionResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

// UpdateVpnCustomerGatewayRequest represents the parameters for update site to site vpn customer gateway
type UpdateVpnCustomerGatewayRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// id of customer gateway
	Id *int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// name of this customer gateway
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// public ip address id of the customer gateway
	GatewayIp *string `protobuf:"bytes,3,opt,name=gateway_ip,json=gatewayIp" json:"gateway_ip,omitempty"`
	// guest cidr of the customer gateway. Multiple entries must be separated by a single comma character (,).
	GuestCidrList *string `protobuf:"bytes,4,opt,name=guest_cidr_list,json=guestCidrList" json:"guest_cidr_list,omitempty"`
	// IPsec Preshared-Key of the customer gateway. Cannot contain newline or double quotes.
	IpsecPsk *string `protobuf:"bytes,5,opt,name=ipsec_psk,json=ipsecPsk" json:"ipsec_psk,omitempty"`
	// IKE policy of the customer gateway
	IkePolicy *string `protobuf:"bytes,6,opt,name=ike_policy,json=ikePolicy" json:"ike_policy,omitempty"`
	// ESP policy of the customer gateway
	EspPolicy *string `protobuf:"bytes,7,opt,name=esp_policy,json=espPolicy" json:"esp_policy,omitempty"`
	// Lifetime of phase 1 VPN connection to the customer gateway, in seconds
	IkeLifetime *int64 `protobuf:"varint,8,opt,name=ike_lifetime,json=ikeLifetime" json:"ike_lifetime,omitempty"`
	// Lifetime of phase 2 VPN connection to the customer gateway, in seconds
	EspLifetime *int64 `protobuf:"varint,9,opt,name=esp_lifetime,json=espLifetime" json:"esp_lifetime,omitempty"`
	// If DPD is enabled for VPN connection
	Dpd *bool `protobuf:"varint,10,opt,name=dpd" json:"dpd,omitempty"`
	// Force encapsulation for Nat Traversal
	Encap *bool `protobuf:"varint,11,opt,name=encap" json:"encap,omitempty"`
	// the account associated with the gateway. Must be used with the domainId parameter.
	AccountName *string `protobuf:"bytes,12,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	// the domain ID associated with the gateway. If used with the account parameter returns the gateway associated with the account for the specified domain.
	DomainId *int64 `protobuf:"varint,13,opt,name=domain_id,json=domainId" json:"domain_id,omitempty"`
	// For IKEv2, whether to split multiple right subnet cidrs into multiple connection statements.
	SplitConnections *bool `protobuf:"varint,14,opt,name=split_connections,json=splitConnections" json:"split_connections,omitempty"`
	// Which IKE Version to use, one of ike (autoselect), ikev1, or ikev2.Connections marked with 'ike' will use 'ikev2' when initiating, but accept any protocol version when responding. Defaults to ike
	IkeVersion *string `protobuf:"bytes,15,opt,name=ike_version,json=ikeVersion" json:"ike_version,omitempty"`
	StartEventId *int64 `protobuf:"varint,16,opt,name=start_event_id,json=startEventId" json:"start_event_id,omitempty"`
	InjectedJobId *string `protobuf:"bytes,17,opt,name=injected_job_id,json=injectedJobId" json:"injected_job_id,omitempty"`
	ResponseType  *string `protobuf:"bytes,18,opt,name=response_type,json=responseType" json:"response_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateVpnCustomerGatewayRequest) Reset() {
	*x = UpdateVpnCustomerGatewayRequest{}
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateVpnCustomerGatewayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVpnCustomerGatewayRequest) ProtoMessage() {}

func (x *UpdateVpnCustomerGatewayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVpnCustomerGatewayRequest.ProtoReflect.Descriptor instead.
func (*UpdateVpnCustomerGatewayRequest) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_vpn_v1_vpn_gen_proto_rawDescGZIP(), []int{36}
}

func (x *UpdateVpnCustomerGatewayRequest) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *UpdateVpnCustomerGatewayRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpdateVpnCustomerGatewayRequest) GetGatewayIp() string {
	if x != nil && x.GatewayIp != nil {
		return *x.GatewayIp
	}
	return ""
}

func (x *UpdateVpnCustomerGatewayRequest) GetGuestCidrList() string {
	if x != nil && x.GuestCidrList != nil {
		return *x.GuestCidrList
	}
	return ""
}

func (x *UpdateVpnCustomerGatewayRequest) GetIpsecPsk() string {
	if x != nil && x.IpsecPsk != nil {
		return *x.IpsecPsk
	}
	return ""
}

func (x *UpdateVpnCustomerGatewayRequest) GetIkePolicy() string {
	if x != nil && x.IkePolicy != nil {
		return *x.IkePolicy
	}
	return ""
}

func (x *UpdateVpnCustomerGatewayRequest) GetEspPolicy() string {
	if x != nil && x.EspPolicy != nil {
		return *x.EspPolicy
	}
	return ""
}

func (x *UpdateVpnCustomerGatewayRequest) GetIkeLifetime() int64 {
	if x != nil && x.IkeLifetime != nil {
		return *x.IkeLifetime
	}
	return 0
}

func (x *UpdateVpnCustomerGatewayRequest) GetEspLifetime() int64 {
	if x != nil && x.EspLifetime != nil {
		return *x.EspLifetime
	}
	return 0
}

func (x *UpdateVpnCustomerGatewayRequest) GetDpd() bool {
	if x != nil && x.Dpd != nil {
		return *x.Dpd
	}
	return false
}

func (x *UpdateVpnCustomerGatewayRequest) GetEncap() bool {
	if x != nil && x.Encap != nil {
		return *x.Encap
	}
	return false
}

func (x *UpdateVpnCustomerGatewayRequest) GetAccountName() string {
	if x != nil && x.AccountName != nil {
		return *x.AccountName
	}
	return ""
}

func (x *UpdateVpnCustomerGatewayRequest) GetDomainId() int64 {
	if x != nil && x.DomainId != nil {
		return *x.DomainId
	}
	return 0
}

func (x *UpdateVpnCustomerGatewayRequest) GetSplitConnections() bool {
	if x != nil && x.SplitConnections != nil {
		return *x.SplitConnections
	}
	return false
}

func (x *UpdateVpnCustomerGatewayRequest) GetIkeVersion() string {
	if x != nil && x.IkeVersion != nil {
		return *x.IkeVersion
	}
	return ""
}

func (x *UpdateVpnCustomerGatewayRequest) GetStartEventId() int64 {
	if x != nil && x.StartEventId != nil {
		return *x.StartEventId
	}
	return 0
}

func (x *UpdateVpnCustomerGatewayRequest) GetInjectedJobId() string {
	if x != nil && x.InjectedJobId != nil {
		return *x.InjectedJobId
	}
	return ""
}

func (x *UpdateVpnCustomerGatewayRequest) GetResponseType() string {
	if x != nil && x.ResponseType != nil {
		return *x.ResponseType
	}
	return ""
}

// UpdateVpnCustomerGatewayResponse represents the response from update site to site vpn customer gateway
type UpdateVpnCustomerGatewayResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Result
	Result        *Result `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateVpnCustomerGatewayResponse) Reset() {
	*x = UpdateVpnCustomerGatewayResponse{}
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateVpnCustomerGatewayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVpnCustomerGatewayResponse) ProtoMessage() {}

func (x *UpdateVpnCustomerGatewayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVpnCustomerGatewayResponse.ProtoReflect.Descriptor instead.
func (*UpdateVpnCustomerGatewayResponse) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_vpn_v1_vpn_gen_proto_rawDescGZIP(), []int{37}
}

func (x *UpdateVpnCustomerGatewayResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

// UpdateVpnGatewayRequest represents the parameters for updates site to site vpn local gateway
type UpdateVpnGatewayRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// id of customer gateway
	Id *int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// an optional field, whether to the display the vpn to the end user or not
	Display *bool `protobuf:"varint,2,opt,name=display" json:"display,omitempty"`
	// an optional field, in case you want to set a custom id to the resource. Allowed to Root Admins only
	CustomId *string `protobuf:"bytes,3,opt,name=custom_id,json=customId" json:"custom_id,omitempty"`
	StartEventId *int64 `protobuf:"varint,4,opt,name=start_event_id,json=startEventId" json:"start_event_id,omitempty"`
	InjectedJobId *string `protobuf:"bytes,5,opt,name=injected_job_id,json=injectedJobId" json:"injected_job_id,omitempty"`
	ResponseType  *string `protobuf:"bytes,6,opt,name=response_type,json=responseType" json:"response_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateVpnGatewayRequest) Reset() {
	*x = UpdateVpnGatewayRequest{}
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateVpnGatewayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVpnGatewayRequest) ProtoMessage() {}

func (x *UpdateVpnGatewayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVpnGatewayRequest.ProtoReflect.Descriptor instead.
func (*UpdateVpnGatewayRequest) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_vpn_v1_vpn_gen_proto_rawDescGZIP(), []int{38}
}

func (x *UpdateVpnGatewayRequest) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *UpdateVpnGatewayRequest) GetDisplay() bool {
	if x != nil && x.Display != nil {
		return *x.Display
	}
	return false
}

func (x *UpdateVpnGatewayRequest) GetCustomId() string {
	if x != nil && x.CustomId != nil {
		return *x.CustomId
	}
	return ""
}

func (x *UpdateVpnGatewayRequest) GetStartEventId() int64 {
	if x != nil && x.StartEventId != nil {
		return *x.StartEventId
	}
	return 0
}

func (x *UpdateVpnGatewayRequest) GetInjectedJobId() string {
	if x != nil && x.InjectedJobId != nil {
		return *x.InjectedJobId
	}
	return ""
}

func (x *UpdateVpnGatewayRequest) GetResponseType() string {
	if x != nil && x.ResponseType != nil {
		return *x.ResponseType
	}
	return ""
}

// UpdateVpnGatewayResponse represents the response from updates site to site vpn local gateway
type UpdateVpnGatewayResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Result
	Result        *Result `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateVpnGatewayResponse) Reset() {
	*x = UpdateVpnGatewayResponse{}
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateVpnGatewayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVpnGatewayResponse) ProtoMessage() {}

func (x *UpdateVpnGatewayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVpnGatewayResponse.ProtoReflect.Descriptor instead.
func (*UpdateVpnGatewayResponse) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_vpn_v1_vpn_gen_proto_rawDescGZIP(), []int{39}
}

func (x *UpdateVpnGatewayResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

// RemoteAccessVpn represents a RemoteAccessVpn Item
type RemoteAccessVpn struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the RemoteAccessVpn
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The name of the RemoteAccessVpn
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// The display name of the RemoteAccessVpn
	DisplayName *string `protobuf:"bytes,3,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
	// The description of the RemoteAccessVpn
	Description *string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	// The date this entity was created
	Created       *string `protobuf:"bytes,5,opt,name=created" json:"created,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoteAccessVpn) Reset() {
	*x = RemoteAccessVpn{}
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoteAccessVpn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteAccessVpn) ProtoMessage() {}

func (x *RemoteAccessVpn) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteAccessVpn.ProtoReflect.Descriptor instead.
func (*RemoteAccessVpn) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_vpn_v1_vpn_gen_proto_rawDescGZIP(), []int{40}
}

func (x *RemoteAccessVpn) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *RemoteAccessVpn) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *RemoteAccessVpn) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *RemoteAccessVpn) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *RemoteAccessVpn) GetCreated() string {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return ""
}

// Site2SiteCustomerGateway represents a Site2SiteCustomerGateway Item
type Site2SiteCustomerGateway struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the Site2SiteCustomerGateway
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The name of the Site2SiteCustomerGateway
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// The display name of the Site2SiteCustomerGateway
	DisplayName *string `protobuf:"bytes,3,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
	// The description of the Site2SiteCustomerGateway
	Description *string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	// The date this entity was created
	Created       *string `protobuf:"bytes,5,opt,name=created" json:"created,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Site2SiteCustomerGateway) Reset() {
	*x = Site2SiteCustomerGateway{}
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Site2SiteCustomerGateway) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Site2SiteCustomerGateway) ProtoMessage() {}

func (x *Site2SiteCustomerGateway) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Site2SiteCustomerGateway.ProtoReflect.Descriptor instead.
func (*Site2SiteCustomerGateway) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_vpn_v1_vpn_gen_proto_rawDescGZIP(), []int{41}
}

func (x *Site2SiteCustomerGateway) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Site2SiteCustomerGateway) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Site2SiteCustomerGateway) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *Site2SiteCustomerGateway) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Site2SiteCustomerGateway) GetCreated() string {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return ""
}

// Site2SiteVpnConnection represents a Site2SiteVpnConnection Item
type Site2SiteVpnConnection struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the Site2SiteVpnConnection
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The name of the Site2SiteVpnConnection
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// The display name of the Site2SiteVpnConnection
	DisplayName *string `protobuf:"bytes,3,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
	// The description of the Site2SiteVpnConnection
	Description *string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	// The date this entity was created
	Created       *string `protobuf:"bytes,5,opt,name=created" json:"created,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Site2SiteVpnConnection) Reset() {
	*x = Site2SiteVpnConnection{}
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Site2SiteVpnConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Site2SiteVpnConnection) ProtoMessage() {}

func (x *Site2SiteVpnConnection) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Site2SiteVpnConnection.ProtoReflect.Descriptor instead.
func (*Site2SiteVpnConnection) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_vpn_v1_vpn_gen_proto_rawDescGZIP(), []int{42}
}

func (x *Site2SiteVpnConnection) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Site2SiteVpnConnection) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Site2SiteVpnConnection) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *Site2SiteVpnConnection) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Site2SiteVpnConnection) GetCreated() string {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return ""
}

// Site2SiteVpnGateway represents a Site2SiteVpnGateway Item
type Site2SiteVpnGateway struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the Site2SiteVpnGateway
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The name of the Site2SiteVpnGateway
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// The display name of the Site2SiteVpnGateway
	DisplayName *string `protobuf:"bytes,3,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
	// The description of the Site2SiteVpnGateway
	Description *string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	// The date this entity was created
	Created       *string `protobuf:"bytes,5,opt,name=created" json:"created,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Site2SiteVpnGateway) Reset() {
	*x = Site2SiteVpnGateway{}
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Site2SiteVpnGateway) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Site2SiteVpnGateway) ProtoMessage() {}

func (x *Site2SiteVpnGateway) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Site2SiteVpnGateway.ProtoReflect.Descriptor instead.
func (*Site2SiteVpnGateway) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_vpn_v1_vpn_gen_proto_rawDescGZIP(), []int{43}
}

func (x *Site2SiteVpnGateway) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Site2SiteVpnGateway) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Site2SiteVpnGateway) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *Site2SiteVpnGateway) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Site2SiteVpnGateway) GetCreated() string {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return ""
}

// VpnUsers represents a VpnUsers Item
type VpnUsers struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the VpnUsers
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The name of the VpnUsers
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// The display name of the VpnUsers
	DisplayName *string `protobuf:"bytes,3,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
	// The description of the VpnUsers
	Description *string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	// The date this entity was created
	Created       *string `protobuf:"bytes,5,opt,name=created" json:"created,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VpnUsers) Reset() {
	*x = VpnUsers{}
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VpnUsers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpnUsers) ProtoMessage() {}

func (x *VpnUsers) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpnUsers.ProtoReflect.Descriptor instead.
func (*VpnUsers) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_vpn_v1_vpn_gen_proto_rawDescGZIP(), []int{44}
}

func (x *VpnUsers) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *VpnUsers) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *VpnUsers) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *VpnUsers) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *VpnUsers) GetCreated() string {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return ""
}

// Success represents a Success Operation Response
type Success struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// true if operation is executed successfully
	Success *bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	// any text associated with the success or failure
	DisplayText   *string `protobuf:"bytes,2,opt,name=display_text,json=displayText" json:"display_text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Success) Reset() {
	*x = Success{}
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Success) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Success) ProtoMessage() {}

func (x *Success) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Success.ProtoReflect.Descriptor instead.
func (*Success) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_vpn_v1_vpn_gen_proto_rawDescGZIP(), []int{45}
}

func (x *Success) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *Success) GetDisplayText() string {
	if x != nil && x.DisplayText != nil {
		return *x.DisplayText
	}
	return ""
}

// Result represents a generic operation result
type Result struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether the operation was successful
	Success *bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	// Any text associated with the success or failure
	DisplayText *string `protobuf:"bytes,2,opt,name=display_text,json=displayText" json:"display_text,omitempty"`
	// The ID of the resource affected by the operation
	Id *string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	// The job ID for an async operation
	JobId *string `protobuf:"bytes,4,opt,name=job_id,json=jobId" json:"job_id,omitempty"`
	// The status of the job
	JobStatus     *string `protobuf:"bytes,5,opt,name=job_status,json=jobStatus" json:"job_status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Result) Reset() {
	*x = Result{}
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_cloudstack_management_vpn_v1_vpn_gen_proto_rawDescGZIP(), []int{46}
}

func (x *Result) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *Result) GetDisplayText() string {
	if x != nil && x.DisplayText != nil {
		return *x.DisplayText
	}
	return ""
}

func (x *Result) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Result) GetJobId() string {
	if x != nil && x.JobId != nil {
		return *x.JobId
	}
	return ""
}

func (x *Result) GetJobStatus() string {
	if x != nil && x.JobStatus != nil {
		return *x.JobStatus
	}
	return ""
}

var File_cloudstack_management_vpn_v1_vpn_gen_proto protoreflect.FileDescriptor

const file_cloudstack_management_vpn_v1_vpn_gen_proto_rawDesc = "" +
	"\n" +
	"*cloudstack/management/vpn/v1/vpn.gen.proto\x12\x1ccloudstack.management.vpn.v1\x1a\x1bbuf/validate/validate.proto\x1a(cloudstack/annotations/annotations.proto\x1a google/protobuf/descriptor.proto\"\xbf\x02\n" +
	"\x11AddVpnUserRequest\x12*\n" +
	"\tuser_name\x18\x01 \x01(\tB\r\xbaH\n" +
	"\xc8\x01\x01r\x05\x10\x01\x18\xff\x01R\buserName\x12\"\n" +
	"\bpassword\x18\x02 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\bpassword\x12!\n" +
	"\faccount_name\x18\x03 \x01(\tR\vaccountName\x12\x1d\n" +
	"\n" +
	"project_id\x18\x04 \x01(\x03R\tprojectId\x12\x1b\n" +
	"\tdomain_id\x18\x05 \x01(\x03R\bdomainId\x12$\n" +
	"\x0estart_event_id\x18\x06 \x01(\x03R\fstartEventId\x120\n" +
	"\x0finjected_job_id\x18\a \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\rinjectedJobId\x12#\n" +
	"\rresponse_type\x18\b \x01(\tR\fresponseType\"R\n" +
	"\x12AddVpnUserResponse\x12<\n" +
	"\x06result\x18\x01 \x01(\v2$.cloudstack.management.vpn.v1.ResultR\x06result\"\xf6\x02\n" +
	"\x1cCreateRemoteAccessVpnRequest\x12(\n" +
	"\fpublic_ip_id\x18\x01 \x01(\x03B\x06\xbaH\x03\xc8\x01\x01R\n" +
	"publicIpId\x12\"\n" +
	"\bip_range\x18\x02 \x01(\tB\a\xbaH\x04r\x02x\x01R\aipRange\x12!\n" +
	"\faccount_name\x18\x03 \x01(\tR\vaccountName\x12\x1b\n" +
	"\tdomain_id\x18\x04 \x01(\x03R\bdomainId\x12*\n" +
	"\ropen_firewall\x18\x05 \x01(\bB\x05\xaa\x01\x02\b\x01R\fopenFirewall\x12\x1f\n" +
	"\adisplay\x18\x06 \x01(\bB\x05\xaa\x01\x02\b\x01R\adisplay\x12$\n" +
	"\x0estart_event_id\x18\a \x01(\x03R\fstartEventId\x120\n" +
	"\x0finjected_job_id\x18\b \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\rinjectedJobId\x12#\n" +
	"\rresponse_type\x18\t \x01(\tR\fresponseType\"]\n" +
	"\x1dCreateRemoteAccessVpnResponse\x12<\n" +
	"\x06result\x18\x01 \x01(\v2$.cloudstack.management.vpn.v1.ResultR\x06result\"\xc1\x02\n" +
	"\x1aCreateVpnConnectionRequest\x12,\n" +
	"\x0evpn_gateway_id\x18\x01 \x01(\x03B\x06\xbaH\x03\xc8\x01\x01R\fvpnGatewayId\x126\n" +
	"\x13customer_gateway_id\x18\x02 \x01(\x03B\x06\xbaH\x03\xc8\x01\x01R\x11customerGatewayId\x12\x1f\n" +
	"\apassive\x18\x03 \x01(\bB\x05\xaa\x01\x02\b\x01R\apassive\x12\x1f\n" +
	"\adisplay\x18\x04 \x01(\bB\x05\xaa\x01\x02\b\x01R\adisplay\x12$\n" +
	"\x0estart_event_id\x18\x05 \x01(\x03R\fstartEventId\x120\n" +
	"\x0finjected_job_id\x18\x06 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\rinjectedJobId\x12#\n" +
	"\rresponse_type\x18\a \x01(\tR\fresponseType\"[\n" +
	"\x1bCreateVpnConnectionResponse\x12<\n" +
	"\x06result\x18\x01 \x01(\v2$.cloudstack.management.vpn.v1.ResultR\x06result\"\xbe\x06\n" +
	"\x1fCreateVpnCustomerGatewayRequest\x12\x1e\n" +
	"\x04name\x18\x01 \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x01\x18\xff\x01R\x04name\x12)\n" +
	"\n" +
	"gateway_ip\x18\x02 \x01(\tB\n" +
	"\xbaH\a\xc8\x01\x01r\x02x\x01R\tgatewayIp\x12,\n" +
	"\x0epeer_cidr_list\x18\x03 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\fpeerCidrList\x12'\n" +
	"\tipsec_psk\x18\x04 \x01(\tB\n" +
	"\xbaH\a\xc8\x01\x01r\x02x\x01R\bipsecPsk\x12%\n" +
	"\n" +
	"ike_policy\x18\x05 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\tikePolicy\x12%\n" +
	"\n" +
	"esp_policy\x18\x06 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\tespPolicy\x12!\n" +
	"\fike_lifetime\x18\a \x01(\x03R\vikeLifetime\x12!\n" +
	"\fesp_lifetime\x18\b \x01(\x03R\vespLifetime\x12\x17\n" +
	"\x03dpd\x18\t \x01(\bB\x05\xaa\x01\x02\b\x01R\x03dpd\x12\x1b\n" +
	"\x05encap\x18\n" +
	" \x01(\bB\x05\xaa\x01\x02\b\x01R\x05encap\x12\xa0\x01\n" +
	"\faccount_name\x18\v \x01(\tB}\xbaHz\xba\x01w\n" +
	"\x1baccount_name_with_domain_id\x122account_name must be used with domain_id parameter\x1a$!has(account_name) || has(domain_id)R\vaccountName\x12\x1b\n" +
	"\tdomain_id\x18\f \x01(\x03R\bdomainId\x12\x1d\n" +
	"\n" +
	"project_id\x18\r \x01(\x03R\tprojectId\x122\n" +
	"\x11split_connections\x18\x0e \x01(\bB\x05\xaa\x01\x02\b\x01R\x10splitConnections\x12\x1f\n" +
	"\vike_version\x18\x0f \x01(\tR\n" +
	"ikeVersion\x12$\n" +
	"\x0estart_event_id\x18\x10 \x01(\x03R\fstartEventId\x120\n" +
	"\x0finjected_job_id\x18\x11 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\rinjectedJobId\x12#\n" +
	"\rresponse_type\x18\x12 \x01(\tR\fresponseType\"`\n" +
	" CreateVpnCustomerGatewayResponse\x12<\n" +
	"\x06result\x18\x01 \x01(\v2$.cloudstack.management.vpn.v1.ResultR\x06result\"\xd6\x01\n" +
	"\x17CreateVpnGatewayRequest\x12\x1d\n" +
	"\x06vpc_id\x18\x01 \x01(\x03B\x06\xbaH\x03\xc8\x01\x01R\x05vpcId\x12\x1f\n" +
	"\adisplay\x18\x02 \x01(\bB\x05\xaa\x01\x02\b\x01R\adisplay\x12$\n" +
	"\x0estart_event_id\x18\x03 \x01(\x03R\fstartEventId\x120\n" +
	"\x0finjected_job_id\x18\x04 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\rinjectedJobId\x12#\n" +
	"\rresponse_type\x18\x05 \x01(\tR\fresponseType\"X\n" +
	"\x18CreateVpnGatewayResponse\x12<\n" +
	"\x06result\x18\x01 \x01(\v2$.cloudstack.management.vpn.v1.ResultR\x06result\"\xc5\x01\n" +
	"\x1cDeleteRemoteAccessVpnRequest\x12(\n" +
	"\fpublic_ip_id\x18\x01 \x01(\x03B\x06\xbaH\x03\xc8\x01\x01R\n" +
	"publicIpId\x12$\n" +
	"\x0estart_event_id\x18\x02 \x01(\x03R\fstartEventId\x120\n" +
	"\x0finjected_job_id\x18\x03 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\rinjectedJobId\x12#\n" +
	"\rresponse_type\x18\x04 \x01(\tR\fresponseType\"]\n" +
	"\x1dDeleteRemoteAccessVpnResponse\x12<\n" +
	"\x06result\x18\x01 \x01(\v2$.cloudstack.management.vpn.v1.ResultR\x06result\"\xb1\x01\n" +
	"\x1aDeleteVpnConnectionRequest\x12\x16\n" +
	"\x02id\x18\x01 \x01(\x03B\x06\xbaH\x03\xc8\x01\x01R\x02id\x12$\n" +
	"\x0estart_event_id\x18\x02 \x01(\x03R\fstartEventId\x120\n" +
	"\x0finjected_job_id\x18\x03 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\rinjectedJobId\x12#\n" +
	"\rresponse_type\x18\x04 \x01(\tR\fresponseType\"[\n" +
	"\x1bDeleteVpnConnectionResponse\x12<\n" +
	"\x06result\x18\x01 \x01(\v2$.cloudstack.management.vpn.v1.ResultR\x06result\"\xb6\x01\n" +
	"\x1fDeleteVpnCustomerGatewayRequest\x12\x16\n" +
	"\x02id\x18\x01 \x01(\x03B\x06\xbaH\x03\xc8\x01\x01R\x02id\x12$\n" +
	"\x0estart_event_id\x18\x02 \x01(\x03R\fstartEventId\x120\n" +
	"\x0finjected_job_id\x18\x03 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\rinjectedJobId\x12#\n" +
	"\rresponse_type\x18\x04 \x01(\tR\fresponseType\"`\n" +
	" DeleteVpnCustomerGatewayResponse\x12<\n" +
	"\x06result\x18\x01 \x01(\v2$.cloudstack.management.vpn.v1.ResultR\x06result\"\xae\x01\n" +
	"\x17DeleteVpnGatewayRequest\x12\x16\n" +
	"\x02id\x18\x01 \x01(\x03B\x06\xbaH\x03\xc8\x01\x01R\x02id\x12$\n" +
	"\x0estart_event_id\x18\x02 \x01(\x03R\fstartEventId\x120\n" +
	"\x0finjected_job_id\x18\x03 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\rinjectedJobId\x12#\n" +
	"\rresponse_type\x18\x04 \x01(\tR\fresponseType\"X\n" +
	"\x18DeleteVpnGatewayResponse\x12<\n" +
	"\x06result\x18\x01 \x01(\v2$.cloudstack.management.vpn.v1.ResultR\x06result\"\xa5\x04\n" +
	"\x1bListRemoteAccessVpnsRequest\x12 \n" +
	"\fpublic_ip_id\x18\x01 \x01(\x03R\n" +
	"publicIpId\x12\x0e\n" +
	"\x02id\x18\x02 \x01(\x03R\x02id\x12\x1d\n" +
	"\n" +
	"network_id\x18\x03 \x01(\x03R\tnetworkId\x12\x1f\n" +
	"\adisplay\x18\x04 \x01(\bB\x05\xaa\x01\x02\b\x01R\adisplay\x12\x1d\n" +
	"\n" +
	"project_id\x18\x05 \x01(\x03R\tprojectId\x12\xa0\x01\n" +
	"\faccount_name\x18\x06 \x01(\tB}\xbaHz\xba\x01w\n" +
	"\x1baccount_name_with_domain_id\x122account_name must be used with domain_id parameter\x1a$!has(account_name) || has(domain_id)R\vaccountName\x12 \n" +
	"\blist_all\x18\a \x01(\bB\x05\xaa\x01\x02\b\x01R\alistAll\x12\x1b\n" +
	"\tdomain_id\x18\b \x01(\x03R\bdomainId\x12#\n" +
	"\trecursive\x18\t \x01(\bB\x05\xaa\x01\x02\b\x01R\trecursive\x12\x18\n" +
	"\akeyword\x18\n" +
	" \x01(\tR\akeyword\x12\x12\n" +
	"\x04page\x18\v \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\f \x01(\x05R\bpageSize\x12#\n" +
	"\rresponse_type\x18\r \x01(\tR\fresponseType\"\x8b\x01\n" +
	"\x1cListRemoteAccessVpnsResponse\x12C\n" +
	"\x05items\x18\x01 \x03(\v2-.cloudstack.management.vpn.v1.RemoteAccessVpnR\x05items\x12\x1f\n" +
	"\vtotal_count\x18\x02 \x01(\x05R\n" +
	"totalCount:\x05\xbaH\x02\b\x00\"\xf9\x03\n" +
	"\x19ListVpnConnectionsRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x15\n" +
	"\x06vpc_id\x18\x02 \x01(\x03R\x05vpcId\x12\x1f\n" +
	"\adisplay\x18\x03 \x01(\bB\x05\xaa\x01\x02\b\x01R\adisplay\x12\x1d\n" +
	"\n" +
	"project_id\x18\x04 \x01(\x03R\tprojectId\x12\xa0\x01\n" +
	"\faccount_name\x18\x05 \x01(\tB}\xbaHz\xba\x01w\n" +
	"\x1baccount_name_with_domain_id\x122account_name must be used with domain_id parameter\x1a$!has(account_name) || has(domain_id)R\vaccountName\x12 \n" +
	"\blist_all\x18\x06 \x01(\bB\x05\xaa\x01\x02\b\x01R\alistAll\x12\x1b\n" +
	"\tdomain_id\x18\a \x01(\x03R\bdomainId\x12#\n" +
	"\trecursive\x18\b \x01(\bB\x05\xaa\x01\x02\b\x01R\trecursive\x12\x18\n" +
	"\akeyword\x18\t \x01(\tR\akeyword\x12\x12\n" +
	"\x04page\x18\n" +
	" \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\v \x01(\x05R\bpageSize\x12#\n" +
	"\rresponse_type\x18\f \x01(\tR\fresponseType\"\x90\x01\n" +
	"\x1aListVpnConnectionsResponse\x12J\n" +
	"\x05items\x18\x01 \x03(\v24.cloudstack.management.vpn.v1.Site2SiteVpnConnectionR\x05items\x12\x1f\n" +
	"\vtotal_count\x18\x02 \x01(\x05R\n" +
	"totalCount:\x05\xbaH\x02\b\x00\"\xc6\x03\n" +
	"\x1eListVpnCustomerGatewaysRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x1d\n" +
	"\n" +
	"project_id\x18\x02 \x01(\x03R\tprojectId\x12\xa0\x01\n" +
	"\faccount_name\x18\x03 \x01(\tB}\xbaHz\xba\x01w\n" +
	"\x1baccount_name_with_domain_id\x122account_name must be used with domain_id parameter\x1a$!has(account_name) || has(domain_id)R\vaccountName\x12 \n" +
	"\blist_all\x18\x04 \x01(\bB\x05\xaa\x01\x02\b\x01R\alistAll\x12\x1b\n" +
	"\tdomain_id\x18\x05 \x01(\x03R\bdomainId\x12#\n" +
	"\trecursive\x18\x06 \x01(\bB\x05\xaa\x01\x02\b\x01R\trecursive\x12\x18\n" +
	"\akeyword\x18\a \x01(\tR\akeyword\x12\x12\n" +
	"\x04page\x18\b \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\t \x01(\x05R\bpageSize\x12#\n" +
	"\rresponse_type\x18\n" +
	" \x01(\tR\fresponseType\"\x97\x01\n" +
	"\x1fListVpnCustomerGatewaysResponse\x12L\n" +
	"\x05items\x18\x01 \x03(\v26.cloudstack.management.vpn.v1.Site2SiteCustomerGatewayR\x05items\x12\x1f\n" +
	"\vtotal_count\x18\x02 \x01(\x05R\n" +
	"totalCount:\x05\xbaH\x02\b\x00\"\xf6\x03\n" +
	"\x16ListVpnGatewaysRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x15\n" +
	"\x06vpc_id\x18\x02 \x01(\x03R\x05vpcId\x12\x1f\n" +
	"\adisplay\x18\x03 \x01(\bB\x05\xaa\x01\x02\b\x01R\adisplay\x12\x1d\n" +
	"\n" +
	"project_id\x18\x04 \x01(\x03R\tprojectId\x12\xa0\x01\n" +
	"\faccount_name\x18\x05 \x01(\tB}\xbaHz\xba\x01w\n" +
	"\x1baccount_name_with_domain_id\x122account_name must be used with domain_id parameter\x1a$!has(account_name) || has(domain_id)R\vaccountName\x12 \n" +
	"\blist_all\x18\x06 \x01(\bB\x05\xaa\x01\x02\b\x01R\alistAll\x12\x1b\n" +
	"\tdomain_id\x18\a \x01(\x03R\bdomainId\x12#\n" +
	"\trecursive\x18\b \x01(\bB\x05\xaa\x01\x02\b\x01R\trecursive\x12\x18\n" +
	"\akeyword\x18\t \x01(\tR\akeyword\x12\x12\n" +
	"\x04page\x18\n" +
	" \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\v \x01(\x05R\bpageSize\x12#\n" +
	"\rresponse_type\x18\f \x01(\tR\fresponseType\"\x8a\x01\n" +
	"\x17ListVpnGatewaysResponse\x12G\n" +
	"\x05items\x18\x01 \x03(\v21.cloudstack.management.vpn.v1.Site2SiteVpnGatewayR\x05items\x12\x1f\n" +
	"\vtotal_count\x18\x02 \x01(\x05R\n" +
	"totalCount:\x05\xbaH\x02\b\x00\"\xe4\x03\n" +
	"\x13ListVpnUsersRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12'\n" +
	"\tuser_name\x18\x02 \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x01\x18\xff\x01R\buserName\x12\x1d\n" +
	"\n" +
	"project_id\x18\x03 \x01(\x03R\tprojectId\x12\xa0\x01\n" +
	"\faccount_name\x18\x04 \x01(\tB}\xbaHz\xba\x01w\n" +
	"\x1baccount_name_with_domain_id\x122account_name must be used with domain_id parameter\x1a$!has(account_name) || has(domain_id)R\vaccountName\x12 \n" +
	"\blist_all\x18\x05 \x01(\bB\x05\xaa\x01\x02\b\x01R\alistAll\x12\x1b\n" +
	"\tdomain_id\x18\x06 \x01(\x03R\bdomainId\x12#\n" +
	"\trecursive\x18\a \x01(\bB\x05\xaa\x01\x02\b\x01R\trecursive\x12\x18\n" +
	"\akeyword\x18\b \x01(\tR\akeyword\x12\x12\n" +
	"\x04page\x18\t \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\n" +
	" \x01(\x05R\bpageSize\x12#\n" +
	"\rresponse_type\x18\v \x01(\tR\fresponseType\"|\n" +
	"\x14ListVpnUsersResponse\x12<\n" +
	"\x05items\x18\x01 \x03(\v2&.cloudstack.management.vpn.v1.VpnUsersR\x05items\x12\x1f\n" +
	"\vtotal_count\x18\x02 \x01(\x05R\n" +
	"totalCount:\x05\xbaH\x02\b\x00\"\x9e\x02\n" +
	"\x14RemoveVpnUserRequest\x12*\n" +
	"\tuser_name\x18\x01 \x01(\tB\r\xbaH\n" +
	"\xc8\x01\x01r\x05\x10\x01\x18\xff\x01R\buserName\x12!\n" +
	"\faccount_name\x18\x02 \x01(\tR\vaccountName\x12\x1d\n" +
	"\n" +
	"project_id\x18\x03 \x01(\x03R\tprojectId\x12\x1b\n" +
	"\tdomain_id\x18\x04 \x01(\x03R\bdomainId\x12$\n" +
	"\x0estart_event_id\x18\x05 \x01(\x03R\fstartEventId\x120\n" +
	"\x0finjected_job_id\x18\x06 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\rinjectedJobId\x12#\n" +
	"\rresponse_type\x18\a \x01(\tR\fresponseType\"U\n" +
	"\x15RemoveVpnUserResponse\x12<\n" +
	"\x06result\x18\x01 \x01(\v2$.cloudstack.management.vpn.v1.ResultR\x06result\"\xf0\x01\n" +
	"\x19ResetVpnConnectionRequest\x12\x16\n" +
	"\x02id\x18\x01 \x01(\x03B\x06\xbaH\x03\xc8\x01\x01R\x02id\x12!\n" +
	"\faccount_name\x18\x02 \x01(\tR\vaccountName\x12\x1b\n" +
	"\tdomain_id\x18\x03 \x01(\x03R\bdomainId\x12$\n" +
	"\x0estart_event_id\x18\x04 \x01(\x03R\fstartEventId\x120\n" +
	"\x0finjected_job_id\x18\x05 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\rinjectedJobId\x12#\n" +
	"\rresponse_type\x18\x06 \x01(\tR\fresponseType\"Z\n" +
	"\x1aResetVpnConnectionResponse\x12<\n" +
	"\x06result\x18\x01 \x01(\v2$.cloudstack.management.vpn.v1.ResultR\x06result\"\xfb\x01\n" +
	"\x1cUpdateRemoteAccessVpnRequest\x12\x16\n" +
	"\x02id\x18\x01 \x01(\x03B\x06\xbaH\x03\xc8\x01\x01R\x02id\x12\x1f\n" +
	"\adisplay\x18\x02 \x01(\bB\x05\xaa\x01\x02\b\x01R\adisplay\x12%\n" +
	"\tcustom_id\x18\x03 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\bcustomId\x12$\n" +
	"\x0estart_event_id\x18\x04 \x01(\x03R\fstartEventId\x120\n" +
	"\x0finjected_job_id\x18\x05 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\rinjectedJobId\x12#\n" +
	"\rresponse_type\x18\x06 \x01(\tR\fresponseType\"]\n" +
	"\x1dUpdateRemoteAccessVpnResponse\x12<\n" +
	"\x06result\x18\x01 \x01(\v2$.cloudstack.management.vpn.v1.ResultR\x06result\"\xf9\x01\n" +
	"\x1aUpdateVpnConnectionRequest\x12\x16\n" +
	"\x02id\x18\x01 \x01(\x03B\x06\xbaH\x03\xc8\x01\x01R\x02id\x12\x1f\n" +
	"\adisplay\x18\x02 \x01(\bB\x05\xaa\x01\x02\b\x01R\adisplay\x12%\n" +
	"\tcustom_id\x18\x03 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\bcustomId\x12$\n" +
	"\x0estart_event_id\x18\x04 \x01(\x03R\fstartEventId\x120\n" +
	"\x0finjected_job_id\x18\x05 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\rinjectedJobId\x12#\n" +
	"\rresponse_type\x18\x06 \x01(\tR\fresponseType\"[\n" +
	"\x1bUpdateVpnConnectionResponse\x12<\n" +
	"\x06result\x18\x01 \x01(\v2$.cloudstack.management.vpn.v1.ResultR\x06result\"\xb9\x06\n" +
	"\x1fUpdateVpnCustomerGatewayRequest\x12\x16\n" +
	"\x02id\x18\x01 \x01(\x03B\x06\xbaH\x03\xc8\x01\x01R\x02id\x12\x1e\n" +
	"\x04name\x18\x02 \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x01\x18\xff\x01R\x04name\x12)\n" +
	"\n" +
	"gateway_ip\x18\x03 \x01(\tB\n" +
	"\xbaH\a\xc8\x01\x01r\x02x\x01R\tgatewayIp\x12.\n" +
	"\x0fguest_cidr_list\x18\x04 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\rguestCidrList\x12'\n" +
	"\tipsec_psk\x18\x05 \x01(\tB\n" +
	"\xbaH\a\xc8\x01\x01r\x02x\x01R\bipsecPsk\x12%\n" +
	"\n" +
	"ike_policy\x18\x06 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\tikePolicy\x12%\n" +
	"\n" +
	"esp_policy\x18\a \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\tespPolicy\x12!\n" +
	"\fike_lifetime\x18\b \x01(\x03R\vikeLifetime\x12!\n" +
	"\fesp_lifetime\x18\t \x01(\x03R\vespLifetime\x12\x17\n" +
	"\x03dpd\x18\n" +
	" \x01(\bB\x05\xaa\x01\x02\b\x01R\x03dpd\x12\x1b\n" +
	"\x05encap\x18\v \x01(\bB\x05\xaa\x01\x02\b\x01R\x05encap\x12\xa0\x01\n" +
	"\faccount_name\x18\f \x01(\tB}\xbaHz\xba\x01w\n" +
	"\x1baccount_name_with_domain_id\x122account_name must be used with domain_id parameter\x1a$!has(account_name) || has(domain_id)R\vaccountName\x12\x1b\n" +
	"\tdomain_id\x18\r \x01(\x03R\bdomainId\x122\n" +
	"\x11split_connections\x18\x0e \x01(\bB\x05\xaa\x01\x02\b\x01R\x10splitConnections\x12\x1f\n" +
	"\vike_version\x18\x0f \x01(\tR\n" +
	"ikeVersion\x12$\n" +
	"\x0estart_event_id\x18\x10 \x01(\x03R\fstartEventId\x120\n" +
	"\x0finjected_job_id\x18\x11 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\rinjectedJobId\x12#\n" +
	"\rresponse_type\x18\x12 \x01(\tR\fresponseType\"`\n" +
	" UpdateVpnCustomerGatewayResponse\x12<\n" +
	"\x06result\x18\x01 \x01(\v2$.cloudstack.management.vpn.v1.ResultR\x06result\"\xf6\x01\n" +
	"\x17UpdateVpnGatewayRequest\x12\x16\n" +
	"\x02id\x18\x01 \x01(\x03B\x06\xbaH\x03\xc8\x01\x01R\x02id\x12\x1f\n" +
	"\adisplay\x18\x02 \x01(\bB\x05\xaa\x01\x02\b\x01R\adisplay\x12%\n" +
	"\tcustom_id\x18\x03 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\bcustomId\x12$\n" +
	"\x0estart_event_id\x18\x04 \x01(\x03R\fstartEventId\x120\n" +
	"\x0finjected_job_id\x18\x05 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\rinjectedJobId\x12#\n" +
	"\rresponse_type\x18\x06 \x01(\tR\fresponseType\"X\n" +
	"\x18UpdateVpnGatewayResponse\x12<\n" +
	"\x06result\x18\x01 \x01(\v2$.cloudstack.management.vpn.v1.ResultR\x06result\"\x9e\x01\n" +
	"\x0fRemoteAccessVpn\x12\x18\n" +
	"\x02id\x18\x01 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12!\n" +
	"\fdisplay_name\x18\x03 \x01(\tR\vdisplayName\x12 \n" +
	"\vdescription\x18\x04 \x01(\tR\vdescription\x12\x18\n" +
	"\acreated\x18\x05 \x01(\tR\acreated\"\xa7\x01\n" +
	"\x18Site2SiteCustomerGateway\x12\x18\n" +
	"\x02id\x18\x01 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12!\n" +
	"\fdisplay_name\x18\x03 \x01(\tR\vdisplayName\x12 \n" +
	"\vdescription\x18\x04 \x01(\tR\vdescription\x12\x18\n" +
	"\acreated\x18\x05 \x01(\tR\acreated\"\xa5\x01\n" +
	"\x16Site2SiteVpnConnection\x12\x18\n" +
	"\x02id\x18\x01 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12!\n" +
	"\fdisplay_name\x18\x03 \x01(\tR\vdisplayName\x12 \n" +
	"\vdescription\x18\x04 \x01(\tR\vdescription\x12\x18\n" +
	"\acreated\x18\x05 \x01(\tR\acreated\"\xa2\x01\n" +
	"\x13Site2SiteVpnGateway\x12\x18\n" +
	"\x02id\x18\x01 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12!\n" +
	"\fdisplay_name\x18\x03 \x01(\tR\vdisplayName\x12 \n" +
	"\vdescription\x18\x04 \x01(\tR\vdescription\x12\x18\n" +
	"\acreated\x18\x05 \x01(\tR\acreated\"\x97\x01\n" +
	"\bVpnUsers\x12\x18\n" +
	"\x02id\x18\x01 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12!\n" +
	"\fdisplay_name\x18\x03 \x01(\tR\vdisplayName\x12 \n" +
	"\vdescription\x18\x04 \x01(\tR\vdescription\x12\x18\n" +
	"\acreated\x18\x05 \x01(\tR\acreated\"F\n" +
	"\aSuccess\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12!\n" +
	"\fdisplay_text\x18\x02 \x01(\tR\vdisplayText\"\x9f\x01\n" +
	"\x06Result\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12!\n" +
	"\fdisplay_text\x18\x02 \x01(\tR\vdisplayText\x12\x18\n" +
	"\x02id\x18\x03 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\x02id\x12\x1f\n" +
	"\x06job_id\x18\x04 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\x05jobId\x12\x1d\n" +
	"\n" +
	"job_status\x18\x05 \x01(\tR\tjobStatus2\xaa\x17\n" +
	"\n" +
	"VpnService\x12x\n" +
	"\n" +
	"AddVpnUser\x12/.cloudstack.management.vpn.v1.AddVpnUserRequest\x1a0.cloudstack.management.vpn.v1.AddVpnUserResponse\"\a\xc2>\x04\xc2>\x01\x02\x12\x99\x01\n" +
	"\x15CreateRemoteAccessVpn\x12:.cloudstack.management.vpn.v1.CreateRemoteAccessVpnRequest\x1a;.cloudstack.management.vpn.v1.CreateRemoteAccessVpnResponse\"\a\xc2>\x04\xc2>\x01\x02\x12\x93\x01\n" +
	"\x13CreateVpnConnection\x128.cloudstack.management.vpn.v1.CreateVpnConnectionRequest\x1a9.cloudstack.management.vpn.v1.CreateVpnConnectionResponse\"\a\xc2>\x04\xc2>\x01\x02\x12\xa2\x01\n" +
	"\x18CreateVpnCustomerGateway\x12=.cloudstack.management.vpn.v1.CreateVpnCustomerGatewayRequest\x1a>.cloudstack.management.vpn.v1.CreateVpnCustomerGatewayResponse\"\a\xc2>\x04\xc2>\x01\x02\x12\x8a\x01\n" +
	"\x10CreateVpnGateway\x125.cloudstack.management.vpn.v1.CreateVpnGatewayRequest\x1a6.cloudstack.management.vpn.v1.CreateVpnGatewayResponse\"\a\xc2>\x04\xc2>\x01\x02\x12\x99\x01\n" +
	"\x15DeleteRemoteAccessVpn\x12:.cloudstack.management.vpn.v1.DeleteRemoteAccessVpnRequest\x1a;.cloudstack.management.vpn.v1.DeleteRemoteAccessVpnResponse\"\a\xc2>\x04\xc2>\x01\x02\x12\x93\x01\n" +
	"\x13DeleteVpnConnection\x128.cloudstack.management.vpn.v1.DeleteVpnConnectionRequest\x1a9.cloudstack.management.vpn.v1.DeleteVpnConnectionResponse\"\a\xc2>\x04\xc2>\x01\x02\x12\xa2\x01\n" +
	"\x18DeleteVpnCustomerGateway\x12=.cloudstack.management.vpn.v1.DeleteVpnCustomerGatewayRequest\x1a>.cloudstack.management.vpn.v1.DeleteVpnCustomerGatewayResponse\"\a\xc2>\x04\xc2>\x01\x02\x12\x8a\x01\n" +
	"\x10DeleteVpnGateway\x125.cloudstack.management.vpn.v1.DeleteVpnGatewayRequest\x1a6.cloudstack.management.vpn.v1.DeleteVpnGatewayResponse\"\a\xc2>\x04\xc2>\x01\x02\x12\x96\x01\n" +
	"\x14ListRemoteAccessVpns\x129.cloudstack.management.vpn.v1.ListRemoteAccessVpnsRequest\x1a:.cloudstack.management.vpn.v1.ListRemoteAccessVpnsResponse\"\a\xc2>\x04\xc2>\x01\x02\x12\x90\x01\n" +
	"\x12ListVpnConnections\x127.cloudstack.management.vpn.v1.ListVpnConnectionsRequest\x1a8.cloudstack.management.vpn.v1.ListVpnConnectionsResponse\"\a\xc2>\x04\xc2>\x01\x02\x12\x9f\x01\n" +
	"\x17ListVpnCustomerGateways\x12<.cloudstack.management.vpn.v1.ListVpnCustomerGatewaysRequest\x1a=.cloudstack.management.vpn.v1.ListVpnCustomerGatewaysResponse\"\a\xc2>\x04\xc2>\x01\x02\x12\x87\x01\n" +
	"\x0fListVpnGateways\x124.cloudstack.management.vpn.v1.ListVpnGatewaysRequest\x1a5.cloudstack.management.vpn.v1.ListVpnGatewaysResponse\"\a\xc2>\x04\xc2>\x01\x02\x12~\n" +
	"\fListVpnUsers\x121.cloudstack.management.vpn.v1.ListVpnUsersRequest\x1a2.cloudstack.management.vpn.v1.ListVpnUsersResponse\"\a\xc2>\x04\xc2>\x01\x02\x12\x81\x01\n" +
	"\rRemoveVpnUser\x122.cloudstack.management.vpn.v1.RemoveVpnUserRequest\x1a3.cloudstack.management.vpn.v1.RemoveVpnUserResponse\"\a\xc2>\x04\xc2>\x01\x02\x12\x90\x01\n" +
	"\x12ResetVpnConnection\x127.cloudstack.management.vpn.v1.ResetVpnConnectionRequest\x1a8.cloudstack.management.vpn.v1.ResetVpnConnectionResponse\"\a\xc2>\x04\xc2>\x01\x02\x12\x99\x01\n" +
	"\x15UpdateRemoteAccessVpn\x12:.cloudstack.management.vpn.v1.UpdateRemoteAccessVpnRequest\x1a;.cloudstack.management.vpn.v1.UpdateRemoteAccessVpnResponse\"\a\xc2>\x04\xc2>\x01\x02\x12\x93\x01\n" +
	"\x13UpdateVpnConnection\x128.cloudstack.management.vpn.v1.UpdateVpnConnectionRequest\x1a9.cloudstack.management.vpn.v1.UpdateVpnConnectionResponse\"\a\xc2>\x04\xc2>\x01\x02\x12\xa2\x01\n" +
	"\x18UpdateVpnCustomerGateway\x12=.cloudstack.management.vpn.v1.UpdateVpnCustomerGatewayRequest\x1a>.cloudstack.management.vpn.v1.UpdateVpnCustomerGatewayResponse\"\a\xc2>\x04\xc2>\x01\x02\x12\x8a\x01\n" +
	"\x10UpdateVpnGateway\x125.cloudstack.management.vpn.v1.UpdateVpnGatewayRequest\x1a6.cloudstack.management.vpn.v1.UpdateVpnGatewayResponse\"\a\xc2>\x04\xc2>\x01\x02\x1a\a\xc2>\x04\xc2>\x01\x02B\x9a\x02\n" +
	" com.cloudstack.management.vpn.v1B\vVpnGenProtoP\x01ZVgithub.com/walteh/cloudstack-proxy/gen/proto/golang/cloudstack/management/vpn/v1;vpnv1\xa2\x02\x03CMV\xaa\x02\x1cCloudstack.Management.Vpn.V1\xca\x02\x1cCloudstack\\Management\\Vpn\\V1\xe2\x02(Cloudstack\\Management\\Vpn\\V1\\GPBMetadata\xea\x02\x1fCloudstack::Management::Vpn::V1b\beditionsp\xe8\a"

var (
	file_cloudstack_management_vpn_v1_vpn_gen_proto_rawDescOnce sync.Once
	file_cloudstack_management_vpn_v1_vpn_gen_proto_rawDescData []byte
)

func file_cloudstack_management_vpn_v1_vpn_gen_proto_rawDescGZIP() []byte {
	file_cloudstack_management_vpn_v1_vpn_gen_proto_rawDescOnce.Do(func() {
		file_cloudstack_management_vpn_v1_vpn_gen_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_cloudstack_management_vpn_v1_vpn_gen_proto_rawDesc), len(file_cloudstack_management_vpn_v1_vpn_gen_proto_rawDesc)))
	})
	return file_cloudstack_management_vpn_v1_vpn_gen_proto_rawDescData
}

var file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes = make([]protoimpl.MessageInfo, 47)
var file_cloudstack_management_vpn_v1_vpn_gen_proto_goTypes = []any{
	(*AddVpnUserRequest)(nil),                // 0: cloudstack.management.vpn.v1.AddVpnUserRequest
	(*AddVpnUserResponse)(nil),               // 1: cloudstack.management.vpn.v1.AddVpnUserResponse
	(*CreateRemoteAccessVpnRequest)(nil),     // 2: cloudstack.management.vpn.v1.CreateRemoteAccessVpnRequest
	(*CreateRemoteAccessVpnResponse)(nil),    // 3: cloudstack.management.vpn.v1.CreateRemoteAccessVpnResponse
	(*CreateVpnConnectionRequest)(nil),       // 4: cloudstack.management.vpn.v1.CreateVpnConnectionRequest
	(*CreateVpnConnectionResponse)(nil),      // 5: cloudstack.management.vpn.v1.CreateVpnConnectionResponse
	(*CreateVpnCustomerGatewayRequest)(nil),  // 6: cloudstack.management.vpn.v1.CreateVpnCustomerGatewayRequest
	(*CreateVpnCustomerGatewayResponse)(nil), // 7: cloudstack.management.vpn.v1.CreateVpnCustomerGatewayResponse
	(*CreateVpnGatewayRequest)(nil),          // 8: cloudstack.management.vpn.v1.CreateVpnGatewayRequest
	(*CreateVpnGatewayResponse)(nil),         // 9: cloudstack.management.vpn.v1.CreateVpnGatewayResponse
	(*DeleteRemoteAccessVpnRequest)(nil),     // 10: cloudstack.management.vpn.v1.DeleteRemoteAccessVpnRequest
	(*DeleteRemoteAccessVpnResponse)(nil),    // 11: cloudstack.management.vpn.v1.DeleteRemoteAccessVpnResponse
	(*DeleteVpnConnectionRequest)(nil),       // 12: cloudstack.management.vpn.v1.DeleteVpnConnectionRequest
	(*DeleteVpnConnectionResponse)(nil),      // 13: cloudstack.management.vpn.v1.DeleteVpnConnectionResponse
	(*DeleteVpnCustomerGatewayRequest)(nil),  // 14: cloudstack.management.vpn.v1.DeleteVpnCustomerGatewayRequest
	(*DeleteVpnCustomerGatewayResponse)(nil), // 15: cloudstack.management.vpn.v1.DeleteVpnCustomerGatewayResponse
	(*DeleteVpnGatewayRequest)(nil),          // 16: cloudstack.management.vpn.v1.DeleteVpnGatewayRequest
	(*DeleteVpnGatewayResponse)(nil),         // 17: cloudstack.management.vpn.v1.DeleteVpnGatewayResponse
	(*ListRemoteAccessVpnsRequest)(nil),      // 18: cloudstack.management.vpn.v1.ListRemoteAccessVpnsRequest
	(*ListRemoteAccessVpnsResponse)(nil),     // 19: cloudstack.management.vpn.v1.ListRemoteAccessVpnsResponse
	(*ListVpnConnectionsRequest)(nil),        // 20: cloudstack.management.vpn.v1.ListVpnConnectionsRequest
	(*ListVpnConnectionsResponse)(nil),       // 21: cloudstack.management.vpn.v1.ListVpnConnectionsResponse
	(*ListVpnCustomerGatewaysRequest)(nil),   // 22: cloudstack.management.vpn.v1.ListVpnCustomerGatewaysRequest
	(*ListVpnCustomerGatewaysResponse)(nil),  // 23: cloudstack.management.vpn.v1.ListVpnCustomerGatewaysResponse
	(*ListVpnGatewaysRequest)(nil),           // 24: cloudstack.management.vpn.v1.ListVpnGatewaysRequest
	(*ListVpnGatewaysResponse)(nil),          // 25: cloudstack.management.vpn.v1.ListVpnGatewaysResponse
	(*ListVpnUsersRequest)(nil),              // 26: cloudstack.management.vpn.v1.ListVpnUsersRequest
	(*ListVpnUsersResponse)(nil),             // 27: cloudstack.management.vpn.v1.ListVpnUsersResponse
	(*RemoveVpnUserRequest)(nil),             // 28: cloudstack.management.vpn.v1.RemoveVpnUserRequest
	(*RemoveVpnUserResponse)(nil),            // 29: cloudstack.management.vpn.v1.RemoveVpnUserResponse
	(*ResetVpnConnectionRequest)(nil),        // 30: cloudstack.management.vpn.v1.ResetVpnConnectionRequest
	(*ResetVpnConnectionResponse)(nil),       // 31: cloudstack.management.vpn.v1.ResetVpnConnectionResponse
	(*UpdateRemoteAccessVpnRequest)(nil),     // 32: cloudstack.management.vpn.v1.UpdateRemoteAccessVpnRequest
	(*UpdateRemoteAccessVpnResponse)(nil),    // 33: cloudstack.management.vpn.v1.UpdateRemoteAccessVpnResponse
	(*UpdateVpnConnectionRequest)(nil),       // 34: cloudstack.management.vpn.v1.UpdateVpnConnectionRequest
	(*UpdateVpnConnectionResponse)(nil),      // 35: cloudstack.management.vpn.v1.UpdateVpnConnectionResponse
	(*UpdateVpnCustomerGatewayRequest)(nil),  // 36: cloudstack.management.vpn.v1.UpdateVpnCustomerGatewayRequest
	(*UpdateVpnCustomerGatewayResponse)(nil), // 37: cloudstack.management.vpn.v1.UpdateVpnCustomerGatewayResponse
	(*UpdateVpnGatewayRequest)(nil),          // 38: cloudstack.management.vpn.v1.UpdateVpnGatewayRequest
	(*UpdateVpnGatewayResponse)(nil),         // 39: cloudstack.management.vpn.v1.UpdateVpnGatewayResponse
	(*RemoteAccessVpn)(nil),                  // 40: cloudstack.management.vpn.v1.RemoteAccessVpn
	(*Site2SiteCustomerGateway)(nil),         // 41: cloudstack.management.vpn.v1.Site2SiteCustomerGateway
	(*Site2SiteVpnConnection)(nil),           // 42: cloudstack.management.vpn.v1.Site2SiteVpnConnection
	(*Site2SiteVpnGateway)(nil),              // 43: cloudstack.management.vpn.v1.Site2SiteVpnGateway
	(*VpnUsers)(nil),                         // 44: cloudstack.management.vpn.v1.VpnUsers
	(*Success)(nil),                          // 45: cloudstack.management.vpn.v1.Success
	(*Result)(nil),                           // 46: cloudstack.management.vpn.v1.Result
}
var file_cloudstack_management_vpn_v1_vpn_gen_proto_depIdxs = []int32{
	46, // 0: cloudstack.management.vpn.v1.AddVpnUserResponse.result:type_name -> cloudstack.management.vpn.v1.Result
	46, // 1: cloudstack.management.vpn.v1.CreateRemoteAccessVpnResponse.result:type_name -> cloudstack.management.vpn.v1.Result
	46, // 2: cloudstack.management.vpn.v1.CreateVpnConnectionResponse.result:type_name -> cloudstack.management.vpn.v1.Result
	46, // 3: cloudstack.management.vpn.v1.CreateVpnCustomerGatewayResponse.result:type_name -> cloudstack.management.vpn.v1.Result
	46, // 4: cloudstack.management.vpn.v1.CreateVpnGatewayResponse.result:type_name -> cloudstack.management.vpn.v1.Result
	46, // 5: cloudstack.management.vpn.v1.DeleteRemoteAccessVpnResponse.result:type_name -> cloudstack.management.vpn.v1.Result
	46, // 6: cloudstack.management.vpn.v1.DeleteVpnConnectionResponse.result:type_name -> cloudstack.management.vpn.v1.Result
	46, // 7: cloudstack.management.vpn.v1.DeleteVpnCustomerGatewayResponse.result:type_name -> cloudstack.management.vpn.v1.Result
	46, // 8: cloudstack.management.vpn.v1.DeleteVpnGatewayResponse.result:type_name -> cloudstack.management.vpn.v1.Result
	40, // 9: cloudstack.management.vpn.v1.ListRemoteAccessVpnsResponse.items:type_name -> cloudstack.management.vpn.v1.RemoteAccessVpn
	42, // 10: cloudstack.management.vpn.v1.ListVpnConnectionsResponse.items:type_name -> cloudstack.management.vpn.v1.Site2SiteVpnConnection
	41, // 11: cloudstack.management.vpn.v1.ListVpnCustomerGatewaysResponse.items:type_name -> cloudstack.management.vpn.v1.Site2SiteCustomerGateway
	43, // 12: cloudstack.management.vpn.v1.ListVpnGatewaysResponse.items:type_name -> cloudstack.management.vpn.v1.Site2SiteVpnGateway
	44, // 13: cloudstack.management.vpn.v1.ListVpnUsersResponse.items:type_name -> cloudstack.management.vpn.v1.VpnUsers
	46, // 14: cloudstack.management.vpn.v1.RemoveVpnUserResponse.result:type_name -> cloudstack.management.vpn.v1.Result
	46, // 15: cloudstack.management.vpn.v1.ResetVpnConnectionResponse.result:type_name -> cloudstack.management.vpn.v1.Result
	46, // 16: cloudstack.management.vpn.v1.UpdateRemoteAccessVpnResponse.result:type_name -> cloudstack.management.vpn.v1.Result
	46, // 17: cloudstack.management.vpn.v1.UpdateVpnConnectionResponse.result:type_name -> cloudstack.management.vpn.v1.Result
	46, // 18: cloudstack.management.vpn.v1.UpdateVpnCustomerGatewayResponse.result:type_name -> cloudstack.management.vpn.v1.Result
	46, // 19: cloudstack.management.vpn.v1.UpdateVpnGatewayResponse.result:type_name -> cloudstack.management.vpn.v1.Result
	0,  // 20: cloudstack.management.vpn.v1.VpnService.AddVpnUser:input_type -> cloudstack.management.vpn.v1.AddVpnUserRequest
	2,  // 21: cloudstack.management.vpn.v1.VpnService.CreateRemoteAccessVpn:input_type -> cloudstack.management.vpn.v1.CreateRemoteAccessVpnRequest
	4,  // 22: cloudstack.management.vpn.v1.VpnService.CreateVpnConnection:input_type -> cloudstack.management.vpn.v1.CreateVpnConnectionRequest
	6,  // 23: cloudstack.management.vpn.v1.VpnService.CreateVpnCustomerGateway:input_type -> cloudstack.management.vpn.v1.CreateVpnCustomerGatewayRequest
	8,  // 24: cloudstack.management.vpn.v1.VpnService.CreateVpnGateway:input_type -> cloudstack.management.vpn.v1.CreateVpnGatewayRequest
	10, // 25: cloudstack.management.vpn.v1.VpnService.DeleteRemoteAccessVpn:input_type -> cloudstack.management.vpn.v1.DeleteRemoteAccessVpnRequest
	12, // 26: cloudstack.management.vpn.v1.VpnService.DeleteVpnConnection:input_type -> cloudstack.management.vpn.v1.DeleteVpnConnectionRequest
	14, // 27: cloudstack.management.vpn.v1.VpnService.DeleteVpnCustomerGateway:input_type -> cloudstack.management.vpn.v1.DeleteVpnCustomerGatewayRequest
	16, // 28: cloudstack.management.vpn.v1.VpnService.DeleteVpnGateway:input_type -> cloudstack.management.vpn.v1.DeleteVpnGatewayRequest
	18, // 29: cloudstack.management.vpn.v1.VpnService.ListRemoteAccessVpns:input_type -> cloudstack.management.vpn.v1.ListRemoteAccessVpnsRequest
	20, // 30: cloudstack.management.vpn.v1.VpnService.ListVpnConnections:input_type -> cloudstack.management.vpn.v1.ListVpnConnectionsRequest
	22, // 31: cloudstack.management.vpn.v1.VpnService.ListVpnCustomerGateways:input_type -> cloudstack.management.vpn.v1.ListVpnCustomerGatewaysRequest
	24, // 32: cloudstack.management.vpn.v1.VpnService.ListVpnGateways:input_type -> cloudstack.management.vpn.v1.ListVpnGatewaysRequest
	26, // 33: cloudstack.management.vpn.v1.VpnService.ListVpnUsers:input_type -> cloudstack.management.vpn.v1.ListVpnUsersRequest
	28, // 34: cloudstack.management.vpn.v1.VpnService.RemoveVpnUser:input_type -> cloudstack.management.vpn.v1.RemoveVpnUserRequest
	30, // 35: cloudstack.management.vpn.v1.VpnService.ResetVpnConnection:input_type -> cloudstack.management.vpn.v1.ResetVpnConnectionRequest
	32, // 36: cloudstack.management.vpn.v1.VpnService.UpdateRemoteAccessVpn:input_type -> cloudstack.management.vpn.v1.UpdateRemoteAccessVpnRequest
	34, // 37: cloudstack.management.vpn.v1.VpnService.UpdateVpnConnection:input_type -> cloudstack.management.vpn.v1.UpdateVpnConnectionRequest
	36, // 38: cloudstack.management.vpn.v1.VpnService.UpdateVpnCustomerGateway:input_type -> cloudstack.management.vpn.v1.UpdateVpnCustomerGatewayRequest
	38, // 39: cloudstack.management.vpn.v1.VpnService.UpdateVpnGateway:input_type -> cloudstack.management.vpn.v1.UpdateVpnGatewayRequest
	1,  // 40: cloudstack.management.vpn.v1.VpnService.AddVpnUser:output_type -> cloudstack.management.vpn.v1.AddVpnUserResponse
	3,  // 41: cloudstack.management.vpn.v1.VpnService.CreateRemoteAccessVpn:output_type -> cloudstack.management.vpn.v1.CreateRemoteAccessVpnResponse
	5,  // 42: cloudstack.management.vpn.v1.VpnService.CreateVpnConnection:output_type -> cloudstack.management.vpn.v1.CreateVpnConnectionResponse
	7,  // 43: cloudstack.management.vpn.v1.VpnService.CreateVpnCustomerGateway:output_type -> cloudstack.management.vpn.v1.CreateVpnCustomerGatewayResponse
	9,  // 44: cloudstack.management.vpn.v1.VpnService.CreateVpnGateway:output_type -> cloudstack.management.vpn.v1.CreateVpnGatewayResponse
	11, // 45: cloudstack.management.vpn.v1.VpnService.DeleteRemoteAccessVpn:output_type -> cloudstack.management.vpn.v1.DeleteRemoteAccessVpnResponse
	13, // 46: cloudstack.management.vpn.v1.VpnService.DeleteVpnConnection:output_type -> cloudstack.management.vpn.v1.DeleteVpnConnectionResponse
	15, // 47: cloudstack.management.vpn.v1.VpnService.DeleteVpnCustomerGateway:output_type -> cloudstack.management.vpn.v1.DeleteVpnCustomerGatewayResponse
	17, // 48: cloudstack.management.vpn.v1.VpnService.DeleteVpnGateway:output_type -> cloudstack.management.vpn.v1.DeleteVpnGatewayResponse
	19, // 49: cloudstack.management.vpn.v1.VpnService.ListRemoteAccessVpns:output_type -> cloudstack.management.vpn.v1.ListRemoteAccessVpnsResponse
	21, // 50: cloudstack.management.vpn.v1.VpnService.ListVpnConnections:output_type -> cloudstack.management.vpn.v1.ListVpnConnectionsResponse
	23, // 51: cloudstack.management.vpn.v1.VpnService.ListVpnCustomerGateways:output_type -> cloudstack.management.vpn.v1.ListVpnCustomerGatewaysResponse
	25, // 52: cloudstack.management.vpn.v1.VpnService.ListVpnGateways:output_type -> cloudstack.management.vpn.v1.ListVpnGatewaysResponse
	27, // 53: cloudstack.management.vpn.v1.VpnService.ListVpnUsers:output_type -> cloudstack.management.vpn.v1.ListVpnUsersResponse
	29, // 54: cloudstack.management.vpn.v1.VpnService.RemoveVpnUser:output_type -> cloudstack.management.vpn.v1.RemoveVpnUserResponse
	31, // 55: cloudstack.management.vpn.v1.VpnService.ResetVpnConnection:output_type -> cloudstack.management.vpn.v1.ResetVpnConnectionResponse
	33, // 56: cloudstack.management.vpn.v1.VpnService.UpdateRemoteAccessVpn:output_type -> cloudstack.management.vpn.v1.UpdateRemoteAccessVpnResponse
	35, // 57: cloudstack.management.vpn.v1.VpnService.UpdateVpnConnection:output_type -> cloudstack.management.vpn.v1.UpdateVpnConnectionResponse
	37, // 58: cloudstack.management.vpn.v1.VpnService.UpdateVpnCustomerGateway:output_type -> cloudstack.management.vpn.v1.UpdateVpnCustomerGatewayResponse
	39, // 59: cloudstack.management.vpn.v1.VpnService.UpdateVpnGateway:output_type -> cloudstack.management.vpn.v1.UpdateVpnGatewayResponse
	40, // [40:60] is the sub-list for method output_type
	20, // [20:40] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_cloudstack_management_vpn_v1_vpn_gen_proto_init() }
func file_cloudstack_management_vpn_v1_vpn_gen_proto_init() {
	if File_cloudstack_management_vpn_v1_vpn_gen_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_cloudstack_management_vpn_v1_vpn_gen_proto_rawDesc), len(file_cloudstack_management_vpn_v1_vpn_gen_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   47,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cloudstack_management_vpn_v1_vpn_gen_proto_goTypes,
		DependencyIndexes: file_cloudstack_management_vpn_v1_vpn_gen_proto_depIdxs,
		MessageInfos:      file_cloudstack_management_vpn_v1_vpn_gen_proto_msgTypes,
	}.Build()
	File_cloudstack_management_vpn_v1_vpn_gen_proto = out.File
	file_cloudstack_management_vpn_v1_vpn_gen_proto_goTypes = nil
	file_cloudstack_management_vpn_v1_vpn_gen_proto_depIdxs = nil
}
