// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: cloudstack/management/vpn/v1/vpn.gen.proto

package vpnv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VpnService_DeleteVpnCustomerGateway_FullMethodName = "/cloudstack.management.vpn.v1.VpnService/DeleteVpnCustomerGateway"
	VpnService_CreateVpnConnection_FullMethodName      = "/cloudstack.management.vpn.v1.VpnService/CreateVpnConnection"
	VpnService_ListVpnUsers_FullMethodName             = "/cloudstack.management.vpn.v1.VpnService/ListVpnUsers"
	VpnService_UpdateVpnCustomerGateway_FullMethodName = "/cloudstack.management.vpn.v1.VpnService/UpdateVpnCustomerGateway"
	VpnService_DeleteVpnConnection_FullMethodName      = "/cloudstack.management.vpn.v1.VpnService/DeleteVpnConnection"
	VpnService_ListVpnConnections_FullMethodName       = "/cloudstack.management.vpn.v1.VpnService/ListVpnConnections"
	VpnService_UpdateRemoteAccessVpn_FullMethodName    = "/cloudstack.management.vpn.v1.VpnService/UpdateRemoteAccessVpn"
	VpnService_RemoveVpnUser_FullMethodName            = "/cloudstack.management.vpn.v1.VpnService/RemoveVpnUser"
	VpnService_CreateRemoteAccessVpn_FullMethodName    = "/cloudstack.management.vpn.v1.VpnService/CreateRemoteAccessVpn"
	VpnService_ListRemoteAccessVpns_FullMethodName     = "/cloudstack.management.vpn.v1.VpnService/ListRemoteAccessVpns"
	VpnService_CreateVpnCustomerGateway_FullMethodName = "/cloudstack.management.vpn.v1.VpnService/CreateVpnCustomerGateway"
	VpnService_ResetVpnConnection_FullMethodName       = "/cloudstack.management.vpn.v1.VpnService/ResetVpnConnection"
	VpnService_DeleteVpnGateway_FullMethodName         = "/cloudstack.management.vpn.v1.VpnService/DeleteVpnGateway"
	VpnService_ListVpnCustomerGateways_FullMethodName  = "/cloudstack.management.vpn.v1.VpnService/ListVpnCustomerGateways"
	VpnService_ListVpnGateways_FullMethodName          = "/cloudstack.management.vpn.v1.VpnService/ListVpnGateways"
	VpnService_DeleteRemoteAccessVpn_FullMethodName    = "/cloudstack.management.vpn.v1.VpnService/DeleteRemoteAccessVpn"
	VpnService_UpdateVpnConnection_FullMethodName      = "/cloudstack.management.vpn.v1.VpnService/UpdateVpnConnection"
	VpnService_CreateVpnGateway_FullMethodName         = "/cloudstack.management.vpn.v1.VpnService/CreateVpnGateway"
	VpnService_AddVpnUser_FullMethodName               = "/cloudstack.management.vpn.v1.VpnService/AddVpnUser"
	VpnService_UpdateVpnGateway_FullMethodName         = "/cloudstack.management.vpn.v1.VpnService/UpdateVpnGateway"
)

// VpnServiceClient is the client API for VpnService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// VpnService provides operations for managing Vpns
type VpnServiceClient interface {
	// DeleteVpnCustomerGateway Delete site to site vpn customer gateway
	DeleteVpnCustomerGateway(ctx context.Context, in *DeleteVpnCustomerGatewayRequest, opts ...grpc.CallOption) (*DeleteVpnCustomerGatewayResponse, error)
	// CreateVpnConnection Create site to site vpn connection
	CreateVpnConnection(ctx context.Context, in *CreateVpnConnectionRequest, opts ...grpc.CallOption) (*CreateVpnConnectionResponse, error)
	// ListVpnUsers Lists vpn users
	ListVpnUsers(ctx context.Context, in *ListVpnUsersRequest, opts ...grpc.CallOption) (*ListVpnUsersResponse, error)
	// UpdateVpnCustomerGateway Update site to site vpn customer gateway
	UpdateVpnCustomerGateway(ctx context.Context, in *UpdateVpnCustomerGatewayRequest, opts ...grpc.CallOption) (*UpdateVpnCustomerGatewayResponse, error)
	// DeleteVpnConnection Delete site to site vpn connection
	DeleteVpnConnection(ctx context.Context, in *DeleteVpnConnectionRequest, opts ...grpc.CallOption) (*DeleteVpnConnectionResponse, error)
	// ListVpnConnections Lists site to site vpn connection gateways
	ListVpnConnections(ctx context.Context, in *ListVpnConnectionsRequest, opts ...grpc.CallOption) (*ListVpnConnectionsResponse, error)
	// UpdateRemoteAccessVpn Updates remote access vpn
	UpdateRemoteAccessVpn(ctx context.Context, in *UpdateRemoteAccessVpnRequest, opts ...grpc.CallOption) (*UpdateRemoteAccessVpnResponse, error)
	// RemoveVpnUser Removes vpn user
	RemoveVpnUser(ctx context.Context, in *RemoveVpnUserRequest, opts ...grpc.CallOption) (*RemoveVpnUserResponse, error)
	// CreateRemoteAccessVpn Creates a l2tp/ipsec remote access vpn
	CreateRemoteAccessVpn(ctx context.Context, in *CreateRemoteAccessVpnRequest, opts ...grpc.CallOption) (*CreateRemoteAccessVpnResponse, error)
	// ListRemoteAccessVpns Lists remote access vpns
	ListRemoteAccessVpns(ctx context.Context, in *ListRemoteAccessVpnsRequest, opts ...grpc.CallOption) (*ListRemoteAccessVpnsResponse, error)
	// CreateVpnCustomerGateway Creates site to site vpn customer gateway
	CreateVpnCustomerGateway(ctx context.Context, in *CreateVpnCustomerGatewayRequest, opts ...grpc.CallOption) (*CreateVpnCustomerGatewayResponse, error)
	// ResetVpnConnection Reset site to site vpn connection
	ResetVpnConnection(ctx context.Context, in *ResetVpnConnectionRequest, opts ...grpc.CallOption) (*ResetVpnConnectionResponse, error)
	// DeleteVpnGateway Delete site to site vpn gateway
	DeleteVpnGateway(ctx context.Context, in *DeleteVpnGatewayRequest, opts ...grpc.CallOption) (*DeleteVpnGatewayResponse, error)
	// ListVpnCustomerGateways Lists site to site vpn customer gateways
	ListVpnCustomerGateways(ctx context.Context, in *ListVpnCustomerGatewaysRequest, opts ...grpc.CallOption) (*ListVpnCustomerGatewaysResponse, error)
	// ListVpnGateways Lists site 2 site vpn gateways
	ListVpnGateways(ctx context.Context, in *ListVpnGatewaysRequest, opts ...grpc.CallOption) (*ListVpnGatewaysResponse, error)
	// DeleteRemoteAccessVpn Destroys a l2tp/ipsec remote access vpn
	DeleteRemoteAccessVpn(ctx context.Context, in *DeleteRemoteAccessVpnRequest, opts ...grpc.CallOption) (*DeleteRemoteAccessVpnResponse, error)
	// UpdateVpnConnection Updates site to site vpn connection
	UpdateVpnConnection(ctx context.Context, in *UpdateVpnConnectionRequest, opts ...grpc.CallOption) (*UpdateVpnConnectionResponse, error)
	// CreateVpnGateway Creates site to site vpn local gateway
	CreateVpnGateway(ctx context.Context, in *CreateVpnGatewayRequest, opts ...grpc.CallOption) (*CreateVpnGatewayResponse, error)
	// AddVpnUser Adds vpn users
	AddVpnUser(ctx context.Context, in *AddVpnUserRequest, opts ...grpc.CallOption) (*AddVpnUserResponse, error)
	// UpdateVpnGateway Updates site to site vpn local gateway
	UpdateVpnGateway(ctx context.Context, in *UpdateVpnGatewayRequest, opts ...grpc.CallOption) (*UpdateVpnGatewayResponse, error)
}

type vpnServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVpnServiceClient(cc grpc.ClientConnInterface) VpnServiceClient {
	return &vpnServiceClient{cc}
}

func (c *vpnServiceClient) DeleteVpnCustomerGateway(ctx context.Context, in *DeleteVpnCustomerGatewayRequest, opts ...grpc.CallOption) (*DeleteVpnCustomerGatewayResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteVpnCustomerGatewayResponse)
	err := c.cc.Invoke(ctx, VpnService_DeleteVpnCustomerGateway_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpnServiceClient) CreateVpnConnection(ctx context.Context, in *CreateVpnConnectionRequest, opts ...grpc.CallOption) (*CreateVpnConnectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateVpnConnectionResponse)
	err := c.cc.Invoke(ctx, VpnService_CreateVpnConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpnServiceClient) ListVpnUsers(ctx context.Context, in *ListVpnUsersRequest, opts ...grpc.CallOption) (*ListVpnUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVpnUsersResponse)
	err := c.cc.Invoke(ctx, VpnService_ListVpnUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpnServiceClient) UpdateVpnCustomerGateway(ctx context.Context, in *UpdateVpnCustomerGatewayRequest, opts ...grpc.CallOption) (*UpdateVpnCustomerGatewayResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateVpnCustomerGatewayResponse)
	err := c.cc.Invoke(ctx, VpnService_UpdateVpnCustomerGateway_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpnServiceClient) DeleteVpnConnection(ctx context.Context, in *DeleteVpnConnectionRequest, opts ...grpc.CallOption) (*DeleteVpnConnectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteVpnConnectionResponse)
	err := c.cc.Invoke(ctx, VpnService_DeleteVpnConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpnServiceClient) ListVpnConnections(ctx context.Context, in *ListVpnConnectionsRequest, opts ...grpc.CallOption) (*ListVpnConnectionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVpnConnectionsResponse)
	err := c.cc.Invoke(ctx, VpnService_ListVpnConnections_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpnServiceClient) UpdateRemoteAccessVpn(ctx context.Context, in *UpdateRemoteAccessVpnRequest, opts ...grpc.CallOption) (*UpdateRemoteAccessVpnResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRemoteAccessVpnResponse)
	err := c.cc.Invoke(ctx, VpnService_UpdateRemoteAccessVpn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpnServiceClient) RemoveVpnUser(ctx context.Context, in *RemoveVpnUserRequest, opts ...grpc.CallOption) (*RemoveVpnUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveVpnUserResponse)
	err := c.cc.Invoke(ctx, VpnService_RemoveVpnUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpnServiceClient) CreateRemoteAccessVpn(ctx context.Context, in *CreateRemoteAccessVpnRequest, opts ...grpc.CallOption) (*CreateRemoteAccessVpnResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRemoteAccessVpnResponse)
	err := c.cc.Invoke(ctx, VpnService_CreateRemoteAccessVpn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpnServiceClient) ListRemoteAccessVpns(ctx context.Context, in *ListRemoteAccessVpnsRequest, opts ...grpc.CallOption) (*ListRemoteAccessVpnsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRemoteAccessVpnsResponse)
	err := c.cc.Invoke(ctx, VpnService_ListRemoteAccessVpns_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpnServiceClient) CreateVpnCustomerGateway(ctx context.Context, in *CreateVpnCustomerGatewayRequest, opts ...grpc.CallOption) (*CreateVpnCustomerGatewayResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateVpnCustomerGatewayResponse)
	err := c.cc.Invoke(ctx, VpnService_CreateVpnCustomerGateway_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpnServiceClient) ResetVpnConnection(ctx context.Context, in *ResetVpnConnectionRequest, opts ...grpc.CallOption) (*ResetVpnConnectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResetVpnConnectionResponse)
	err := c.cc.Invoke(ctx, VpnService_ResetVpnConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpnServiceClient) DeleteVpnGateway(ctx context.Context, in *DeleteVpnGatewayRequest, opts ...grpc.CallOption) (*DeleteVpnGatewayResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteVpnGatewayResponse)
	err := c.cc.Invoke(ctx, VpnService_DeleteVpnGateway_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpnServiceClient) ListVpnCustomerGateways(ctx context.Context, in *ListVpnCustomerGatewaysRequest, opts ...grpc.CallOption) (*ListVpnCustomerGatewaysResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVpnCustomerGatewaysResponse)
	err := c.cc.Invoke(ctx, VpnService_ListVpnCustomerGateways_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpnServiceClient) ListVpnGateways(ctx context.Context, in *ListVpnGatewaysRequest, opts ...grpc.CallOption) (*ListVpnGatewaysResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVpnGatewaysResponse)
	err := c.cc.Invoke(ctx, VpnService_ListVpnGateways_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpnServiceClient) DeleteRemoteAccessVpn(ctx context.Context, in *DeleteRemoteAccessVpnRequest, opts ...grpc.CallOption) (*DeleteRemoteAccessVpnResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRemoteAccessVpnResponse)
	err := c.cc.Invoke(ctx, VpnService_DeleteRemoteAccessVpn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpnServiceClient) UpdateVpnConnection(ctx context.Context, in *UpdateVpnConnectionRequest, opts ...grpc.CallOption) (*UpdateVpnConnectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateVpnConnectionResponse)
	err := c.cc.Invoke(ctx, VpnService_UpdateVpnConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpnServiceClient) CreateVpnGateway(ctx context.Context, in *CreateVpnGatewayRequest, opts ...grpc.CallOption) (*CreateVpnGatewayResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateVpnGatewayResponse)
	err := c.cc.Invoke(ctx, VpnService_CreateVpnGateway_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpnServiceClient) AddVpnUser(ctx context.Context, in *AddVpnUserRequest, opts ...grpc.CallOption) (*AddVpnUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddVpnUserResponse)
	err := c.cc.Invoke(ctx, VpnService_AddVpnUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpnServiceClient) UpdateVpnGateway(ctx context.Context, in *UpdateVpnGatewayRequest, opts ...grpc.CallOption) (*UpdateVpnGatewayResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateVpnGatewayResponse)
	err := c.cc.Invoke(ctx, VpnService_UpdateVpnGateway_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VpnServiceServer is the server API for VpnService service.
// All implementations must embed UnimplementedVpnServiceServer
// for forward compatibility.
//
// VpnService provides operations for managing Vpns
type VpnServiceServer interface {
	// DeleteVpnCustomerGateway Delete site to site vpn customer gateway
	DeleteVpnCustomerGateway(context.Context, *DeleteVpnCustomerGatewayRequest) (*DeleteVpnCustomerGatewayResponse, error)
	// CreateVpnConnection Create site to site vpn connection
	CreateVpnConnection(context.Context, *CreateVpnConnectionRequest) (*CreateVpnConnectionResponse, error)
	// ListVpnUsers Lists vpn users
	ListVpnUsers(context.Context, *ListVpnUsersRequest) (*ListVpnUsersResponse, error)
	// UpdateVpnCustomerGateway Update site to site vpn customer gateway
	UpdateVpnCustomerGateway(context.Context, *UpdateVpnCustomerGatewayRequest) (*UpdateVpnCustomerGatewayResponse, error)
	// DeleteVpnConnection Delete site to site vpn connection
	DeleteVpnConnection(context.Context, *DeleteVpnConnectionRequest) (*DeleteVpnConnectionResponse, error)
	// ListVpnConnections Lists site to site vpn connection gateways
	ListVpnConnections(context.Context, *ListVpnConnectionsRequest) (*ListVpnConnectionsResponse, error)
	// UpdateRemoteAccessVpn Updates remote access vpn
	UpdateRemoteAccessVpn(context.Context, *UpdateRemoteAccessVpnRequest) (*UpdateRemoteAccessVpnResponse, error)
	// RemoveVpnUser Removes vpn user
	RemoveVpnUser(context.Context, *RemoveVpnUserRequest) (*RemoveVpnUserResponse, error)
	// CreateRemoteAccessVpn Creates a l2tp/ipsec remote access vpn
	CreateRemoteAccessVpn(context.Context, *CreateRemoteAccessVpnRequest) (*CreateRemoteAccessVpnResponse, error)
	// ListRemoteAccessVpns Lists remote access vpns
	ListRemoteAccessVpns(context.Context, *ListRemoteAccessVpnsRequest) (*ListRemoteAccessVpnsResponse, error)
	// CreateVpnCustomerGateway Creates site to site vpn customer gateway
	CreateVpnCustomerGateway(context.Context, *CreateVpnCustomerGatewayRequest) (*CreateVpnCustomerGatewayResponse, error)
	// ResetVpnConnection Reset site to site vpn connection
	ResetVpnConnection(context.Context, *ResetVpnConnectionRequest) (*ResetVpnConnectionResponse, error)
	// DeleteVpnGateway Delete site to site vpn gateway
	DeleteVpnGateway(context.Context, *DeleteVpnGatewayRequest) (*DeleteVpnGatewayResponse, error)
	// ListVpnCustomerGateways Lists site to site vpn customer gateways
	ListVpnCustomerGateways(context.Context, *ListVpnCustomerGatewaysRequest) (*ListVpnCustomerGatewaysResponse, error)
	// ListVpnGateways Lists site 2 site vpn gateways
	ListVpnGateways(context.Context, *ListVpnGatewaysRequest) (*ListVpnGatewaysResponse, error)
	// DeleteRemoteAccessVpn Destroys a l2tp/ipsec remote access vpn
	DeleteRemoteAccessVpn(context.Context, *DeleteRemoteAccessVpnRequest) (*DeleteRemoteAccessVpnResponse, error)
	// UpdateVpnConnection Updates site to site vpn connection
	UpdateVpnConnection(context.Context, *UpdateVpnConnectionRequest) (*UpdateVpnConnectionResponse, error)
	// CreateVpnGateway Creates site to site vpn local gateway
	CreateVpnGateway(context.Context, *CreateVpnGatewayRequest) (*CreateVpnGatewayResponse, error)
	// AddVpnUser Adds vpn users
	AddVpnUser(context.Context, *AddVpnUserRequest) (*AddVpnUserResponse, error)
	// UpdateVpnGateway Updates site to site vpn local gateway
	UpdateVpnGateway(context.Context, *UpdateVpnGatewayRequest) (*UpdateVpnGatewayResponse, error)
	mustEmbedUnimplementedVpnServiceServer()
}

// UnimplementedVpnServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVpnServiceServer struct{}

func (UnimplementedVpnServiceServer) DeleteVpnCustomerGateway(context.Context, *DeleteVpnCustomerGatewayRequest) (*DeleteVpnCustomerGatewayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVpnCustomerGateway not implemented")
}
func (UnimplementedVpnServiceServer) CreateVpnConnection(context.Context, *CreateVpnConnectionRequest) (*CreateVpnConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVpnConnection not implemented")
}
func (UnimplementedVpnServiceServer) ListVpnUsers(context.Context, *ListVpnUsersRequest) (*ListVpnUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVpnUsers not implemented")
}
func (UnimplementedVpnServiceServer) UpdateVpnCustomerGateway(context.Context, *UpdateVpnCustomerGatewayRequest) (*UpdateVpnCustomerGatewayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVpnCustomerGateway not implemented")
}
func (UnimplementedVpnServiceServer) DeleteVpnConnection(context.Context, *DeleteVpnConnectionRequest) (*DeleteVpnConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVpnConnection not implemented")
}
func (UnimplementedVpnServiceServer) ListVpnConnections(context.Context, *ListVpnConnectionsRequest) (*ListVpnConnectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVpnConnections not implemented")
}
func (UnimplementedVpnServiceServer) UpdateRemoteAccessVpn(context.Context, *UpdateRemoteAccessVpnRequest) (*UpdateRemoteAccessVpnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRemoteAccessVpn not implemented")
}
func (UnimplementedVpnServiceServer) RemoveVpnUser(context.Context, *RemoveVpnUserRequest) (*RemoveVpnUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveVpnUser not implemented")
}
func (UnimplementedVpnServiceServer) CreateRemoteAccessVpn(context.Context, *CreateRemoteAccessVpnRequest) (*CreateRemoteAccessVpnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRemoteAccessVpn not implemented")
}
func (UnimplementedVpnServiceServer) ListRemoteAccessVpns(context.Context, *ListRemoteAccessVpnsRequest) (*ListRemoteAccessVpnsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRemoteAccessVpns not implemented")
}
func (UnimplementedVpnServiceServer) CreateVpnCustomerGateway(context.Context, *CreateVpnCustomerGatewayRequest) (*CreateVpnCustomerGatewayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVpnCustomerGateway not implemented")
}
func (UnimplementedVpnServiceServer) ResetVpnConnection(context.Context, *ResetVpnConnectionRequest) (*ResetVpnConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetVpnConnection not implemented")
}
func (UnimplementedVpnServiceServer) DeleteVpnGateway(context.Context, *DeleteVpnGatewayRequest) (*DeleteVpnGatewayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVpnGateway not implemented")
}
func (UnimplementedVpnServiceServer) ListVpnCustomerGateways(context.Context, *ListVpnCustomerGatewaysRequest) (*ListVpnCustomerGatewaysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVpnCustomerGateways not implemented")
}
func (UnimplementedVpnServiceServer) ListVpnGateways(context.Context, *ListVpnGatewaysRequest) (*ListVpnGatewaysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVpnGateways not implemented")
}
func (UnimplementedVpnServiceServer) DeleteRemoteAccessVpn(context.Context, *DeleteRemoteAccessVpnRequest) (*DeleteRemoteAccessVpnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRemoteAccessVpn not implemented")
}
func (UnimplementedVpnServiceServer) UpdateVpnConnection(context.Context, *UpdateVpnConnectionRequest) (*UpdateVpnConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVpnConnection not implemented")
}
func (UnimplementedVpnServiceServer) CreateVpnGateway(context.Context, *CreateVpnGatewayRequest) (*CreateVpnGatewayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVpnGateway not implemented")
}
func (UnimplementedVpnServiceServer) AddVpnUser(context.Context, *AddVpnUserRequest) (*AddVpnUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVpnUser not implemented")
}
func (UnimplementedVpnServiceServer) UpdateVpnGateway(context.Context, *UpdateVpnGatewayRequest) (*UpdateVpnGatewayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVpnGateway not implemented")
}
func (UnimplementedVpnServiceServer) mustEmbedUnimplementedVpnServiceServer() {}
func (UnimplementedVpnServiceServer) testEmbeddedByValue()                    {}

// UnsafeVpnServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VpnServiceServer will
// result in compilation errors.
type UnsafeVpnServiceServer interface {
	mustEmbedUnimplementedVpnServiceServer()
}

func RegisterVpnServiceServer(s grpc.ServiceRegistrar, srv VpnServiceServer) {
	// If the following call pancis, it indicates UnimplementedVpnServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VpnService_ServiceDesc, srv)
}

func _VpnService_DeleteVpnCustomerGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVpnCustomerGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpnServiceServer).DeleteVpnCustomerGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VpnService_DeleteVpnCustomerGateway_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpnServiceServer).DeleteVpnCustomerGateway(ctx, req.(*DeleteVpnCustomerGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VpnService_CreateVpnConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVpnConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpnServiceServer).CreateVpnConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VpnService_CreateVpnConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpnServiceServer).CreateVpnConnection(ctx, req.(*CreateVpnConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VpnService_ListVpnUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVpnUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpnServiceServer).ListVpnUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VpnService_ListVpnUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpnServiceServer).ListVpnUsers(ctx, req.(*ListVpnUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VpnService_UpdateVpnCustomerGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVpnCustomerGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpnServiceServer).UpdateVpnCustomerGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VpnService_UpdateVpnCustomerGateway_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpnServiceServer).UpdateVpnCustomerGateway(ctx, req.(*UpdateVpnCustomerGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VpnService_DeleteVpnConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVpnConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpnServiceServer).DeleteVpnConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VpnService_DeleteVpnConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpnServiceServer).DeleteVpnConnection(ctx, req.(*DeleteVpnConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VpnService_ListVpnConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVpnConnectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpnServiceServer).ListVpnConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VpnService_ListVpnConnections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpnServiceServer).ListVpnConnections(ctx, req.(*ListVpnConnectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VpnService_UpdateRemoteAccessVpn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRemoteAccessVpnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpnServiceServer).UpdateRemoteAccessVpn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VpnService_UpdateRemoteAccessVpn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpnServiceServer).UpdateRemoteAccessVpn(ctx, req.(*UpdateRemoteAccessVpnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VpnService_RemoveVpnUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveVpnUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpnServiceServer).RemoveVpnUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VpnService_RemoveVpnUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpnServiceServer).RemoveVpnUser(ctx, req.(*RemoveVpnUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VpnService_CreateRemoteAccessVpn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRemoteAccessVpnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpnServiceServer).CreateRemoteAccessVpn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VpnService_CreateRemoteAccessVpn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpnServiceServer).CreateRemoteAccessVpn(ctx, req.(*CreateRemoteAccessVpnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VpnService_ListRemoteAccessVpns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRemoteAccessVpnsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpnServiceServer).ListRemoteAccessVpns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VpnService_ListRemoteAccessVpns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpnServiceServer).ListRemoteAccessVpns(ctx, req.(*ListRemoteAccessVpnsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VpnService_CreateVpnCustomerGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVpnCustomerGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpnServiceServer).CreateVpnCustomerGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VpnService_CreateVpnCustomerGateway_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpnServiceServer).CreateVpnCustomerGateway(ctx, req.(*CreateVpnCustomerGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VpnService_ResetVpnConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetVpnConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpnServiceServer).ResetVpnConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VpnService_ResetVpnConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpnServiceServer).ResetVpnConnection(ctx, req.(*ResetVpnConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VpnService_DeleteVpnGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVpnGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpnServiceServer).DeleteVpnGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VpnService_DeleteVpnGateway_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpnServiceServer).DeleteVpnGateway(ctx, req.(*DeleteVpnGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VpnService_ListVpnCustomerGateways_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVpnCustomerGatewaysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpnServiceServer).ListVpnCustomerGateways(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VpnService_ListVpnCustomerGateways_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpnServiceServer).ListVpnCustomerGateways(ctx, req.(*ListVpnCustomerGatewaysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VpnService_ListVpnGateways_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVpnGatewaysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpnServiceServer).ListVpnGateways(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VpnService_ListVpnGateways_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpnServiceServer).ListVpnGateways(ctx, req.(*ListVpnGatewaysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VpnService_DeleteRemoteAccessVpn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRemoteAccessVpnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpnServiceServer).DeleteRemoteAccessVpn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VpnService_DeleteRemoteAccessVpn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpnServiceServer).DeleteRemoteAccessVpn(ctx, req.(*DeleteRemoteAccessVpnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VpnService_UpdateVpnConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVpnConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpnServiceServer).UpdateVpnConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VpnService_UpdateVpnConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpnServiceServer).UpdateVpnConnection(ctx, req.(*UpdateVpnConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VpnService_CreateVpnGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVpnGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpnServiceServer).CreateVpnGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VpnService_CreateVpnGateway_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpnServiceServer).CreateVpnGateway(ctx, req.(*CreateVpnGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VpnService_AddVpnUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVpnUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpnServiceServer).AddVpnUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VpnService_AddVpnUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpnServiceServer).AddVpnUser(ctx, req.(*AddVpnUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VpnService_UpdateVpnGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVpnGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpnServiceServer).UpdateVpnGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VpnService_UpdateVpnGateway_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpnServiceServer).UpdateVpnGateway(ctx, req.(*UpdateVpnGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VpnService_ServiceDesc is the grpc.ServiceDesc for VpnService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VpnService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloudstack.management.vpn.v1.VpnService",
	HandlerType: (*VpnServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteVpnCustomerGateway",
			Handler:    _VpnService_DeleteVpnCustomerGateway_Handler,
		},
		{
			MethodName: "CreateVpnConnection",
			Handler:    _VpnService_CreateVpnConnection_Handler,
		},
		{
			MethodName: "ListVpnUsers",
			Handler:    _VpnService_ListVpnUsers_Handler,
		},
		{
			MethodName: "UpdateVpnCustomerGateway",
			Handler:    _VpnService_UpdateVpnCustomerGateway_Handler,
		},
		{
			MethodName: "DeleteVpnConnection",
			Handler:    _VpnService_DeleteVpnConnection_Handler,
		},
		{
			MethodName: "ListVpnConnections",
			Handler:    _VpnService_ListVpnConnections_Handler,
		},
		{
			MethodName: "UpdateRemoteAccessVpn",
			Handler:    _VpnService_UpdateRemoteAccessVpn_Handler,
		},
		{
			MethodName: "RemoveVpnUser",
			Handler:    _VpnService_RemoveVpnUser_Handler,
		},
		{
			MethodName: "CreateRemoteAccessVpn",
			Handler:    _VpnService_CreateRemoteAccessVpn_Handler,
		},
		{
			MethodName: "ListRemoteAccessVpns",
			Handler:    _VpnService_ListRemoteAccessVpns_Handler,
		},
		{
			MethodName: "CreateVpnCustomerGateway",
			Handler:    _VpnService_CreateVpnCustomerGateway_Handler,
		},
		{
			MethodName: "ResetVpnConnection",
			Handler:    _VpnService_ResetVpnConnection_Handler,
		},
		{
			MethodName: "DeleteVpnGateway",
			Handler:    _VpnService_DeleteVpnGateway_Handler,
		},
		{
			MethodName: "ListVpnCustomerGateways",
			Handler:    _VpnService_ListVpnCustomerGateways_Handler,
		},
		{
			MethodName: "ListVpnGateways",
			Handler:    _VpnService_ListVpnGateways_Handler,
		},
		{
			MethodName: "DeleteRemoteAccessVpn",
			Handler:    _VpnService_DeleteRemoteAccessVpn_Handler,
		},
		{
			MethodName: "UpdateVpnConnection",
			Handler:    _VpnService_UpdateVpnConnection_Handler,
		},
		{
			MethodName: "CreateVpnGateway",
			Handler:    _VpnService_CreateVpnGateway_Handler,
		},
		{
			MethodName: "AddVpnUser",
			Handler:    _VpnService_AddVpnUser_Handler,
		},
		{
			MethodName: "UpdateVpnGateway",
			Handler:    _VpnService_UpdateVpnGateway_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloudstack/management/vpn/v1/vpn.gen.proto",
}
