edition = "2023";

package cloudstack.management.host.v1;

import "cloudstack/annotations/annotations.proto";
import "cloudstack/validate/validate.proto";
import "google/protobuf/descriptor.proto";

// HostService provides operations for managing Hosts
service HostService {
	option (annotations.service).scope = Scope_ADMIN;

	// ListHostTags Lists host tags
	rpc ListHostTags(ListHostTagsRequest) returns (ListHostTagsResponse) {}

	// UpdateHost Updates a host.
	rpc UpdateHost(UpdateHostRequest) returns (UpdateHostResponse) {}

	// ReleaseHostReservation Releases host reservation.
	rpc ReleaseHostReservation(ReleaseHostReservationRequest) returns (ReleaseHostReservationResponse) {}

	// DeclareHostAsDegraded Declare host as 'Degraded'. Host must be on 'Disconnected' or 'Alert' state. The ADMIN must be sure that there are no VMs running on the respective host otherwise this command might corrupted VMs that were running on the 'Degraded' host.
	rpc DeclareHostAsDegraded(DeclareHostAsDegradedRequest) returns (DeclareHostAsDegradedResponse) {}

	// CancelHostAsDegraded Cancel host status from 'Degraded'. Host will transit back to status 'Enabled'.
	rpc CancelHostAsDegraded(CancelHostAsDegradedRequest) returns (CancelHostAsDegradedResponse) {}

	// AddSecondaryStorage Adds secondary storage.
	rpc AddSecondaryStorage(AddSecondaryStorageRequest) returns (AddSecondaryStorageResponse) {}

	// AddHost Adds a new host.
	rpc AddHost(AddHostRequest) returns (AddHostResponse) {}

	// UpdateHostPassword Update password of a host/pool on management server.
	rpc UpdateHostPassword(UpdateHostPasswordRequest) returns (UpdateHostPasswordResponse) {}

	// PrepareForHostMaintenance Prepares a host for maintenance.
	rpc PrepareForHostMaintenance(PrepareForHostMaintenanceRequest) returns (PrepareForHostMaintenanceResponse) {}

	// DeleteHost Deletes a host.
	rpc DeleteHost(DeleteHostRequest) returns (DeleteHostResponse) {}

	// ListHosts Lists hosts.
	rpc ListHosts(ListHostsRequest) returns (ListHostsResponse) {}

	// CancelHostMaintenance Cancels host maintenance.
	rpc CancelHostMaintenance(CancelHostMaintenanceRequest) returns (CancelHostMaintenanceResponse) {}

	// ReconnectHost Reconnects a host.
	rpc ReconnectHost(ReconnectHostRequest) returns (ReconnectHostResponse) {}

	// FindHostsForMigration Find hosts suitable for migrating a virtual machine.
	rpc FindHostsForMigration(FindHostsForMigrationRequest) returns (FindHostsForMigrationResponse) {}
}

// ListHostTagsRequest represents the parameters for lists host tags
message ListHostTagsRequest {
	// List by keyword
	string keyword = 1;

	//
	int32 page = 2;

	//
	int32 page_size = 3;

	//
	string response_type = 4;
}

// ListHostTagsResponse represents the response from lists host tags
message ListHostTagsResponse {
	option (validate.message).disabled = false;
	// The list of HostTags
	repeated HostTag items = 1;

	// The total count of HostTags
	int32 total_count = 2;
}

// UpdateHostRequest represents the parameters for updates a host.
message UpdateHostRequest {
	// the ID of the host to update
	int64 id = 1 [
		(validate.field).required = true
	];

	// Change the name of host
	string name = 2 [
		(validate.field).string.min_len = 1,
		(validate.field).string.max_len = 255
	];

	// the id of Os category to update the host with
	int64 os_category_id = 3;

	// Change resource state of host, valid values are [Enable, Disable]. Operation may failed if host in states not allowing Enable/Disable
	string allocation_state = 4;

	// list of tags to be added to the host
	repeated string host_tags = 5;

	// Whether the informed tag is a JS interpretable rule or not.
	bool is_tag_a_rule = 6 [
		features.field_presence = EXPLICIT
	];

	// the new uri for the secondary storage: nfs://host/path
	string url = 7;

	// Add an annotation to this host
	string annotation = 8;

	//
	string response_type = 9;
}

// UpdateHostResponse represents the response from updates a host.
message UpdateHostResponse {
	// The Result
	Result result = 1;
}

// ReleaseHostReservationRequest represents the parameters for releases host reservation.
message ReleaseHostReservationRequest {
	// the host ID
	int64 id = 1 [
		(validate.field).required = true
	];

	//
	int64 start_event_id = 2;

	//
	string injected_job_id = 3 [
		(validate.field).string.uuid = true
	];

	//
	string response_type = 4;
}

// ReleaseHostReservationResponse represents the response from releases host reservation.
message ReleaseHostReservationResponse {
	// The Result
	Result result = 1;
}

// DeclareHostAsDegradedRequest represents the parameters for declare host as 'degraded'. host must be on 'disconnected' or 'alert' state. the admin must be sure that there are no vms running on the respective host otherwise this command might corrupted vms that were running on the 'degraded' host.
message DeclareHostAsDegradedRequest {
	// host ID
	int64 id = 1 [
		(validate.field).required = true
	];

	//
	int64 start_event_id = 2;

	//
	string injected_job_id = 3 [
		(validate.field).string.uuid = true
	];

	//
	string response_type = 4;
}

// DeclareHostAsDegradedResponse represents the response from declare host as 'degraded'. host must be on 'disconnected' or 'alert' state. the admin must be sure that there are no vms running on the respective host otherwise this command might corrupted vms that were running on the 'degraded' host.
message DeclareHostAsDegradedResponse {
	// The Result
	Result result = 1;
}

// CancelHostAsDegradedRequest represents the parameters for cancel host status from 'degraded'. host will transit back to status 'enabled'.
message CancelHostAsDegradedRequest {
	// host ID
	int64 id = 1 [
		(validate.field).required = true
	];

	//
	int64 start_event_id = 2;

	//
	string injected_job_id = 3 [
		(validate.field).string.uuid = true
	];

	//
	string response_type = 4;
}

// CancelHostAsDegradedResponse represents the response from cancel host status from 'degraded'. host will transit back to status 'enabled'.
message CancelHostAsDegradedResponse {
	// The Result
	Result result = 1;
}

// AddSecondaryStorageRequest represents the parameters for adds secondary storage.
message AddSecondaryStorageRequest {
	// the URL for the secondary storage
	string url = 1 [
		(validate.field).required = true
	];

	// the Zone ID for the secondary storage
	int64 zone_id = 2;

	//
	string response_type = 3;
}

// AddSecondaryStorageResponse represents the response from adds secondary storage.
message AddSecondaryStorageResponse {
	// The Result
	Result result = 1;
}

// AddHostRequest represents the parameters for adds a new host.
message AddHostRequest {
	// the cluster ID for the host
	int64 cluster_id = 1;

	// the cluster name for the host
	string cluster_name = 2 [
		(validate.field).string.min_len = 1,
		(validate.field).string.max_len = 255
	];

	// the username for the host; required to be passed for hypervisors other than VMWare
	string username = 3 [
		(validate.field).string.min_len = 1,
		(validate.field).string.max_len = 255
	];

	// the password for the host; required to be passed for hypervisors other than VMWare
	string password = 4;

	// the Pod ID for the host
	int64 pod_id = 5 [
		(validate.field).required = true
	];

	// the host URL
	string url = 6 [
		(validate.field).required = true
	];

	// the Zone ID for the host
	int64 zone_id = 7 [
		(validate.field).required = true
	];

	// hypervisor type of the host
	string hypervisor = 8 [
		(validate.field).required = true
	];

	// Allocation state of this Host for allocation of new resources
	string allocation_state = 9;

	// list of tags to be added to the host
	repeated string host_tags = 10;

	//
	string response_type = 11;
}

// AddHostResponse represents the response from adds a new host.
message AddHostResponse {
	// The Result
	Result result = 1;
}

// UpdateHostPasswordRequest represents the parameters for update password of a host/pool on management server.
message UpdateHostPasswordRequest {
	// the host ID
	int64 host_id = 1;

	// the cluster ID
	int64 cluster_id = 2;

	// if the password should also be updated on the hosts
	bool update_passwd_on_host = 3 [
		features.field_presence = EXPLICIT
	];

	// the username for the host/cluster
	string username = 4 [
		(validate.field).required       = true,
		(validate.field).string.min_len = 1,
		(validate.field).string.max_len = 255
	];

	// the new password for the host/cluster
	string password = 5 [
		(validate.field).required = true
	];

	//
	string response_type = 6;
}

// UpdateHostPasswordResponse represents the response from update password of a host/pool on management server.
message UpdateHostPasswordResponse {
	// The Result
	Result result = 1;
}

// PrepareForHostMaintenanceRequest represents the parameters for prepares a host for maintenance.
message PrepareForHostMaintenanceRequest {
	// the host ID
	int64 id = 1 [
		(validate.field).required = true
	];

	//
	int64 start_event_id = 2;

	//
	string injected_job_id = 3 [
		(validate.field).string.uuid = true
	];

	//
	string response_type = 4;
}

// PrepareForHostMaintenanceResponse represents the response from prepares a host for maintenance.
message PrepareForHostMaintenanceResponse {
	// The Result
	Result result = 1;
}

// DeleteHostRequest represents the parameters for deletes a host.
message DeleteHostRequest {
	// the host ID
	int64 id = 1 [
		(validate.field).required = true
	];

	// Force delete the host. All HA enabled vms running on the host will be put to HA; HA disabled ones will be stopped
	bool forced = 2 [
		features.field_presence = EXPLICIT
	];

	// Force destroy local storage on this host. All VMs created on this local storage will be destroyed
	bool force_destroy_local_storage = 3 [
		features.field_presence = EXPLICIT
	];

	//
	string response_type = 4;
}

// DeleteHostResponse represents the response from deletes a host.
message DeleteHostResponse {
	// The Result
	Result result = 1;
}

// ListHostsRequest represents the parameters for lists hosts.
message ListHostsRequest {
	// lists hosts existing in particular cluster
	int64 cluster_id = 1;

	// the id of the host
	int64 id = 2;

	// the name of the host
	string host_name = 3 [
		(validate.field).string.min_len = 1,
		(validate.field).string.max_len = 255
	];

	// the Pod ID for the host
	int64 pod_id = 4;

	// the state of the host
	string state = 5;

	// the host type
	string type = 6;

	// the Zone ID for the host
	int64 zone_id = 7;

	// lists hosts in the same cluster as this VM and flag hosts with enough CPU/RAm to host this VM
	int64 virtual_machine_id = 8;

	// list hosts for which out-of-band management is enabled
	bool out_of_band_management_enabled = 9 [
		features.field_presence = EXPLICIT
	];

	// list hosts by its out-of-band management interface's power state. Its value can be one of [On, Off, Unknown]
	string out_of_band_management_power_state = 10;

	// list hosts by resource state. Resource state represents current state determined by admin of host, value can be one of [Enabled, Disabled, Unmanaged, PrepareForMaintenance, ErrorInMaintenance, Maintenance, Error]
	string resource_state = 11;

	// comma separated list of host details requested, value can be a list of [ min, all, capacity, events, stats]
	repeated string view_details = 12;

	// if true, list only hosts dedicated to HA
	bool ha_host = 13 [
		features.field_presence = EXPLICIT
	];

	// hypervisor type of host: XenServer,KVM,VMware,Hyperv,BareMetal,Simulator
	string hypervisor = 14;

	// the id of the management server
	int64 management_server_id = 15;

	// List by keyword
	string keyword = 16;

	//
	int32 page = 17;

	//
	int32 page_size = 18;

	//
	string response_type = 19;
}

// ListHostsResponse represents the response from lists hosts.
message ListHostsResponse {
	option (validate.message).disabled = false;
	// The list of Hosts
	repeated Host items = 1;

	// The total count of Hosts
	int32 total_count = 2;
}

// CancelHostMaintenanceRequest represents the parameters for cancels host maintenance.
message CancelHostMaintenanceRequest {
	// the host ID
	int64 id = 1 [
		(validate.field).required = true
	];

	//
	int64 start_event_id = 2;

	//
	string injected_job_id = 3 [
		(validate.field).string.uuid = true
	];

	//
	string response_type = 4;
}

// CancelHostMaintenanceResponse represents the response from cancels host maintenance.
message CancelHostMaintenanceResponse {
	// The Result
	Result result = 1;
}

// ReconnectHostRequest represents the parameters for reconnects a host.
message ReconnectHostRequest {
	// the host ID
	int64 id = 1 [
		(validate.field).required = true
	];

	//
	int64 start_event_id = 2;

	//
	string injected_job_id = 3 [
		(validate.field).string.uuid = true
	];

	//
	string response_type = 4;
}

// ReconnectHostResponse represents the response from reconnects a host.
message ReconnectHostResponse {
	// The Result
	Result result = 1;
}

// FindHostsForMigrationRequest represents the parameters for find hosts suitable for migrating a virtual machine.
message FindHostsForMigrationRequest {
	// find hosts to which this VM can be migrated and flag the hosts with enough CPU/RAM to host the VM
	int64 virtual_machine_id = 1 [
		(validate.field).required = true
	];

	// List by keyword
	string keyword = 2;

	//
	int32 page = 3;

	//
	int32 page_size = 4;

	//
	string response_type = 5;
}

// FindHostsForMigrationResponse represents the response from find hosts suitable for migrating a virtual machine.
message FindHostsForMigrationResponse {
	// The Result
	Result result = 1;
}

// HostTag represents a HostTag Item
message HostTag {
	// The ID of the HostTag
	string id = 1 [
		(validate.field).string.uuid = true
	];
	// The name of the HostTag
	string name = 2;
	// The display name of the HostTag
	string display_name = 3;
	// The description of the HostTag
	string description = 4;
	// The date this entity was created
	string created = 5;
}

// Host represents a Host Item
message Host {
	// The ID of the Host
	string id = 1 [
		(validate.field).string.uuid = true
	];
	// The name of the Host
	string name = 2;
	// The display name of the Host
	string display_name = 3;
	// The description of the Host
	string description = 4;
	// The date this entity was created
	string created = 5;
}

// Success represents a Success Operation Response
message Success {
	// true if operation is executed successfully
	bool success = 1;
	// any text associated with the success or failure
	string display_text = 2;
}

// AllocationStateType represents the possible values for Change resource state of host, valid values are [Enable, Disable]. Operation may failed if host in states not allowing Enable/Disable
enum AllocationStateType {
	// Default unspecified value
	ALLOCATION_STATE_TYPE_UNSPECIFIED = 0;
	// V__ENABLE value
	ALLOCATION_STATE_TYPE_V__ENABLE = 1;
}

// Result represents a generic operation result
message Result {
	// Whether the operation was successful
	bool success = 1;

	// Any text associated with the success or failure
	string display_text = 2;

	// The ID of the resource affected by the operation
	string id = 3 [
		(validate.field).string.uuid = true
	];

	// The job ID for an async operation
	string job_id = 4 [
		(validate.field).string.uuid = true
	];

	// The status of the job
	string job_status = 5;
}
