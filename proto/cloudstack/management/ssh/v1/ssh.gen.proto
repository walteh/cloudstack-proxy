edition = "2023";

package cloudstack.management.ssh.v1;

import "buf/validate/validate.proto";
import "cloudstack/annotations/annotations.proto";
import "google/protobuf/descriptor.proto";

// SshService provides operations for managing Sshs
service SshService {
	option (annotations.service).scope = SCOPE_USER;

	// CreateSSHKeyPair Create a new keypair and returns the private key
	rpc CreateSSHKeyPair(CreateSSHKeyPairRequest) returns (CreateSSHKeyPairResponse) {
		option (annotations.method).scope = SCOPE_USER;
	}

	// DeleteSSHKeyPair Deletes a keypair by name
	rpc DeleteSSHKeyPair(DeleteSSHKeyPairRequest) returns (DeleteSSHKeyPairResponse) {
		option (annotations.method).scope = SCOPE_USER;
	}

	// ListSSHKeyPairs List registered keypairs
	rpc ListSSHKeyPairs(ListSSHKeyPairsRequest) returns (ListSSHKeyPairsResponse) {
		option (annotations.method).scope = SCOPE_USER;
	}

	// RegisterSSHKeyPair Register a public key in a keypair under a certain name
	rpc RegisterSSHKeyPair(RegisterSSHKeyPairRequest) returns (RegisterSSHKeyPairResponse) {
		option (annotations.method).scope = SCOPE_USER;
	}
}

// CreateSSHKeyPairRequest represents the parameters for create a new keypair and returns the private key
message CreateSSHKeyPairRequest {
	// Name of the keypair
	string name = 1 [
		(buf.validate.field).required       = true,
		(buf.validate.field).string.min_len = 1,
		(buf.validate.field).string.max_len = 255
	];

	// an optional account for the ssh key. Must be used with domainId.
	string account_name = 2;

	// an optional domainId for the ssh key. If the account parameter is used, domainId must also be used.
	int64 domain_id = 3;

	// an optional project for the ssh key
	int64 project_id = 4;

	//
	string response_type = 5;
}

// CreateSSHKeyPairResponse represents the response from create a new keypair and returns the private key
message CreateSSHKeyPairResponse {
	// The Result
	Result result = 1;
}

// DeleteSSHKeyPairRequest represents the parameters for deletes a keypair by name
message DeleteSSHKeyPairRequest {
	// Name of the keypair
	string name = 1 [
		(buf.validate.field).required       = true,
		(buf.validate.field).string.min_len = 1,
		(buf.validate.field).string.max_len = 255
	];

	// the account associated with the keypair. Must be used with the domainId parameter.
	string account_name = 2 [
		(buf.validate.field).cel = {
			id:         "account_name_with_domain_id",
			expression: "!has(account_name) || has(domain_id)",
			message:    "account_name must be used with domain_id parameter"
		}
	];

	// the domain ID associated with the keypair
	int64 domain_id = 3;

	// the project associated with keypair
	int64 project_id = 4;

	//
	string response_type = 5;
}

// DeleteSSHKeyPairResponse represents the response from deletes a keypair by name
message DeleteSSHKeyPairResponse {
	// The Result
	Result result = 1;
}

// ListSSHKeyPairsRequest represents the parameters for list registered keypairs
message ListSSHKeyPairsRequest {
	// the ID of the ssh keypair
	int64 id = 1;

	// A key pair name to look for
	string name = 2 [
		(buf.validate.field).string.min_len = 1,
		(buf.validate.field).string.max_len = 255
	];

	// A public key fingerprint to look for
	string fingerprint = 3;

	// list objects by project; if projectid=-1 lists All VMs
	int64 project_id = 4;

	// list resources by account. Must be used with the domainId parameter.
	string account_name = 5 [
		(buf.validate.field).cel = {
			id:         "account_name_with_domain_id",
			expression: "!has(account_name) || has(domain_id)",
			message:    "account_name must be used with domain_id parameter"
		}
	];

	// If set to false, list only resources belonging to the command's caller; if set to true - list resources that the caller is authorized to see. Default value is false. Resources dedicated to a project are listed only if using the projectid parameter.
	bool list_all = 6 [
		features.field_presence = EXPLICIT
	];

	// list only resources belonging to the domain specified
	int64 domain_id = 7;

	// defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.
	bool recursive = 8 [
		features.field_presence = EXPLICIT
	];

	// List by keyword
	string keyword = 9;

	//
	int32 page = 10;

	//
	int32 page_size = 11;

	//
	string response_type = 12;
}

// ListSSHKeyPairsResponse represents the response from list registered keypairs
message ListSSHKeyPairsResponse {
	option (buf.validate.message).disabled = false;
	// The list of SSHKeyPairs
	repeated SSHKeyPair items = 1;

	// The total count of SSHKeyPairs
	int32 total_count = 2;
}

// RegisterSSHKeyPairRequest represents the parameters for register a public key in a keypair under a certain name
message RegisterSSHKeyPairRequest {
	// Name of the keypair
	string name = 1 [
		(buf.validate.field).required       = true,
		(buf.validate.field).string.min_len = 1,
		(buf.validate.field).string.max_len = 255
	];

	// Public key material of the keypair
	string public_key = 2 [
		(buf.validate.field).required = true
	];

	// an optional account for the ssh key. Must be used with domainId.
	string account_name = 3;

	// an optional domainId for the ssh key. If the account parameter is used, domainId must also be used.
	int64 domain_id = 4;

	// an optional project for the ssh key
	int64 project_id = 5;

	//
	string response_type = 6;
}

// RegisterSSHKeyPairResponse represents the response from register a public key in a keypair under a certain name
message RegisterSSHKeyPairResponse {
	// The Result
	Result result = 1;
}

// SSHKeyPair represents a SSHKeyPair Item
message SSHKeyPair {
	// The ID of the SSHKeyPair
	string id = 1 [
		(buf.validate.field).string.uuid = true
	];
	// The name of the SSHKeyPair
	string name = 2;
	// The display name of the SSHKeyPair
	string display_name = 3;
	// The description of the SSHKeyPair
	string description = 4;
	// The date this entity was created
	string created = 5;
}

// Success represents a Success Operation Response
message Success {
	// true if operation is executed successfully
	bool success = 1;
	// any text associated with the success or failure
	string display_text = 2;
}

// Result represents a generic operation result
message Result {
	// Whether the operation was successful
	bool success = 1;

	// Any text associated with the success or failure
	string display_text = 2;

	// The ID of the resource affected by the operation
	string id = 3 [
		(buf.validate.field).string.uuid = true
	];

	// The job ID for an async operation
	string job_id = 4 [
		(buf.validate.field).string.uuid = true
	];

	// The status of the job
	string job_status = 5;
}
