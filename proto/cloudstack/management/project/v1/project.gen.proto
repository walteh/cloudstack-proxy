edition = "2023";

package cloudstack.management.project.v1;

import "cloudstack/annotations/annotations.proto";
import "cloudstack/validate/validate.proto";
import "google/protobuf/descriptor.proto";

// ProjectService provides operations for managing Projects
service ProjectService {
	option (annotations.service).scope = SCOPE_USER;

	// ActivateProject Activates a project
	rpc ActivateProject(ActivateProjectRequest) returns (ActivateProjectResponse) {
		option (annotations.method).scope = SCOPE_USER;
	}

	// CreateProject Creates a project
	rpc CreateProject(CreateProjectRequest) returns (CreateProjectResponse) {
		option (annotations.method).scope = SCOPE_USER;
	}

	// DeleteProject Deletes a project
	rpc DeleteProject(DeleteProjectRequest) returns (DeleteProjectResponse) {
		option (annotations.method).scope = SCOPE_USER;
	}

	// DeleteProjectInvitation Deletes project invitation
	rpc DeleteProjectInvitation(DeleteProjectInvitationRequest) returns (DeleteProjectInvitationResponse) {
		option (annotations.method).scope = SCOPE_USER;
	}

	// ListProjectInvitations Lists project invitations and provides detailed information for listed invitations
	rpc ListProjectInvitations(ListProjectInvitationsRequest) returns (ListProjectInvitationsResponse) {
		option (annotations.method).scope = SCOPE_USER;
	}

	// ListProjects Lists projects and provides detailed information for listed projects
	rpc ListProjects(ListProjectsRequest) returns (ListProjectsResponse) {
		option (annotations.method).scope = SCOPE_USER;
	}

	// SuspendProject Suspends a project
	rpc SuspendProject(SuspendProjectRequest) returns (SuspendProjectResponse) {
		option (annotations.method).scope = SCOPE_USER;
	}

	// UpdateProject Updates a project
	rpc UpdateProject(UpdateProjectRequest) returns (UpdateProjectResponse) {
		option (annotations.method).scope = SCOPE_USER;
	}

	// UpdateProjectInvitation Accepts or declines project invitation
	rpc UpdateProjectInvitation(UpdateProjectInvitationRequest) returns (UpdateProjectInvitationResponse) {
		option (annotations.method).scope = SCOPE_USER;
	}
}

// ActivateProjectRequest represents the parameters for activates a project
message ActivateProjectRequest {
	// id of the project to be modified
	int64 id = 1 [
		(validate.field).required = true
	];

	//
	int64 start_event_id = 2;

	//
	string injected_job_id = 3 [
		(validate.field).string.uuid = true
	];

	//
	string response_type = 4;
}

// ActivateProjectResponse represents the response from activates a project
message ActivateProjectResponse {
	// The Result
	Result result = 1;
}

// CreateProjectRequest represents the parameters for creates a project
message CreateProjectRequest {
	// account who will be Admin for the project
	string account_name = 1;

	// user ID of the account to be assigned as owner of the project i.e., Project Admin
	int64 user_id = 2;

	// domain ID of the account owning a project
	int64 domain_id = 3;

	// ID of the account owning a project
	int64 account_id = 4;

	// name of the project
	string name = 5 [
		(validate.field).required       = true,
		(validate.field).string.min_len = 1,
		(validate.field).string.max_len = 255
	];

	// The display text of the project, defaults to the 'nameÂ´.
	string display_text = 6;

	//
	int64 start_event_id = 7;

	//
	string injected_job_id = 8 [
		(validate.field).string.uuid = true
	];

	//
	string response_type = 9;
}

// CreateProjectResponse represents the response from creates a project
message CreateProjectResponse {
	// The Result
	Result result = 1;
}

// DeleteProjectRequest represents the parameters for deletes a project
message DeleteProjectRequest {
	// id of the project to be deleted
	int64 id = 1 [
		(validate.field).required = true
	];

	// true if all project resources have to be cleaned up, false otherwise
	bool cleanup = 2 [
		features.field_presence = EXPLICIT
	];

	//
	int64 start_event_id = 3;

	//
	string injected_job_id = 4 [
		(validate.field).string.uuid = true
	];

	//
	string response_type = 5;
}

// DeleteProjectResponse represents the response from deletes a project
message DeleteProjectResponse {
	// The Result
	Result result = 1;
}

// DeleteProjectInvitationRequest represents the parameters for deletes project invitation
message DeleteProjectInvitationRequest {
	// id of the invitation
	int64 id = 1 [
		(validate.field).required = true
	];

	//
	int64 start_event_id = 2;

	//
	string injected_job_id = 3 [
		(validate.field).string.uuid = true
	];

	//
	string response_type = 4;
}

// DeleteProjectInvitationResponse represents the response from deletes project invitation
message DeleteProjectInvitationResponse {
	// The Result
	Result result = 1;
}

// ListProjectInvitationsRequest represents the parameters for lists project invitations and provides detailed information for listed invitations
message ListProjectInvitationsRequest {
	// list by project id
	int64 project_id = 1;

	// if true, list only active invitations - having Pending state and ones that are not timed out yet
	bool active_only = 2 [
		features.field_presence = EXPLICIT
	];

	// list invitations by state
	string state = 3;

	// list invitations by id
	int64 id = 4;

	// list invitation by user ID
	int64 user_id = 5;

	// list resources by account. Must be used with the domainId parameter.
	string account_name = 6 [
		(validate.field).cel = {
			id:         "account_name_with_domain_id",
			expression: "!has(account_name) || has(domain_id)",
			message:    "account_name must be used with domain_id parameter"
		}
	];

	// If set to false, list only resources belonging to the command's caller; if set to true - list resources that the caller is authorized to see. Default value is false. Resources dedicated to a project are listed only if using the projectid parameter.
	bool list_all = 7 [
		features.field_presence = EXPLICIT
	];

	// list only resources belonging to the domain specified
	int64 domain_id = 8;

	// defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.
	bool recursive = 9 [
		features.field_presence = EXPLICIT
	];

	// List by keyword
	string keyword = 10;

	//
	int32 page = 11;

	//
	int32 page_size = 12;

	//
	string response_type = 13;
}

// ListProjectInvitationsResponse represents the response from lists project invitations and provides detailed information for listed invitations
message ListProjectInvitationsResponse {
	option (validate.message).disabled = false;
	// The list of ProjectInvitations
	repeated ProjectInvitation items = 1;

	// The total count of ProjectInvitations
	int32 total_count = 2;
}

// ListProjectsRequest represents the parameters for lists projects and provides detailed information for listed projects
message ListProjectsRequest {
	// list projects by project ID
	int64 id = 1;

	// list projects by name
	string name = 2 [
		(validate.field).string.min_len = 1,
		(validate.field).string.max_len = 255
	];

	// list projects by display text
	string display_text = 3;

	// list projects by state
	string state = 4;

	// List projects by tags (key/value pairs)
	map<string, string> tags = 5;

	// List projects by username
	string username = 6 [
		(validate.field).string.min_len = 1,
		(validate.field).string.max_len = 255
	];

	// comma separated list of project details requested, value can be a list of [ all, resource, min]
	repeated string view_details = 7;

	// flag to display the resource icon for projects
	bool show_icon = 8 [
		features.field_presence = EXPLICIT
	];

	// list resources by account. Must be used with the domainId parameter.
	string account_name = 9 [
		(validate.field).cel = {
			id:         "account_name_with_domain_id",
			expression: "!has(account_name) || has(domain_id)",
			message:    "account_name must be used with domain_id parameter"
		}
	];

	// If set to false, list only resources belonging to the command's caller; if set to true - list resources that the caller is authorized to see. Default value is false. Resources dedicated to a project are listed only if using the projectid parameter.
	bool list_all = 10 [
		features.field_presence = EXPLICIT
	];

	// list only resources belonging to the domain specified
	int64 domain_id = 11;

	// defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.
	bool recursive = 12 [
		features.field_presence = EXPLICIT
	];

	// List by keyword
	string keyword = 13;

	//
	int32 page = 14;

	//
	int32 page_size = 15;

	//
	string response_type = 16;
}

// ListProjectsResponse represents the response from lists projects and provides detailed information for listed projects
message ListProjectsResponse {
	option (validate.message).disabled = false;
	// The list of Projects
	repeated Project items = 1;

	// The total count of Projects
	int32 total_count = 2;
}

// SuspendProjectRequest represents the parameters for suspends a project
message SuspendProjectRequest {
	// id of the project to be suspended
	int64 id = 1 [
		(validate.field).required = true
	];

	//
	int64 start_event_id = 2;

	//
	string injected_job_id = 3 [
		(validate.field).string.uuid = true
	];

	//
	string response_type = 4;
}

// SuspendProjectResponse represents the response from suspends a project
message SuspendProjectResponse {
	// The Result
	Result result = 1;
}

// UpdateProjectRequest represents the parameters for updates a project
message UpdateProjectRequest {
	// id of the project to be modified
	int64 id = 1 [
		(validate.field).required = true
	];

	// new Admin account for the project
	string account_name = 2;

	// display text of the project
	string display_text = 3;

	// ID of the user to be promoted/demoted
	int64 user_id = 4;

	// Account level role to be assigned to the user/account : Admin/Regular
	string role_type = 5;

	// when true, it swaps ownership with the account/ user provided. Ideally to be used when a single project administrator is present. In case of multiple project admins, swapowner is to be set to false,to promote or demote the user/account based on the roleType (Regular or Admin) provided. Defaults to true
	bool swap_owner = 6 [
		features.field_presence = EXPLICIT
	];

	// name of the project
	string name = 7 [
		(validate.field).string.min_len = 1,
		(validate.field).string.max_len = 255
	];

	//
	int64 start_event_id = 8;

	//
	string injected_job_id = 9 [
		(validate.field).string.uuid = true
	];

	//
	string response_type = 10;
}

// UpdateProjectResponse represents the response from updates a project
message UpdateProjectResponse {
	// The Result
	Result result = 1;
}

// UpdateProjectInvitationRequest represents the parameters for accepts or declines project invitation
message UpdateProjectInvitationRequest {
	// id of the project to join
	int64 project_id = 1 [
		(validate.field).required = true
	];

	// account that is joining the project
	string account_name = 2;

	// User UUID, required for adding account from external provisioning system
	int64 user_id = 3;

	// list invitations for specified account; this parameter has to be specified with domainId
	string token = 4;

	// if true, accept the invitation, decline if false. True by default
	bool accept = 5 [
		features.field_presence = EXPLICIT
	];

	//
	int64 start_event_id = 6;

	//
	string injected_job_id = 7 [
		(validate.field).string.uuid = true
	];

	//
	string response_type = 8;
}

// UpdateProjectInvitationResponse represents the response from accepts or declines project invitation
message UpdateProjectInvitationResponse {
	// The Result
	Result result = 1;
}

// Project represents a Project Item
message Project {
	// The ID of the Project
	string id = 1 [
		(validate.field).string.uuid = true
	];
	// The name of the Project
	string name = 2;
	// The display name of the Project
	string display_name = 3;
	// The description of the Project
	string description = 4;
	// The date this entity was created
	string created = 5;
}

// ProjectInvitation represents a ProjectInvitation Item
message ProjectInvitation {
	// The ID of the ProjectInvitation
	string id = 1 [
		(validate.field).string.uuid = true
	];
	// The name of the ProjectInvitation
	string name = 2;
	// The display name of the ProjectInvitation
	string display_name = 3;
	// The description of the ProjectInvitation
	string description = 4;
	// The date this entity was created
	string created = 5;
}

// Success represents a Success Operation Response
message Success {
	// true if operation is executed successfully
	bool success = 1;
	// any text associated with the success or failure
	string display_text = 2;
}

// Result represents a generic operation result
message Result {
	// Whether the operation was successful
	bool success = 1;

	// Any text associated with the success or failure
	string display_text = 2;

	// The ID of the resource affected by the operation
	string id = 3 [
		(validate.field).string.uuid = true
	];

	// The job ID for an async operation
	string job_id = 4 [
		(validate.field).string.uuid = true
	];

	// The status of the job
	string job_status = 5;
}
