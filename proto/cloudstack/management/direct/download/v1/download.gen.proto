edition = "2023";

package cloudstack.management.direct.download.v1;

import "buf/validate/validate.proto";
import "cloudstack/annotations/annotations.proto";
import "google/protobuf/descriptor.proto";

// DownloadService provides operations for managing Direct.Downloads
service DownloadService {
	option (annotations.service).scope = SCOPE_USER;

	// ListTemplateDirectDownloadCertificates List the uploaded certificates for direct download templates
	rpc ListTemplateDirectDownloadCertificates(ListTemplateDirectDownloadCertificatesRequest) returns (ListTemplateDirectDownloadCertificatesResponse) {
		option (annotations.method).scope = SCOPE_USER;
	}

	// ProvisionTemplateDirectDownloadCertificate Provisions a host with a direct download certificate
	rpc ProvisionTemplateDirectDownloadCertificate(ProvisionTemplateDirectDownloadCertificateRequest) returns (ProvisionTemplateDirectDownloadCertificateResponse) {
		option (annotations.method).scope = SCOPE_USER;
	}

	// RevokeTemplateDirectDownloadCertificate Revoke a direct download certificate from hosts in a zone
	rpc RevokeTemplateDirectDownloadCertificate(RevokeTemplateDirectDownloadCertificateRequest) returns (RevokeTemplateDirectDownloadCertificateResponse) {
		option (annotations.method).scope = SCOPE_USER;
	}

	// UploadTemplateDirectDownloadCertificate Upload a certificate for HTTPS direct template download on KVM hosts
	rpc UploadTemplateDirectDownloadCertificate(UploadTemplateDirectDownloadCertificateRequest) returns (UploadTemplateDirectDownloadCertificateResponse) {
		option (annotations.method).scope = SCOPE_USER;
	}
}

// ListTemplateDirectDownloadCertificatesRequest represents the parameters for list the uploaded certificates for direct download templates
message ListTemplateDirectDownloadCertificatesRequest {
	// list direct download certificate by ID
	int64 id = 1;

	// the zone where certificates are uploaded
	int64 zone_id = 2;

	// if set to true: include the hosts where the certificate is uploaded to
	bool list_hosts = 3 [
		features.field_presence = EXPLICIT
	];

	// List by keyword
	string keyword = 4;

	//
	int32 page = 5;

	//
	int32 page_size = 6;

	//
	string response_type = 7;
}

// ListTemplateDirectDownloadCertificatesResponse represents the response from list the uploaded certificates for direct download templates
message ListTemplateDirectDownloadCertificatesResponse {
	option (buf.validate.message).disabled = false;
	// The list of DirectDownloadCertificates
	repeated DirectDownloadCertificate items = 1;

	// The total count of DirectDownloadCertificates
	int32 total_count = 2;
}

// ProvisionTemplateDirectDownloadCertificateRequest represents the parameters for provisions a host with a direct download certificate
message ProvisionTemplateDirectDownloadCertificateRequest {
	// the id of the direct download certificate to provision
	int64 id = 1 [
		(buf.validate.field).required = true
	];

	// the host to provision the certificate
	int64 host_id = 2 [
		(buf.validate.field).required = true
	];

	//
	string response_type = 3;
}

// ProvisionTemplateDirectDownloadCertificateResponse represents the response from provisions a host with a direct download certificate
message ProvisionTemplateDirectDownloadCertificateResponse {
	// The Result
	Result result = 1;
}

// RevokeTemplateDirectDownloadCertificateRequest represents the parameters for revoke a direct download certificate from hosts in a zone
message RevokeTemplateDirectDownloadCertificateRequest {
	// id of the certificate
	int64 certificate_id = 1;

	// (optional) alias of the SSL certificate
	string certificate_alias = 2 [
		(buf.validate.field).string.min_len = 1,
		(buf.validate.field).string.max_len = 255
	];

	// (optional) hypervisor type
	string hypervisor = 3;

	// (optional) zone to revoke certificate
	int64 zone_id = 4 [
		(buf.validate.field).required = true
	];

	// (optional) the host ID to revoke certificate
	int64 host_id = 5;

	//
	string response_type = 6;
}

// RevokeTemplateDirectDownloadCertificateResponse represents the response from revoke a direct download certificate from hosts in a zone
message RevokeTemplateDirectDownloadCertificateResponse {
	// The Result
	Result result = 1;
}

// UploadTemplateDirectDownloadCertificateRequest represents the parameters for upload a certificate for https direct template download on kvm hosts
message UploadTemplateDirectDownloadCertificateRequest {
	// SSL certificate
	string certificate = 1 [
		(buf.validate.field).required = true
	];

	// Name for the uploaded certificate
	string name = 2 [
		(buf.validate.field).required       = true,
		(buf.validate.field).string.min_len = 1,
		(buf.validate.field).string.max_len = 255
	];

	// Hypervisor type
	string hypervisor = 3 [
		(buf.validate.field).required = true
	];

	// Zone to upload certificate
	int64 zone_id = 4 [
		(buf.validate.field).required = true
	];

	// (optional) the host ID to upload certificate
	int64 host_id = 5;

	//
	string response_type = 6;
}

// UploadTemplateDirectDownloadCertificateResponse represents the response from upload a certificate for https direct template download on kvm hosts
message UploadTemplateDirectDownloadCertificateResponse {
	// The Result
	Result result = 1;
}

// DirectDownloadCertificate represents a DirectDownloadCertificate Item
message DirectDownloadCertificate {
	// The ID of the DirectDownloadCertificate
	string id = 1 [
		(buf.validate.field).string.uuid = true
	];
	// The name of the DirectDownloadCertificate
	string name = 2;
	// The display name of the DirectDownloadCertificate
	string display_name = 3;
	// The description of the DirectDownloadCertificate
	string description = 4;
	// The date this entity was created
	string created = 5;
}

// Success represents a Success Operation Response
message Success {
	// true if operation is executed successfully
	bool success = 1;
	// any text associated with the success or failure
	string display_text = 2;
}

// Result represents a generic operation result
message Result {
	// Whether the operation was successful
	bool success = 1;

	// Any text associated with the success or failure
	string display_text = 2;

	// The ID of the resource affected by the operation
	string id = 3 [
		(buf.validate.field).string.uuid = true
	];

	// The job ID for an async operation
	string job_id = 4 [
		(buf.validate.field).string.uuid = true
	];

	// The status of the job
	string job_status = 5;
}
