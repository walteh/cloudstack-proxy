edition = "2023";

package cloudstack.management.diagnostics.v1;

import "buf/validate/validate.proto";
import "cloudstack/annotations/annotations.proto";
import "google/protobuf/descriptor.proto";

// DiagnosticsService provides operations for managing Diagnosticss
service DiagnosticsService {
	option (annotations.service).scope = SCOPE_USER;

	// GetDiagnosticsData Get diagnostics and files from system VMs
	rpc GetDiagnosticsData(GetDiagnosticsDataRequest) returns (GetDiagnosticsDataResponse) {
		option (annotations.method).scope = SCOPE_USER;
	}

	// RunDiagnostics Execute network-utility command (ping/arping/tracert) on system VMs remotely
	rpc RunDiagnostics(RunDiagnosticsRequest) returns (RunDiagnosticsResponse) {
		option (annotations.method).scope = SCOPE_USER;
	}
}

// GetDiagnosticsDataRequest represents the parameters for get diagnostics and files from system vms
message GetDiagnosticsDataRequest {
	// The ID of the system VM instance to retrieve diagnostics data files from
	int64 id = 1 [
		(buf.validate.field).required = true
	];

	// A comma separated list of diagnostics data files to be retrieved. Defaults are taken from global settings if none has been provided.
	repeated string files_list = 2;

	//
	int64 start_event_id = 3;

	//
	string injected_job_id = 4 [
		(buf.validate.field).string.uuid = true
	];

	//
	string response_type = 5;
}

// GetDiagnosticsDataResponse represents the response from get diagnostics and files from system vms
message GetDiagnosticsDataResponse {
	// The Result
	Result result = 1;
}

// RunDiagnosticsRequest represents the parameters for execute network-utility command (ping/arping/tracert) on system vms remotely
message RunDiagnosticsRequest {
	// The ID of the system VM instance to diagnose
	int64 id = 1 [
		(buf.validate.field).required = true
	];

	// The IP/Domain address to test connection to
	string address = 2 [
		(buf.validate.field).required    = true,
		(buf.validate.field).string.ipv4 = true
	];

	// The system VM diagnostics type  valid options are: ping, traceroute, arping
	string type = 3 [
		(buf.validate.field).required = true
	];

	// Additional command line options that apply for each command
	string optional_arguments_ = 4;

	//
	int64 start_event_id = 5;

	//
	string injected_job_id = 6 [
		(buf.validate.field).string.uuid = true
	];

	//
	string response_type = 7;
}

// RunDiagnosticsResponse represents the response from execute network-utility command (ping/arping/tracert) on system vms remotely
message RunDiagnosticsResponse {
	// The Result
	Result result = 1;
}

// Success represents a Success Operation Response
message Success {
	// true if operation is executed successfully
	bool success = 1;
	// any text associated with the success or failure
	string display_text = 2;
}

// Result represents a generic operation result
message Result {
	// Whether the operation was successful
	bool success = 1;

	// Any text associated with the success or failure
	string display_text = 2;

	// The ID of the resource affected by the operation
	string id = 3 [
		(buf.validate.field).string.uuid = true
	];

	// The job ID for an async operation
	string job_id = 4 [
		(buf.validate.field).string.uuid = true
	];

	// The status of the job
	string job_status = 5;
}
