edition = "2023";

package cloudstack.management.region.ha.gslb.v1;

import "cloudstack/annotations/annotations.proto";
import "cloudstack/validate/validate.proto";
import "google/protobuf/descriptor.proto";

// GslbService provides operations for managing Region.Ha.Gslbs
service GslbService {
	option (annotations.service).scope = SCOPE_USER;

	// AssignToGlobalLoadBalancerRule Assign load balancer rule or list of load balancer rules to a global load balancer rules.
	rpc AssignToGlobalLoadBalancerRule(AssignToGlobalLoadBalancerRuleRequest) returns (AssignToGlobalLoadBalancerRuleResponse) {
		option (annotations.method).scope = SCOPE_USER;
	}

	// CreateGlobalLoadBalancerRule Creates a global load balancer rule
	rpc CreateGlobalLoadBalancerRule(CreateGlobalLoadBalancerRuleRequest) returns (CreateGlobalLoadBalancerRuleResponse) {
		option (annotations.method).scope = SCOPE_USER;
	}

	// DeleteGlobalLoadBalancerRule Deletes a global load balancer rule.
	rpc DeleteGlobalLoadBalancerRule(DeleteGlobalLoadBalancerRuleRequest) returns (DeleteGlobalLoadBalancerRuleResponse) {
		option (annotations.method).scope = SCOPE_USER;
	}

	// ListGlobalLoadBalancerRule Lists load balancer rules.
	rpc ListGlobalLoadBalancerRule(ListGlobalLoadBalancerRuleRequest) returns (ListGlobalLoadBalancerRuleResponse) {
		option (annotations.method).scope = SCOPE_USER;
	}

	// RemoveFromGlobalLoadBalancerRule Removes a load balancer rule association with global load balancer rule
	rpc RemoveFromGlobalLoadBalancerRule(RemoveFromGlobalLoadBalancerRuleRequest) returns (RemoveFromGlobalLoadBalancerRuleResponse) {
		option (annotations.method).scope = SCOPE_USER;
	}

	// UpdateGlobalLoadBalancerRule update global load balancer rules.
	rpc UpdateGlobalLoadBalancerRule(UpdateGlobalLoadBalancerRuleRequest) returns (UpdateGlobalLoadBalancerRuleResponse) {
		option (annotations.method).scope = SCOPE_USER;
	}
}

// AssignToGlobalLoadBalancerRuleRequest represents the parameters for assign load balancer rule or list of load balancer rules to a global load balancer rules.
message AssignToGlobalLoadBalancerRuleRequest {
	// the ID of the global load balancer rule
	int64 id = 1 [
		(validate.field).required = true
	];

	// the list load balancer rules that will be assigned to global load balancer rule
	repeated string load_balancer_rules_ids = 2 [
		(validate.field).required = true
	];

	// Map of LB rule id's and corresponding weights (between 1-100) in the GSLB rule, if not specified weight of a LB rule is defaulted to 1. Specified as 'gslblbruleweightsmap[0].loadbalancerid=UUID&gslblbruleweightsmap[0].weight=10'
	map<string, string> gslb_lb_rule_wieght_map_ = 3;

	//
	int64 start_event_id = 4;

	//
	string injected_job_id = 5 [
		(validate.field).string.uuid = true
	];

	//
	string response_type = 6;
}

// AssignToGlobalLoadBalancerRuleResponse represents the response from assign load balancer rule or list of load balancer rules to a global load balancer rules.
message AssignToGlobalLoadBalancerRuleResponse {
	// The Result
	Result result = 1;
}

// CreateGlobalLoadBalancerRuleRequest represents the parameters for creates a global load balancer rule
message CreateGlobalLoadBalancerRuleRequest {
	// name of the load balancer rule
	string global_load_balancer_rule_name = 1 [
		(validate.field).required       = true,
		(validate.field).string.min_len = 1,
		(validate.field).string.max_len = 255
	];

	// the description of the load balancer rule
	string description = 2 [
		(validate.field).string.min_len = 1,
		(validate.field).string.max_len = 1024
	];

	// region where the global load balancer is going to be created.
	int32 region_id = 3 [
		(validate.field).required = true
	];

	// the account associated with the global load balancer. Must be used with the domainId parameter.
	string account_name = 4 [
		(validate.field).cel = {
			id:         "account_name_with_domain_id",
			expression: "!has(account_name) || has(domain_id)",
			message:    "account_name must be used with domain_id parameter"
		}
	];

	// the domain ID associated with the load balancer
	int64 domain_id = 5;

	// load balancer algorithm (roundrobin, leastconn, proximity) that method is used to distribute traffic across the zones participating in global server load balancing, if not specified defaults to 'round robin'
	string algorithm = 6;

	// session sticky method (sourceip) if not specified defaults to sourceip
	string sticky_method = 7 [
		(validate.field).string.min_len = 1,
		(validate.field).string.max_len = 255
	];

	// domain name for the GSLB service.
	string service_domain_name = 8 [
		(validate.field).required       = true,
		(validate.field).string.min_len = 1,
		(validate.field).string.max_len = 255
	];

	// GSLB service type (tcp, udp, http)
	string service_type = 9 [
		(validate.field).required = true
	];

	//
	int64 start_event_id = 10;

	//
	string injected_job_id = 11 [
		(validate.field).string.uuid = true
	];

	//
	string response_type = 12;
}

// CreateGlobalLoadBalancerRuleResponse represents the response from creates a global load balancer rule
message CreateGlobalLoadBalancerRuleResponse {
	// The Result
	Result result = 1;
}

// DeleteGlobalLoadBalancerRuleRequest represents the parameters for deletes a global load balancer rule.
message DeleteGlobalLoadBalancerRuleRequest {
	// the ID of the global load balancer rule
	int64 id = 1 [
		(validate.field).required = true
	];

	//
	int64 start_event_id = 2;

	//
	string injected_job_id = 3 [
		(validate.field).string.uuid = true
	];

	//
	string response_type = 4;
}

// DeleteGlobalLoadBalancerRuleResponse represents the response from deletes a global load balancer rule.
message DeleteGlobalLoadBalancerRuleResponse {
	// The Result
	Result result = 1;
}

// ListGlobalLoadBalancerRuleRequest represents the parameters for lists load balancer rules.
message ListGlobalLoadBalancerRuleRequest {
	// the ID of the global load balancer rule
	int64 id = 1;

	// region ID
	int32 region_id = 2;

	// List resources by tags (key/value pairs)
	map<string, string> tags = 3;

	// list objects by project; if projectid=-1 lists All VMs
	int64 project_id = 4;

	// list resources by account. Must be used with the domainId parameter.
	string account_name = 5 [
		(validate.field).cel = {
			id:         "account_name_with_domain_id",
			expression: "!has(account_name) || has(domain_id)",
			message:    "account_name must be used with domain_id parameter"
		}
	];

	// If set to false, list only resources belonging to the command's caller; if set to true - list resources that the caller is authorized to see. Default value is false. Resources dedicated to a project are listed only if using the projectid parameter.
	bool list_all = 6 [
		features.field_presence = EXPLICIT
	];

	// list only resources belonging to the domain specified
	int64 domain_id = 7;

	// defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.
	bool recursive = 8 [
		features.field_presence = EXPLICIT
	];

	// List by keyword
	string keyword = 9;

	//
	int32 page = 10;

	//
	int32 page_size = 11;

	//
	string response_type = 12;
}

// ListGlobalLoadBalancerRuleResponse represents the response from lists load balancer rules.
message ListGlobalLoadBalancerRuleResponse {
	option (validate.message).disabled = false;
	// The list of GlobalLoadBalancers
	repeated GlobalLoadBalancer items = 1;

	// The total count of GlobalLoadBalancers
	int32 total_count = 2;
}

// RemoveFromGlobalLoadBalancerRuleRequest represents the parameters for removes a load balancer rule association with global load balancer rule
message RemoveFromGlobalLoadBalancerRuleRequest {
	// The ID of the load balancer rule
	int64 id = 1 [
		(validate.field).required = true
	];

	// the list load balancer rules that will be assigned to global load balancer rule
	repeated string load_balancer_rules_ids = 2 [
		(validate.field).required = true
	];

	//
	int64 start_event_id = 3;

	//
	string injected_job_id = 4 [
		(validate.field).string.uuid = true
	];

	//
	string response_type = 5;
}

// RemoveFromGlobalLoadBalancerRuleResponse represents the response from removes a load balancer rule association with global load balancer rule
message RemoveFromGlobalLoadBalancerRuleResponse {
	// The Result
	Result result = 1;
}

// UpdateGlobalLoadBalancerRuleRequest represents the parameters for update global load balancer rules.
message UpdateGlobalLoadBalancerRuleRequest {
	// the ID of the global load balancer rule
	int64 id = 1 [
		(validate.field).required = true
	];

	// the description of the load balancer rule
	string description = 2 [
		(validate.field).string.min_len = 1,
		(validate.field).string.max_len = 1024
	];

	// load balancer algorithm (roundrobin, leastconn, proximity) that is used to distributed traffic across the zones participating in global server load balancing, if not specified defaults to 'round robin'
	string algorithm = 3;

	// session sticky method (sourceip) if not specified defaults to sourceip
	string sticky_method = 4 [
		(validate.field).string.min_len = 1,
		(validate.field).string.max_len = 255
	];

	//
	int64 start_event_id = 5;

	//
	string injected_job_id = 6 [
		(validate.field).string.uuid = true
	];

	//
	string response_type = 7;
}

// UpdateGlobalLoadBalancerRuleResponse represents the response from update global load balancer rules.
message UpdateGlobalLoadBalancerRuleResponse {
	// The Result
	Result result = 1;
}

// GlobalLoadBalancer represents a GlobalLoadBalancer Item
message GlobalLoadBalancer {
	// The ID of the GlobalLoadBalancer
	string id = 1 [
		(validate.field).string.uuid = true
	];
	// The name of the GlobalLoadBalancer
	string name = 2;
	// The display name of the GlobalLoadBalancer
	string display_name = 3;
	// The description of the GlobalLoadBalancer
	string description = 4;
	// The date this entity was created
	string created = 5;
}

// Success represents a Success Operation Response
message Success {
	// true if operation is executed successfully
	bool success = 1;
	// any text associated with the success or failure
	string display_text = 2;
}

// Result represents a generic operation result
message Result {
	// Whether the operation was successful
	bool success = 1;

	// Any text associated with the success or failure
	string display_text = 2;

	// The ID of the resource affected by the operation
	string id = 3 [
		(validate.field).string.uuid = true
	];

	// The job ID for an async operation
	string job_id = 4 [
		(validate.field).string.uuid = true
	];

	// The status of the job
	string job_status = 5;
}
