edition = "2023";

package cloudstack.management.loadbalancer.v1;

import "cloudstack/annotations/annotations.proto";
import "cloudstack/validate/validate.proto";
import "google/protobuf/descriptor.proto";

// LoadbalancerService provides operations for managing Loadbalancers
service LoadbalancerService {
	option (annotations.service).scope = Scope_USER;

	// ListSslCerts Lists SSL certificates
	rpc ListSslCerts(ListSslCertsRequest) returns (ListSslCertsResponse) {}

	// DeleteSslCert Delete a certificate to CloudStack
	rpc DeleteSslCert(DeleteSslCertRequest) returns (DeleteSslCertResponse) {}

	// ListLoadBalancerRuleInstancesCmdByAdmin List all virtual machine instances that are assigned to a load balancer rule.
	rpc ListLoadBalancerRuleInstancesCmdByAdmin(ListLoadBalancerRuleInstancesCmdByAdminRequest) returns (ListLoadBalancerRuleInstancesCmdByAdminResponse) {}

	// ListLBStickinessPolicies Lists load balancer stickiness policies.
	rpc ListLBStickinessPolicies(ListLBStickinessPoliciesRequest) returns (ListLBStickinessPoliciesResponse) {}

	// CreateLoadBalancerRule Creates a load balancer rule
	rpc CreateLoadBalancerRule(CreateLoadBalancerRuleRequest) returns (CreateLoadBalancerRuleResponse) {}

	// CreateLBStickinessPolicy Creates a load balancer stickiness policy
	rpc CreateLBStickinessPolicy(CreateLBStickinessPolicyRequest) returns (CreateLBStickinessPolicyResponse) {}

	// DeleteLBStickinessPolicy Deletes a load balancer stickiness policy.
	rpc DeleteLBStickinessPolicy(DeleteLBStickinessPolicyRequest) returns (DeleteLBStickinessPolicyResponse) {}

	// ListLoadBalancerRuleInstances List all virtual machine instances that are assigned to a load balancer rule.
	rpc ListLoadBalancerRuleInstances(ListLoadBalancerRuleInstancesRequest) returns (ListLoadBalancerRuleInstancesResponse) {
		option (annotations.method).scope = Scope_ADMIN;
	}

	// UpdateApplicationLoadBalancer Updates an internal load balancer
	rpc UpdateApplicationLoadBalancer(UpdateApplicationLoadBalancerRequest) returns (UpdateApplicationLoadBalancerResponse) {}

	// RemoveFromLoadBalancerRule Removes a virtual machine or a list of virtual machines from a load balancer rule.
	rpc RemoveFromLoadBalancerRule(RemoveFromLoadBalancerRuleRequest) returns (RemoveFromLoadBalancerRuleResponse) {}

	// ListLoadBalancerRules Lists load balancer rules.
	rpc ListLoadBalancerRules(ListLoadBalancerRulesRequest) returns (ListLoadBalancerRulesResponse) {}

	// DeleteLoadBalancerRule Deletes a load balancer rule.
	rpc DeleteLoadBalancerRule(DeleteLoadBalancerRuleRequest) returns (DeleteLoadBalancerRuleResponse) {}

	// ListApplicationLoadBalancers Lists internal load balancers
	rpc ListApplicationLoadBalancers(ListApplicationLoadBalancersRequest) returns (ListApplicationLoadBalancersResponse) {}

	// RemoveCertFromLoadBalancer Removes a certificate from a load balancer rule
	rpc RemoveCertFromLoadBalancer(RemoveCertFromLoadBalancerRequest) returns (RemoveCertFromLoadBalancerResponse) {}

	// UploadSslCert Upload a certificate to CloudStack
	rpc UploadSslCert(UploadSslCertRequest) returns (UploadSslCertResponse) {}

	// AssignToLoadBalancerRule Assigns virtual machine or a list of virtual machines to a load balancer rule.
	rpc AssignToLoadBalancerRule(AssignToLoadBalancerRuleRequest) returns (AssignToLoadBalancerRuleResponse) {}

	// CreateApplicationLoadBalancer Creates an internal load balancer
	rpc CreateApplicationLoadBalancer(CreateApplicationLoadBalancerRequest) returns (CreateApplicationLoadBalancerResponse) {}

	// UpdateLBHealthCheckPolicy Updates load balancer health check policy
	rpc UpdateLBHealthCheckPolicy(UpdateLBHealthCheckPolicyRequest) returns (UpdateLBHealthCheckPolicyResponse) {}

	// AssignCertToLoadBalancer Assigns a certificate to a load balancer rule
	rpc AssignCertToLoadBalancer(AssignCertToLoadBalancerRequest) returns (AssignCertToLoadBalancerResponse) {}

	// ListLBHealthCheckPolicies Lists load balancer health check policies.
	rpc ListLBHealthCheckPolicies(ListLBHealthCheckPoliciesRequest) returns (ListLBHealthCheckPoliciesResponse) {}

	// DeleteApplicationLoadBalancer Deletes an internal load balancer
	rpc DeleteApplicationLoadBalancer(DeleteApplicationLoadBalancerRequest) returns (DeleteApplicationLoadBalancerResponse) {}

	// DeleteLBHealthCheckPolicy Deletes a load balancer health check policy.
	rpc DeleteLBHealthCheckPolicy(DeleteLBHealthCheckPolicyRequest) returns (DeleteLBHealthCheckPolicyResponse) {}

	// CreateLBHealthCheckPolicy Creates a load balancer health check policy
	rpc CreateLBHealthCheckPolicy(CreateLBHealthCheckPolicyRequest) returns (CreateLBHealthCheckPolicyResponse) {}

	// UpdateLoadBalancerRule Updates load balancer
	rpc UpdateLoadBalancerRule(UpdateLoadBalancerRuleRequest) returns (UpdateLoadBalancerRuleResponse) {}

	// UpdateLBStickinessPolicy Updates load balancer stickiness policy
	rpc UpdateLBStickinessPolicy(UpdateLBStickinessPolicyRequest) returns (UpdateLBStickinessPolicyResponse) {}
}

// ListSslCertsRequest represents the parameters for lists ssl certificates
message ListSslCertsRequest {
	// ID of SSL certificate
	int64 cert_id = 1;

	// Account ID
	int64 account_id = 2;

	// Load balancer rule ID
	int64 lb_id = 3;

	// Project that owns the SSL certificate
	int64 project_id = 4;

	//
	string response_type = 5;
}

// ListSslCertsResponse represents the response from lists ssl certificates
message ListSslCertsResponse {
	option (validate.message).disabled = false;
	// The list of SslCerts
	repeated SslCert items = 1;

	// The total count of SslCerts
	int32 total_count = 2;
}

// DeleteSslCertRequest represents the parameters for delete a certificate to cloudstack
message DeleteSslCertRequest {
	// Id of SSL certificate
	int64 id = 1 [
		(validate.field).required = true
	];

	//
	string response_type = 2;
}

// DeleteSslCertResponse represents the response from delete a certificate to cloudstack
message DeleteSslCertResponse {
	// The Result
	Result result = 1;
}

// ListLoadBalancerRuleInstancesCmdByAdminRequest represents the parameters for list all virtual machine instances that are assigned to a load balancer rule.
message ListLoadBalancerRuleInstancesCmdByAdminRequest {
	// true if listing all virtual machines currently applied to the load balancer rule; default is true
	bool applied = 1 [
		features.field_presence = EXPLICIT
	];

	// the ID of the load balancer rule
	int64 id = 2 [
		(validate.field).required = true
	];

	// true if load balancer rule VM IP information to be included; default is false
	bool is_list_lb_vmip = 3 [
		features.field_presence = EXPLICIT
	];

	// List by keyword
	string keyword = 4;

	//
	int32 page = 5;

	//
	int32 page_size = 6;

	//
	string response_type = 7;
}

// ListLoadBalancerRuleInstancesCmdByAdminResponse represents the response from list all virtual machine instances that are assigned to a load balancer rule.
message ListLoadBalancerRuleInstancesCmdByAdminResponse {
	option (validate.message).disabled = false;
	// The list of LoadBalancerRuleVmMaps
	repeated LoadBalancerRuleVmMap items = 1;

	// The total count of LoadBalancerRuleVmMaps
	int32 total_count = 2;
}

// ListLBStickinessPoliciesRequest represents the parameters for lists load balancer stickiness policies.
message ListLBStickinessPoliciesRequest {
	// the ID of the load balancer rule
	int64 lb_rule_id = 1;

	// the ID of the load balancer stickiness policy
	int64 id = 2;

	// list resources by display flag; only ROOT admin is eligible to pass this parameter
	bool display = 3 [
		features.field_presence = EXPLICIT
	];

	// List by keyword
	string keyword = 4;

	//
	int32 page = 5;

	//
	int32 page_size = 6;

	//
	string response_type = 7;
}

// ListLBStickinessPoliciesResponse represents the response from lists load balancer stickiness policies.
message ListLBStickinessPoliciesResponse {
	option (validate.message).disabled = false;
	// The list of LBStickinesss
	repeated LBStickiness items = 1;

	// The total count of LBStickinesss
	int32 total_count = 2;
}

// CreateLoadBalancerRuleRequest represents the parameters for creates a load balancer rule
message CreateLoadBalancerRuleRequest {
	// load balancer algorithm (source, roundrobin, leastconn)
	string algorithm = 1 [
		(validate.field).required = true
	];

	// the description of the load balancer rule
	string description = 2 [
		(validate.field).string.min_len = 1,
		(validate.field).string.max_len = 1024
	];

	// name of the load balancer rule
	string load_balancer_rule_name = 3 [
		(validate.field).required       = true,
		(validate.field).string.min_len = 1,
		(validate.field).string.max_len = 255
	];

	// the private port of the private IP address/virtual machine where the network traffic will be load balanced to
	int32 private_port = 4 [
		(validate.field).required  = true,
		(validate.field).int32.gte = 1,
		(validate.field).int32.lte = 65535
	];

	// public IP address ID from where the network traffic will be load balanced from
	int64 public_ip_id = 5;

	// zone where the load balancer is going to be created. This parameter is required when LB service provider is ElasticLoadBalancerVm
	int64 zone_id = 6;

	// the public port from where the network traffic will be load balanced from
	int32 public_port = 7 [
		(validate.field).required  = true,
		(validate.field).int32.gte = 1,
		(validate.field).int32.lte = 65535
	];

	// if true, firewall rule for source/end public port is automatically created; if false - firewall rule has to be created explicitly. If not specified 1) defaulted to false when LB rule is being created for VPC guest network 2) in all other cases defaulted to true
	bool open_firewall = 8 [
		features.field_presence = EXPLICIT
	];

	// the account associated with the load balancer. Must be used with the domainId parameter.
	string account_name = 9 [
		(validate.field).cel = {
			id:         "account_name_with_domain_id",
			expression: "!has(account_name) || has(domain_id)",
			message:    "account_name must be used with domain_id parameter"
		}
	];

	// the domain ID associated with the load balancer
	int64 domain_id = 10;

	// the source CIDR list to allow traffic from; all other CIDRs will be blocked. Multiple entries must be separated by a single comma character (,). By default, all CIDRs are allowed.
	repeated string cidrlist = 11;

	// The guest network this rule will be created for. Required when public Ip address is not associated with any Guest network yet (VPC case)
	int64 network_id = 12;

	// The protocol for the LB such as tcp, udp or tcp-proxy.
	string lb_protocol = 13;

	// an optional field, whether to the display the rule to the end user or not
	bool display = 14 [
		features.field_presence = EXPLICIT
	];

	//
	int64 start_event_id = 15;

	//
	string injected_job_id = 16 [
		(validate.field).string.uuid = true
	];

	//
	string response_type = 17;
}

// CreateLoadBalancerRuleResponse represents the response from creates a load balancer rule
message CreateLoadBalancerRuleResponse {
	// The Result
	Result result = 1;
}

// CreateLBStickinessPolicyRequest represents the parameters for creates a load balancer stickiness policy
message CreateLBStickinessPolicyRequest {
	// the ID of the load balancer rule
	int64 lb_rule_id = 1 [
		(validate.field).required = true
	];

	// the description of the load balancer stickiness policy
	string description = 2 [
		(validate.field).string.min_len = 1,
		(validate.field).string.max_len = 1024
	];

	// name of the load balancer stickiness policy
	string lb_stickiness_policy_name = 3 [
		(validate.field).required       = true,
		(validate.field).string.min_len = 1,
		(validate.field).string.max_len = 255
	];

	// name of the load balancer stickiness policy method, possible values are LbCookie, AppCookie, SourceBased
	string stickiness_method_name = 4 [
		(validate.field).required       = true,
		(validate.field).string.min_len = 1,
		(validate.field).string.max_len = 255
	];

	// param list. Example: param[0].name=cookiename&param[0].value=LBCookie
	map<string, string> param_list = 5;

	// an optional field, whether to the display the rule to the end user or not
	bool display = 6 [
		features.field_presence = EXPLICIT
	];

	//
	int64 start_event_id = 7;

	//
	string injected_job_id = 8 [
		(validate.field).string.uuid = true
	];

	//
	string response_type = 9;
}

// CreateLBStickinessPolicyResponse represents the response from creates a load balancer stickiness policy
message CreateLBStickinessPolicyResponse {
	// The Result
	Result result = 1;
}

// DeleteLBStickinessPolicyRequest represents the parameters for deletes a load balancer stickiness policy.
message DeleteLBStickinessPolicyRequest {
	// the ID of the LB stickiness policy
	int64 id = 1 [
		(validate.field).required = true
	];

	//
	int64 start_event_id = 2;

	//
	string injected_job_id = 3 [
		(validate.field).string.uuid = true
	];

	//
	string response_type = 4;
}

// DeleteLBStickinessPolicyResponse represents the response from deletes a load balancer stickiness policy.
message DeleteLBStickinessPolicyResponse {
	// The Result
	Result result = 1;
}

// ListLoadBalancerRuleInstancesRequest represents the parameters for list all virtual machine instances that are assigned to a load balancer rule.
message ListLoadBalancerRuleInstancesRequest {
	// Whether to run this operation as an administrator
	bool run_as_admin = 1;
	// true if listing all virtual machines currently applied to the load balancer rule; default is true
	bool applied = 2 [
		features.field_presence = EXPLICIT
	];
	// the ID of the load balancer rule
	int64 id = 3 [
		(validate.field).required = true
	];
	// true if load balancer rule VM IP information to be included; default is false
	bool is_list_lb_vmip = 4 [
		features.field_presence = EXPLICIT
	];
	// List by keyword
	string keyword = 5;
	//
	int32 page = 6;
	//
	int32 page_size = 7;
	//
	string response_type = 8;
}

// ListLoadBalancerRuleInstancesResponse represents the response from list all virtual machine instances that are assigned to a load balancer rule.
message ListLoadBalancerRuleInstancesResponse {
	option (validate.message).disabled = false;
	// The list of LoadBalancerRuleVmMaps
	repeated LoadBalancerRuleVmMap items = 1;

	// The total count of LoadBalancerRuleVmMaps
	int32 total_count = 2;
}

// UpdateApplicationLoadBalancerRequest represents the parameters for updates an internal load balancer
message UpdateApplicationLoadBalancerRequest {
	// the ID of the load balancer
	int64 id = 1 [
		(validate.field).required = true
	];

	// an optional field, whether to the display the rule to the end user or not
	bool display = 2 [
		features.field_presence = EXPLICIT
	];

	// an optional field, in case you want to set a custom id to the resource. Allowed to Root Admins only
	string custom_id = 3 [
		(validate.field).string.uuid = true
	];

	//
	int64 start_event_id = 4;

	//
	string injected_job_id = 5 [
		(validate.field).string.uuid = true
	];

	//
	string response_type = 6;
}

// UpdateApplicationLoadBalancerResponse represents the response from updates an internal load balancer
message UpdateApplicationLoadBalancerResponse {
	// The Result
	Result result = 1;
}

// RemoveFromLoadBalancerRuleRequest represents the parameters for removes a virtual machine or a list of virtual machines from a load balancer rule.
message RemoveFromLoadBalancerRuleRequest {
	// The ID of the load balancer rule
	int64 id = 1 [
		(validate.field).required = true
	];

	// the list of IDs of the virtual machines that are being removed from the load balancer rule (i.e. virtualMachineIds=1,2,3)
	repeated string virtual_machine_ids = 2;

	// VM ID and IP map, vmidipmap[0].vmid=1 vmidipmap[0].ip=10.1.1.75
	map<string, string> vm_id_ip_map = 3;

	//
	int64 start_event_id = 4;

	//
	string injected_job_id = 5 [
		(validate.field).string.uuid = true
	];

	//
	string response_type = 6;
}

// RemoveFromLoadBalancerRuleResponse represents the response from removes a virtual machine or a list of virtual machines from a load balancer rule.
message RemoveFromLoadBalancerRuleResponse {
	// The Result
	Result result = 1;
}

// ListLoadBalancerRulesRequest represents the parameters for lists load balancer rules.
message ListLoadBalancerRulesRequest {
	// the ID of the load balancer rule
	int64 id = 1;

	// the name of the load balancer rule
	string load_balancer_rule_name = 2 [
		(validate.field).string.min_len = 1,
		(validate.field).string.max_len = 255
	];

	// the public IP address ID of the load balancer rule
	int64 public_ip_id = 3;

	// the ID of the virtual machine of the load balancer rule
	int64 virtual_machine_id = 4;

	// the availability zone ID
	int64 zone_id = 5;

	// list by network ID the rule belongs to
	int64 network_id = 6;

	// list resources by display flag; only ROOT admin is eligible to pass this parameter
	bool display = 7 [
		features.field_presence = EXPLICIT
	];

	// List resources by tags (key/value pairs)
	map<string, string> tags = 8;

	// list objects by project; if projectid=-1 lists All VMs
	int64 project_id = 9;

	// list resources by account. Must be used with the domainId parameter.
	string account_name = 10 [
		(validate.field).cel = {
			id:         "account_name_with_domain_id",
			expression: "!has(account_name) || has(domain_id)",
			message:    "account_name must be used with domain_id parameter"
		}
	];

	// If set to false, list only resources belonging to the command's caller; if set to true - list resources that the caller is authorized to see. Default value is false. Resources dedicated to a project are listed only if using the projectid parameter.
	bool list_all = 11 [
		features.field_presence = EXPLICIT
	];

	// list only resources belonging to the domain specified
	int64 domain_id = 12;

	// defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.
	bool recursive = 13 [
		features.field_presence = EXPLICIT
	];

	// List by keyword
	string keyword = 14;

	//
	int32 page = 15;

	//
	int32 page_size = 16;

	//
	string response_type = 17;
}

// ListLoadBalancerRulesResponse represents the response from lists load balancer rules.
message ListLoadBalancerRulesResponse {
	option (validate.message).disabled = false;
	// The list of LoadBalancers
	repeated LoadBalancer items = 1;

	// The total count of LoadBalancers
	int32 total_count = 2;
}

// DeleteLoadBalancerRuleRequest represents the parameters for deletes a load balancer rule.
message DeleteLoadBalancerRuleRequest {
	// the ID of the load balancer rule
	int64 id = 1 [
		(validate.field).required = true
	];

	//
	int64 start_event_id = 2;

	//
	string injected_job_id = 3 [
		(validate.field).string.uuid = true
	];

	//
	string response_type = 4;
}

// DeleteLoadBalancerRuleResponse represents the response from deletes a load balancer rule.
message DeleteLoadBalancerRuleResponse {
	// The Result
	Result result = 1;
}

// ListApplicationLoadBalancersRequest represents the parameters for lists internal load balancers
message ListApplicationLoadBalancersRequest {
	// the ID of the load balancer
	int64 id = 1;

	// the name of the load balancer
	string load_balancer_name = 2 [
		(validate.field).string.min_len = 1,
		(validate.field).string.max_len = 255
	];

	// the source IP address of the load balancer
	string source_ip = 3 [
		(validate.field).string.ipv4 = true
	];

	// the network ID of the source IP address
	int64 source_ip_network_id = 4;

	// the scheme of the load balancer. Supported value is internal in the current release
	string scheme = 5;

	// the network ID of the load balancer
	int64 network_id = 6;

	// list resources by display flag; only ROOT admin is eligible to pass this parameter
	bool display = 7 [
		features.field_presence = EXPLICIT
	];

	// List resources by tags (key/value pairs)
	map<string, string> tags = 8;

	// list objects by project; if projectid=-1 lists All VMs
	int64 project_id = 9;

	// list resources by account. Must be used with the domainId parameter.
	string account_name = 10 [
		(validate.field).cel = {
			id:         "account_name_with_domain_id",
			expression: "!has(account_name) || has(domain_id)",
			message:    "account_name must be used with domain_id parameter"
		}
	];

	// If set to false, list only resources belonging to the command's caller; if set to true - list resources that the caller is authorized to see. Default value is false. Resources dedicated to a project are listed only if using the projectid parameter.
	bool list_all = 11 [
		features.field_presence = EXPLICIT
	];

	// list only resources belonging to the domain specified
	int64 domain_id = 12;

	// defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.
	bool recursive = 13 [
		features.field_presence = EXPLICIT
	];

	// List by keyword
	string keyword = 14;

	//
	int32 page = 15;

	//
	int32 page_size = 16;

	//
	string response_type = 17;
}

// ListApplicationLoadBalancersResponse represents the response from lists internal load balancers
message ListApplicationLoadBalancersResponse {
	option (validate.message).disabled = false;
	// The list of ApplicationLoadBalancers
	repeated ApplicationLoadBalancer items = 1;

	// The total count of ApplicationLoadBalancers
	int32 total_count = 2;
}

// RemoveCertFromLoadBalancerRequest represents the parameters for removes a certificate from a load balancer rule
message RemoveCertFromLoadBalancerRequest {
	// the ID of the load balancer rule
	int64 lb_rule_id = 1 [
		(validate.field).required = true
	];

	//
	int64 start_event_id = 2;

	//
	string injected_job_id = 3 [
		(validate.field).string.uuid = true
	];

	//
	string response_type = 4;
}

// RemoveCertFromLoadBalancerResponse represents the response from removes a certificate from a load balancer rule
message RemoveCertFromLoadBalancerResponse {
	// The Result
	Result result = 1;
}

// UploadSslCertRequest represents the parameters for upload a certificate to cloudstack
message UploadSslCertRequest {
	// SSL certificate
	string cert = 1 [
		(validate.field).required = true
	];

	// Private key
	string key = 2 [
		(validate.field).required = true
	];

	// Certificate chain of trust
	string chain = 3;

	// Password for the private key
	string password = 4;

	// account that will own the SSL certificate
	string account_name = 5;

	// an optional project for the SSL certificate
	int64 project_id = 6;

	// domain ID of the account owning the SSL certificate
	int64 domain_id = 7;

	// Name for the uploaded certificate
	string name = 8 [
		(validate.field).required       = true,
		(validate.field).string.min_len = 1,
		(validate.field).string.max_len = 255
	];

	// Enables revocation checking for certificates
	bool enabled_revocation_check = 9 [
		features.field_presence = EXPLICIT
	];

	//
	string response_type = 10;
}

// UploadSslCertResponse represents the response from upload a certificate to cloudstack
message UploadSslCertResponse {
	// The Result
	Result result = 1;
}

// AssignToLoadBalancerRuleRequest represents the parameters for assigns virtual machine or a list of virtual machines to a load balancer rule.
message AssignToLoadBalancerRuleRequest {
	// the ID of the load balancer rule
	int64 id = 1 [
		(validate.field).required = true
	];

	// the list of IDs of the virtual machine that are being assigned to the load balancer rule(i.e. virtualMachineIds=1,2,3)
	repeated string virtual_machine_ids = 2;

	// VM ID and IP map, vmidipmap[0].vmid=1 vmidipmap[0].vmip=10.1.1.75
	map<string, string> vm_id_ip_map = 3;

	//
	int64 start_event_id = 4;

	//
	string injected_job_id = 5 [
		(validate.field).string.uuid = true
	];

	//
	string response_type = 6;
}

// AssignToLoadBalancerRuleResponse represents the response from assigns virtual machine or a list of virtual machines to a load balancer rule.
message AssignToLoadBalancerRuleResponse {
	// The Result
	Result result = 1;
}

// CreateApplicationLoadBalancerRequest represents the parameters for creates an internal load balancer
message CreateApplicationLoadBalancerRequest {
	// name of the load balancer
	string load_balancer_name = 1 [
		(validate.field).required       = true,
		(validate.field).string.min_len = 1,
		(validate.field).string.max_len = 255
	];

	// the description of the load balancer
	string description = 2 [
		(validate.field).string.min_len = 1,
		(validate.field).string.max_len = 1024
	];

	// The guest network the load balancer will be created for
	int64 network_id = 3 [
		(validate.field).required = true
	];

	// the source port the network traffic will be load balanced from
	int32 source_port = 4 [
		(validate.field).required  = true,
		(validate.field).int32.gte = 1,
		(validate.field).int32.lte = 65535
	];

	// load balancer algorithm (source, roundrobin, leastconn)
	string algorithm = 5 [
		(validate.field).required = true
	];

	// the TCP port of the virtual machine where the network traffic will be load balanced to
	int32 instance_port = 6 [
		(validate.field).required  = true,
		(validate.field).int32.gte = 1,
		(validate.field).int32.lte = 65535
	];

	// the source IP address the network traffic will be load balanced from
	string source_ip = 7 [
		(validate.field).string.ipv4 = true
	];

	// the network id of the source ip address
	int64 source_ip_network_id = 8 [
		(validate.field).required = true
	];

	// the load balancer scheme. Supported value in this release is Internal
	string scheme = 9 [
		(validate.field).required = true
	];

	// an optional field, whether to the display the rule to the end user or not
	bool display = 10 [
		features.field_presence = EXPLICIT
	];

	//
	int64 start_event_id = 11;

	//
	string injected_job_id = 12 [
		(validate.field).string.uuid = true
	];

	//
	string response_type = 13;
}

// CreateApplicationLoadBalancerResponse represents the response from creates an internal load balancer
message CreateApplicationLoadBalancerResponse {
	// The Result
	Result result = 1;
}

// UpdateLBHealthCheckPolicyRequest represents the parameters for updates load balancer health check policy
message UpdateLBHealthCheckPolicyRequest {
	// ID of load balancer health check policy
	int64 id = 1 [
		(validate.field).required = true
	];

	// an optional field, whether to the display the policy to the end user or not
	bool display = 2 [
		features.field_presence = EXPLICIT
	];

	// an optional field, in case you want to set a custom id to the resource. Allowed to Root Admins only
	string custom_id = 3 [
		(validate.field).string.uuid = true
	];

	//
	int64 start_event_id = 4;

	//
	string injected_job_id = 5 [
		(validate.field).string.uuid = true
	];

	//
	string response_type = 6;
}

// UpdateLBHealthCheckPolicyResponse represents the response from updates load balancer health check policy
message UpdateLBHealthCheckPolicyResponse {
	// The Result
	Result result = 1;
}

// AssignCertToLoadBalancerRequest represents the parameters for assigns a certificate to a load balancer rule
message AssignCertToLoadBalancerRequest {
	// the ID of the load balancer rule
	int64 lb_rule_id = 1 [
		(validate.field).required = true
	];

	// the ID of the certificate
	int64 cert_id = 2 [
		(validate.field).required = true
	];

	//
	int64 start_event_id = 3;

	//
	string injected_job_id = 4 [
		(validate.field).string.uuid = true
	];

	//
	string response_type = 5;
}

// AssignCertToLoadBalancerResponse represents the response from assigns a certificate to a load balancer rule
message AssignCertToLoadBalancerResponse {
	// The Result
	Result result = 1;
}

// ListLBHealthCheckPoliciesRequest represents the parameters for lists load balancer health check policies.
message ListLBHealthCheckPoliciesRequest {
	// the ID of the load balancer rule
	int64 lb_rule_id = 1;

	// list resources by display flag; only ROOT admin is eligible to pass this parameter
	bool display = 2 [
		features.field_presence = EXPLICIT
	];

	// the ID of the health check policy
	int64 id = 3;

	// List by keyword
	string keyword = 4;

	//
	int32 page = 5;

	//
	int32 page_size = 6;

	//
	string response_type = 7;
}

// ListLBHealthCheckPoliciesResponse represents the response from lists load balancer health check policies.
message ListLBHealthCheckPoliciesResponse {
	option (validate.message).disabled = false;
	// The list of LBHealthChecks
	repeated LBHealthCheck items = 1;

	// The total count of LBHealthChecks
	int32 total_count = 2;
}

// DeleteApplicationLoadBalancerRequest represents the parameters for deletes an internal load balancer
message DeleteApplicationLoadBalancerRequest {
	// the ID of the Load Balancer
	int64 id = 1 [
		(validate.field).required = true
	];

	//
	int64 start_event_id = 2;

	//
	string injected_job_id = 3 [
		(validate.field).string.uuid = true
	];

	//
	string response_type = 4;
}

// DeleteApplicationLoadBalancerResponse represents the response from deletes an internal load balancer
message DeleteApplicationLoadBalancerResponse {
	// The Result
	Result result = 1;
}

// DeleteLBHealthCheckPolicyRequest represents the parameters for deletes a load balancer health check policy.
message DeleteLBHealthCheckPolicyRequest {
	// the ID of the load balancer health check policy
	int64 id = 1 [
		(validate.field).required = true
	];

	//
	int64 start_event_id = 2;

	//
	string injected_job_id = 3 [
		(validate.field).string.uuid = true
	];

	//
	string response_type = 4;
}

// DeleteLBHealthCheckPolicyResponse represents the response from deletes a load balancer health check policy.
message DeleteLBHealthCheckPolicyResponse {
	// The Result
	Result result = 1;
}

// CreateLBHealthCheckPolicyRequest represents the parameters for creates a load balancer health check policy
message CreateLBHealthCheckPolicyRequest {
	// the ID of the load balancer rule
	int64 lb_rule_id = 1 [
		(validate.field).required = true
	];

	// the description of the load balancer health check policy
	string description = 2 [
		(validate.field).string.min_len = 1,
		(validate.field).string.max_len = 1024
	];

	// HTTP ping path
	string ping_path = 3;

	// Time to wait when receiving a response from the health check (2sec - 60 sec)
	int32 respons_time_out = 4;

	// Amount of time between health checks (1 sec - 20940 sec)
	int32 health_check_interval = 5;

	// Number of consecutive health check success before declaring an instance healthy
	int32 healthy_threshold = 6;

	// Number of consecutive health check failures before declaring an instance unhealthy
	int32 unhealthy_threshold = 7;

	// an optional field, whether to the display the rule to the end user or not
	bool display = 8 [
		features.field_presence = EXPLICIT
	];

	//
	int64 start_event_id = 9;

	//
	string injected_job_id = 10 [
		(validate.field).string.uuid = true
	];

	//
	string response_type = 11;
}

// CreateLBHealthCheckPolicyResponse represents the response from creates a load balancer health check policy
message CreateLBHealthCheckPolicyResponse {
	// The Result
	Result result = 1;
}

// UpdateLoadBalancerRuleRequest represents the parameters for updates load balancer
message UpdateLoadBalancerRuleRequest {
	// load balancer algorithm (source, roundrobin, leastconn)
	string algorithm = 1;

	// the description of the load balancer rule
	string description = 2 [
		(validate.field).string.min_len = 1,
		(validate.field).string.max_len = 1024
	];

	// the ID of the load balancer rule to update
	int64 id = 3 [
		(validate.field).required = true
	];

	// the name of the load balancer rule
	string load_balancer_name = 4 [
		(validate.field).string.min_len = 1,
		(validate.field).string.max_len = 255
	];

	// an optional field, whether to the display the rule to the end user or not
	bool display = 5 [
		features.field_presence = EXPLICIT
	];

	// The protocol for the LB
	string lb_protocol = 6;

	// an optional field, in case you want to set a custom id to the resource. Allowed to Root Admins only
	string custom_id = 7 [
		(validate.field).string.uuid = true
	];

	//
	int64 start_event_id = 8;

	//
	string injected_job_id = 9 [
		(validate.field).string.uuid = true
	];

	//
	string response_type = 10;
}

// UpdateLoadBalancerRuleResponse represents the response from updates load balancer
message UpdateLoadBalancerRuleResponse {
	// The Result
	Result result = 1;
}

// UpdateLBStickinessPolicyRequest represents the parameters for updates load balancer stickiness policy
message UpdateLBStickinessPolicyRequest {
	// id of lb stickiness policy
	int64 id = 1 [
		(validate.field).required = true
	];

	// an optional field, whether to the display the policy to the end user or not
	bool display = 2 [
		features.field_presence = EXPLICIT
	];

	// an optional field, in case you want to set a custom id to the resource. Allowed to Root Admins only
	string custom_id = 3 [
		(validate.field).string.uuid = true
	];

	//
	int64 start_event_id = 4;

	//
	string injected_job_id = 5 [
		(validate.field).string.uuid = true
	];

	//
	string response_type = 6;
}

// UpdateLBStickinessPolicyResponse represents the response from updates load balancer stickiness policy
message UpdateLBStickinessPolicyResponse {
	// The Result
	Result result = 1;
}

// SslCert represents a SslCert Item
message SslCert {
	// The ID of the SslCert
	string id = 1 [
		(validate.field).string.uuid = true
	];
	// The name of the SslCert
	string name = 2;
	// The display name of the SslCert
	string display_name = 3;
	// The description of the SslCert
	string description = 4;
	// The date this entity was created
	string created = 5;
}

// LoadBalancerRuleVmMap represents a LoadBalancerRuleVmMap Item
message LoadBalancerRuleVmMap {
	// The ID of the LoadBalancerRuleVmMap
	string id = 1 [
		(validate.field).string.uuid = true
	];
	// The name of the LoadBalancerRuleVmMap
	string name = 2;
	// The display name of the LoadBalancerRuleVmMap
	string display_name = 3;
	// The description of the LoadBalancerRuleVmMap
	string description = 4;
	// The date this entity was created
	string created = 5;
}

// LBStickiness represents a LBStickiness Item
message LBStickiness {
	// The ID of the LBStickiness
	string id = 1 [
		(validate.field).string.uuid = true
	];
	// The name of the LBStickiness
	string name = 2;
	// The display name of the LBStickiness
	string display_name = 3;
	// The description of the LBStickiness
	string description = 4;
	// The date this entity was created
	string created = 5;
}

// LoadBalancer represents a LoadBalancer Item
message LoadBalancer {
	// The ID of the LoadBalancer
	string id = 1 [
		(validate.field).string.uuid = true
	];
	// The name of the LoadBalancer
	string name = 2;
	// The display name of the LoadBalancer
	string display_name = 3;
	// The description of the LoadBalancer
	string description = 4;
	// The date this entity was created
	string created = 5;
}

// ApplicationLoadBalancer represents a ApplicationLoadBalancer Item
message ApplicationLoadBalancer {
	// The ID of the ApplicationLoadBalancer
	string id = 1 [
		(validate.field).string.uuid = true
	];
	// The name of the ApplicationLoadBalancer
	string name = 2;
	// The display name of the ApplicationLoadBalancer
	string display_name = 3;
	// The description of the ApplicationLoadBalancer
	string description = 4;
	// The date this entity was created
	string created = 5;
}

// LBHealthCheck represents a LBHealthCheck Item
message LBHealthCheck {
	// The ID of the LBHealthCheck
	string id = 1 [
		(validate.field).string.uuid = true
	];
	// The name of the LBHealthCheck
	string name = 2;
	// The display name of the LBHealthCheck
	string display_name = 3;
	// The description of the LBHealthCheck
	string description = 4;
	// The date this entity was created
	string created = 5;
}

// Success represents a Success Operation Response
message Success {
	// true if operation is executed successfully
	bool success = 1;
	// any text associated with the success or failure
	string display_text = 2;
}

// Item represents a generic item in a list response
message Item {
	// The ID of the item
	string id = 1 [
		(validate.field).string.uuid = true
	];

	// The name of the item
	string name = 2;

	// The display name of the item
	string display_name = 3;

	// The description of the item
	string description = 4;

	// The account ID the item belongs to
	string account_id = 5 [
		(validate.field).string.uuid = true
	];

	// The domain ID the item belongs to
	string domain_id = 6 [
		(validate.field).string.uuid = true
	];

	// The domain name the item belongs to
	string domain = 7;

	// The project ID the item belongs to
	string project_id = 8 [
		(validate.field).string.uuid = true
	];

	// The project name the item belongs to
	string project = 9;

	// The date the item was created
	string created = 10;

	// The state of the item
	string state = 11;

	// Additional fields returned by the API
	map<string, string> details = 12;
}

// Result represents a generic operation result
message Result {
	// Whether the operation was successful
	bool success = 1;

	// Any text associated with the success or failure
	string display_text = 2;

	// The ID of the resource affected by the operation
	string id = 3 [
		(validate.field).string.uuid = true
	];

	// The job ID for an async operation
	string job_id = 4 [
		(validate.field).string.uuid = true
	];

	// The status of the job
	string job_status = 5;
}
