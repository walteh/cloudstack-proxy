edition = "2023";

package cloudstack.management.userdata.v1;

import "cloudstack/annotations/annotations.proto";
import "cloudstack/validate/validate.proto";
import "google/protobuf/descriptor.proto";

// UserdataService provides operations for managing Userdatas
service UserdataService {
	option (annotations.service).scope = SCOPE_USER;

	// DeleteUserData Deletes a userdata
	rpc DeleteUserData(DeleteUserDataRequest) returns (DeleteUserDataResponse) {
		option (annotations.method).scope = SCOPE_USER;
	}

	// LinkUserDataToTemplate Link or unlink a userdata to a template.
	rpc LinkUserDataToTemplate(LinkUserDataToTemplateRequest) returns (LinkUserDataToTemplateResponse) {
		option (annotations.method).scope = SCOPE_USER;
	}

	// ListUserData List registered userdatas
	rpc ListUserData(ListUserDataRequest) returns (ListUserDataResponse) {
		option (annotations.method).scope = SCOPE_USER;
	}

	// RegisterUserData Register a new userdata.
	rpc RegisterUserData(RegisterUserDataRequest) returns (RegisterUserDataResponse) {
		option (annotations.method).scope = SCOPE_USER;
	}
}

// DeleteUserDataRequest represents the parameters for deletes a userdata
message DeleteUserDataRequest {
	// the ID of the Userdata
	int64 id = 1 [
		(validate.field).required = true
	];

	// an optional account for the userdata. Must be used with domainId.
	string account_name = 2;

	// an optional domainId for the userdata. If the account parameter is used, domainId must also be used.
	int64 domain_id = 3;

	// an optional project for the userdata
	int64 project_id = 4;

	//
	string response_type = 5;
}

// DeleteUserDataResponse represents the response from deletes a userdata
message DeleteUserDataResponse {
	// The Result
	Result result = 1;
}

// LinkUserDataToTemplateRequest represents the parameters for link or unlink a userdata to a template.
message LinkUserDataToTemplateRequest {
	// the ID of the template for the virtual machine
	int64 template_id = 1;

	// the ID of the ISO for the virtual machine
	int64 iso_id = 2;

	// the ID of the userdata that has to be linked to template/ISO. If not provided existing userdata will be unlinked from the template/ISO
	int64 userdata_id = 3;

	// an optional override policy of the userdata. Possible values are - ALLOWOVERRIDE, APPEND, DENYOVERRIDE. Default policy is allowoverride
	string userdata_policy = 4;

	//
	string response_type = 5;
}

// LinkUserDataToTemplateResponse represents the response from link or unlink a userdata to a template.
message LinkUserDataToTemplateResponse {
	// The Result
	Result result = 1;
}

// ListUserDataRequest represents the parameters for list registered userdatas
message ListUserDataRequest {
	// the ID of the Userdata
	int64 id = 1;

	// Userdata name to look for
	string name = 2 [
		(validate.field).string.min_len = 1,
		(validate.field).string.max_len = 255
	];

	// list objects by project; if projectid=-1 lists All VMs
	int64 project_id = 3;

	// list resources by account. Must be used with the domainId parameter.
	string account_name = 4 [
		(validate.field).cel = {
			id:         "account_name_with_domain_id",
			expression: "!has(account_name) || has(domain_id)",
			message:    "account_name must be used with domain_id parameter"
		}
	];

	// If set to false, list only resources belonging to the command's caller; if set to true - list resources that the caller is authorized to see. Default value is false. Resources dedicated to a project are listed only if using the projectid parameter.
	bool list_all = 5 [
		features.field_presence = EXPLICIT
	];

	// list only resources belonging to the domain specified
	int64 domain_id = 6;

	// defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.
	bool recursive = 7 [
		features.field_presence = EXPLICIT
	];

	// List by keyword
	string keyword = 8;

	//
	int32 page = 9;

	//
	int32 page_size = 10;

	//
	string response_type = 11;
}

// ListUserDataResponse represents the response from list registered userdatas
message ListUserDataResponse {
	option (validate.message).disabled = false;
	// The list of UserDatas
	repeated UserData items = 1;

	// The total count of UserDatas
	int32 total_count = 2;
}

// RegisterUserDataRequest represents the parameters for register a new userdata.
message RegisterUserDataRequest {
	// Name of the userdata
	string name = 1 [
		(validate.field).required       = true,
		(validate.field).string.min_len = 1,
		(validate.field).string.max_len = 255
	];

	// an optional account for the userdata. Must be used with domainId.
	string account_name = 2;

	// an optional domainId for the userdata. If the account parameter is used, domainId must also be used.
	int64 domain_id = 3;

	// an optional project for the userdata
	int64 project_id = 4;

	// Base64 encoded userdata content. Using HTTP GET (via querystring), you can send up to 4KB of data after base64 encoding. Using HTTP POST (via POST body), you can send up to 1MB of data after base64 encoding. You also need to change vm.userdata.max.length value
	string user_data = 5 [
		(validate.field).required = true
	];

	// comma separated list of variables declared in userdata content
	string params = 6;

	//
	string response_type = 7;
}

// RegisterUserDataResponse represents the response from register a new userdata.
message RegisterUserDataResponse {
	// The Result
	Result result = 1;
}

// UserData represents a UserData Item
message UserData {
	// The ID of the UserData
	string id = 1 [
		(validate.field).string.uuid = true
	];
	// The name of the UserData
	string name = 2;
	// The display name of the UserData
	string display_name = 3;
	// The description of the UserData
	string description = 4;
	// The date this entity was created
	string created = 5;
}

// Success represents a Success Operation Response
message Success {
	// true if operation is executed successfully
	bool success = 1;
	// any text associated with the success or failure
	string display_text = 2;
}

// Result represents a generic operation result
message Result {
	// Whether the operation was successful
	bool success = 1;

	// Any text associated with the success or failure
	string display_text = 2;

	// The ID of the resource affected by the operation
	string id = 3 [
		(validate.field).string.uuid = true
	];

	// The job ID for an async operation
	string job_id = 4 [
		(validate.field).string.uuid = true
	];

	// The status of the job
	string job_status = 5;
}
