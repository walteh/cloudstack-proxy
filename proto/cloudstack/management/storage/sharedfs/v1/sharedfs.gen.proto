edition = "2023";

package cloudstack.management.storage.sharedfs.v1;

import "cloudstack/annotations/annotations.proto";
import "cloudstack/validate/validate.proto";
import "google/protobuf/descriptor.proto";

// SharedfsService provides operations for managing Storage.Sharedfss
service SharedfsService {
	option (annotations.service).scope = Scope_USER;

	// StopSharedFS Stop a Shared FileSystem
	rpc StopSharedFS(StopSharedFSRequest) returns (StopSharedFSResponse) {}

	// ChangeSharedFSDiskOffering Change Disk offering of a Shared FileSystem
	rpc ChangeSharedFSDiskOffering(ChangeSharedFSDiskOfferingRequest) returns (ChangeSharedFSDiskOfferingResponse) {}

	// ExpungeSharedFS Expunge a Shared FileSystem by id
	rpc ExpungeSharedFS(ExpungeSharedFSRequest) returns (ExpungeSharedFSResponse) {}

	// ListSharedFSProviders Lists all available shared filesystem providers.
	rpc ListSharedFSProviders(ListSharedFSProvidersRequest) returns (ListSharedFSProvidersResponse) {}

	// CreateSharedFS Create a new Shared File System of specified size and disk offering, attached to the given network
	rpc CreateSharedFS(CreateSharedFSRequest) returns (CreateSharedFSResponse) {}

	// ChangeSharedFSServiceOffering Change Service offering of a Shared FileSystem
	rpc ChangeSharedFSServiceOffering(ChangeSharedFSServiceOfferingRequest) returns (ChangeSharedFSServiceOfferingResponse) {}

	// ListSharedFS List Shared FileSystems
	rpc ListSharedFS(ListSharedFSRequest) returns (ListSharedFSResponse) {}

	// DestroySharedFS Destroy a Shared FileSystem by id
	rpc DestroySharedFS(DestroySharedFSRequest) returns (DestroySharedFSResponse) {}

	// StartSharedFS Start a Shared FileSystem
	rpc StartSharedFS(StartSharedFSRequest) returns (StartSharedFSResponse) {}

	// RecoverSharedFS Recover a Shared FileSystem by id
	rpc RecoverSharedFS(RecoverSharedFSRequest) returns (RecoverSharedFSResponse) {}

	// RestartSharedFS Restart a Shared FileSystem
	rpc RestartSharedFS(RestartSharedFSRequest) returns (RestartSharedFSResponse) {}

	// UpdateSharedFS Update a Shared FileSystem
	rpc UpdateSharedFS(UpdateSharedFSRequest) returns (UpdateSharedFSResponse) {}
}

// StopSharedFSRequest represents the parameters for stop a shared filesystem
message StopSharedFSRequest {
	// the ID of the shared filesystem
	int64 id = 1 [
		(validate.field).required = true
	];

	// Force stop the shared filesystem.
	bool forced = 2 [
		features.field_presence = EXPLICIT
	];

	//
	int64 start_event_id = 3;

	//
	string injected_job_id = 4 [
		(validate.field).string.uuid = true
	];

	//
	string response_type = 5;
}

// StopSharedFSResponse represents the response from stop a shared filesystem
message StopSharedFSResponse {
	// The Result
	Result result = 1;
}

// ChangeSharedFSDiskOfferingRequest represents the parameters for change disk offering of a shared filesystem
message ChangeSharedFSDiskOfferingRequest {
	// the ID of the shared filesystem
	int64 id = 1 [
		(validate.field).required = true
	];

	// the disk offering to use for the underlying storage
	int64 disk_offering_id = 2;

	// the size of the shared filesystem in GiB
	int64 size = 3;

	// min iops
	int64 min_iops = 4;

	// max iops
	int64 max_iops = 5;

	//
	int64 start_event_id = 6;

	//
	string injected_job_id = 7 [
		(validate.field).string.uuid = true
	];

	//
	string response_type = 8;
}

// ChangeSharedFSDiskOfferingResponse represents the response from change disk offering of a shared filesystem
message ChangeSharedFSDiskOfferingResponse {
	// The Result
	Result result = 1;
}

// ExpungeSharedFSRequest represents the parameters for expunge a shared filesystem by id
message ExpungeSharedFSRequest {
	// the ID of the shared filesystem to expunge
	int64 id = 1;

	//
	int64 start_event_id = 2;

	//
	string injected_job_id = 3 [
		(validate.field).string.uuid = true
	];

	//
	string response_type = 4;
}

// ExpungeSharedFSResponse represents the response from expunge a shared filesystem by id
message ExpungeSharedFSResponse {
	// The Result
	Result result = 1;
}

// ListSharedFSProvidersRequest represents the parameters for lists all available shared filesystem providers.
message ListSharedFSProvidersRequest {
	// List by keyword
	string keyword = 1;

	//
	int32 page = 2;

	//
	int32 page_size = 3;

	//
	string response_type = 4;
}

// ListSharedFSProvidersResponse represents the response from lists all available shared filesystem providers.
message ListSharedFSProvidersResponse {
	option (validate.message).disabled = false;
	// The list of SharedFSProviders
	repeated SharedFSProvider items = 1;

	// The total count of SharedFSProviders
	int32 total_count = 2;
}

// CreateSharedFSRequest represents the parameters for create a new shared file system of specified size and disk offering, attached to the given network
message CreateSharedFSRequest {
	// the name of the shared filesystem.
	string name = 1 [
		(validate.field).required       = true,
		(validate.field).string.min_len = 1,
		(validate.field).string.max_len = 255
	];

	// the account associated with the shared filesystem. Must be used with the domainId parameter.
	string account_name = 2 [
		(validate.field).cel = {
			id:         "account_name_with_domain_id",
			expression: "!has(account_name) || has(domain_id)",
			message:    "account_name must be used with domain_id parameter"
		}
	];

	// the domain ID associated with the shared filesystem. If used with the account parameter returns the shared filesystem associated with the account for the specified domain.If account is NOT provided then the shared filesystem will be assigned to the caller account and domain.
	int64 domain_id = 3;

	// the project associated with the shared filesystem. Mutually exclusive with account parameter
	int64 project_id = 4;

	// the description for the shared filesystem.
	string description = 5 [
		(validate.field).string.min_len = 1,
		(validate.field).string.max_len = 1024
	];

	// the size of the shared filesystem in GiB
	int64 size = 6;

	// the zone id.
	int64 zone_id = 7 [
		(validate.field).required = true
	];

	// the disk offering to use for the underlying storage. This will define the size and other specifications like encryption and qos for the shared filesystem.
	int64 disk_offering_id = 8 [
		(validate.field).required = true
	];

	// min iops
	int64 min_iops = 9;

	// max iops
	int64 max_iops = 10;

	// the service offering to use for the shared filesystem instance hosting the data. The offering should be HA enabled and the cpu count and memory size should be greater than equal to sharedfsvm.min.cpu.count and sharedfsvm.min.ram.size respectively
	int64 service_offering_id = 11 [
		(validate.field).required = true
	];

	// the filesystem format (XFS / EXT4) which will be installed on the shared filesystem.
	string fs_format = 12 [
		(validate.field).required = true
	];

	// the provider to be used for the shared filesystem. The list of providers can be fetched by using the listSharedFileSystemProviders API.
	string shared_f_s_provider_name = 13 [
		(validate.field).string.uuid = true
	];

	// network to attach the shared filesystem to
	int64 network_id = 14 [
		(validate.field).required = true
	];

	//
	int64 start_event_id = 15;

	//
	string injected_job_id = 16 [
		(validate.field).string.uuid = true
	];

	//
	string response_type = 17;
}

// CreateSharedFSResponse represents the response from create a new shared file system of specified size and disk offering, attached to the given network
message CreateSharedFSResponse {
	// The Result
	Result result = 1;
}

// ChangeSharedFSServiceOfferingRequest represents the parameters for change service offering of a shared filesystem
message ChangeSharedFSServiceOfferingRequest {
	// the ID of the shared filesystem
	int64 id = 1 [
		(validate.field).required = true
	];

	// the offering to use for the shared filesystem instance
	int64 service_offering_id = 2 [
		(validate.field).required = true
	];

	//
	int64 start_event_id = 3;

	//
	string injected_job_id = 4 [
		(validate.field).string.uuid = true
	];

	//
	string response_type = 5;
}

// ChangeSharedFSServiceOfferingResponse represents the response from change service offering of a shared filesystem
message ChangeSharedFSServiceOfferingResponse {
	// The Result
	Result result = 1;
}

// ListSharedFSRequest represents the parameters for list shared filesystems
message ListSharedFSRequest {
	// the ID of the shared filesystem
	int64 id = 1;

	// the name of the shared filesystem
	string name = 2 [
		(validate.field).string.min_len = 1,
		(validate.field).string.max_len = 255
	];

	// the ID of the availability zone
	int64 zone_id = 3;

	// the ID of the network
	int64 network_id = 4;

	// the disk offering of the shared filesystem
	int64 disk_offering_id = 5;

	// the service offering of the shared filesystem
	int64 service_offering_id = 6;

	// makes the API's response contains only the resource count
	bool retrieve_only_resource_count = 7 [
		features.field_presence = EXPLICIT
	];

	// List resources by tags (key/value pairs)
	map<string, string> tags = 8;

	// list objects by project; if projectid=-1 lists All VMs
	int64 project_id = 9;

	// list resources by account. Must be used with the domainId parameter.
	string account_name = 10 [
		(validate.field).cel = {
			id:         "account_name_with_domain_id",
			expression: "!has(account_name) || has(domain_id)",
			message:    "account_name must be used with domain_id parameter"
		}
	];

	// If set to false, list only resources belonging to the command's caller; if set to true - list resources that the caller is authorized to see. Default value is false. Resources dedicated to a project are listed only if using the projectid parameter.
	bool list_all = 11 [
		features.field_presence = EXPLICIT
	];

	// list only resources belonging to the domain specified
	int64 domain_id = 12;

	// defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.
	bool recursive = 13 [
		features.field_presence = EXPLICIT
	];

	// List by keyword
	string keyword = 14;

	//
	int32 page = 15;

	//
	int32 page_size = 16;

	//
	string response_type = 17;
}

// ListSharedFSResponse represents the response from list shared filesystems
message ListSharedFSResponse {
	option (validate.message).disabled = false;
	// The list of SharedFSs
	repeated SharedFS items = 1;

	// The total count of SharedFSs
	int32 total_count = 2;
}

// DestroySharedFSRequest represents the parameters for destroy a shared filesystem by id
message DestroySharedFSRequest {
	// the ID of the shared filesystem to delete
	int64 id = 1;

	// If true is passed, the shared filesystem is expunged immediately. False by default.
	bool expunge = 2 [
		features.field_presence = EXPLICIT
	];

	// If true is passed, the shared filesystem can be destroyed without stopping it first.
	bool forced = 3 [
		features.field_presence = EXPLICIT
	];

	//
	int64 start_event_id = 4;

	//
	string injected_job_id = 5 [
		(validate.field).string.uuid = true
	];

	//
	string response_type = 6;
}

// DestroySharedFSResponse represents the response from destroy a shared filesystem by id
message DestroySharedFSResponse {
	// The Result
	Result result = 1;
}

// StartSharedFSRequest represents the parameters for start a shared filesystem
message StartSharedFSRequest {
	// the ID of the shared filesystem
	int64 id = 1 [
		(validate.field).required = true
	];

	//
	int64 start_event_id = 2;

	//
	string injected_job_id = 3 [
		(validate.field).string.uuid = true
	];

	//
	string response_type = 4;
}

// StartSharedFSResponse represents the response from start a shared filesystem
message StartSharedFSResponse {
	// The Result
	Result result = 1;
}

// RecoverSharedFSRequest represents the parameters for recover a shared filesystem by id
message RecoverSharedFSRequest {
	// the ID of the shared filesystem to recover
	int64 id = 1;

	//
	string response_type = 2;
}

// RecoverSharedFSResponse represents the response from recover a shared filesystem by id
message RecoverSharedFSResponse {
	// The Result
	Result result = 1;
}

// RestartSharedFSRequest represents the parameters for restart a shared filesystem
message RestartSharedFSRequest {
	// the ID of the shared filesystem
	int64 id = 1 [
		(validate.field).required = true
	];

	// is cleanup required
	bool cleanup = 2 [
		features.field_presence = EXPLICIT
	];

	//
	int64 start_event_id = 3;

	//
	string injected_job_id = 4 [
		(validate.field).string.uuid = true
	];

	//
	string response_type = 5;
}

// RestartSharedFSResponse represents the response from restart a shared filesystem
message RestartSharedFSResponse {
	// The Result
	Result result = 1;
}

// UpdateSharedFSRequest represents the parameters for update a shared filesystem
message UpdateSharedFSRequest {
	// the ID of the shared filesystem
	int64 id = 1 [
		(validate.field).required = true
	];

	// the name of the shared filesystem.
	string name = 2 [
		(validate.field).string.min_len = 1,
		(validate.field).string.max_len = 255
	];

	// the description for the shared filesystem.
	string description = 3 [
		(validate.field).string.min_len = 1,
		(validate.field).string.max_len = 1024
	];

	//
	string response_type = 4;
}

// UpdateSharedFSResponse represents the response from update a shared filesystem
message UpdateSharedFSResponse {
	// The Result
	Result result = 1;
}

// SharedFSProvider represents a SharedFSProvider Item
message SharedFSProvider {
	// The ID of the SharedFSProvider
	string id = 1 [
		(validate.field).string.uuid = true
	];
	// The name of the SharedFSProvider
	string name = 2;
	// The display name of the SharedFSProvider
	string display_name = 3;
	// The description of the SharedFSProvider
	string description = 4;
	// The date this entity was created
	string created = 5;
}

// SharedFS represents a SharedFS Item
message SharedFS {
	// The ID of the SharedFS
	string id = 1 [
		(validate.field).string.uuid = true
	];
	// The name of the SharedFS
	string name = 2;
	// The display name of the SharedFS
	string display_name = 3;
	// The description of the SharedFS
	string description = 4;
	// The date this entity was created
	string created = 5;
}

// Success represents a Success Operation Response
message Success {
	// true if operation is executed successfully
	bool success = 1;
	// any text associated with the success or failure
	string display_text = 2;
}

// Item represents a generic item in a list response
message Item {
	// The ID of the item
	string id = 1 [
		(validate.field).string.uuid = true
	];

	// The name of the item
	string name = 2;

	// The display name of the item
	string display_name = 3;

	// The description of the item
	string description = 4;

	// The account ID the item belongs to
	string account_id = 5 [
		(validate.field).string.uuid = true
	];

	// The domain ID the item belongs to
	string domain_id = 6 [
		(validate.field).string.uuid = true
	];

	// The domain name the item belongs to
	string domain = 7;

	// The project ID the item belongs to
	string project_id = 8 [
		(validate.field).string.uuid = true
	];

	// The project name the item belongs to
	string project = 9;

	// The date the item was created
	string created = 10;

	// The state of the item
	string state = 11;

	// Additional fields returned by the API
	map<string, string> details = 12;
}

// Result represents a generic operation result
message Result {
	// Whether the operation was successful
	bool success = 1;

	// Any text associated with the success or failure
	string display_text = 2;

	// The ID of the resource affected by the operation
	string id = 3 [
		(validate.field).string.uuid = true
	];

	// The job ID for an async operation
	string job_id = 4 [
		(validate.field).string.uuid = true
	];

	// The status of the job
	string job_status = 5;
}
