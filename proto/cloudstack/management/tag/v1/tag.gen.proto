edition = "2023";

package cloudstack.management.tag.v1;

import "cloudstack/annotations/annotations.proto";
import "cloudstack/validate/validate.proto";
import "google/protobuf/descriptor.proto";

// TagService provides operations for managing Tags
service TagService {
	option (annotations.service).scope = SCOPE_USER;

	// CreateTags Creates resource tag(s)
	rpc CreateTags(CreateTagsRequest) returns (CreateTagsResponse) {
		option (annotations.method).scope = SCOPE_USER;
	}

	// DeleteTags Deleting resource tag(s)
	rpc DeleteTags(DeleteTagsRequest) returns (DeleteTagsResponse) {
		option (annotations.method).scope = SCOPE_USER;
	}

	// ListTags List resource tag(s)
	rpc ListTags(ListTagsRequest) returns (ListTagsResponse) {
		option (annotations.method).scope = SCOPE_USER;
	}
}

// CreateTagsRequest represents the parameters for creates resource tag(s)
message CreateTagsRequest {
	// Map of tags (key/value pairs)
	map<string, string> tag = 1 [
		(validate.field).required = true
	];

	// type of the resource
	string resource_type = 2 [
		(validate.field).required = true
	];

	// list of resources to create the tags for
	repeated string resource_ids = 3 [
		(validate.field).required = true
	];

	// identifies client specific tag. When the value is not null, the tag can't be used by cloudStack code internally
	string customer = 4;

	//
	int64 start_event_id = 5;

	//
	string injected_job_id = 6 [
		(validate.field).string.uuid = true
	];

	//
	string response_type = 7;
}

// CreateTagsResponse represents the response from creates resource tag(s)
message CreateTagsResponse {
	// The Result
	Result result = 1;
}

// DeleteTagsRequest represents the parameters for deleting resource tag(s)
message DeleteTagsRequest {
	// Delete tags matching key/value pairs
	map<string, string> tag = 1;

	// Delete tag by resource type
	string resource_type = 2 [
		(validate.field).required = true
	];

	// Delete tags for resource id(s)
	repeated string resource_ids = 3 [
		(validate.field).required = true
	];

	//
	int64 start_event_id = 4;

	//
	string injected_job_id = 5 [
		(validate.field).string.uuid = true
	];

	//
	string response_type = 6;
}

// DeleteTagsResponse represents the response from deleting resource tag(s)
message DeleteTagsResponse {
	// The Result
	Result result = 1;
}

// ListTagsRequest represents the parameters for list resource tag(s)
message ListTagsRequest {
	// list by resource type
	string resource_type = 1;

	// list by resource id
	string resource_id = 2 [
		(validate.field).string.uuid = true
	];

	// list by key
	string key = 3;

	// list by value
	string value = 4;

	// list by customer name
	string customer = 5;

	// list objects by project; if projectid=-1 lists All VMs
	int64 project_id = 6;

	// list resources by account. Must be used with the domainId parameter.
	string account_name = 7 [
		(validate.field).cel = {
			id:         "account_name_with_domain_id",
			expression: "!has(account_name) || has(domain_id)",
			message:    "account_name must be used with domain_id parameter"
		}
	];

	// If set to false, list only resources belonging to the command's caller; if set to true - list resources that the caller is authorized to see. Default value is false. Resources dedicated to a project are listed only if using the projectid parameter.
	bool list_all = 8 [
		features.field_presence = EXPLICIT
	];

	// list only resources belonging to the domain specified
	int64 domain_id = 9;

	// defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.
	bool recursive = 10 [
		features.field_presence = EXPLICIT
	];

	// List by keyword
	string keyword = 11;

	//
	int32 page = 12;

	//
	int32 page_size = 13;

	//
	string response_type = 14;
}

// ListTagsResponse represents the response from list resource tag(s)
message ListTagsResponse {
	option (validate.message).disabled = false;
	// The list of ResourceTags
	repeated ResourceTag items = 1;

	// The total count of ResourceTags
	int32 total_count = 2;
}

// ResourceTag represents a ResourceTag Item
message ResourceTag {
	// The ID of the ResourceTag
	string id = 1 [
		(validate.field).string.uuid = true
	];
	// The name of the ResourceTag
	string name = 2;
	// The display name of the ResourceTag
	string display_name = 3;
	// The description of the ResourceTag
	string description = 4;
	// The date this entity was created
	string created = 5;
}

// Success represents a Success Operation Response
message Success {
	// true if operation is executed successfully
	bool success = 1;
	// any text associated with the success or failure
	string display_text = 2;
}

// Result represents a generic operation result
message Result {
	// Whether the operation was successful
	bool success = 1;

	// Any text associated with the success or failure
	string display_text = 2;

	// The ID of the resource affected by the operation
	string id = 3 [
		(validate.field).string.uuid = true
	];

	// The job ID for an async operation
	string job_id = 4 [
		(validate.field).string.uuid = true
	];

	// The status of the job
	string job_status = 5;
}
