edition = "2023";

package cloudstack.management.securitygroup.v1;

import "cloudstack/annotations/annotations.proto";
import "cloudstack/validate/validate.proto";
import "google/protobuf/descriptor.proto";

// SecuritygroupService provides operations for managing Securitygroups
service SecuritygroupService {
	option (annotations.service).scope = Scope_USER;

	// ListSecurityGroups Lists security groups
	rpc ListSecurityGroups(ListSecurityGroupsRequest) returns (ListSecurityGroupsResponse) {}

	// RevokeSecurityGroupEgress Deletes a particular egress rule from this security group
	rpc RevokeSecurityGroupEgress(RevokeSecurityGroupEgressRequest) returns (RevokeSecurityGroupEgressResponse) {}

	// AuthorizeSecurityGroupIngress Authorizes a particular ingress rule for this security group
	rpc AuthorizeSecurityGroupIngress(AuthorizeSecurityGroupIngressRequest) returns (AuthorizeSecurityGroupIngressResponse) {}

	// DeleteSecurityGroup Deletes security group
	rpc DeleteSecurityGroup(DeleteSecurityGroupRequest) returns (DeleteSecurityGroupResponse) {}

	// UpdateSecurityGroup Updates a security group
	rpc UpdateSecurityGroup(UpdateSecurityGroupRequest) returns (UpdateSecurityGroupResponse) {}

	// CreateSecurityGroup Creates a security group
	rpc CreateSecurityGroup(CreateSecurityGroupRequest) returns (CreateSecurityGroupResponse) {}

	// RevokeSecurityGroupIngress Deletes a particular ingress rule from this security group
	rpc RevokeSecurityGroupIngress(RevokeSecurityGroupIngressRequest) returns (RevokeSecurityGroupIngressResponse) {}

	// AuthorizeSecurityGroupEgress Authorizes a particular egress rule for this security group
	rpc AuthorizeSecurityGroupEgress(AuthorizeSecurityGroupEgressRequest) returns (AuthorizeSecurityGroupEgressResponse) {}
}

// ListSecurityGroupsRequest represents the parameters for lists security groups
message ListSecurityGroupsRequest {
	// lists security groups by name
	string security_group_name = 1 [
		(validate.field).string.min_len = 1,
		(validate.field).string.max_len = 255
	];

	// lists security groups by virtual machine id
	int64 virtual_machine_id = 2;

	// list the security group by the id provided
	int64 id = 3;

	// List resources by tags (key/value pairs)
	map<string, string> tags = 4;

	// list objects by project; if projectid=-1 lists All VMs
	int64 project_id = 5;

	// list resources by account. Must be used with the domainId parameter.
	string account_name = 6 [
		(validate.field).cel = {
			id:         "account_name_with_domain_id",
			expression: "!has(account_name) || has(domain_id)",
			message:    "account_name must be used with domain_id parameter"
		}
	];

	// If set to false, list only resources belonging to the command's caller; if set to true - list resources that the caller is authorized to see. Default value is false. Resources dedicated to a project are listed only if using the projectid parameter.
	bool list_all = 7 [
		features.field_presence = EXPLICIT
	];

	// list only resources belonging to the domain specified
	int64 domain_id = 8;

	// defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.
	bool recursive = 9 [
		features.field_presence = EXPLICIT
	];

	// List by keyword
	string keyword = 10;

	//
	int32 page = 11;

	//
	int32 page_size = 12;

	//
	string response_type = 13;
}

// ListSecurityGroupsResponse represents the response from lists security groups
message ListSecurityGroupsResponse {
	option (validate.message).disabled = false;
	// The list of SecurityGroups
	repeated SecurityGroup items = 1;

	// The total count of SecurityGroups
	int32 total_count = 2;
}

// RevokeSecurityGroupEgressRequest represents the parameters for deletes a particular egress rule from this security group
message RevokeSecurityGroupEgressRequest {
	// The ID of the egress rule
	int64 id = 1 [
		(validate.field).required = true
	];

	//
	int64 start_event_id = 2;

	//
	string injected_job_id = 3 [
		(validate.field).string.uuid = true
	];

	//
	string response_type = 4;
}

// RevokeSecurityGroupEgressResponse represents the response from deletes a particular egress rule from this security group
message RevokeSecurityGroupEgressResponse {
	// The Result
	Result result = 1;
}

// AuthorizeSecurityGroupIngressRequest represents the parameters for authorizes a particular ingress rule for this security group
message AuthorizeSecurityGroupIngressRequest {
	// the protocol for the ACL rule. Valid values are TCP/UDP/ICMP/ALL or valid protocol number (see /etc/protocols). ALL is default.
	string protocol = 1;

	// start port for this ingress rule
	int32 start_port = 2 [
		(validate.field).int32.gte = 1,
		(validate.field).int32.lte = 65535
	];

	// end port for this ingress rule
	int32 end_port = 3 [
		(validate.field).int32.gte = 1,
		(validate.field).int32.lte = 65535
	];

	// type of the icmp message being sent
	int32 icmp_type = 4;

	// error code for this icmp message
	int32 icmp_code = 5;

	// the cidr list associated. Multiple entries must be separated by a single comma character (,).
	repeated string cidr_list = 6;

	// user to security group mapping
	map<string, string> user_security_group_list = 7;

	// an optional domainId for the security group. If the account parameter is used, domainId must also be used.
	int64 domain_id = 8;

	// an optional account for the security group. Must be used with domainId.
	string account_name = 9;

	// an optional project of the security group
	int64 project_id = 10;

	// The ID of the security group. Mutually exclusive with securityGroupName parameter
	int64 security_group_id = 11;

	// The name of the security group. Mutually exclusive with securityGroupId parameter
	string security_group_name = 12 [
		(validate.field).string.min_len = 1,
		(validate.field).string.max_len = 255
	];

	//
	int64 start_event_id = 13;

	//
	string injected_job_id = 14 [
		(validate.field).string.uuid = true
	];

	//
	string response_type = 15;
}

// AuthorizeSecurityGroupIngressResponse represents the response from authorizes a particular ingress rule for this security group
message AuthorizeSecurityGroupIngressResponse {
	// The Result
	Result result = 1;
}

// DeleteSecurityGroupRequest represents the parameters for deletes security group
message DeleteSecurityGroupRequest {
	// the account of the security group. Must be specified with domain ID
	string account_name = 1;

	// the domain ID of account owning the security group
	int64 domain_id = 2;

	// the project of the security group
	int64 project_id = 3;

	// The ID of the security group. Mutually exclusive with name parameter
	int64 id = 4;

	// The ID of the security group. Mutually exclusive with id parameter
	string name = 5 [
		(validate.field).string.min_len = 1,
		(validate.field).string.max_len = 255
	];

	//
	string response_type = 6;
}

// DeleteSecurityGroupResponse represents the response from deletes security group
message DeleteSecurityGroupResponse {
	// The Result
	Result result = 1;
}

// UpdateSecurityGroupRequest represents the parameters for updates a security group
message UpdateSecurityGroupRequest {
	// The ID of the security group.
	int64 id = 1 [
		(validate.field).required = true
	];

	// The new name of the security group.
	string name = 2 [
		(validate.field).string.min_len = 1,
		(validate.field).string.max_len = 255
	];

	// an optional field, in case you want to set a custom id to the resource. Allowed to Root Admins only
	string custom_id = 3 [
		(validate.field).string.uuid = true
	];

	//
	string response_type = 4;
}

// UpdateSecurityGroupResponse represents the response from updates a security group
message UpdateSecurityGroupResponse {
	// The Result
	Result result = 1;
}

// CreateSecurityGroupRequest represents the parameters for creates a security group
message CreateSecurityGroupRequest {
	// an optional account for the security group. Must be used with domainId.
	string account_name = 1;

	// an optional domainId for the security group. If the account parameter is used, domainId must also be used.
	int64 domain_id = 2;

	// the description of the security group
	string description = 3 [
		(validate.field).string.min_len = 1,
		(validate.field).string.max_len = 1024
	];

	// name of the security group
	string security_group_name = 4 [
		(validate.field).required       = true,
		(validate.field).string.min_len = 1,
		(validate.field).string.max_len = 255
	];

	// Create security group for project
	int64 project_id = 5;

	//
	string response_type = 6;
}

// CreateSecurityGroupResponse represents the response from creates a security group
message CreateSecurityGroupResponse {
	// The Result
	Result result = 1;
}

// RevokeSecurityGroupIngressRequest represents the parameters for deletes a particular ingress rule from this security group
message RevokeSecurityGroupIngressRequest {
	// The ID of the ingress rule
	int64 id = 1 [
		(validate.field).required = true
	];

	//
	int64 start_event_id = 2;

	//
	string injected_job_id = 3 [
		(validate.field).string.uuid = true
	];

	//
	string response_type = 4;
}

// RevokeSecurityGroupIngressResponse represents the response from deletes a particular ingress rule from this security group
message RevokeSecurityGroupIngressResponse {
	// The Result
	Result result = 1;
}

// AuthorizeSecurityGroupEgressRequest represents the parameters for authorizes a particular egress rule for this security group
message AuthorizeSecurityGroupEgressRequest {
	// TCP is default. UDP is the other supported protocol
	string protocol = 1;

	// start port for this egress rule
	int32 start_port = 2 [
		(validate.field).int32.gte = 1,
		(validate.field).int32.lte = 65535
	];

	// end port for this egress rule
	int32 end_port = 3 [
		(validate.field).int32.gte = 1,
		(validate.field).int32.lte = 65535
	];

	// type of the icmp message being sent
	int32 icmp_type = 4;

	// error code for this icmp message
	int32 icmp_code = 5;

	// the cidr list associated. Multiple entries must be separated by a single comma character (,).
	repeated string cidr_list = 6;

	// user to security group mapping
	map<string, string> user_security_group_list = 7;

	// an optional domainId for the security group. If the account parameter is used, domainId must also be used.
	int64 domain_id = 8;

	// an optional account for the security group. Must be used with domainId.
	string account_name = 9;

	// an optional project of the security group
	int64 project_id = 10;

	// The ID of the security group. Mutually exclusive with securityGroupName parameter
	int64 security_group_id = 11;

	// The name of the security group. Mutually exclusive with securityGroupId parameter
	string security_group_name = 12 [
		(validate.field).string.min_len = 1,
		(validate.field).string.max_len = 255
	];

	//
	int64 start_event_id = 13;

	//
	string injected_job_id = 14 [
		(validate.field).string.uuid = true
	];

	//
	string response_type = 15;
}

// AuthorizeSecurityGroupEgressResponse represents the response from authorizes a particular egress rule for this security group
message AuthorizeSecurityGroupEgressResponse {
	// The Result
	Result result = 1;
}

// SecurityGroup represents a SecurityGroup Item
message SecurityGroup {
	// The ID of the SecurityGroup
	string id = 1 [
		(validate.field).string.uuid = true
	];
	// The name of the SecurityGroup
	string name = 2;
	// The display name of the SecurityGroup
	string display_name = 3;
	// The description of the SecurityGroup
	string description = 4;
	// The date this entity was created
	string created = 5;
}

// Success represents a Success Operation Response
message Success {
	// true if operation is executed successfully
	bool success = 1;
	// any text associated with the success or failure
	string display_text = 2;
}

// ProtocolType represents the possible values for the protocol for the ACL rule. Valid values are TCP/UDP/ICMP/ALL or valid protocol number (see /etc/protocols). ALL is default.
enum ProtocolType {
	// Default unspecified value
	PROTOCOL_TYPE_UNSPECIFIED = 0;
	// TCP value
	PROTOCOL_TYPE_TCP = 1;
	// UDP value
	PROTOCOL_TYPE_UDP = 2;
	// ICMP value
	PROTOCOL_TYPE_ICMP = 3;
	// ALL value
	PROTOCOL_TYPE_ALL = 4;
	// ETC value
	PROTOCOL_TYPE_ETC = 5;
}

// Result represents a generic operation result
message Result {
	// Whether the operation was successful
	bool success = 1;

	// Any text associated with the success or failure
	string display_text = 2;

	// The ID of the resource affected by the operation
	string id = 3 [
		(validate.field).string.uuid = true
	];

	// The job ID for an async operation
	string job_id = 4 [
		(validate.field).string.uuid = true
	];

	// The status of the job
	string job_status = 5;
}
