edition = "2023";

package cloudstack.management.vlan.v1;

import "cloudstack/annotations/annotations.proto";
import "cloudstack/validate/validate.proto";
import "google/protobuf/descriptor.proto";

// VlanService provides operations for managing Vlans
service VlanService {
	option (annotations.service).scope = Scope_USER;

	// ListVlanIpRanges Lists all VLAN IP ranges.
	rpc ListVlanIpRanges(ListVlanIpRangesRequest) returns (ListVlanIpRangesResponse) {}

	// DeleteVlanIpRange Deletes a VLAN IP range.
	rpc DeleteVlanIpRange(DeleteVlanIpRangeRequest) returns (DeleteVlanIpRangeResponse) {}

	// UpdateVlanIpRange Updates a VLAN IP range.
	rpc UpdateVlanIpRange(UpdateVlanIpRangeRequest) returns (UpdateVlanIpRangeResponse) {}

	// DedicatePublicIpRange Dedicates a Public IP range to an account
	rpc DedicatePublicIpRange(DedicatePublicIpRangeRequest) returns (DedicatePublicIpRangeResponse) {}

	// CreateVlanIpRange Creates a VLAN IP range.
	rpc CreateVlanIpRange(CreateVlanIpRangeRequest) returns (CreateVlanIpRangeResponse) {}

	// ReleasePublicIpRange Releases a Public IP range back to the system pool
	rpc ReleasePublicIpRange(ReleasePublicIpRangeRequest) returns (ReleasePublicIpRangeResponse) {}
}

// ListVlanIpRangesRequest represents the parameters for lists all vlan ip ranges.
message ListVlanIpRangesRequest {
	// the account with which the VLAN IP range is associated. Must be used with the domainId parameter.
	string account_name = 1 [
		(validate.field).cel = {
			id:         "account_name_with_domain_id",
			expression: "!has(account_name) || has(domain_id)",
			message:    "account_name must be used with domain_id parameter"
		}
	];

	// project who will own the VLAN
	int64 project_id = 2;

	// the domain ID with which the VLAN IP range is associated.  If used with the account parameter, returns all VLAN IP ranges for that account in the specified domain.
	int64 domain_id = 3;

	// the ID of the VLAN IP range
	int64 id = 4;

	// the Pod ID of the VLAN IP range
	int64 pod_id = 5;

	// the ID or VID of the VLAN. Default is an "untagged" VLAN.
	string vlan = 6;

	// the Zone ID of the VLAN IP range
	int64 zone_id = 7;

	// network id of the VLAN IP range
	int64 network_id = 8;

	// true if VLAN is of Virtual type, false if Direct
	bool for_virtual_network = 9 [
		features.field_presence = EXPLICIT
	];

	// physical network id of the VLAN IP range
	int64 physical_network_id = 10;

	// List by keyword
	string keyword = 11;

	//
	int32 page = 12;

	//
	int32 page_size = 13;

	//
	string response_type = 14;
}

// ListVlanIpRangesResponse represents the response from lists all vlan ip ranges.
message ListVlanIpRangesResponse {
	option (validate.message).disabled = false;
	// The list of VlanIpRanges
	repeated VlanIpRange items = 1;

	// The total count of VlanIpRanges
	int32 total_count = 2;
}

// DeleteVlanIpRangeRequest represents the parameters for deletes a vlan ip range.
message DeleteVlanIpRangeRequest {
	// the id of the VLAN IP range
	int64 id = 1 [
		(validate.field).required = true
	];

	//
	string response_type = 2;
}

// DeleteVlanIpRangeResponse represents the response from deletes a vlan ip range.
message DeleteVlanIpRangeResponse {
	// The Result
	Result result = 1;
}

// UpdateVlanIpRangeRequest represents the parameters for updates a vlan ip range.
message UpdateVlanIpRangeRequest {
	// the UUID of the VLAN IP range
	int64 id = 1 [
		(validate.field).required = true
	];

	// the gateway of the VLAN IP range
	string gateway = 2 [
		(validate.field).string.ipv4 = true
	];

	// the netmask of the VLAN IP range
	string netmask = 3;

	// the beginning IP address in the VLAN IP range
	string start_ip = 4 [
		(validate.field).string.ipv4 = true
	];

	// the ending IP address in the VLAN IP range
	string end_ip = 5 [
		(validate.field).string.ipv4 = true
	];

	// the beginning IPv6 address in the IPv6 network range
	string start_ipv6 = 6 [
		(validate.field).string.ipv6 = true
	];

	// the ending IPv6 address in the IPv6 network range
	string end_ipv6 = 7 [
		(validate.field).string.ipv6 = true
	];

	// the gateway of the IPv6 network
	string ip6_gateway = 8 [
		(validate.field).string.ipv4 = true
	];

	// the CIDR of IPv6 network, must be at least /64
	string ip6_cidr = 9 [
		(validate.field).string.ipv4_prefix = true
	];

	// true if IP range is set to system vms, false if not
	bool for_system_vms = 10 [
		features.field_presence = EXPLICIT
	];

	//
	string response_type = 11;
}

// UpdateVlanIpRangeResponse represents the response from updates a vlan ip range.
message UpdateVlanIpRangeResponse {
	// The Result
	Result result = 1;
}

// DedicatePublicIpRangeRequest represents the parameters for dedicates a public ip range to an account
message DedicatePublicIpRangeRequest {
	// the id of the VLAN IP range
	int64 id = 1 [
		(validate.field).required = true
	];

	// account who will own the VLAN
	string account_name = 2;

	// project who will own the VLAN
	int64 project_id = 3;

	// domain ID of the account owning a VLAN
	int64 domain_id = 4 [
		(validate.field).required = true
	];

	//
	string response_type = 5;
}

// DedicatePublicIpRangeResponse represents the response from dedicates a public ip range to an account
message DedicatePublicIpRangeResponse {
	// The Result
	Result result = 1;
}

// CreateVlanIpRangeRequest represents the parameters for creates a vlan ip range.
message CreateVlanIpRangeRequest {
	// account who will own the VLAN. If VLAN is Zone wide, this parameter should be omitted
	string account_name = 1;

	// project who will own the VLAN. If VLAN is Zone wide, this parameter should be omitted
	int64 project_id = 2;

	// domain ID of the account owning a VLAN
	int64 domain_id = 3;

	// the ending IP address in the VLAN IP range
	string end_ip = 4 [
		(validate.field).string.ipv4 = true
	];

	// true if VLAN is of Virtual type, false if Direct
	bool for_virtual_network = 5 [
		features.field_presence = EXPLICIT
	];

	// the gateway of the VLAN IP range
	string gateway = 6 [
		(validate.field).string.ipv4 = true
	];

	// the netmask of the VLAN IP range
	string netmask = 7;

	// optional parameter. Have to be specified for Direct Untagged vlan only.
	int64 pod_id = 8;

	// the beginning IP address in the VLAN IP range
	string start_ip = 9 [
		(validate.field).string.ipv4 = true
	];

	// the ID or VID of the VLAN. If not specified, will be defaulted to the vlan of the network or if vlan of the network is null - to Untagged
	string vlan = 10;

	// the Zone ID of the VLAN IP range
	int64 zone_id = 11;

	// the network id
	int64 network_id = 12;

	// the physical network id
	int64 physical_network_id = 13;

	// the beginning IPv6 address in the IPv6 network range
	string start_ipv6 = 14 [
		(validate.field).string.ipv6 = true
	];

	// the ending IPv6 address in the IPv6 network range
	string end_ipv6 = 15 [
		(validate.field).string.ipv6 = true
	];

	// the gateway of the IPv6 network. Required for Shared networks and Isolated networks when it belongs to VPC
	string ip6_gateway = 16 [
		(validate.field).string.ipv4 = true
	];

	// the CIDR of IPv6 network, must be at least /64
	string ip6_cidr = 17 [
		(validate.field).string.ipv4_prefix = true
	];

	// true if IP range is set to system vms, false if not
	bool for_system_vms = 18 [
		features.field_presence = EXPLICIT
	];

	// true if the IP range is used for NSX resource
	bool for_nsx = 19 [
		features.field_presence = EXPLICIT
	];

	//
	string response_type = 20;
}

// CreateVlanIpRangeResponse represents the response from creates a vlan ip range.
message CreateVlanIpRangeResponse {
	// The Result
	Result result = 1;
}

// ReleasePublicIpRangeRequest represents the parameters for releases a public ip range back to the system pool
message ReleasePublicIpRangeRequest {
	// the id of the Public IP range
	int64 id = 1 [
		(validate.field).required = true
	];

	//
	string response_type = 2;
}

// ReleasePublicIpRangeResponse represents the response from releases a public ip range back to the system pool
message ReleasePublicIpRangeResponse {
	// The Result
	Result result = 1;
}

// VlanIpRange represents a VlanIpRange Item
message VlanIpRange {
	// The ID of the VlanIpRange
	string id = 1 [
		(validate.field).string.uuid = true
	];
	// The name of the VlanIpRange
	string name = 2;
	// The display name of the VlanIpRange
	string display_name = 3;
	// The description of the VlanIpRange
	string description = 4;
	// The date this entity was created
	string created = 5;
}

// Success represents a Success Operation Response
message Success {
	// true if operation is executed successfully
	bool success = 1;
	// any text associated with the success or failure
	string display_text = 2;
}

// Item represents a generic item in a list response
message Item {
	// The ID of the item
	string id = 1 [
		(validate.field).string.uuid = true
	];

	// The name of the item
	string name = 2;

	// The display name of the item
	string display_name = 3;

	// The description of the item
	string description = 4;

	// The account ID the item belongs to
	string account_id = 5 [
		(validate.field).string.uuid = true
	];

	// The domain ID the item belongs to
	string domain_id = 6 [
		(validate.field).string.uuid = true
	];

	// The domain name the item belongs to
	string domain = 7;

	// The project ID the item belongs to
	string project_id = 8 [
		(validate.field).string.uuid = true
	];

	// The project name the item belongs to
	string project = 9;

	// The date the item was created
	string created = 10;

	// The state of the item
	string state = 11;

	// Additional fields returned by the API
	map<string, string> details = 12;
}

// Result represents a generic operation result
message Result {
	// Whether the operation was successful
	bool success = 1;

	// Any text associated with the success or failure
	string display_text = 2;

	// The ID of the resource affected by the operation
	string id = 3 [
		(validate.field).string.uuid = true
	];

	// The job ID for an async operation
	string job_id = 4 [
		(validate.field).string.uuid = true
	];

	// The status of the job
	string job_status = 5;
}
