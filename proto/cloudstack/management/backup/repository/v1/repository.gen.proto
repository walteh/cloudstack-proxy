edition = "2023";

package cloudstack.management.backup.repository.v1;

import "cloudstack/annotations/annotations.proto";
import "cloudstack/validate/validate.proto";
import "google/protobuf/descriptor.proto";

// RepositoryService provides operations for managing Backup.Repositorys
service RepositoryService {
	option (annotations.service).scope = Scope_USER;

	// ListBackupRepositories Lists all backup repositories
	rpc ListBackupRepositories(ListBackupRepositoriesRequest) returns (ListBackupRepositoriesResponse) {}

	// DeleteBackupRepository delete a backup repository
	rpc DeleteBackupRepository(DeleteBackupRepositoryRequest) returns (DeleteBackupRepositoryResponse) {}

	// AddBackupRepository Adds a backup repository to store NAS backups
	rpc AddBackupRepository(AddBackupRepositoryRequest) returns (AddBackupRepositoryResponse) {}
}

// ListBackupRepositoriesRequest represents the parameters for lists all backup repositories
message ListBackupRepositoriesRequest {
	// name of the backup repository
	string name = 1 [
		(validate.field).string.min_len = 1,
		(validate.field).string.max_len = 255
	];

	// ID of the zone where the backup repository is to be added
	int64 zone_id = 2;

	// the backup repository provider
	string provider = 3 [
		(validate.field).string.uuid = true
	];

	// ID of the backup repository
	int64 id = 4;

	// List by keyword
	string keyword = 5;

	//
	int32 page = 6;

	//
	int32 page_size = 7;

	//
	string response_type = 8;
}

// ListBackupRepositoriesResponse represents the response from lists all backup repositories
message ListBackupRepositoriesResponse {
	option (validate.message).disabled = false;
	// The list of BackupRepositorys
	repeated BackupRepository items = 1;

	// The total count of BackupRepositorys
	int32 total_count = 2;
}

// DeleteBackupRepositoryRequest represents the parameters for delete a backup repository
message DeleteBackupRepositoryRequest {
	// ID of the backup repository to be deleted
	int64 id = 1 [
		(validate.field).required = true
	];

	//
	string response_type = 2;
}

// DeleteBackupRepositoryResponse represents the response from delete a backup repository
message DeleteBackupRepositoryResponse {
	// The Result
	Result result = 1;
}

// AddBackupRepositoryRequest represents the parameters for adds a backup repository to store nas backups
message AddBackupRepositoryRequest {
	// name of the backup repository
	string name = 1 [
		(validate.field).required       = true,
		(validate.field).string.min_len = 1,
		(validate.field).string.max_len = 255
	];

	// address of the backup repository
	string address = 2 [
		(validate.field).required = true
	];

	// type of the backup repository storage. Supported values: nfs, cephfs, cifs
	string type = 3 [
		(validate.field).required = true
	];

	// backup repository provider
	string provider = 4 [
		(validate.field).string.uuid = true
	];

	// shared storage mount options
	string mount_options = 5;

	// ID of the zone where the backup repository is to be added
	int64 zone_id = 6 [
		(validate.field).required = true
	];

	// capacity of this backup repository
	int64 capacity_bytes = 7;

	//
	string response_type = 8;
}

// AddBackupRepositoryResponse represents the response from adds a backup repository to store nas backups
message AddBackupRepositoryResponse {
	// The Result
	Result result = 1;
}

// BackupRepository represents a BackupRepository Item
message BackupRepository {
	// The ID of the BackupRepository
	string id = 1 [
		(validate.field).string.uuid = true
	];
	// The name of the BackupRepository
	string name = 2;
	// The display name of the BackupRepository
	string display_name = 3;
	// The description of the BackupRepository
	string description = 4;
	// The date this entity was created
	string created = 5;
}

// Success represents a Success Operation Response
message Success {
	// true if operation is executed successfully
	bool success = 1;
	// any text associated with the success or failure
	string display_text = 2;
}

// Item represents a generic item in a list response
message Item {
	// The ID of the item
	string id = 1 [
		(validate.field).string.uuid = true
	];

	// The name of the item
	string name = 2;

	// The display name of the item
	string display_name = 3;

	// The description of the item
	string description = 4;

	// The account ID the item belongs to
	string account_id = 5 [
		(validate.field).string.uuid = true
	];

	// The domain ID the item belongs to
	string domain_id = 6 [
		(validate.field).string.uuid = true
	];

	// The domain name the item belongs to
	string domain = 7;

	// The project ID the item belongs to
	string project_id = 8 [
		(validate.field).string.uuid = true
	];

	// The project name the item belongs to
	string project = 9;

	// The date the item was created
	string created = 10;

	// The state of the item
	string state = 11;

	// Additional fields returned by the API
	map<string, string> details = 12;
}

// Result represents a generic operation result
message Result {
	// Whether the operation was successful
	bool success = 1;

	// Any text associated with the success or failure
	string display_text = 2;

	// The ID of the resource affected by the operation
	string id = 3 [
		(validate.field).string.uuid = true
	];

	// The job ID for an async operation
	string job_id = 4 [
		(validate.field).string.uuid = true
	];

	// The status of the job
	string job_status = 5;
}
