edition = "2023";

package cloudstack.management.event.v1;

import "buf/validate/validate.proto";
import "cloudstack/annotations/annotations.proto";
import "google/protobuf/descriptor.proto";

// EventService provides operations for managing Events
service EventService {
	option (annotations.service).scope = SCOPE_USER;

	// ArchiveEvents Archive one or more events.
	rpc ArchiveEvents(ArchiveEventsRequest) returns (ArchiveEventsResponse) {
		option (annotations.method).scope = SCOPE_USER;
	}

	// DeleteEvents Delete one or more events.
	rpc DeleteEvents(DeleteEventsRequest) returns (DeleteEventsResponse) {
		option (annotations.method).scope = SCOPE_USER;
	}

	// ListEventTypes List Event Types
	rpc ListEventTypes(ListEventTypesRequest) returns (ListEventTypesResponse) {
		option (annotations.method).scope = SCOPE_USER;
	}

	// ListEvents A command to list events.
	rpc ListEvents(ListEventsRequest) returns (ListEventsResponse) {
		option (annotations.method).scope = SCOPE_USER;
	}
}

// ArchiveEventsRequest represents the parameters for archive one or more events.
message ArchiveEventsRequest {
	// the IDs of the events
	repeated string ids = 1;

	// end date range to archive events (including) this date (use format "yyyy-MM-dd" or the new format "yyyy-MM-ddThh:mm:ss")
	string end_date = 2;

	// start date range to archive events (including) this date (use format "yyyy-MM-dd" or the new format "yyyy-MM-ddThh:mm:ss")
	string start_date = 3;

	// archive by event type
	string type = 4;

	//
	string response_type = 5;
}

// ArchiveEventsResponse represents the response from archive one or more events.
message ArchiveEventsResponse {
	// The Result
	Result result = 1;
}

// DeleteEventsRequest represents the parameters for delete one or more events.
message DeleteEventsRequest {
	// the IDs of the events
	repeated string ids = 1;

	// end date range to delete events (including) this date (use format "yyyy-MM-dd" or the new format "yyyy-MM-ddThh:mm:ss")
	string end_date = 2;

	// start date range to delete events (including) this date (use format "yyyy-MM-dd" or the new format "yyyy-MM-ddThh:mm:ss")
	string start_date = 3;

	// delete by event type
	string type = 4;

	//
	string response_type = 5;
}

// DeleteEventsResponse represents the response from delete one or more events.
message DeleteEventsResponse {
	// The Result
	Result result = 1;
}

// ListEventTypesRequest represents the parameters for list event types
message ListEventTypesRequest {
	//
	string response_type = 1;
}

// ListEventTypesResponse represents the response from list event types
message ListEventTypesResponse {
	option (buf.validate.message).disabled = false;
	// The list of EventTypes
	repeated EventType items = 1;

	// The total count of EventTypes
	int32 total_count = 2;
}

// ListEventsRequest represents the parameters for a command to list events.
message ListEventsRequest {
	// the ID of the event
	int64 id = 1;

	// the duration of the event
	int32 duration = 2;

	// the end date range of the list you want to retrieve (use format "yyyy-MM-dd" or the new format "yyyy-MM-dd HH:mm:ss")
	string end_date = 3;

	// the time the event was entered
	int32 entry_time = 4;

	// the event level (INFO, WARN, ERROR)
	string level = 5;

	// the start date range of the list you want to retrieve (use format "yyyy-MM-dd" or the new format "yyyy-MM-dd HH:mm:ss")
	string start_date = 6;

	// the event type (see event types)
	string type = 7;

	// the parent/start ID of the event, when provided this will list all the events with the start/parent ID including the parent event
	int64 start_id = 8;

	// the ID of the resource associated with the event
	string resource_id = 9 [
		(buf.validate.field).string.uuid = true
	];

	// the type of the resource associated with the event
	string resource_type = 10;

	// true to list archived events otherwise false
	bool archived = 11 [
		features.field_presence = EXPLICIT
	];

	// list objects by project; if projectid=-1 lists All VMs
	int64 project_id = 12;

	// list resources by account. Must be used with the domainId parameter.
	string account_name = 13 [
		(buf.validate.field).cel = {
			id:         "account_name_with_domain_id",
			expression: "!has(account_name) || has(domain_id)",
			message:    "account_name must be used with domain_id parameter"
		}
	];

	// If set to false, list only resources belonging to the command's caller; if set to true - list resources that the caller is authorized to see. Default value is false. Resources dedicated to a project are listed only if using the projectid parameter.
	bool list_all = 14 [
		features.field_presence = EXPLICIT
	];

	// list only resources belonging to the domain specified
	int64 domain_id = 15;

	// defaults to false, but if true, lists all resources from the parent specified by the domainId till leaves.
	bool recursive = 16 [
		features.field_presence = EXPLICIT
	];

	// List by keyword
	string keyword = 17;

	//
	int32 page = 18;

	//
	int32 page_size = 19;

	//
	string response_type = 20;
}

// ListEventsResponse represents the response from a command to list events.
message ListEventsResponse {
	option (buf.validate.message).disabled = false;
	// The list of Events
	repeated Event items = 1;

	// The total count of Events
	int32 total_count = 2;
}

// Event represents a Event Item
message Event {
	// The ID of the Event
	string id = 1 [
		(buf.validate.field).string.uuid = true
	];
	// The name of the Event
	string name = 2;
	// The display name of the Event
	string display_name = 3;
	// The description of the Event
	string description = 4;
	// The date this entity was created
	string created = 5;
}

// EventType represents a EventType Item
message EventType {
	// The ID of the EventType
	string id = 1 [
		(buf.validate.field).string.uuid = true
	];
	// The name of the EventType
	string name = 2;
	// The display name of the EventType
	string display_name = 3;
	// The description of the EventType
	string description = 4;
	// The date this entity was created
	string created = 5;
}

// Success represents a Success Operation Response
message Success {
	// true if operation is executed successfully
	bool success = 1;
	// any text associated with the success or failure
	string display_text = 2;
}

// Result represents a generic operation result
message Result {
	// Whether the operation was successful
	bool success = 1;

	// Any text associated with the success or failure
	string display_text = 2;

	// The ID of the resource affected by the operation
	string id = 3 [
		(buf.validate.field).string.uuid = true
	];

	// The job ID for an async operation
	string job_id = 4 [
		(buf.validate.field).string.uuid = true
	];

	// The status of the job
	string job_status = 5;
}
