edition = "2023";

package cloudstack.management.cluster.v1;

import "cloudstack/annotations/annotations.proto";
import "cloudstack/validate/validate.proto";
import "google/protobuf/descriptor.proto";

// ClusterService provides operations for managing Clusters
service ClusterService {
	option (annotations.service).scope = Scope_ADMIN;

	// ExecuteClusterDrsPlan Execute DRS for a cluster. If there is another plan in progress for the same cluster, this command will fail.
	rpc ExecuteClusterDrsPlan(ExecuteClusterDrsPlanRequest) returns (ExecuteClusterDrsPlanResponse) {}

	// AddCluster Adds a new cluster
	rpc AddCluster(AddClusterRequest) returns (AddClusterResponse) {}

	// DeleteCluster Deletes a cluster.
	rpc DeleteCluster(DeleteClusterRequest) returns (DeleteClusterResponse) {}

	// ListClusterDrsPlan List DRS plans for a clusters
	rpc ListClusterDrsPlan(ListClusterDrsPlanRequest) returns (ListClusterDrsPlanResponse) {}

	// ListClusters Lists clusters.
	rpc ListClusters(ListClustersRequest) returns (ListClustersResponse) {}

	// UpdateCluster Updates an existing cluster
	rpc UpdateCluster(UpdateClusterRequest) returns (UpdateClusterResponse) {}

	// GenerateClusterDrsPlan Generate DRS plan for a cluster
	rpc GenerateClusterDrsPlan(GenerateClusterDrsPlanRequest) returns (GenerateClusterDrsPlanResponse) {}
}

// ExecuteClusterDrsPlanRequest represents the parameters for execute drs for a cluster. if there is another plan in progress for the same cluster, this command will fail.
message ExecuteClusterDrsPlanRequest {
	// ID of cluster
	int64 id = 1 [
		(validate.field).required = true
	];

	// Virtual Machine to destination host mapping. This parameter specifies the mapping between a vm and a host to migrate that VM. clusterid is required if this parameter is set.Format of this parameter: migrateto[vm-index].vm=<uuid>&migrateto[vm-index].host=<uuid> Where, [vm-index] indicates the index to identify the vm that you want to migrate, vm=<uuid> indicates the UUID of the vm that you want to migrate, and host=<uuid> indicates the UUID of the host where you want to migrate the vm. Example: migrateto[0].vm=<71f43cd6-69b0-4d3b-9fbc-67f50963d60b>&migrateto[0].host=<a382f181-3d2b-4413-b92d-b8931befa7e1>&migrateto[1].vm=<88de0173-55c0-4c1c-a269-83d0279eeedf>&migrateto[1].host=<95d6e97c-6766-4d67-9a30-c449c15011d1>&migrateto[2].vm=<1b331390-59f2-4796-9993-bf11c6e76225>&migrateto[2].host=<41fdb564-9d3b-447d-88ed-7628f7640cbc>
	map<string, string> migrate_vm_to = 2;

	//
	int64 start_event_id = 3;

	//
	string injected_job_id = 4 [
		(validate.field).string.uuid = true
	];

	//
	string response_type = 5;
}

// ExecuteClusterDrsPlanResponse represents the response from execute drs for a cluster. if there is another plan in progress for the same cluster, this command will fail.
message ExecuteClusterDrsPlanResponse {
	// The Result
	Result result = 1;
}

// AddClusterRequest represents the parameters for adds a new cluster
message AddClusterRequest {
	// the cluster name
	string cluster_name = 1 [
		(validate.field).required       = true,
		(validate.field).string.min_len = 1,
		(validate.field).string.max_len = 255
	];

	// the password for the host
	string password = 2;

	// the Pod ID for the host
	int64 pod_id = 3 [
		(validate.field).required = true
	];

	// the URL
	string url = 4;

	// the username for the cluster
	string username = 5 [
		(validate.field).string.min_len = 1,
		(validate.field).string.max_len = 255
	];

	// the Zone ID for the cluster
	int64 zone_id = 6 [
		(validate.field).required = true
	];

	// hypervisor type of the cluster: XenServer,KVM,VMware,Hyperv,BareMetal,Simulator,Ovm3
	string hypervisor = 7 [
		(validate.field).required = true
	];

	// the CPU arch of the cluster. Valid options are: x86_64, aarch64
	string arch = 8;

	// type of the cluster: CloudManaged, ExternalManaged
	string cluster_type = 9 [
		(validate.field).required = true
	];

	// Allocation state of this cluster for allocation of new resources
	string allocation_state = 10;

	// the username for the VSM associated with this cluster
	string vsmusername = 11 [
		(validate.field).string.min_len = 1,
		(validate.field).string.max_len = 255
	];

	// the password for the VSM associated with this cluster
	string vsmpassword = 12;

	// the ipaddress of the VSM associated with this cluster
	string vsmipaddress = 13 [
		(validate.field).string.ipv4 = true
	];

	// Type of virtual switch used for guest traffic in the cluster. Allowed values are, vmwaresvs (for VMware standard vSwitch) and vmwaredvs (for VMware distributed vSwitch)
	string v_switch_type_guest_traffic = 14;

	// Type of virtual switch used for public traffic in the cluster. Allowed values are, vmwaresvs (for VMware standard vSwitch) and vmwaredvs (for VMware distributed vSwitch)
	string v_switch_type_public_traffic = 15;

	// Name of virtual switch used for guest traffic in the cluster. This would override zone wide traffic label setting.
	string v_switch_name_guest_traffic = 16 [
		(validate.field).string.min_len = 1,
		(validate.field).string.max_len = 255
	];

	// Name of virtual switch used for public traffic in the cluster.  This would override zone wide traffic label setting.
	string v_switch_name_public_traffic = 17 [
		(validate.field).string.min_len = 1,
		(validate.field).string.max_len = 255
	];

	// Ovm3 native pooling enabled for cluster
	string ovm3pool = 18;

	// Ovm3 native OCFS2 clustering enabled for cluster
	string ovm3cluster = 19;

	// Ovm3 vip to use for pool (and cluster)
	string ovm3vip = 20 [
		(validate.field).string.ipv4 = true
	];

	//
	string response_type = 21;
}

// AddClusterResponse represents the response from adds a new cluster
message AddClusterResponse {
	// The Result
	Result result = 1;
}

// DeleteClusterRequest represents the parameters for deletes a cluster.
message DeleteClusterRequest {
	// the cluster ID
	int64 id = 1 [
		(validate.field).required = true
	];

	//
	string response_type = 2;
}

// DeleteClusterResponse represents the response from deletes a cluster.
message DeleteClusterResponse {
	// The Result
	Result result = 1;
}

// ListClusterDrsPlanRequest represents the parameters for list drs plans for a clusters
message ListClusterDrsPlanRequest {
	// ID of the drs plan
	int64 id = 1;

	// ID of the cluster
	int64 cluster_id = 2;

	// List by keyword
	string keyword = 3;

	//
	int32 page = 4;

	//
	int32 page_size = 5;

	//
	string response_type = 6;
}

// ListClusterDrsPlanResponse represents the response from list drs plans for a clusters
message ListClusterDrsPlanResponse {
	option (validate.message).disabled = false;
	// The list of ClusterDrsPlans
	repeated ClusterDrsPlan items = 1;

	// The total count of ClusterDrsPlans
	int32 total_count = 2;
}

// ListClustersRequest represents the parameters for lists clusters.
message ListClustersRequest {
	// lists clusters by the cluster ID
	int64 id = 1;

	// lists clusters by the cluster name
	string cluster_name = 2 [
		(validate.field).string.min_len = 1,
		(validate.field).string.max_len = 255
	];

	// lists clusters by Pod ID
	int64 pod_id = 3;

	// lists clusters by Zone ID
	int64 zone_id = 4;

	// lists clusters by hypervisor type
	string hypervisor_type = 5;

	// lists clusters by cluster type
	string cluster_type = 6;

	// lists clusters by allocation state
	string allocation_state = 7;

	// whether this cluster is managed by cloudstack
	string managed_state = 8;

	// flag to display the capacity of the clusters
	bool show_capacities = 9 [
		features.field_presence = EXPLICIT
	];

	// List by keyword
	string keyword = 10;

	//
	int32 page = 11;

	//
	int32 page_size = 12;

	//
	string response_type = 13;
}

// ListClustersResponse represents the response from lists clusters.
message ListClustersResponse {
	option (validate.message).disabled = false;
	// The list of Clusters
	repeated Cluster items = 1;

	// The total count of Clusters
	int32 total_count = 2;
}

// UpdateClusterRequest represents the parameters for updates an existing cluster
message UpdateClusterRequest {
	// the ID of the Cluster
	int64 id = 1 [
		(validate.field).required = true
	];

	// the cluster name
	string cluster_name = 2 [
		(validate.field).string.min_len = 1,
		(validate.field).string.max_len = 255
	];

	// hypervisor type of the cluster
	string hypervisor = 3;

	// hypervisor type of the cluster
	string cluster_type = 4;

	// Allocation state of this cluster for allocation of new resources
	string allocation_state = 5;

	// whether this cluster is managed by cloudstack
	string managed_state = 6;

	// the CPU arch of the cluster. Valid options are: x86_64, aarch64
	string arch = 7;

	//
	string response_type = 8;
}

// UpdateClusterResponse represents the response from updates an existing cluster
message UpdateClusterResponse {
	// The Result
	Result result = 1;
}

// GenerateClusterDrsPlanRequest represents the parameters for generate drs plan for a cluster
message GenerateClusterDrsPlanRequest {
	// the ID of the Cluster
	int64 id = 1 [
		(validate.field).required = true
	];

	// Maximum number of VMs to migrate for a DRS execution. Defaults to value of cluster's drs.vm.migrations setting
	int32 migrations = 2;

	//
	string response_type = 3;
}

// GenerateClusterDrsPlanResponse represents the response from generate drs plan for a cluster
message GenerateClusterDrsPlanResponse {
	// The Result
	Result result = 1;
}

// ClusterDrsPlan represents a ClusterDrsPlan Item
message ClusterDrsPlan {
	// The ID of the ClusterDrsPlan
	string id = 1 [
		(validate.field).string.uuid = true
	];
	// The name of the ClusterDrsPlan
	string name = 2;
	// The display name of the ClusterDrsPlan
	string display_name = 3;
	// The description of the ClusterDrsPlan
	string description = 4;
	// The date this entity was created
	string created = 5;
}

// Cluster represents a Cluster Item
message Cluster {
	// The ID of the Cluster
	string id = 1 [
		(validate.field).string.uuid = true
	];
	// The name of the Cluster
	string name = 2;
	// The display name of the Cluster
	string display_name = 3;
	// The description of the Cluster
	string description = 4;
	// The date this entity was created
	string created = 5;
}

// Success represents a Success Operation Response
message Success {
	// true if operation is executed successfully
	bool success = 1;
	// any text associated with the success or failure
	string display_text = 2;
}

// Item represents a generic item in a list response
message Item {
	// The ID of the item
	string id = 1 [
		(validate.field).string.uuid = true
	];

	// The name of the item
	string name = 2;

	// The display name of the item
	string display_name = 3;

	// The description of the item
	string description = 4;

	// The account ID the item belongs to
	string account_id = 5 [
		(validate.field).string.uuid = true
	];

	// The domain ID the item belongs to
	string domain_id = 6 [
		(validate.field).string.uuid = true
	];

	// The domain name the item belongs to
	string domain = 7;

	// The project ID the item belongs to
	string project_id = 8 [
		(validate.field).string.uuid = true
	];

	// The project name the item belongs to
	string project = 9;

	// The date the item was created
	string created = 10;

	// The state of the item
	string state = 11;

	// Additional fields returned by the API
	map<string, string> details = 12;
}

// Result represents a generic operation result
message Result {
	// Whether the operation was successful
	bool success = 1;

	// Any text associated with the success or failure
	string display_text = 2;

	// The ID of the resource affected by the operation
	string id = 3 [
		(validate.field).string.uuid = true
	];

	// The job ID for an async operation
	string job_id = 4 [
		(validate.field).string.uuid = true
	];

	// The status of the job
	string job_status = 5;
}
