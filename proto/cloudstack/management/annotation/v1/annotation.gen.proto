edition = "2023";

package cloudstack.management.annotation.v1;

import "cloudstack/annotations/annotations.proto";
import "cloudstack/validate/validate.proto";
import "google/protobuf/descriptor.proto";

// AnnotationService provides operations for managing Annotations
service AnnotationService {
	option (annotations.service).scope = SCOPE_USER;

	// RemoveAnnotation remove an annotation.
	rpc RemoveAnnotation(RemoveAnnotationRequest) returns (RemoveAnnotationResponse) {
		option (annotations.method).scope = SCOPE_USER;
	}

	// AddAnnotation add an annotation.
	rpc AddAnnotation(AddAnnotationRequest) returns (AddAnnotationResponse) {
		option (annotations.method).scope = SCOPE_USER;
	}

	// UpdateAnnotationVisibility update an annotation visibility.
	rpc UpdateAnnotationVisibility(UpdateAnnotationVisibilityRequest) returns (UpdateAnnotationVisibilityResponse) {
		option (annotations.method).scope = SCOPE_USER;
	}

	// ListAnnotations Lists annotations.
	rpc ListAnnotations(ListAnnotationsRequest) returns (ListAnnotationsResponse) {
		option (annotations.method).scope = SCOPE_USER;
	}
}

// RemoveAnnotationRequest represents the parameters for remove an annotation.
message RemoveAnnotationRequest {
	// the id of the annotation
	string uuid = 1 [
		(validate.field).required    = true,
		(validate.field).string.uuid = true
	];

	//
	string response_type = 2;
}

// RemoveAnnotationResponse represents the response from remove an annotation.
message RemoveAnnotationResponse {
	// The Result
	Result result = 1;
}

// AddAnnotationRequest represents the parameters for add an annotation.
message AddAnnotationRequest {
	// the annotation text
	string annotation = 1;

	// The following entity types are allowed VM, VOLUME, SNAPSHOT, VM_SNAPSHOT, INSTANCE_GROUP, SSH_KEYPAIR, USER_DATA, NETWORK, VPC, PUBLIC_IP_ADDRESS, VPN_CUSTOMER_GATEWAY, TEMPLATE, ISO, KUBERNETES_CLUSTER, SERVICE_OFFERING, DISK_OFFERING, NETWORK_OFFERING, ZONE, POD, CLUSTER, HOST, DOMAIN, PRIMARY_STORAGE, SECONDARY_STORAGE, VR, SYSTEM_VM, AUTOSCALE_VM_GROUP, MANAGEMENT_SERVER
	string entity_type = 2;

	// the id of the entity to annotate
	string entity_uuid = 3 [
		(validate.field).string.uuid = true
	];

	// the annotation is visible for admins only
	bool admins_only = 4 [
		features.field_presence = EXPLICIT
	];

	//
	string response_type = 5;
}

// AddAnnotationResponse represents the response from add an annotation.
message AddAnnotationResponse {
	// The Result
	Result result = 1;
}

// UpdateAnnotationVisibilityRequest represents the parameters for update an annotation visibility.
message UpdateAnnotationVisibilityRequest {
	// the id of the annotation
	string uuid = 1 [
		(validate.field).required    = true,
		(validate.field).string.uuid = true
	];

	// the annotation is visible for admins only
	bool admins_only = 2 [
		(validate.field).required = true,
		features.field_presence   = EXPLICIT
	];

	//
	string response_type = 3;
}

// UpdateAnnotationVisibilityResponse represents the response from update an annotation visibility.
message UpdateAnnotationVisibilityResponse {
	// The Result
	Result result = 1;
}

// ListAnnotationsRequest represents the parameters for lists annotations.
message ListAnnotationsRequest {
	// the id of the annotation
	string uuid = 1 [
		(validate.field).string.uuid = true
	];

	// the entity type
	string entity_type = 2;

	// the id of the entity for which to show annotations
	string entity_uuid = 3 [
		(validate.field).string.uuid = true
	];

	// optional: the id of the user of the annotation
	string user_uuid = 4 [
		(validate.field).string.uuid = true
	];

	// possible values are "self" and "all". * self : annotations that have been created by the calling user. * all : all the annotations the calling user can access
	string annotation_filter = 5;

	// List by keyword
	string keyword = 6;

	//
	int32 page = 7;

	//
	int32 page_size = 8;

	//
	string response_type = 9;
}

// ListAnnotationsResponse represents the response from lists annotations.
message ListAnnotationsResponse {
	option (validate.message).disabled = false;
	// The list of Annotations
	repeated Annotation items = 1;

	// The total count of Annotations
	int32 total_count = 2;
}

// Annotation represents a Annotation Item
message Annotation {
	// The ID of the Annotation
	string id = 1 [
		(validate.field).string.uuid = true
	];
	// The name of the Annotation
	string name = 2;
	// The display name of the Annotation
	string display_name = 3;
	// The description of the Annotation
	string description = 4;
	// The date this entity was created
	string created = 5;
}

// Success represents a Success Operation Response
message Success {
	// true if operation is executed successfully
	bool success = 1;
	// any text associated with the success or failure
	string display_text = 2;
}

// Result represents a generic operation result
message Result {
	// Whether the operation was successful
	bool success = 1;

	// Any text associated with the success or failure
	string display_text = 2;

	// The ID of the resource affected by the operation
	string id = 3 [
		(validate.field).string.uuid = true
	];

	// The job ID for an async operation
	string job_id = 4 [
		(validate.field).string.uuid = true
	];

	// The status of the job
	string job_status = 5;
}
