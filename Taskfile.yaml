version: "3"

vars:
    GO_MODULES:
        sh: cat go.work | grep -oEh  '\t+(\./*[^[:space:]]*)' | tr -d '\t'
    JSONSCHEMA_FILES:
        sh: find . -type f -name '*.schema.json'
    GO_ROOT_PKG:
        sh: cat go.mod | grep -oE '^module[^\S]+' | cut -d' ' -f2

    GO_COMMAND: ./go

env:
    COMPOSE_BAKE: true

tasks:
    go-mod-tidy:
        env: { GOPROXY: https://proxy.golang.org, GOSUMDB: sum.golang.org, GOPRIVATE: github.com/walteh }
        cmds:
            - for: { var: GO_MODULES }
              cmd: cd {{.ITEM}} && go mod tidy -e

    go-mod-upgrade:
        run: once
        env: { GOPROXY: https://proxy.golang.org, GOSUMDB: sum.golang.org, GOPRIVATE: github.com/walteh }
        cmds:
            - ./go tool go-mod-upgrade --force
            - task: go-mod-tidy

    options:
        desc: generates options for structs with '//go:opts' comment
        vars:
            OPTION_GEN_DATA:
                sh: |
                    grep -rl "//go:opts" --include="*.go" . | xargs -I{} bash -c 'd=$(dirname {}); d=${d#./}; awk -v d="$d {}" '\''/\/\/go:opts/ {getline; if($1=="type") print d, $2}'\'' {}'
            OPTION_GEN_SOURCE_FILES:
                sh: |
                    grep -rl "//go:opts" --include="*.go" .
        generates:
            - "**/*_opts.gen.go"
        sources:
            - '{{.OPTION_GEN_SOURCE_FILES | join ","}}'
        cmds:
            - for: { var: OPTION_GEN_DATA, split: "\n" }
              cmd: |
                  set -e
                  {{.GO_COMMAND}} tool github.com/kazhuravlev/options-gen/cmd/options-gen \
                    -out-filename={{splitList " " .ITEM | first}}/{{ splitList " " .ITEM | last | lower | trimSuffix "opts" }}_opts.gen.go \
                    -filename={{ splitList " " .ITEM | rest | first }} \
                    -from-struct={{ splitList " " .ITEM | last }} \
                    -pkg={{ splitList " " .ITEM | first | splitList "/" | last }}

    mockery:
        desc: generates mocks for interfaces with '//go:mock' comment
        vars:
            TMP_DIR: ./gen/config
            MOCKERY_INTERFACE_DATA:
                sh: |
                    grep -rl "//go:mock" --include="*.go" . | xargs -I{} bash -c 'd=$(dirname {}); d=${d#./}; awk -v d="$d {}" '\''/\/\/go:mock/ {getline; if($1=="type") print d, $2}'\'' {}'
            MOCKERY_SOURCE_FILES:
                sh: |
                    grep -rl "//go:mock" --include="*.go" .
        sources:
            - '{{.MOCKERY_SOURCE_FILES | join ","}}'
            - .mockery.yaml
        generates:
            - ./gen/mocks/**/*_mock.gen.go
            - ./gen/config/.mockery.yaml
        cmds:
            - cmd: mkdir -p {{.TMP_DIR}}
            - cmd: cp .mockery.yaml {{.TMP_DIR}}/.mockery.yaml
            - for: { var: "MOCKERY_INTERFACE_DATA", split: "\n", as: ITEM }
              cmd: yq -i ".packages.\"{{ .GO_ROOT_PKG }}/{{ splitList \" \" .ITEM | first }}\".interfaces.{{ splitList \" \" .ITEM | last }} = {}" {{.TMP_DIR}}/.mockery.yaml
            - cmd: "{{.GO_COMMAND}} tool github.com/vektra/mockery/v2 --config={{.TMP_DIR}}/.mockery.yaml"

    buf:
        desc: generates protobuf files
        cmds:
            - "{{.GO_COMMAND}} tool github.com/bufbuild/buf/cmd/buf generate"

    sources:
        desc: downloads the cloudstack api list
        vars:
            FILES:
                - url: https://raw.githubusercontent.com/apache/cloudstack-go/refs/heads/main/generate/listApis.json
                  file_name: cloudstack-go-api-list.json
                  var_name: CloudStackGoApiListJson
        cmds:
            - cmd: mkdir -p gen/sources
            - cmd: echo -e "package cloudstackapilist\n\nimport _ \"embed\"\n" > gen/sources/embed.gen.go
            - for: { var: "FILES", as: ITEM }
              cmd: curl -sSL {{.ITEM.url}} | jq -r --tab '.' > gen/sources/{{.ITEM.file_name}}
            - for: { var: "FILES", as: ITEM }
              cmd: echo -e "//go:embed {{.ITEM.file_name}}\n\nvar {{.ITEM.var_name}} []byte" >> gen/sources/embed.gen.go

    kotlin-generator:
        dir: generator/kotlin
        desc: generates kotlin code from cloudstack api list
        cmds:
            - cmd: mvn compile exec:java -Dexec.args="--out-dir ../../gen/cloudstack-metadata"

    protogen:
        desc: generates protobuf definitions from CloudStack API metadata
        cmds:
            - cmd: rm -rf tmp/proto
            - cmd: cp -r proto tmp/proto
            - cmd: |
                  go run ./cmd/csp-protobuf-generator \
                   --metadata-dir=./gen/cloudstack-metadata \
                   --output-dir=./tmp/proto
        sources:
            - gen/cloudstack-metadata/*.json
        generates:
            - proto/cloudstack/**/*.gen.proto
